// Appended before Emscripten output.
module.exports = function(Module) {

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }


  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module["UTF16ToString"] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF16"] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module["lengthBytesUTF16"] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module["UTF32ToString"] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF32"] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module["lengthBytesUTF32"] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer;



buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);


// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 22432;
  /* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__I_000101() } }, { func: function() { __GLOBAL__sub_I_iostream_cpp() } });


memoryInitializer = "bad_lookup.js.mem";





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}



  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }


  Module["_i64Subtract"] = _i64Subtract;

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }


  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }



  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);

      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }


  Module["_memset"] = _memset;

  var _BDtoILow=true;

  function _pthread_mutex_lock() {}



  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }

  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }


  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];

  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];

        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }

      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html

      var tm_zone = HEAP32[(((tm)+(40))>>2)];

      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };

      var pattern = Pointer_stringify(format);

      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }

      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };

      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };

      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };

        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };

      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };

      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);

          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);

          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);

          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else {
            return thisDate.getFullYear()-1;
          }
      };

      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year.
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes
          // January 4th, which is also the week that includes the first Thursday of the year, and
          // is also the first week that contains at least four days in the year.
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of
          // the last week of the preceding year; thus, for Saturday 2nd January 1999,
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th,
          // or 31st is a Monday, it and any following days are part of week 1 of the following year.
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.

          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Sunday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);

          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }

          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week)
          // as a decimal number [01,53]. If the week containing 1 January has four
          // or more days in the new year, then it is considered week 1.
          // Otherwise, it is the last week of the previous year, and the next week is week 1.
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);

          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);

          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);

          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          }

          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }

          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Monday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);

          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }

      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      }

      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  function _abort() {
      Module['abort']();
    }




  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};

  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};

  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      return value;
    }

  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};

  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;

              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}

              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);

              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }

            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};

  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }

        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();

          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }

          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }

          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};

  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);

          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);

            var src = populate ? remote : local;
            var dst = populate ? local : remote;

            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }

        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;

          var fileStore;

          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }

          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;

          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};

        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };

        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));

        while (check.length) {
          var path = check.pop();
          var stat;

          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }

          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }

          entries[path] = { timestamp: stat.mtime };
        }

        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};

        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);

          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };

          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');

          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;

            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }

            entries[cursor.primaryKey] = { timestamp: cursor.key };

            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;

        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }

        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }

          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }

        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);

          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }

        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;

        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });

        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });

        if (!total) {
          return callback(null);
        }

        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);

        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };

        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };

        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });

        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};

  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }

          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }

          return position;
        }}};

  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, curr, WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};

  var _stdin=allocate(1, "i32*", ALLOC_STATIC);

  var _stdout=allocate(1, "i32*", ALLOC_STATIC);

  var _stderr=allocate(1, "i32*", ALLOC_STATIC);var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};

        if (!path) return { path: '', node: null };

        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }

        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }

        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);

        // start at the root
        var current = FS.root;
        var current_path = '/';

        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }

          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);

          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }

          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);

              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;

              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }

        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;


        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };

          FS.FSNode.prototype = {};

          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;

          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }

        var node = new FS.FSNode(parent, name, mode, rdev);

        FS.hashAddNode(node);

        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];

        while (check.length) {
          var m = check.pop();

          mounts.push(m);

          check.push.apply(check, m.mounts);
        }

        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }

        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;

        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };

        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;

        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });

          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;

          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }

          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }

        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };

        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;

        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;

          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }

        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });

        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }

        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);

        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];

          while (current) {
            var next = current.name_next;

            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }

            current = next;
          }
        });

        // no longer a mountpoint
        node.mounted = null;

        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);

        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops

        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }

        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');

        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');

        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();

        FS.nameTable = new Array(4096);

        FS.mount(MEMFS, {}, '/');

        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();

        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;

        FS.ensureErrnoError();

        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];

        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes

          if (!hasByteServing) chunkSize = datalength;

          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");

            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);

            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }

            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });

          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });

          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }

        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall196(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_lstat64
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.lstat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }

  function ___lock() {}

  function ___unlock() {}


  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  var _fabs=Math_abs;


  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }



  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;

      if (!Browser.mainLoop.func) {
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }

      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = '__emcc';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            window.postMessage(emscriptenMainLoopMessageId, "*");
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;

      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');

      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;

      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;

      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }

        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;

        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }

        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.

        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }

        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });

        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;

        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();

        Browser.mainLoop.scheduler();
      }

      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)

        Browser.mainLoop.scheduler();
      }

      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers

        if (Browser.initted) return;
        Browser.initted = true;

        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }

        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).

        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);

        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);

        // Canvas event setup

        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;

          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);


          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);

          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.

        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };

          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }

          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }

        if (!ctx) return null;

        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');

          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;

        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {

            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);

            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }

        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }

        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);

        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);

        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll':
            delta = event.detail;
            break;
          case 'mousewheel':
            delta = event.wheelDelta;
            break;
          case 'wheel':
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }

          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;

          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);

          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL

            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);

            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);

            var coords = { x: adjustedX, y: adjustedY };

            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            }
            return;
          }

          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);

          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);

          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }


  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }


  Module["_i64Add"] = _i64Add;


  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  var _BDtoIHigh=true;

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _pthread_cond_broadcast() {
      return 0;
    }

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[((variable)>>0)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[((variable)>>0)]=1;
        return 1;
      }
      return 0;
    }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }


  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    }
  Module["_memcpy"] = _memcpy;

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }


  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }


  Module["_bitshift64Shl"] = _bitshift64Shl;


  Module["_memmove"] = _memmove;

  var _BItoD=true;

  function _pthread_cond_wait() {
      return 0;
    }

  function _pthread_mutex_unlock() {}

  function ___cxa_guard_release() {}

  function _pthread_self() {
      //FIXME: assumes only a single thread
      return 0;
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var ___dso_handle=allocate(1, "i32*", ALLOC_STATIC);
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiid(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiid"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_iiii": invoke_iiii, "invoke_viiiii": invoke_viiiii, "invoke_iiiiiid": invoke_iiiiiid, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_iiiiid": invoke_iiiiid, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_iiiii": invoke_iiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_viiii": invoke_viiii, "_fabs": _fabs, "_strftime": _strftime, "_pthread_cond_wait": _pthread_cond_wait, "_pthread_key_create": _pthread_key_create, "_pthread_cleanup_push": _pthread_cleanup_push, "_abort": _abort, "___cxa_guard_acquire": ___cxa_guard_acquire, "___setErrNo": ___setErrNo, "___assert_fail": ___assert_fail, "___cxa_allocate_exception": ___cxa_allocate_exception, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "__isLeapYear": __isLeapYear, "___cxa_guard_release": ___cxa_guard_release, "__addDays": __addDays, "_strftime_l": _strftime_l, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_sbrk": _sbrk, "___syscall196": ___syscall196, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___resumeException": ___resumeException, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_sysconf": _sysconf, "___cxa_begin_catch": ___cxa_begin_catch, "_pthread_getspecific": _pthread_getspecific, "__arraySum": __arraySum, "_pthread_self": _pthread_self, "_pthread_mutex_unlock": _pthread_mutex_unlock, "_pthread_once": _pthread_once, "___syscall54": ___syscall54, "___unlock": ___unlock, "_pthread_cleanup_pop": _pthread_cleanup_pop, "_pthread_cond_broadcast": _pthread_cond_broadcast, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_pthread_setspecific": _pthread_setspecific, "___cxa_atexit": ___cxa_atexit, "___cxa_throw": ___cxa_throw, "___lock": ___lock, "___syscall6": ___syscall6, "___syscall5": ___syscall5, "_time": _time, "_pthread_mutex_lock": _pthread_mutex_lock, "_atexit": _atexit, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "___dso_handle": ___dso_handle };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'use asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ___dso_handle=env.___dso_handle|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_iiiiiid=env.invoke_iiiiiid;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_iiiiid=env.invoke_iiiiid;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _fabs=env._fabs;
  var _strftime=env._strftime;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var _abort=env._abort;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var ___setErrNo=env.___setErrNo;
  var ___assert_fail=env.___assert_fail;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var __isLeapYear=env.__isLeapYear;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var __addDays=env.__addDays;
  var _strftime_l=env._strftime_l;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _sbrk=env._sbrk;
  var ___syscall196=env.___syscall196;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var ___resumeException=env.___resumeException;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _sysconf=env._sysconf;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _pthread_getspecific=env._pthread_getspecific;
  var __arraySum=env.__arraySum;
  var _pthread_self=env._pthread_self;
  var _pthread_mutex_unlock=env._pthread_mutex_unlock;
  var _pthread_once=env._pthread_once;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var _pthread_cond_broadcast=env._pthread_cond_broadcast;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _pthread_setspecific=env._pthread_setspecific;
  var ___cxa_atexit=env.___cxa_atexit;
  var ___cxa_throw=env.___cxa_throw;
  var ___lock=env.___lock;
  var ___syscall6=env.___syscall6;
  var ___syscall5=env.___syscall5;
  var _time=env._time;
  var _pthread_mutex_lock=env._pthread_mutex_lock;
  var _atexit=env._atexit;
  var ___syscall140=env.___syscall140;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function _malloc($bytes) {
 $bytes = $bytes | 0;
 var $$3$i = 0, $$lcssa = 0, $$lcssa211 = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa217 = 0, $$lcssa219 = 0, $$lcssa222 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa228 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$rsize$3$i = 0, $$sum$i19$i = 0, $$sum2$i21$i = 0, $$sum3132$i$i = 0, $$sum67$i$i = 0, $100 = 0, $1000 = 0, $1002 = 0, $1005 = 0, $1010 = 0, $1016 = 0, $1019 = 0, $1020 = 0, $1027 = 0, $1039 = 0, $1044 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $106 = 0, $1060 = 0, $1062 = 0, $1063 = 0, $110 = 0, $112 = 0, $113 = 0, $115 = 0, $117 = 0, $119 = 0, $12 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $13 = 0, $132 = 0, $138 = 0, $14 = 0, $141 = 0, $144 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $151 = 0, $154 = 0, $156 = 0, $159 = 0, $16 = 0, $161 = 0, $164 = 0, $167 = 0, $168 = 0, $17 = 0, $170 = 0, $171 = 0, $173 = 0, $174 = 0, $176 = 0, $177 = 0, $18 = 0, $182 = 0, $183 = 0, $192 = 0, $197 = 0, $201 = 0, $207 = 0, $214 = 0, $217 = 0, $225 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $236 = 0, $237 = 0, $245 = 0, $246 = 0, $247 = 0, $249 = 0, $25 = 0, $250 = 0, $255 = 0, $256 = 0, $259 = 0, $261 = 0, $264 = 0, $269 = 0, $276 = 0, $28 = 0, $285 = 0, $286 = 0, $290 = 0, $300 = 0, $303 = 0, $307 = 0, $309 = 0, $31 = 0, $310 = 0, $312 = 0, $314 = 0, $316 = 0, $318 = 0, $320 = 0, $322 = 0, $324 = 0, $334 = 0, $335 = 0, $337 = 0, $34 = 0, $346 = 0, $348 = 0, $351 = 0, $353 = 0, $356 = 0, $358 = 0, $361 = 0, $364 = 0, $365 = 0, $367 = 0, $368 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $379 = 0, $38 = 0, $380 = 0, $389 = 0, $394 = 0, $398 = 0, $4 = 0, $404 = 0, $41 = 0, $411 = 0, $414 = 0, $422 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $431 = 0, $432 = 0, $438 = 0, $44 = 0, $443 = 0, $444 = 0, $447 = 0, $449 = 0, $452 = 0, $457 = 0, $46 = 0, $463 = 0, $467 = 0, $468 = 0, $47 = 0, $475 = 0, $487 = 0, $49 = 0, $492 = 0, $499 = 0, $5 = 0, $500 = 0, $501 = 0, $509 = 0, $51 = 0, $511 = 0, $512 = 0, $522 = 0, $526 = 0, $528 = 0, $529 = 0, $53 = 0, $538 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $552 = 0, $554 = 0, $555 = 0, $561 = 0, $563 = 0, $565 = 0, $57 = 0, $572 = 0, $574 = 0, $575 = 0, $576 = 0, $584 = 0, $585 = 0, $588 = 0, $59 = 0, $592 = 0, $593 = 0, $596 = 0, $598 = 0, $6 = 0, $602 = 0, $604 = 0, $608 = 0, $61 = 0, $612 = 0, $621 = 0, $622 = 0, $628 = 0, $630 = 0, $632 = 0, $635 = 0, $637 = 0, $64 = 0, $641 = 0, $642 = 0, $648 = 0, $65 = 0, $653 = 0, $655 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $67 = 0, $676 = 0, $678 = 0, $68 = 0, $683 = 0, $685 = 0, $69 = 0, $690 = 0, $692 = 0, $7 = 0, $70 = 0, $702 = 0, $706 = 0, $711 = 0, $714 = 0, $719 = 0, $720 = 0, $724 = 0, $725 = 0, $730 = 0, $736 = 0, $741 = 0, $744 = 0, $745 = 0, $748 = 0, $750 = 0, $752 = 0, $755 = 0, $766 = 0, $77 = 0, $771 = 0, $773 = 0, $776 = 0, $778 = 0, $781 = 0, $784 = 0, $785 = 0, $787 = 0, $788 = 0, $790 = 0, $791 = 0, $793 = 0, $794 = 0, $799 = 0, $80 = 0, $800 = 0, $809 = 0, $81 = 0, $814 = 0, $818 = 0, $824 = 0, $832 = 0, $838 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $847 = 0, $848 = 0, $854 = 0, $859 = 0, $860 = 0, $863 = 0, $865 = 0, $868 = 0, $873 = 0, $879 = 0, $883 = 0, $884 = 0, $89 = 0, $891 = 0, $90 = 0, $903 = 0, $908 = 0, $91 = 0, $915 = 0, $916 = 0, $917 = 0, $92 = 0, $925 = 0, $928 = 0, $929 = 0, $93 = 0, $934 = 0, $94 = 0, $940 = 0, $941 = 0, $943 = 0, $944 = 0, $947 = 0, $95 = 0, $952 = 0, $954 = 0, $959 = 0, $960 = 0, $964 = 0, $970 = 0, $975 = 0, $977 = 0, $978 = 0, $979 = 0, $980 = 0, $984 = 0, $985 = 0, $99 = 0, $991 = 0, $996 = 0, $997 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$07$i$i = 0, $K8$051$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0, $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$050$i$i = 0, $T$050$i$i$lcssa = 0, $T$06$i$i = 0, $T$06$i$i$lcssa = 0, $br$0$ph$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $oldfirst$0$i$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$084$i = 0, $sp$084$i$lcssa = 0, $sp$183$i = 0, $sp$183$i$lcssa = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$230$i = 0, $tbase$255$i = 0, $tsize$0$ph$i = 0, $tsize$0323944$i = 0, $tsize$1$i = 0, $tsize$254$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$3$ph$i = 0, $v$332$i = 0, label = 0, $964$looptemp = 0;
 do {
  if ($bytes >>> 0 < 245) {
   $4 = $bytes >>> 0 < 11 ? 16 : $bytes + 11 & -8; //@line 11850
   $5 = $4 >>> 3; //@line 11851
   $6 = HEAP32[1534] | 0; //@line 11852
   $7 = $6 >>> $5; //@line 11853
   if ($7 & 3) {
    $12 = ($7 & 1 ^ 1) + $5 | 0; //@line 11859
    $13 = $12 << 1; //@line 11860
    $14 = 6176 + ($13 << 2) | 0; //@line 11861
    $15 = 6176 + ($13 + 2 << 2) | 0; //@line 11863
    $16 = HEAP32[$15 >> 2] | 0; //@line 11864
    $17 = $16 + 8 | 0; //@line 11865
    $18 = HEAP32[$17 >> 2] | 0; //@line 11866
    do {
     if (($14 | 0) == ($18 | 0)) {
      HEAP32[1534] = $6 & ~(1 << $12); //@line 11873
     } else {
      if ($18 >>> 0 < (HEAP32[1538] | 0) >>> 0) {
       _abort(); //@line 11878
      }
      $25 = $18 + 12 | 0; //@line 11881
      if ((HEAP32[$25 >> 2] | 0) == ($16 | 0)) {
       HEAP32[$25 >> 2] = $14; //@line 11885
       HEAP32[$15 >> 2] = $18; //@line 11886
       break;
      } else {
       _abort(); //@line 11889
      }
     }
    } while (0);
    $28 = $12 << 3; //@line 11894
    HEAP32[$16 + 4 >> 2] = $28 | 3; //@line 11897
    $31 = $16 + ($28 | 4) | 0; //@line 11899
    HEAP32[$31 >> 2] = HEAP32[$31 >> 2] | 1; //@line 11902
    $mem$0 = $17; //@line 11903
    return $mem$0 | 0; //@line 11904
   }
   $34 = HEAP32[1536] | 0; //@line 11906
   if ($4 >>> 0 > $34 >>> 0) {
    if ($7) {
     $38 = 2 << $5; //@line 11912
     $41 = $7 << $5 & ($38 | 0 - $38); //@line 11915
     $44 = ($41 & 0 - $41) + -1 | 0; //@line 11918
     $46 = $44 >>> 12 & 16; //@line 11920
     $47 = $44 >>> $46; //@line 11921
     $49 = $47 >>> 5 & 8; //@line 11923
     $51 = $47 >>> $49; //@line 11925
     $53 = $51 >>> 2 & 4; //@line 11927
     $55 = $51 >>> $53; //@line 11929
     $57 = $55 >>> 1 & 2; //@line 11931
     $59 = $55 >>> $57; //@line 11933
     $61 = $59 >>> 1 & 1; //@line 11935
     $64 = ($49 | $46 | $53 | $57 | $61) + ($59 >>> $61) | 0; //@line 11938
     $65 = $64 << 1; //@line 11939
     $66 = 6176 + ($65 << 2) | 0; //@line 11940
     $67 = 6176 + ($65 + 2 << 2) | 0; //@line 11942
     $68 = HEAP32[$67 >> 2] | 0; //@line 11943
     $69 = $68 + 8 | 0; //@line 11944
     $70 = HEAP32[$69 >> 2] | 0; //@line 11945
     do {
      if (($66 | 0) == ($70 | 0)) {
       HEAP32[1534] = $6 & ~(1 << $64); //@line 11952
       $89 = $34; //@line 11953
      } else {
       if ($70 >>> 0 < (HEAP32[1538] | 0) >>> 0) {
        _abort(); //@line 11958
       }
       $77 = $70 + 12 | 0; //@line 11961
       if ((HEAP32[$77 >> 2] | 0) == ($68 | 0)) {
        HEAP32[$77 >> 2] = $66; //@line 11965
        HEAP32[$67 >> 2] = $70; //@line 11966
        $89 = HEAP32[1536] | 0; //@line 11968
        break;
       } else {
        _abort(); //@line 11971
       }
      }
     } while (0);
     $80 = $64 << 3; //@line 11976
     $81 = $80 - $4 | 0; //@line 11977
     HEAP32[$68 + 4 >> 2] = $4 | 3; //@line 11980
     $84 = $68 + $4 | 0; //@line 11981
     HEAP32[$68 + ($4 | 4) >> 2] = $81 | 1; //@line 11985
     HEAP32[$68 + $80 >> 2] = $81; //@line 11987
     if ($89) {
      $90 = HEAP32[1539] | 0; //@line 11990
      $91 = $89 >>> 3; //@line 11991
      $92 = $91 << 1; //@line 11992
      $93 = 6176 + ($92 << 2) | 0; //@line 11993
      $94 = HEAP32[1534] | 0; //@line 11994
      $95 = 1 << $91; //@line 11995
      if (!($94 & $95)) {
       HEAP32[1534] = $94 | $95; //@line 12000
       $$pre$phiZ2D = 6176 + ($92 + 2 << 2) | 0; //@line 12003
       $F4$0 = $93; //@line 12003
      } else {
       $99 = 6176 + ($92 + 2 << 2) | 0; //@line 12006
       $100 = HEAP32[$99 >> 2] | 0; //@line 12007
       if ($100 >>> 0 < (HEAP32[1538] | 0) >>> 0) {
        _abort(); //@line 12011
       } else {
        $$pre$phiZ2D = $99; //@line 12014
        $F4$0 = $100; //@line 12014
       }
      }
      HEAP32[$$pre$phiZ2D >> 2] = $90; //@line 12017
      HEAP32[$F4$0 + 12 >> 2] = $90; //@line 12019
      HEAP32[$90 + 8 >> 2] = $F4$0; //@line 12021
      HEAP32[$90 + 12 >> 2] = $93; //@line 12023
     }
     HEAP32[1536] = $81; //@line 12025
     HEAP32[1539] = $84; //@line 12026
     $mem$0 = $69; //@line 12027
     return $mem$0 | 0; //@line 12028
    }
    $106 = HEAP32[1535] | 0; //@line 12030
    if (!$106) {
     $nb$0 = $4; //@line 12033
    } else {
     $110 = ($106 & 0 - $106) + -1 | 0; //@line 12037
     $112 = $110 >>> 12 & 16; //@line 12039
     $113 = $110 >>> $112; //@line 12040
     $115 = $113 >>> 5 & 8; //@line 12042
     $117 = $113 >>> $115; //@line 12044
     $119 = $117 >>> 2 & 4; //@line 12046
     $121 = $117 >>> $119; //@line 12048
     $123 = $121 >>> 1 & 2; //@line 12050
     $125 = $121 >>> $123; //@line 12052
     $127 = $125 >>> 1 & 1; //@line 12054
     $132 = HEAP32[6440 + (($115 | $112 | $119 | $123 | $127) + ($125 >>> $127) << 2) >> 2] | 0; //@line 12059
     $rsize$0$i = (HEAP32[$132 + 4 >> 2] & -8) - $4 | 0; //@line 12064
     $t$0$i = $132; //@line 12064
     $v$0$i = $132; //@line 12064
     while (1) {
      $138 = HEAP32[$t$0$i + 16 >> 2] | 0; //@line 12067
      if (!$138) {
       $141 = HEAP32[$t$0$i + 20 >> 2] | 0; //@line 12071
       if (!$141) {
        $rsize$0$i$lcssa = $rsize$0$i; //@line 12074
        $v$0$i$lcssa = $v$0$i; //@line 12074
        break;
       } else {
        $144 = $141; //@line 12077
       }
      } else {
       $144 = $138; //@line 12080
      }
      $147 = (HEAP32[$144 + 4 >> 2] & -8) - $4 | 0; //@line 12085
      $148 = $147 >>> 0 < $rsize$0$i >>> 0; //@line 12086
      $rsize$0$i = $148 ? $147 : $rsize$0$i; //@line 12089
      $t$0$i = $144; //@line 12089
      $v$0$i = $148 ? $144 : $v$0$i; //@line 12089
     }
     $149 = HEAP32[1538] | 0; //@line 12091
     if ($v$0$i$lcssa >>> 0 < $149 >>> 0) {
      _abort(); //@line 12094
     }
     $151 = $v$0$i$lcssa + $4 | 0; //@line 12097
     if ($v$0$i$lcssa >>> 0 >= $151 >>> 0) {
      _abort(); //@line 12100
     }
     $154 = HEAP32[$v$0$i$lcssa + 24 >> 2] | 0; //@line 12104
     $156 = HEAP32[$v$0$i$lcssa + 12 >> 2] | 0; //@line 12106
     do {
      if (($156 | 0) == ($v$0$i$lcssa | 0)) {
       $167 = $v$0$i$lcssa + 20 | 0; //@line 12110
       $168 = HEAP32[$167 >> 2] | 0; //@line 12111
       if (!$168) {
        $170 = $v$0$i$lcssa + 16 | 0; //@line 12114
        $171 = HEAP32[$170 >> 2] | 0; //@line 12115
        if (!$171) {
         $R$1$i = 0; //@line 12118
         break;
        } else {
         $R$0$i = $171; //@line 12121
         $RP$0$i = $170; //@line 12121
        }
       } else {
        $R$0$i = $168; //@line 12124
        $RP$0$i = $167; //@line 12124
       }
       while (1) {
        $173 = $R$0$i + 20 | 0; //@line 12127
        $174 = HEAP32[$173 >> 2] | 0; //@line 12128
        if ($174) {
         $R$0$i = $174; //@line 12131
         $RP$0$i = $173; //@line 12131
         continue;
        }
        $176 = $R$0$i + 16 | 0; //@line 12134
        $177 = HEAP32[$176 >> 2] | 0; //@line 12135
        if (!$177) {
         $R$0$i$lcssa = $R$0$i; //@line 12138
         $RP$0$i$lcssa = $RP$0$i; //@line 12138
         break;
        } else {
         $R$0$i = $177; //@line 12141
         $RP$0$i = $176; //@line 12141
        }
       }
       if ($RP$0$i$lcssa >>> 0 < $149 >>> 0) {
        _abort(); //@line 12146
       } else {
        HEAP32[$RP$0$i$lcssa >> 2] = 0; //@line 12149
        $R$1$i = $R$0$i$lcssa; //@line 12150
        break;
       }
      } else {
       $159 = HEAP32[$v$0$i$lcssa + 8 >> 2] | 0; //@line 12155
       if ($159 >>> 0 < $149 >>> 0) {
        _abort(); //@line 12158
       }
       $161 = $159 + 12 | 0; //@line 12161
       if ((HEAP32[$161 >> 2] | 0) != ($v$0$i$lcssa | 0)) {
        _abort(); //@line 12165
       }
       $164 = $156 + 8 | 0; //@line 12168
       if ((HEAP32[$164 >> 2] | 0) == ($v$0$i$lcssa | 0)) {
        HEAP32[$161 >> 2] = $156; //@line 12172
        HEAP32[$164 >> 2] = $159; //@line 12173
        $R$1$i = $156; //@line 12174
        break;
       } else {
        _abort(); //@line 12177
       }
      }
     } while (0);
     do {
      if ($154) {
       $182 = HEAP32[$v$0$i$lcssa + 28 >> 2] | 0; //@line 12186
       $183 = 6440 + ($182 << 2) | 0; //@line 12187
       if (($v$0$i$lcssa | 0) == (HEAP32[$183 >> 2] | 0)) {
        HEAP32[$183 >> 2] = $R$1$i; //@line 12191
        if (!$R$1$i) {
         HEAP32[1535] = HEAP32[1535] & ~(1 << $182); //@line 12198
         break;
        }
       } else {
        if ($154 >>> 0 < (HEAP32[1538] | 0) >>> 0) {
         _abort(); //@line 12205
        }
        $192 = $154 + 16 | 0; //@line 12208
        if ((HEAP32[$192 >> 2] | 0) == ($v$0$i$lcssa | 0)) {
         HEAP32[$192 >> 2] = $R$1$i; //@line 12212
        } else {
         HEAP32[$154 + 20 >> 2] = $R$1$i; //@line 12215
        }
        if (!$R$1$i) {
         break;
        }
       }
       $197 = HEAP32[1538] | 0; //@line 12222
       if ($R$1$i >>> 0 < $197 >>> 0) {
        _abort(); //@line 12225
       }
       HEAP32[$R$1$i + 24 >> 2] = $154; //@line 12229
       $201 = HEAP32[$v$0$i$lcssa + 16 >> 2] | 0; //@line 12231
       do {
        if ($201) {
         if ($201 >>> 0 < $197 >>> 0) {
          _abort(); //@line 12237
         } else {
          HEAP32[$R$1$i + 16 >> 2] = $201; //@line 12241
          HEAP32[$201 + 24 >> 2] = $R$1$i; //@line 12243
          break;
         }
        }
       } while (0);
       $207 = HEAP32[$v$0$i$lcssa + 20 >> 2] | 0; //@line 12249
       if ($207) {
        if ($207 >>> 0 < (HEAP32[1538] | 0) >>> 0) {
         _abort(); //@line 12255
        } else {
         HEAP32[$R$1$i + 20 >> 2] = $207; //@line 12259
         HEAP32[$207 + 24 >> 2] = $R$1$i; //@line 12261
         break;
        }
       }
      }
     } while (0);
     if ($rsize$0$i$lcssa >>> 0 < 16) {
      $214 = $rsize$0$i$lcssa + $4 | 0; //@line 12269
      HEAP32[$v$0$i$lcssa + 4 >> 2] = $214 | 3; //@line 12272
      $217 = $v$0$i$lcssa + ($214 + 4) | 0; //@line 12274
      HEAP32[$217 >> 2] = HEAP32[$217 >> 2] | 1; //@line 12277
     } else {
      HEAP32[$v$0$i$lcssa + 4 >> 2] = $4 | 3; //@line 12281
      HEAP32[$v$0$i$lcssa + ($4 | 4) >> 2] = $rsize$0$i$lcssa | 1; //@line 12285
      HEAP32[$v$0$i$lcssa + ($rsize$0$i$lcssa + $4) >> 2] = $rsize$0$i$lcssa; //@line 12288
      $225 = HEAP32[1536] | 0; //@line 12289
      if ($225) {
       $227 = HEAP32[1539] | 0; //@line 12292
       $228 = $225 >>> 3; //@line 12293
       $229 = $228 << 1; //@line 12294
       $230 = 6176 + ($229 << 2) | 0; //@line 12295
       $231 = HEAP32[1534] | 0; //@line 12296
       $232 = 1 << $228; //@line 12297
       if (!($231 & $232)) {
        HEAP32[1534] = $231 | $232; //@line 12302
        $$pre$phi$iZ2D = 6176 + ($229 + 2 << 2) | 0; //@line 12305
        $F1$0$i = $230; //@line 12305
       } else {
        $236 = 6176 + ($229 + 2 << 2) | 0; //@line 12308
        $237 = HEAP32[$236 >> 2] | 0; //@line 12309
        if ($237 >>> 0 < (HEAP32[1538] | 0) >>> 0) {
         _abort(); //@line 12313
        } else {
         $$pre$phi$iZ2D = $236; //@line 12316
         $F1$0$i = $237; //@line 12316
        }
       }
       HEAP32[$$pre$phi$iZ2D >> 2] = $227; //@line 12319
       HEAP32[$F1$0$i + 12 >> 2] = $227; //@line 12321
       HEAP32[$227 + 8 >> 2] = $F1$0$i; //@line 12323
       HEAP32[$227 + 12 >> 2] = $230; //@line 12325
      }
      HEAP32[1536] = $rsize$0$i$lcssa; //@line 12327
      HEAP32[1539] = $151; //@line 12328
     }
     $mem$0 = $v$0$i$lcssa + 8 | 0; //@line 12331
     return $mem$0 | 0; //@line 12332
    }
   } else {
    $nb$0 = $4; //@line 12335
   }
  } else {
   if ($bytes >>> 0 > 4294967231) {
    $nb$0 = -1; //@line 12340
   } else {
    $245 = $bytes + 11 | 0; //@line 12342
    $246 = $245 & -8; //@line 12343
    $247 = HEAP32[1535] | 0; //@line 12344
    if (!$247) {
     $nb$0 = $246; //@line 12347
    } else {
     $249 = 0 - $246 | 0; //@line 12349
     $250 = $245 >>> 8; //@line 12350
     if (!$250) {
      $idx$0$i = 0; //@line 12353
     } else {
      if ($246 >>> 0 > 16777215) {
       $idx$0$i = 31; //@line 12357
      } else {
       $255 = ($250 + 1048320 | 0) >>> 16 & 8; //@line 12361
       $256 = $250 << $255; //@line 12362
       $259 = ($256 + 520192 | 0) >>> 16 & 4; //@line 12365
       $261 = $256 << $259; //@line 12367
       $264 = ($261 + 245760 | 0) >>> 16 & 2; //@line 12370
       $269 = 14 - ($259 | $255 | $264) + ($261 << $264 >>> 15) | 0; //@line 12375
       $idx$0$i = $246 >>> ($269 + 7 | 0) & 1 | $269 << 1; //@line 12381
      }
     }
     $276 = HEAP32[6440 + ($idx$0$i << 2) >> 2] | 0; //@line 12385
     L123 : do {
      if (!$276) {
       $rsize$2$i = $249; //@line 12389
       $t$1$i = 0; //@line 12389
       $v$2$i = 0; //@line 12389
       label = 86; //@line 12390
      } else {
       $rsize$0$i15 = $249; //@line 12397
       $rst$0$i = 0; //@line 12397
       $sizebits$0$i = $246 << (($idx$0$i | 0) == 31 ? 0 : 25 - ($idx$0$i >>> 1) | 0); //@line 12397
       $t$0$i14 = $276; //@line 12397
       $v$0$i16 = 0; //@line 12397
       while (1) {
        $285 = HEAP32[$t$0$i14 + 4 >> 2] & -8; //@line 12401
        $286 = $285 - $246 | 0; //@line 12402
        if ($286 >>> 0 < $rsize$0$i15 >>> 0) {
         if (($285 | 0) == ($246 | 0)) {
          $rsize$331$i = $286; //@line 12407
          $t$230$i = $t$0$i14; //@line 12407
          $v$332$i = $t$0$i14; //@line 12407
          label = 90; //@line 12408
          break L123;
         } else {
          $rsize$1$i = $286; //@line 12411
          $v$1$i = $t$0$i14; //@line 12411
         }
        } else {
         $rsize$1$i = $rsize$0$i15; //@line 12414
         $v$1$i = $v$0$i16; //@line 12414
        }
        $290 = HEAP32[$t$0$i14 + 20 >> 2] | 0; //@line 12417
        $t$0$i14 = HEAP32[$t$0$i14 + 16 + ($sizebits$0$i >>> 31 << 2) >> 2] | 0; //@line 12420
        $rst$1$i = ($290 | 0) == 0 | ($290 | 0) == ($t$0$i14 | 0) ? $rst$0$i : $290; //@line 12424
        if (!$t$0$i14) {
         $rsize$2$i = $rsize$1$i; //@line 12428
         $t$1$i = $rst$1$i; //@line 12428
         $v$2$i = $v$1$i; //@line 12428
         label = 86; //@line 12429
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i; //@line 12432
         $rst$0$i = $rst$1$i; //@line 12432
         $sizebits$0$i = $sizebits$0$i << 1; //@line 12432
         $v$0$i16 = $v$1$i; //@line 12432
        }
       }
      }
     } while (0);
     if ((label | 0) == 86) {
      if (($t$1$i | 0) == 0 & ($v$2$i | 0) == 0) {
       $300 = 2 << $idx$0$i; //@line 12442
       $303 = $247 & ($300 | 0 - $300); //@line 12445
       if (!$303) {
        $nb$0 = $246; //@line 12448
        break;
       }
       $307 = ($303 & 0 - $303) + -1 | 0; //@line 12453
       $309 = $307 >>> 12 & 16; //@line 12455
       $310 = $307 >>> $309; //@line 12456
       $312 = $310 >>> 5 & 8; //@line 12458
       $314 = $310 >>> $312; //@line 12460
       $316 = $314 >>> 2 & 4; //@line 12462
       $318 = $314 >>> $316; //@line 12464
       $320 = $318 >>> 1 & 2; //@line 12466
       $322 = $318 >>> $320; //@line 12468
       $324 = $322 >>> 1 & 1; //@line 12470
       $t$2$ph$i = HEAP32[6440 + (($312 | $309 | $316 | $320 | $324) + ($322 >>> $324) << 2) >> 2] | 0; //@line 12476
       $v$3$ph$i = 0; //@line 12476
      } else {
       $t$2$ph$i = $t$1$i; //@line 12478
       $v$3$ph$i = $v$2$i; //@line 12478
      }
      if (!$t$2$ph$i) {
       $rsize$3$lcssa$i = $rsize$2$i; //@line 12482
       $v$3$lcssa$i = $v$3$ph$i; //@line 12482
      } else {
       $rsize$331$i = $rsize$2$i; //@line 12484
       $t$230$i = $t$2$ph$i; //@line 12484
       $v$332$i = $v$3$ph$i; //@line 12484
       label = 90; //@line 12485
      }
     }
     if ((label | 0) == 90) {
      while (1) {
       label = 0; //@line 12490
       $334 = (HEAP32[$t$230$i + 4 >> 2] & -8) - $246 | 0; //@line 12494
       $335 = $334 >>> 0 < $rsize$331$i >>> 0; //@line 12495
       $$rsize$3$i = $335 ? $334 : $rsize$331$i; //@line 12496
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i; //@line 12497
       $337 = HEAP32[$t$230$i + 16 >> 2] | 0; //@line 12499
       if ($337) {
        $rsize$331$i = $$rsize$3$i; //@line 12502
        $t$230$i = $337; //@line 12502
        $v$332$i = $t$2$v$3$i; //@line 12502
        label = 90; //@line 12503
        continue;
       }
       $t$230$i = HEAP32[$t$230$i + 20 >> 2] | 0; //@line 12507
       if (!$t$230$i) {
        $rsize$3$lcssa$i = $$rsize$3$i; //@line 12510
        $v$3$lcssa$i = $t$2$v$3$i; //@line 12510
        break;
       } else {
        $rsize$331$i = $$rsize$3$i; //@line 12513
        $v$332$i = $t$2$v$3$i; //@line 12513
        label = 90; //@line 12514
       }
      }
     }
     if (!$v$3$lcssa$i) {
      $nb$0 = $246; //@line 12520
     } else {
      if ($rsize$3$lcssa$i >>> 0 < ((HEAP32[1536] | 0) - $246 | 0) >>> 0) {
       $346 = HEAP32[1538] | 0; //@line 12526
       if ($v$3$lcssa$i >>> 0 < $346 >>> 0) {
        _abort(); //@line 12529
       }
       $348 = $v$3$lcssa$i + $246 | 0; //@line 12532
       if ($v$3$lcssa$i >>> 0 >= $348 >>> 0) {
        _abort(); //@line 12535
       }
       $351 = HEAP32[$v$3$lcssa$i + 24 >> 2] | 0; //@line 12539
       $353 = HEAP32[$v$3$lcssa$i + 12 >> 2] | 0; //@line 12541
       do {
        if (($353 | 0) == ($v$3$lcssa$i | 0)) {
         $364 = $v$3$lcssa$i + 20 | 0; //@line 12545
         $365 = HEAP32[$364 >> 2] | 0; //@line 12546
         if (!$365) {
          $367 = $v$3$lcssa$i + 16 | 0; //@line 12549
          $368 = HEAP32[$367 >> 2] | 0; //@line 12550
          if (!$368) {
           $R$1$i20 = 0; //@line 12553
           break;
          } else {
           $R$0$i18 = $368; //@line 12556
           $RP$0$i17 = $367; //@line 12556
          }
         } else {
          $R$0$i18 = $365; //@line 12559
          $RP$0$i17 = $364; //@line 12559
         }
         while (1) {
          $370 = $R$0$i18 + 20 | 0; //@line 12562
          $371 = HEAP32[$370 >> 2] | 0; //@line 12563
          if ($371) {
           $R$0$i18 = $371; //@line 12566
           $RP$0$i17 = $370; //@line 12566
           continue;
          }
          $373 = $R$0$i18 + 16 | 0; //@line 12569
          $374 = HEAP32[$373 >> 2] | 0; //@line 12570
          if (!$374) {
           $R$0$i18$lcssa = $R$0$i18; //@line 12573
           $RP$0$i17$lcssa = $RP$0$i17; //@line 12573
           break;
          } else {
           $R$0$i18 = $374; //@line 12576
           $RP$0$i17 = $373; //@line 12576
          }
         }
         if ($RP$0$i17$lcssa >>> 0 < $346 >>> 0) {
          _abort(); //@line 12581
         } else {
          HEAP32[$RP$0$i17$lcssa >> 2] = 0; //@line 12584
          $R$1$i20 = $R$0$i18$lcssa; //@line 12585
          break;
         }
        } else {
         $356 = HEAP32[$v$3$lcssa$i + 8 >> 2] | 0; //@line 12590
         if ($356 >>> 0 < $346 >>> 0) {
          _abort(); //@line 12593
         }
         $358 = $356 + 12 | 0; //@line 12596
         if ((HEAP32[$358 >> 2] | 0) != ($v$3$lcssa$i | 0)) {
          _abort(); //@line 12600
         }
         $361 = $353 + 8 | 0; //@line 12603
         if ((HEAP32[$361 >> 2] | 0) == ($v$3$lcssa$i | 0)) {
          HEAP32[$358 >> 2] = $353; //@line 12607
          HEAP32[$361 >> 2] = $356; //@line 12608
          $R$1$i20 = $353; //@line 12609
          break;
         } else {
          _abort(); //@line 12612
         }
        }
       } while (0);
       do {
        if ($351) {
         $379 = HEAP32[$v$3$lcssa$i + 28 >> 2] | 0; //@line 12621
         $380 = 6440 + ($379 << 2) | 0; //@line 12622
         if (($v$3$lcssa$i | 0) == (HEAP32[$380 >> 2] | 0)) {
          HEAP32[$380 >> 2] = $R$1$i20; //@line 12626
          if (!$R$1$i20) {
           HEAP32[1535] = HEAP32[1535] & ~(1 << $379); //@line 12633
           break;
          }
         } else {
          if ($351 >>> 0 < (HEAP32[1538] | 0) >>> 0) {
           _abort(); //@line 12640
          }
          $389 = $351 + 16 | 0; //@line 12643
          if ((HEAP32[$389 >> 2] | 0) == ($v$3$lcssa$i | 0)) {
           HEAP32[$389 >> 2] = $R$1$i20; //@line 12647
          } else {
           HEAP32[$351 + 20 >> 2] = $R$1$i20; //@line 12650
          }
          if (!$R$1$i20) {
           break;
          }
         }
         $394 = HEAP32[1538] | 0; //@line 12657
         if ($R$1$i20 >>> 0 < $394 >>> 0) {
          _abort(); //@line 12660
         }
         HEAP32[$R$1$i20 + 24 >> 2] = $351; //@line 12664
         $398 = HEAP32[$v$3$lcssa$i + 16 >> 2] | 0; //@line 12666
         do {
          if ($398) {
           if ($398 >>> 0 < $394 >>> 0) {
            _abort(); //@line 12672
           } else {
            HEAP32[$R$1$i20 + 16 >> 2] = $398; //@line 12676
            HEAP32[$398 + 24 >> 2] = $R$1$i20; //@line 12678
            break;
           }
          }
         } while (0);
         $404 = HEAP32[$v$3$lcssa$i + 20 >> 2] | 0; //@line 12684
         if ($404) {
          if ($404 >>> 0 < (HEAP32[1538] | 0) >>> 0) {
           _abort(); //@line 12690
          } else {
           HEAP32[$R$1$i20 + 20 >> 2] = $404; //@line 12694
           HEAP32[$404 + 24 >> 2] = $R$1$i20; //@line 12696
           break;
          }
         }
        }
       } while (0);
       L199 : do {
        if ($rsize$3$lcssa$i >>> 0 < 16) {
         $411 = $rsize$3$lcssa$i + $246 | 0; //@line 12705
         HEAP32[$v$3$lcssa$i + 4 >> 2] = $411 | 3; //@line 12708
         $414 = $v$3$lcssa$i + ($411 + 4) | 0; //@line 12710
         HEAP32[$414 >> 2] = HEAP32[$414 >> 2] | 1; //@line 12713
        } else {
         HEAP32[$v$3$lcssa$i + 4 >> 2] = $246 | 3; //@line 12717
         HEAP32[$v$3$lcssa$i + ($246 | 4) >> 2] = $rsize$3$lcssa$i | 1; //@line 12721
         HEAP32[$v$3$lcssa$i + ($rsize$3$lcssa$i + $246) >> 2] = $rsize$3$lcssa$i; //@line 12724
         $422 = $rsize$3$lcssa$i >>> 3; //@line 12725
         if ($rsize$3$lcssa$i >>> 0 < 256) {
          $424 = $422 << 1; //@line 12728
          $425 = 6176 + ($424 << 2) | 0; //@line 12729
          $426 = HEAP32[1534] | 0; //@line 12730
          $427 = 1 << $422; //@line 12731
          if (!($426 & $427)) {
           HEAP32[1534] = $426 | $427; //@line 12736
           $$pre$phi$i26Z2D = 6176 + ($424 + 2 << 2) | 0; //@line 12739
           $F5$0$i = $425; //@line 12739
          } else {
           $431 = 6176 + ($424 + 2 << 2) | 0; //@line 12742
           $432 = HEAP32[$431 >> 2] | 0; //@line 12743
           if ($432 >>> 0 < (HEAP32[1538] | 0) >>> 0) {
            _abort(); //@line 12747
           } else {
            $$pre$phi$i26Z2D = $431; //@line 12750
            $F5$0$i = $432; //@line 12750
           }
          }
          HEAP32[$$pre$phi$i26Z2D >> 2] = $348; //@line 12753
          HEAP32[$F5$0$i + 12 >> 2] = $348; //@line 12755
          HEAP32[$v$3$lcssa$i + ($246 + 8) >> 2] = $F5$0$i; //@line 12758
          HEAP32[$v$3$lcssa$i + ($246 + 12) >> 2] = $425; //@line 12761
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8; //@line 12764
         if (!$438) {
          $I7$0$i = 0; //@line 12767
         } else {
          if ($rsize$3$lcssa$i >>> 0 > 16777215) {
           $I7$0$i = 31; //@line 12771
          } else {
           $443 = ($438 + 1048320 | 0) >>> 16 & 8; //@line 12775
           $444 = $438 << $443; //@line 12776
           $447 = ($444 + 520192 | 0) >>> 16 & 4; //@line 12779
           $449 = $444 << $447; //@line 12781
           $452 = ($449 + 245760 | 0) >>> 16 & 2; //@line 12784
           $457 = 14 - ($447 | $443 | $452) + ($449 << $452 >>> 15) | 0; //@line 12789
           $I7$0$i = $rsize$3$lcssa$i >>> ($457 + 7 | 0) & 1 | $457 << 1; //@line 12795
          }
         }
         $463 = 6440 + ($I7$0$i << 2) | 0; //@line 12798
         HEAP32[$v$3$lcssa$i + ($246 + 28) >> 2] = $I7$0$i; //@line 12801
         HEAP32[$v$3$lcssa$i + ($246 + 20) >> 2] = 0; //@line 12806
         HEAP32[$v$3$lcssa$i + ($246 + 16) >> 2] = 0; //@line 12807
         $467 = HEAP32[1535] | 0; //@line 12808
         $468 = 1 << $I7$0$i; //@line 12809
         if (!($467 & $468)) {
          HEAP32[1535] = $467 | $468; //@line 12814
          HEAP32[$463 >> 2] = $348; //@line 12815
          HEAP32[$v$3$lcssa$i + ($246 + 24) >> 2] = $463; //@line 12818
          HEAP32[$v$3$lcssa$i + ($246 + 12) >> 2] = $348; //@line 12821
          HEAP32[$v$3$lcssa$i + ($246 + 8) >> 2] = $348; //@line 12824
          break;
         }
         $475 = HEAP32[$463 >> 2] | 0; //@line 12827
         L217 : do {
          if ((HEAP32[$475 + 4 >> 2] & -8 | 0) == ($rsize$3$lcssa$i | 0)) {
           $T$0$lcssa$i = $475; //@line 12834
          } else {
           $K12$029$i = $rsize$3$lcssa$i << (($I7$0$i | 0) == 31 ? 0 : 25 - ($I7$0$i >>> 1) | 0); //@line 12841
           $T$028$i = $475; //@line 12841
           while (1) {
            $492 = $T$028$i + 16 + ($K12$029$i >>> 31 << 2) | 0; //@line 12844
            $487 = HEAP32[$492 >> 2] | 0; //@line 12845
            if (!$487) {
             $$lcssa232 = $492; //@line 12848
             $T$028$i$lcssa = $T$028$i; //@line 12848
             break;
            }
            if ((HEAP32[$487 + 4 >> 2] & -8 | 0) == ($rsize$3$lcssa$i | 0)) {
             $T$0$lcssa$i = $487; //@line 12857
             break L217;
            } else {
             $K12$029$i = $K12$029$i << 1; //@line 12860
             $T$028$i = $487; //@line 12860
            }
           }
           if ($$lcssa232 >>> 0 < (HEAP32[1538] | 0) >>> 0) {
            _abort(); //@line 12866
           } else {
            HEAP32[$$lcssa232 >> 2] = $348; //@line 12869
            HEAP32[$v$3$lcssa$i + ($246 + 24) >> 2] = $T$028$i$lcssa; //@line 12872
            HEAP32[$v$3$lcssa$i + ($246 + 12) >> 2] = $348; //@line 12875
            HEAP32[$v$3$lcssa$i + ($246 + 8) >> 2] = $348; //@line 12878
            break L199;
           }
          }
         } while (0);
         $499 = $T$0$lcssa$i + 8 | 0; //@line 12883
         $500 = HEAP32[$499 >> 2] | 0; //@line 12884
         $501 = HEAP32[1538] | 0; //@line 12885
         if ($500 >>> 0 >= $501 >>> 0 & $T$0$lcssa$i >>> 0 >= $501 >>> 0) {
          HEAP32[$500 + 12 >> 2] = $348; //@line 12891
          HEAP32[$499 >> 2] = $348; //@line 12892
          HEAP32[$v$3$lcssa$i + ($246 + 8) >> 2] = $500; //@line 12895
          HEAP32[$v$3$lcssa$i + ($246 + 12) >> 2] = $T$0$lcssa$i; //@line 12898
          HEAP32[$v$3$lcssa$i + ($246 + 24) >> 2] = 0; //@line 12901
          break;
         } else {
          _abort(); //@line 12904
         }
        }
       } while (0);
       $mem$0 = $v$3$lcssa$i + 8 | 0; //@line 12910
       return $mem$0 | 0; //@line 12911
      } else {
       $nb$0 = $246; //@line 12913
      }
     }
    }
   }
  }
 } while (0);
 $509 = HEAP32[1536] | 0; //@line 12920
 if ($509 >>> 0 >= $nb$0 >>> 0) {
  $511 = $509 - $nb$0 | 0; //@line 12923
  $512 = HEAP32[1539] | 0; //@line 12924
  if ($511 >>> 0 > 15) {
   HEAP32[1539] = $512 + $nb$0; //@line 12928
   HEAP32[1536] = $511; //@line 12929
   HEAP32[$512 + ($nb$0 + 4) >> 2] = $511 | 1; //@line 12933
   HEAP32[$512 + $509 >> 2] = $511; //@line 12935
   HEAP32[$512 + 4 >> 2] = $nb$0 | 3; //@line 12938
  } else {
   HEAP32[1536] = 0; //@line 12940
   HEAP32[1539] = 0; //@line 12941
   HEAP32[$512 + 4 >> 2] = $509 | 3; //@line 12944
   $522 = $512 + ($509 + 4) | 0; //@line 12946
   HEAP32[$522 >> 2] = HEAP32[$522 >> 2] | 1; //@line 12949
  }
  $mem$0 = $512 + 8 | 0; //@line 12952
  return $mem$0 | 0; //@line 12953
 }
 $526 = HEAP32[1537] | 0; //@line 12955
 if ($526 >>> 0 > $nb$0 >>> 0) {
  $528 = $526 - $nb$0 | 0; //@line 12958
  HEAP32[1537] = $528; //@line 12959
  $529 = HEAP32[1540] | 0; //@line 12960
  HEAP32[1540] = $529 + $nb$0; //@line 12962
  HEAP32[$529 + ($nb$0 + 4) >> 2] = $528 | 1; //@line 12966
  HEAP32[$529 + 4 >> 2] = $nb$0 | 3; //@line 12969
  $mem$0 = $529 + 8 | 0; //@line 12971
  return $mem$0 | 0; //@line 12972
 }
 do {
  if (!(HEAP32[1652] | 0)) {
   $538 = _sysconf(30) | 0; //@line 12978
   if (!($538 + -1 & $538)) {
    HEAP32[1654] = $538; //@line 12983
    HEAP32[1653] = $538; //@line 12984
    HEAP32[1655] = -1; //@line 12985
    HEAP32[1656] = -1; //@line 12986
    HEAP32[1657] = 0; //@line 12987
    HEAP32[1645] = 0; //@line 12988
    HEAP32[1652] = (_time(0) | 0) & -16 ^ 1431655768; //@line 12992
    break;
   } else {
    _abort(); //@line 12995
   }
  }
 } while (0);
 $545 = $nb$0 + 48 | 0; //@line 13000
 $546 = HEAP32[1654] | 0; //@line 13001
 $547 = $nb$0 + 47 | 0; //@line 13002
 $548 = $546 + $547 | 0; //@line 13003
 $549 = 0 - $546 | 0; //@line 13004
 $550 = $548 & $549; //@line 13005
 if ($550 >>> 0 <= $nb$0 >>> 0) {
  $mem$0 = 0; //@line 13008
  return $mem$0 | 0; //@line 13009
 }
 $552 = HEAP32[1644] | 0; //@line 13011
 if ($552) {
  $554 = HEAP32[1642] | 0; //@line 13014
  $555 = $554 + $550 | 0; //@line 13015
  if ($555 >>> 0 <= $554 >>> 0 | $555 >>> 0 > $552 >>> 0) {
   $mem$0 = 0; //@line 13020
   return $mem$0 | 0; //@line 13021
  }
 }
 L258 : do {
  if (!(HEAP32[1645] & 4)) {
   $561 = HEAP32[1540] | 0; //@line 13029
   L260 : do {
    if (!$561) {
     label = 174; //@line 13033
    } else {
     $sp$0$i$i = 6584; //@line 13035
     while (1) {
      $563 = HEAP32[$sp$0$i$i >> 2] | 0; //@line 13037
      if ($563 >>> 0 <= $561 >>> 0) {
       $565 = $sp$0$i$i + 4 | 0; //@line 13040
       if (($563 + (HEAP32[$565 >> 2] | 0) | 0) >>> 0 > $561 >>> 0) {
        $$lcssa228 = $sp$0$i$i; //@line 13045
        $$lcssa230 = $565; //@line 13045
        break;
       }
      }
      $sp$0$i$i = HEAP32[$sp$0$i$i + 8 >> 2] | 0; //@line 13050
      if (!$sp$0$i$i) {
       label = 174; //@line 13053
       break L260;
      }
     }
     $596 = $548 - (HEAP32[1537] | 0) & $549; //@line 13061
     if ($596 >>> 0 < 2147483647) {
      $598 = _sbrk($596 | 0) | 0; //@line 13064
      $602 = ($598 | 0) == ((HEAP32[$$lcssa228 >> 2] | 0) + (HEAP32[$$lcssa230 >> 2] | 0) | 0); //@line 13068
      $$3$i = $602 ? $596 : 0; //@line 13069
      if ($602) {
       if (($598 | 0) == (-1 | 0)) {
        $tsize$0323944$i = $$3$i; //@line 13073
       } else {
        $tbase$255$i = $598; //@line 13075
        $tsize$254$i = $$3$i; //@line 13075
        label = 194; //@line 13076
        break L258;
       }
      } else {
       $br$0$ph$i = $598; //@line 13080
       $ssize$1$ph$i = $596; //@line 13080
       $tsize$0$ph$i = $$3$i; //@line 13080
       label = 184; //@line 13081
      }
     } else {
      $tsize$0323944$i = 0; //@line 13084
     }
    }
   } while (0);
   do {
    if ((label | 0) == 174) {
     $572 = _sbrk(0) | 0; //@line 13090
     if (($572 | 0) == (-1 | 0)) {
      $tsize$0323944$i = 0; //@line 13093
     } else {
      $574 = $572; //@line 13095
      $575 = HEAP32[1653] | 0; //@line 13096
      $576 = $575 + -1 | 0; //@line 13097
      if (!($576 & $574)) {
       $ssize$0$i = $550; //@line 13101
      } else {
       $ssize$0$i = $550 - $574 + ($576 + $574 & 0 - $575) | 0; //@line 13108
      }
      $584 = HEAP32[1642] | 0; //@line 13110
      $585 = $584 + $ssize$0$i | 0; //@line 13111
      if ($ssize$0$i >>> 0 > $nb$0 >>> 0 & $ssize$0$i >>> 0 < 2147483647) {
       $588 = HEAP32[1644] | 0; //@line 13116
       if ($588) {
        if ($585 >>> 0 <= $584 >>> 0 | $585 >>> 0 > $588 >>> 0) {
         $tsize$0323944$i = 0; //@line 13123
         break;
        }
       }
       $592 = _sbrk($ssize$0$i | 0) | 0; //@line 13127
       $593 = ($592 | 0) == ($572 | 0); //@line 13128
       $ssize$0$$i = $593 ? $ssize$0$i : 0; //@line 13129
       if ($593) {
        $tbase$255$i = $572; //@line 13131
        $tsize$254$i = $ssize$0$$i; //@line 13131
        label = 194; //@line 13132
        break L258;
       } else {
        $br$0$ph$i = $592; //@line 13135
        $ssize$1$ph$i = $ssize$0$i; //@line 13135
        $tsize$0$ph$i = $ssize$0$$i; //@line 13135
        label = 184; //@line 13136
       }
      } else {
       $tsize$0323944$i = 0; //@line 13139
      }
     }
    }
   } while (0);
   L280 : do {
    if ((label | 0) == 184) {
     $604 = 0 - $ssize$1$ph$i | 0; //@line 13146
     do {
      if ($545 >>> 0 > $ssize$1$ph$i >>> 0 & ($ssize$1$ph$i >>> 0 < 2147483647 & ($br$0$ph$i | 0) != (-1 | 0))) {
       $608 = HEAP32[1654] | 0; //@line 13154
       $612 = $547 - $ssize$1$ph$i + $608 & 0 - $608; //@line 13158
       if ($612 >>> 0 < 2147483647) {
        if ((_sbrk($612 | 0) | 0) == (-1 | 0)) {
         _sbrk($604 | 0) | 0; //@line 13164
         $tsize$0323944$i = $tsize$0$ph$i; //@line 13165
         break L280;
        } else {
         $ssize$2$i = $612 + $ssize$1$ph$i | 0; //@line 13169
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$ph$i; //@line 13173
       }
      } else {
       $ssize$2$i = $ssize$1$ph$i; //@line 13176
      }
     } while (0);
     if (($br$0$ph$i | 0) == (-1 | 0)) {
      $tsize$0323944$i = $tsize$0$ph$i; //@line 13181
     } else {
      $tbase$255$i = $br$0$ph$i; //@line 13183
      $tsize$254$i = $ssize$2$i; //@line 13183
      label = 194; //@line 13184
      break L258;
     }
    }
   } while (0);
   HEAP32[1645] = HEAP32[1645] | 4; //@line 13191
   $tsize$1$i = $tsize$0323944$i; //@line 13192
   label = 191; //@line 13193
  } else {
   $tsize$1$i = 0; //@line 13195
   label = 191; //@line 13196
  }
 } while (0);
 if ((label | 0) == 191) {
  if ($550 >>> 0 < 2147483647) {
   $621 = _sbrk($550 | 0) | 0; //@line 13202
   $622 = _sbrk(0) | 0; //@line 13203
   if ($621 >>> 0 < $622 >>> 0 & (($621 | 0) != (-1 | 0) & ($622 | 0) != (-1 | 0))) {
    $628 = $622 - $621 | 0; //@line 13212
    $630 = $628 >>> 0 > ($nb$0 + 40 | 0) >>> 0; //@line 13214
    if ($630) {
     $tbase$255$i = $621; //@line 13217
     $tsize$254$i = $630 ? $628 : $tsize$1$i; //@line 13217
     label = 194; //@line 13218
    }
   }
  }
 }
 if ((label | 0) == 194) {
  $632 = (HEAP32[1642] | 0) + $tsize$254$i | 0; //@line 13225
  HEAP32[1642] = $632; //@line 13226
  if ($632 >>> 0 > (HEAP32[1643] | 0) >>> 0) {
   HEAP32[1643] = $632; //@line 13230
  }
  $635 = HEAP32[1540] | 0; //@line 13232
  L299 : do {
   if (!$635) {
    $637 = HEAP32[1538] | 0; //@line 13236
    if (($637 | 0) == 0 | $tbase$255$i >>> 0 < $637 >>> 0) {
     HEAP32[1538] = $tbase$255$i; //@line 13241
    }
    HEAP32[1646] = $tbase$255$i; //@line 13243
    HEAP32[1647] = $tsize$254$i; //@line 13244
    HEAP32[1649] = 0; //@line 13245
    HEAP32[1543] = HEAP32[1652]; //@line 13247
    HEAP32[1542] = -1; //@line 13248
    $i$02$i$i = 0; //@line 13249
    do {
     $641 = $i$02$i$i << 1; //@line 13251
     $642 = 6176 + ($641 << 2) | 0; //@line 13252
     HEAP32[6176 + ($641 + 3 << 2) >> 2] = $642; //@line 13255
     HEAP32[6176 + ($641 + 2 << 2) >> 2] = $642; //@line 13258
     $i$02$i$i = $i$02$i$i + 1 | 0; //@line 13259
    } while (($i$02$i$i | 0) != 32);
    $648 = $tbase$255$i + 8 | 0; //@line 13269
    $653 = ($648 & 7 | 0) == 0 ? 0 : 0 - $648 & 7; //@line 13274
    $655 = $tsize$254$i + -40 - $653 | 0; //@line 13276
    HEAP32[1540] = $tbase$255$i + $653; //@line 13277
    HEAP32[1537] = $655; //@line 13278
    HEAP32[$tbase$255$i + ($653 + 4) >> 2] = $655 | 1; //@line 13282
    HEAP32[$tbase$255$i + ($tsize$254$i + -36) >> 2] = 40; //@line 13285
    HEAP32[1541] = HEAP32[1656]; //@line 13287
   } else {
    $sp$084$i = 6584; //@line 13289
    do {
     $660 = HEAP32[$sp$084$i >> 2] | 0; //@line 13291
     $661 = $sp$084$i + 4 | 0; //@line 13292
     $662 = HEAP32[$661 >> 2] | 0; //@line 13293
     if (($tbase$255$i | 0) == ($660 + $662 | 0)) {
      $$lcssa222 = $660; //@line 13297
      $$lcssa224 = $661; //@line 13297
      $$lcssa226 = $662; //@line 13297
      $sp$084$i$lcssa = $sp$084$i; //@line 13297
      label = 204; //@line 13298
      break;
     }
     $sp$084$i = HEAP32[$sp$084$i + 8 >> 2] | 0; //@line 13302
    } while (($sp$084$i | 0) != 0);
    if ((label | 0) == 204) {
     if (!(HEAP32[$sp$084$i$lcssa + 12 >> 2] & 8)) {
      if ($635 >>> 0 < $tbase$255$i >>> 0 & $635 >>> 0 >= $$lcssa222 >>> 0) {
       HEAP32[$$lcssa224 >> 2] = $$lcssa226 + $tsize$254$i; //@line 13321
       $676 = (HEAP32[1537] | 0) + $tsize$254$i | 0; //@line 13323
       $678 = $635 + 8 | 0; //@line 13325
       $683 = ($678 & 7 | 0) == 0 ? 0 : 0 - $678 & 7; //@line 13330
       $685 = $676 - $683 | 0; //@line 13332
       HEAP32[1540] = $635 + $683; //@line 13333
       HEAP32[1537] = $685; //@line 13334
       HEAP32[$635 + ($683 + 4) >> 2] = $685 | 1; //@line 13338
       HEAP32[$635 + ($676 + 4) >> 2] = 40; //@line 13341
       HEAP32[1541] = HEAP32[1656]; //@line 13343
       break;
      }
     }
    }
    $690 = HEAP32[1538] | 0; //@line 13348
    if ($tbase$255$i >>> 0 < $690 >>> 0) {
     HEAP32[1538] = $tbase$255$i; //@line 13351
     $755 = $tbase$255$i; //@line 13352
    } else {
     $755 = $690; //@line 13354
    }
    $692 = $tbase$255$i + $tsize$254$i | 0; //@line 13356
    $sp$183$i = 6584; //@line 13357
    while (1) {
     if ((HEAP32[$sp$183$i >> 2] | 0) == ($692 | 0)) {
      $$lcssa219 = $sp$183$i; //@line 13362
      $sp$183$i$lcssa = $sp$183$i; //@line 13362
      label = 212; //@line 13363
      break;
     }
     $sp$183$i = HEAP32[$sp$183$i + 8 >> 2] | 0; //@line 13367
     if (!$sp$183$i) {
      $sp$0$i$i$i = 6584; //@line 13370
      break;
     }
    }
    if ((label | 0) == 212) {
     if (!(HEAP32[$sp$183$i$lcssa + 12 >> 2] & 8)) {
      HEAP32[$$lcssa219 >> 2] = $tbase$255$i; //@line 13382
      $702 = $sp$183$i$lcssa + 4 | 0; //@line 13383
      HEAP32[$702 >> 2] = (HEAP32[$702 >> 2] | 0) + $tsize$254$i; //@line 13386
      $706 = $tbase$255$i + 8 | 0; //@line 13388
      $711 = ($706 & 7 | 0) == 0 ? 0 : 0 - $706 & 7; //@line 13393
      $714 = $tbase$255$i + ($tsize$254$i + 8) | 0; //@line 13397
      $719 = ($714 & 7 | 0) == 0 ? 0 : 0 - $714 & 7; //@line 13402
      $720 = $tbase$255$i + ($719 + $tsize$254$i) | 0; //@line 13404
      $$sum$i19$i = $711 + $nb$0 | 0; //@line 13408
      $724 = $tbase$255$i + $$sum$i19$i | 0; //@line 13409
      $725 = $720 - ($tbase$255$i + $711) - $nb$0 | 0; //@line 13410
      HEAP32[$tbase$255$i + ($711 + 4) >> 2] = $nb$0 | 3; //@line 13414
      L324 : do {
       if (($720 | 0) == ($635 | 0)) {
        $730 = (HEAP32[1537] | 0) + $725 | 0; //@line 13419
        HEAP32[1537] = $730; //@line 13420
        HEAP32[1540] = $724; //@line 13421
        HEAP32[$tbase$255$i + ($$sum$i19$i + 4) >> 2] = $730 | 1; //@line 13425
       } else {
        if (($720 | 0) == (HEAP32[1539] | 0)) {
         $736 = (HEAP32[1536] | 0) + $725 | 0; //@line 13431
         HEAP32[1536] = $736; //@line 13432
         HEAP32[1539] = $724; //@line 13433
         HEAP32[$tbase$255$i + ($$sum$i19$i + 4) >> 2] = $736 | 1; //@line 13437
         HEAP32[$tbase$255$i + ($736 + $$sum$i19$i) >> 2] = $736; //@line 13440
         break;
        }
        $$sum2$i21$i = $tsize$254$i + 4 | 0; //@line 13443
        $741 = HEAP32[$tbase$255$i + ($$sum2$i21$i + $719) >> 2] | 0; //@line 13446
        if (($741 & 3 | 0) == 1) {
         $744 = $741 & -8; //@line 13450
         $745 = $741 >>> 3; //@line 13451
         L332 : do {
          if ($741 >>> 0 < 256) {
           $748 = HEAP32[$tbase$255$i + (($719 | 8) + $tsize$254$i) >> 2] | 0; //@line 13458
           $750 = HEAP32[$tbase$255$i + ($tsize$254$i + 12 + $719) >> 2] | 0; //@line 13462
           $752 = 6176 + ($745 << 1 << 2) | 0; //@line 13464
           do {
            if (($748 | 0) != ($752 | 0)) {
             if ($748 >>> 0 < $755 >>> 0) {
              _abort(); //@line 13470
             }
             if ((HEAP32[$748 + 12 >> 2] | 0) == ($720 | 0)) {
              break;
             }
             _abort(); //@line 13479
            }
           } while (0);
           if (($750 | 0) == ($748 | 0)) {
            HEAP32[1534] = HEAP32[1534] & ~(1 << $745); //@line 13489
            break;
           }
           do {
            if (($750 | 0) == ($752 | 0)) {
             $$pre$phi58$i$iZ2D = $750 + 8 | 0; //@line 13496
            } else {
             if ($750 >>> 0 < $755 >>> 0) {
              _abort(); //@line 13500
             }
             $766 = $750 + 8 | 0; //@line 13503
             if ((HEAP32[$766 >> 2] | 0) == ($720 | 0)) {
              $$pre$phi58$i$iZ2D = $766; //@line 13507
              break;
             }
             _abort(); //@line 13510
            }
           } while (0);
           HEAP32[$748 + 12 >> 2] = $750; //@line 13515
           HEAP32[$$pre$phi58$i$iZ2D >> 2] = $748; //@line 13516
          } else {
           $771 = HEAP32[$tbase$255$i + (($719 | 24) + $tsize$254$i) >> 2] | 0; //@line 13521
           $773 = HEAP32[$tbase$255$i + ($tsize$254$i + 12 + $719) >> 2] | 0; //@line 13525
           do {
            if (($773 | 0) == ($720 | 0)) {
             $$sum67$i$i = $719 | 16; //@line 13529
             $784 = $tbase$255$i + ($$sum2$i21$i + $$sum67$i$i) | 0; //@line 13531
             $785 = HEAP32[$784 >> 2] | 0; //@line 13532
             if (!$785) {
              $787 = $tbase$255$i + ($$sum67$i$i + $tsize$254$i) | 0; //@line 13536
              $788 = HEAP32[$787 >> 2] | 0; //@line 13537
              if (!$788) {
               $R$1$i$i = 0; //@line 13540
               break;
              } else {
               $R$0$i$i = $788; //@line 13543
               $RP$0$i$i = $787; //@line 13543
              }
             } else {
              $R$0$i$i = $785; //@line 13546
              $RP$0$i$i = $784; //@line 13546
             }
             while (1) {
              $790 = $R$0$i$i + 20 | 0; //@line 13549
              $791 = HEAP32[$790 >> 2] | 0; //@line 13550
              if ($791) {
               $R$0$i$i = $791; //@line 13553
               $RP$0$i$i = $790; //@line 13553
               continue;
              }
              $793 = $R$0$i$i + 16 | 0; //@line 13556
              $794 = HEAP32[$793 >> 2] | 0; //@line 13557
              if (!$794) {
               $R$0$i$i$lcssa = $R$0$i$i; //@line 13560
               $RP$0$i$i$lcssa = $RP$0$i$i; //@line 13560
               break;
              } else {
               $R$0$i$i = $794; //@line 13563
               $RP$0$i$i = $793; //@line 13563
              }
             }
             if ($RP$0$i$i$lcssa >>> 0 < $755 >>> 0) {
              _abort(); //@line 13568
             } else {
              HEAP32[$RP$0$i$i$lcssa >> 2] = 0; //@line 13571
              $R$1$i$i = $R$0$i$i$lcssa; //@line 13572
              break;
             }
            } else {
             $776 = HEAP32[$tbase$255$i + (($719 | 8) + $tsize$254$i) >> 2] | 0; //@line 13579
             if ($776 >>> 0 < $755 >>> 0) {
              _abort(); //@line 13582
             }
             $778 = $776 + 12 | 0; //@line 13585
             if ((HEAP32[$778 >> 2] | 0) != ($720 | 0)) {
              _abort(); //@line 13589
             }
             $781 = $773 + 8 | 0; //@line 13592
             if ((HEAP32[$781 >> 2] | 0) == ($720 | 0)) {
              HEAP32[$778 >> 2] = $773; //@line 13596
              HEAP32[$781 >> 2] = $776; //@line 13597
              $R$1$i$i = $773; //@line 13598
              break;
             } else {
              _abort(); //@line 13601
             }
            }
           } while (0);
           if (!$771) {
            break;
           }
           $799 = HEAP32[$tbase$255$i + ($tsize$254$i + 28 + $719) >> 2] | 0; //@line 13613
           $800 = 6440 + ($799 << 2) | 0; //@line 13614
           do {
            if (($720 | 0) == (HEAP32[$800 >> 2] | 0)) {
             HEAP32[$800 >> 2] = $R$1$i$i; //@line 13619
             if ($R$1$i$i) {
              break;
             }
             HEAP32[1535] = HEAP32[1535] & ~(1 << $799); //@line 13628
             break L332;
            } else {
             if ($771 >>> 0 < (HEAP32[1538] | 0) >>> 0) {
              _abort(); //@line 13634
             }
             $809 = $771 + 16 | 0; //@line 13637
             if ((HEAP32[$809 >> 2] | 0) == ($720 | 0)) {
              HEAP32[$809 >> 2] = $R$1$i$i; //@line 13641
             } else {
              HEAP32[$771 + 20 >> 2] = $R$1$i$i; //@line 13644
             }
             if (!$R$1$i$i) {
              break L332;
             }
            }
           } while (0);
           $814 = HEAP32[1538] | 0; //@line 13652
           if ($R$1$i$i >>> 0 < $814 >>> 0) {
            _abort(); //@line 13655
           }
           HEAP32[$R$1$i$i + 24 >> 2] = $771; //@line 13659
           $$sum3132$i$i = $719 | 16; //@line 13660
           $818 = HEAP32[$tbase$255$i + ($$sum3132$i$i + $tsize$254$i) >> 2] | 0; //@line 13663
           do {
            if ($818) {
             if ($818 >>> 0 < $814 >>> 0) {
              _abort(); //@line 13669
             } else {
              HEAP32[$R$1$i$i + 16 >> 2] = $818; //@line 13673
              HEAP32[$818 + 24 >> 2] = $R$1$i$i; //@line 13675
              break;
             }
            }
           } while (0);
           $824 = HEAP32[$tbase$255$i + ($$sum2$i21$i + $$sum3132$i$i) >> 2] | 0; //@line 13682
           if (!$824) {
            break;
           }
           if ($824 >>> 0 < (HEAP32[1538] | 0) >>> 0) {
            _abort(); //@line 13690
           } else {
            HEAP32[$R$1$i$i + 20 >> 2] = $824; //@line 13694
            HEAP32[$824 + 24 >> 2] = $R$1$i$i; //@line 13696
            break;
           }
          }
         } while (0);
         $oldfirst$0$i$i = $tbase$255$i + (($744 | $719) + $tsize$254$i) | 0; //@line 13705
         $qsize$0$i$i = $744 + $725 | 0; //@line 13705
        } else {
         $oldfirst$0$i$i = $720; //@line 13707
         $qsize$0$i$i = $725; //@line 13707
        }
        $832 = $oldfirst$0$i$i + 4 | 0; //@line 13709
        HEAP32[$832 >> 2] = HEAP32[$832 >> 2] & -2; //@line 13712
        HEAP32[$tbase$255$i + ($$sum$i19$i + 4) >> 2] = $qsize$0$i$i | 1; //@line 13716
        HEAP32[$tbase$255$i + ($qsize$0$i$i + $$sum$i19$i) >> 2] = $qsize$0$i$i; //@line 13719
        $838 = $qsize$0$i$i >>> 3; //@line 13720
        if ($qsize$0$i$i >>> 0 < 256) {
         $840 = $838 << 1; //@line 13723
         $841 = 6176 + ($840 << 2) | 0; //@line 13724
         $842 = HEAP32[1534] | 0; //@line 13725
         $843 = 1 << $838; //@line 13726
         do {
          if (!($842 & $843)) {
           HEAP32[1534] = $842 | $843; //@line 13732
           $$pre$phi$i23$iZ2D = 6176 + ($840 + 2 << 2) | 0; //@line 13735
           $F4$0$i$i = $841; //@line 13735
          } else {
           $847 = 6176 + ($840 + 2 << 2) | 0; //@line 13738
           $848 = HEAP32[$847 >> 2] | 0; //@line 13739
           if ($848 >>> 0 >= (HEAP32[1538] | 0) >>> 0) {
            $$pre$phi$i23$iZ2D = $847; //@line 13743
            $F4$0$i$i = $848; //@line 13743
            break;
           }
           _abort(); //@line 13746
          }
         } while (0);
         HEAP32[$$pre$phi$i23$iZ2D >> 2] = $724; //@line 13750
         HEAP32[$F4$0$i$i + 12 >> 2] = $724; //@line 13752
         HEAP32[$tbase$255$i + ($$sum$i19$i + 8) >> 2] = $F4$0$i$i; //@line 13755
         HEAP32[$tbase$255$i + ($$sum$i19$i + 12) >> 2] = $841; //@line 13758
         break;
        }
        $854 = $qsize$0$i$i >>> 8; //@line 13761
        do {
         if (!$854) {
          $I7$0$i$i = 0; //@line 13765
         } else {
          if ($qsize$0$i$i >>> 0 > 16777215) {
           $I7$0$i$i = 31; //@line 13769
           break;
          }
          $859 = ($854 + 1048320 | 0) >>> 16 & 8; //@line 13774
          $860 = $854 << $859; //@line 13775
          $863 = ($860 + 520192 | 0) >>> 16 & 4; //@line 13778
          $865 = $860 << $863; //@line 13780
          $868 = ($865 + 245760 | 0) >>> 16 & 2; //@line 13783
          $873 = 14 - ($863 | $859 | $868) + ($865 << $868 >>> 15) | 0; //@line 13788
          $I7$0$i$i = $qsize$0$i$i >>> ($873 + 7 | 0) & 1 | $873 << 1; //@line 13794
         }
        } while (0);
        $879 = 6440 + ($I7$0$i$i << 2) | 0; //@line 13797
        HEAP32[$tbase$255$i + ($$sum$i19$i + 28) >> 2] = $I7$0$i$i; //@line 13800
        HEAP32[$tbase$255$i + ($$sum$i19$i + 20) >> 2] = 0; //@line 13805
        HEAP32[$tbase$255$i + ($$sum$i19$i + 16) >> 2] = 0; //@line 13806
        $883 = HEAP32[1535] | 0; //@line 13807
        $884 = 1 << $I7$0$i$i; //@line 13808
        if (!($883 & $884)) {
         HEAP32[1535] = $883 | $884; //@line 13813
         HEAP32[$879 >> 2] = $724; //@line 13814
         HEAP32[$tbase$255$i + ($$sum$i19$i + 24) >> 2] = $879; //@line 13817
         HEAP32[$tbase$255$i + ($$sum$i19$i + 12) >> 2] = $724; //@line 13820
         HEAP32[$tbase$255$i + ($$sum$i19$i + 8) >> 2] = $724; //@line 13823
         break;
        }
        $891 = HEAP32[$879 >> 2] | 0; //@line 13826
        L418 : do {
         if ((HEAP32[$891 + 4 >> 2] & -8 | 0) == ($qsize$0$i$i | 0)) {
          $T$0$lcssa$i25$i = $891; //@line 13833
         } else {
          $K8$051$i$i = $qsize$0$i$i << (($I7$0$i$i | 0) == 31 ? 0 : 25 - ($I7$0$i$i >>> 1) | 0); //@line 13840
          $T$050$i$i = $891; //@line 13840
          while (1) {
           $908 = $T$050$i$i + 16 + ($K8$051$i$i >>> 31 << 2) | 0; //@line 13843
           $903 = HEAP32[$908 >> 2] | 0; //@line 13844
           if (!$903) {
            $$lcssa = $908; //@line 13847
            $T$050$i$i$lcssa = $T$050$i$i; //@line 13847
            break;
           }
           if ((HEAP32[$903 + 4 >> 2] & -8 | 0) == ($qsize$0$i$i | 0)) {
            $T$0$lcssa$i25$i = $903; //@line 13856
            break L418;
           } else {
            $K8$051$i$i = $K8$051$i$i << 1; //@line 13859
            $T$050$i$i = $903; //@line 13859
           }
          }
          if ($$lcssa >>> 0 < (HEAP32[1538] | 0) >>> 0) {
           _abort(); //@line 13865
          } else {
           HEAP32[$$lcssa >> 2] = $724; //@line 13868
           HEAP32[$tbase$255$i + ($$sum$i19$i + 24) >> 2] = $T$050$i$i$lcssa; //@line 13871
           HEAP32[$tbase$255$i + ($$sum$i19$i + 12) >> 2] = $724; //@line 13874
           HEAP32[$tbase$255$i + ($$sum$i19$i + 8) >> 2] = $724; //@line 13877
           break L324;
          }
         }
        } while (0);
        $915 = $T$0$lcssa$i25$i + 8 | 0; //@line 13882
        $916 = HEAP32[$915 >> 2] | 0; //@line 13883
        $917 = HEAP32[1538] | 0; //@line 13884
        if ($916 >>> 0 >= $917 >>> 0 & $T$0$lcssa$i25$i >>> 0 >= $917 >>> 0) {
         HEAP32[$916 + 12 >> 2] = $724; //@line 13890
         HEAP32[$915 >> 2] = $724; //@line 13891
         HEAP32[$tbase$255$i + ($$sum$i19$i + 8) >> 2] = $916; //@line 13894
         HEAP32[$tbase$255$i + ($$sum$i19$i + 12) >> 2] = $T$0$lcssa$i25$i; //@line 13897
         HEAP32[$tbase$255$i + ($$sum$i19$i + 24) >> 2] = 0; //@line 13900
         break;
        } else {
         _abort(); //@line 13903
        }
       }
      } while (0);
      $mem$0 = $tbase$255$i + ($711 | 8) | 0; //@line 13910
      return $mem$0 | 0; //@line 13911
     } else {
      $sp$0$i$i$i = 6584; //@line 13913
     }
    }
    while (1) {
     $925 = HEAP32[$sp$0$i$i$i >> 2] | 0; //@line 13917
     if ($925 >>> 0 <= $635 >>> 0) {
      $928 = HEAP32[$sp$0$i$i$i + 4 >> 2] | 0; //@line 13921
      $929 = $925 + $928 | 0; //@line 13922
      if ($929 >>> 0 > $635 >>> 0) {
       $$lcssa215 = $925; //@line 13925
       $$lcssa216 = $928; //@line 13925
       $$lcssa217 = $929; //@line 13925
       break;
      }
     }
     $sp$0$i$i$i = HEAP32[$sp$0$i$i$i + 8 >> 2] | 0; //@line 13931
    }
    $934 = $$lcssa215 + ($$lcssa216 + -39) | 0; //@line 13936
    $940 = $$lcssa215 + ($$lcssa216 + -47 + (($934 & 7 | 0) == 0 ? 0 : 0 - $934 & 7)) | 0; //@line 13943
    $941 = $635 + 16 | 0; //@line 13944
    $943 = $940 >>> 0 < $941 >>> 0 ? $635 : $940; //@line 13946
    $944 = $943 + 8 | 0; //@line 13947
    $947 = $tbase$255$i + 8 | 0; //@line 13950
    $952 = ($947 & 7 | 0) == 0 ? 0 : 0 - $947 & 7; //@line 13955
    $954 = $tsize$254$i + -40 - $952 | 0; //@line 13957
    HEAP32[1540] = $tbase$255$i + $952; //@line 13958
    HEAP32[1537] = $954; //@line 13959
    HEAP32[$tbase$255$i + ($952 + 4) >> 2] = $954 | 1; //@line 13963
    HEAP32[$tbase$255$i + ($tsize$254$i + -36) >> 2] = 40; //@line 13966
    HEAP32[1541] = HEAP32[1656]; //@line 13968
    $959 = $943 + 4 | 0; //@line 13969
    HEAP32[$959 >> 2] = 27; //@line 13970
    HEAP32[$944 >> 2] = HEAP32[1646]; //@line 13971
    HEAP32[$944 + 4 >> 2] = HEAP32[1647]; //@line 13971
    HEAP32[$944 + 8 >> 2] = HEAP32[1648]; //@line 13971
    HEAP32[$944 + 12 >> 2] = HEAP32[1649]; //@line 13971
    HEAP32[1646] = $tbase$255$i; //@line 13972
    HEAP32[1647] = $tsize$254$i; //@line 13973
    HEAP32[1649] = 0; //@line 13974
    HEAP32[1648] = $944; //@line 13975
    $960 = $943 + 28 | 0; //@line 13976
    HEAP32[$960 >> 2] = 7; //@line 13977
    if (($943 + 32 | 0) >>> 0 < $$lcssa217 >>> 0) {
     $964 = $960; //@line 13981
     do {
      $964$looptemp = $964;
      $964 = $964 + 4 | 0; //@line 13983
      HEAP32[$964 >> 2] = 7; //@line 13984
     } while (($964$looptemp + 8 | 0) >>> 0 < $$lcssa217 >>> 0);
    }
    if (($943 | 0) != ($635 | 0)) {
     $970 = $943 - $635 | 0; //@line 13998
     HEAP32[$959 >> 2] = HEAP32[$959 >> 2] & -2; //@line 14001
     HEAP32[$635 + 4 >> 2] = $970 | 1; //@line 14004
     HEAP32[$943 >> 2] = $970; //@line 14005
     $975 = $970 >>> 3; //@line 14006
     if ($970 >>> 0 < 256) {
      $977 = $975 << 1; //@line 14009
      $978 = 6176 + ($977 << 2) | 0; //@line 14010
      $979 = HEAP32[1534] | 0; //@line 14011
      $980 = 1 << $975; //@line 14012
      if (!($979 & $980)) {
       HEAP32[1534] = $979 | $980; //@line 14017
       $$pre$phi$i$iZ2D = 6176 + ($977 + 2 << 2) | 0; //@line 14020
       $F$0$i$i = $978; //@line 14020
      } else {
       $984 = 6176 + ($977 + 2 << 2) | 0; //@line 14023
       $985 = HEAP32[$984 >> 2] | 0; //@line 14024
       if ($985 >>> 0 < (HEAP32[1538] | 0) >>> 0) {
        _abort(); //@line 14028
       } else {
        $$pre$phi$i$iZ2D = $984; //@line 14031
        $F$0$i$i = $985; //@line 14031
       }
      }
      HEAP32[$$pre$phi$i$iZ2D >> 2] = $635; //@line 14034
      HEAP32[$F$0$i$i + 12 >> 2] = $635; //@line 14036
      HEAP32[$635 + 8 >> 2] = $F$0$i$i; //@line 14038
      HEAP32[$635 + 12 >> 2] = $978; //@line 14040
      break;
     }
     $991 = $970 >>> 8; //@line 14043
     if (!$991) {
      $I1$0$i$i = 0; //@line 14046
     } else {
      if ($970 >>> 0 > 16777215) {
       $I1$0$i$i = 31; //@line 14050
      } else {
       $996 = ($991 + 1048320 | 0) >>> 16 & 8; //@line 14054
       $997 = $991 << $996; //@line 14055
       $1000 = ($997 + 520192 | 0) >>> 16 & 4; //@line 14058
       $1002 = $997 << $1000; //@line 14060
       $1005 = ($1002 + 245760 | 0) >>> 16 & 2; //@line 14063
       $1010 = 14 - ($1000 | $996 | $1005) + ($1002 << $1005 >>> 15) | 0; //@line 14068
       $I1$0$i$i = $970 >>> ($1010 + 7 | 0) & 1 | $1010 << 1; //@line 14074
      }
     }
     $1016 = 6440 + ($I1$0$i$i << 2) | 0; //@line 14077
     HEAP32[$635 + 28 >> 2] = $I1$0$i$i; //@line 14079
     HEAP32[$635 + 20 >> 2] = 0; //@line 14081
     HEAP32[$941 >> 2] = 0; //@line 14082
     $1019 = HEAP32[1535] | 0; //@line 14083
     $1020 = 1 << $I1$0$i$i; //@line 14084
     if (!($1019 & $1020)) {
      HEAP32[1535] = $1019 | $1020; //@line 14089
      HEAP32[$1016 >> 2] = $635; //@line 14090
      HEAP32[$635 + 24 >> 2] = $1016; //@line 14092
      HEAP32[$635 + 12 >> 2] = $635; //@line 14094
      HEAP32[$635 + 8 >> 2] = $635; //@line 14096
      break;
     }
     $1027 = HEAP32[$1016 >> 2] | 0; //@line 14099
     L459 : do {
      if ((HEAP32[$1027 + 4 >> 2] & -8 | 0) == ($970 | 0)) {
       $T$0$lcssa$i$i = $1027; //@line 14106
      } else {
       $K2$07$i$i = $970 << (($I1$0$i$i | 0) == 31 ? 0 : 25 - ($I1$0$i$i >>> 1) | 0); //@line 14113
       $T$06$i$i = $1027; //@line 14113
       while (1) {
        $1044 = $T$06$i$i + 16 + ($K2$07$i$i >>> 31 << 2) | 0; //@line 14116
        $1039 = HEAP32[$1044 >> 2] | 0; //@line 14117
        if (!$1039) {
         $$lcssa211 = $1044; //@line 14120
         $T$06$i$i$lcssa = $T$06$i$i; //@line 14120
         break;
        }
        if ((HEAP32[$1039 + 4 >> 2] & -8 | 0) == ($970 | 0)) {
         $T$0$lcssa$i$i = $1039; //@line 14129
         break L459;
        } else {
         $K2$07$i$i = $K2$07$i$i << 1; //@line 14132
         $T$06$i$i = $1039; //@line 14132
        }
       }
       if ($$lcssa211 >>> 0 < (HEAP32[1538] | 0) >>> 0) {
        _abort(); //@line 14138
       } else {
        HEAP32[$$lcssa211 >> 2] = $635; //@line 14141
        HEAP32[$635 + 24 >> 2] = $T$06$i$i$lcssa; //@line 14143
        HEAP32[$635 + 12 >> 2] = $635; //@line 14145
        HEAP32[$635 + 8 >> 2] = $635; //@line 14147
        break L299;
       }
      }
     } while (0);
     $1051 = $T$0$lcssa$i$i + 8 | 0; //@line 14152
     $1052 = HEAP32[$1051 >> 2] | 0; //@line 14153
     $1053 = HEAP32[1538] | 0; //@line 14154
     if ($1052 >>> 0 >= $1053 >>> 0 & $T$0$lcssa$i$i >>> 0 >= $1053 >>> 0) {
      HEAP32[$1052 + 12 >> 2] = $635; //@line 14160
      HEAP32[$1051 >> 2] = $635; //@line 14161
      HEAP32[$635 + 8 >> 2] = $1052; //@line 14163
      HEAP32[$635 + 12 >> 2] = $T$0$lcssa$i$i; //@line 14165
      HEAP32[$635 + 24 >> 2] = 0; //@line 14167
      break;
     } else {
      _abort(); //@line 14170
     }
    }
   }
  } while (0);
  $1060 = HEAP32[1537] | 0; //@line 14176
  if ($1060 >>> 0 > $nb$0 >>> 0) {
   $1062 = $1060 - $nb$0 | 0; //@line 14179
   HEAP32[1537] = $1062; //@line 14180
   $1063 = HEAP32[1540] | 0; //@line 14181
   HEAP32[1540] = $1063 + $nb$0; //@line 14183
   HEAP32[$1063 + ($nb$0 + 4) >> 2] = $1062 | 1; //@line 14187
   HEAP32[$1063 + 4 >> 2] = $nb$0 | 3; //@line 14190
   $mem$0 = $1063 + 8 | 0; //@line 14192
   return $mem$0 | 0; //@line 14193
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12; //@line 14197
 $mem$0 = 0; //@line 14198
 return $mem$0 | 0; //@line 14199
}
function ___floatscan($f, $prec, $pok) {
 $f = $f | 0;
 $prec = $prec | 0;
 $pok = $pok | 0;
 var $$0 = 0.0, $$0$i27 = 0.0, $$010$i = 0, $$07$i = 0, $$0710$i = 0, $$0711$i = 0, $$09$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$18$i = 0, $$2$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3105$i = 0, $$in = 0, $$lcssa = 0, $$lcssa256 = 0, $$lcssa256$lcssa = 0, $$lcssa257 = 0, $$lcssa257$lcssa = 0, $$lcssa263 = 0, $$lcssa264 = 0, $$lcssa265 = 0, $$lcssa275 = 0, $$not$i = 0, $$pre$i = 0, $$pre$i17 = 0, $$pre$phi42$iZ2D = 0.0, $$sink$off0$i = 0, $0 = 0, $1 = 0, $115 = 0, $123 = 0, $125 = 0, $132 = 0, $139 = 0, $147 = 0, $15 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $159 = 0, $16 = 0, $160 = 0, $164 = 0, $169 = 0, $171 = 0, $183 = 0.0, $190 = 0, $192 = 0, $2 = 0, $201 = 0, $205 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $223 = 0, $224 = 0, $225 = 0, $235 = 0, $236 = 0, $249 = 0, $251 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $270 = 0, $272 = 0, $283 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $295 = 0, $297 = 0, $298 = 0, $299 = 0, $300 = 0, $310 = 0.0, $322 = 0.0, $330 = 0, $331 = 0, $338 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $358 = 0, $36 = 0, $360 = 0, $362 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $371 = 0, $376 = 0, $377 = 0, $381 = 0, $39 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $402 = 0, $403 = 0, $412 = 0, $413 = 0, $414 = 0, $42 = 0, $422 = 0, $427 = 0, $428 = 0, $430 = 0, $431 = 0, $444 = 0, $446 = 0, $456 = 0, $458 = 0, $470 = 0, $471 = 0, $472 = 0, $494 = 0, $506 = 0, $510 = 0, $513 = 0, $515 = 0, $516 = 0, $517 = 0, $520 = 0, $521 = 0, $533 = 0, $534 = 0, $535 = 0, $539 = 0, $541 = 0, $543 = 0, $544 = 0, $550 = 0, $552 = 0, $557 = 0, $560 = 0, $564 = 0, $567 = 0, $572 = 0, $576 = 0, $577 = 0, $579 = 0, $583 = 0, $585 = 0, $588 = 0, $589 = 0, $590 = 0, $591 = 0, $594 = 0, $595 = 0, $60 = 0, $604 = 0, $609 = 0, $610 = 0, $617 = 0, $619 = 0.0, $621 = 0, $625 = 0.0, $626 = 0.0, $629 = 0.0, $633 = 0, $636 = 0, $643 = 0.0, $661 = 0.0, $663 = 0, $669 = 0, $67 = 0, $670 = 0, $680 = 0, $69 = 0, $691 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $77 = 0, $82 = 0, $9 = 0, $90 = 0, $99 = 0, $a$0$lcssa151$i = 0, $a$085$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph38$i = 0, $a$3$i = 0, $a$3$i$lcssa248 = 0, $a$3$i249 = 0, $a$3$ph$i = 0, $a$3$ph157$i = 0, $a$478$i = 0, $a$5$i = 0, $a$5$i$lcssa = 0, $a$5$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i25 = 0.0, $bits$0$ph = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$179 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$377 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $carry$087$i = 0, $carry1$0$i = 0, $carry1$1$i = 0, $carry1$1$i$lcssa = 0, $carry1$1$i$lcssa$lcssa = 0, $carry3$081$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$2$i = 0, $e2$0$i19 = 0, $e2$0$ph$i = 0, $e2$1$i = 0, $e2$1$i246 = 0, $e2$1$ph$i = 0, $e2$1$ph156$i = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i$lcssa242 = 0, $gotdig$0$i12 = 0, $gotdig$0$i12$lcssa273 = 0, $gotdig$2$i = 0, $gotdig$2$i$lcssa = 0, $gotdig$2$i13 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3101$i = 0, $gotdig$3101$i$lcssa = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i$lcssa = 0, $gotrad$0$i14 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1102$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$078 = 0, $i$1 = 0, $i$276 = 0, $i$3 = 0, $i$4 = 0, $i$4$lcssa = 0, $j$0$lcssa$i = 0, $j$0104$i = 0, $j$0104$i$lcssa = 0, $j$067$i = 0, $j$068$i = 0, $j$069$i = 0, $j$2$i = 0, $j$394$i = 0, $k$0$lcssa$i = 0, $k$0103$i = 0, $k$0103$i$lcssa = 0, $k$063$i = 0, $k$064$i = 0, $k$065$i = 0, $k$2$i = 0, $k$3$i = 0, $k$486$i = 0, $k$5$i = 0, $k$5$in$i = 0, $k$679$i = 0, $lnz$0$lcssa$i = 0, $lnz$0100$i = 0, $lnz$0100$i$lcssa = 0, $lnz$057$i = 0, $lnz$058$i = 0, $lnz$059$i = 0, $lnz$2$i = 0, $or$cond16$i = 0, $or$cond19$i = 0, $or$cond9$i = 0, $rp$0$lcssa152$i = 0, $rp$084$i = 0, $rp$1$i18 = 0, $rp$1$i18$lcssa = 0, $rp$2$ph36$i = 0, $rp$3$ph$i = 0, $rp$3$ph34$i = 0, $rp$477$i = 0, $rp$5$i = 0, $rp$5$i$lcssa = 0, $rp$5$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$324$i = 0, $x$4$lcssa$i = 0, $x$419$i = 0, $x$5$i = 0, $x$i = 0, $y$0$i = 0.0, $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i24 = 0.0, $y$2$i = 0.0, $y$2$i26 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$320$i = 0.0, $y$4$i = 0.0, $z$0$i = 0, $z$1$i = 0, $z$1$ph37$i = 0, $z$2$i = 0, $z$3$i = 0, $z$3$i$lcssa = 0, $z$3$i$lcssa$lcssa = 0, $z$4$i = 0, $z$5$ph$i = 0, $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2261
 STACKTOP = STACKTOP + 512 | 0; //@line 2262
 $x$i = sp; //@line 2263
 switch ($prec | 0) {
 case 0:
  {
   $bits$0$ph = 24; //@line 2266
   $emin$0$ph = -149; //@line 2266
   label = 4; //@line 2267
   break;
  }
 case 1:
  {
   $bits$0$ph = 53; //@line 2271
   $emin$0$ph = -1074; //@line 2271
   label = 4; //@line 2272
   break;
  }
 case 2:
  {
   $bits$0$ph = 53; //@line 2276
   $emin$0$ph = -1074; //@line 2276
   label = 4; //@line 2277
   break;
  }
 default:
  {
   $$0 = 0.0; //@line 2281
  }
 }
 L4 : do {
  if ((label | 0) == 4) {
   $0 = $f + 4 | 0; //@line 2286
   $1 = $f + 100 | 0; //@line 2287
   do {
    $2 = HEAP32[$0 >> 2] | 0; //@line 2289
    if ($2 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $2 + 1; //@line 2294
     $9 = HEAPU8[$2 >> 0] | 0; //@line 2297
    } else {
     $9 = ___shgetc($f) | 0; //@line 2300
    }
   } while ((_isspace($9) | 0) != 0);
   $$lcssa275 = $9; //@line 2305
   L13 : do {
    switch ($$lcssa275 | 0) {
    case 43:
    case 45:
     {
      $15 = 1 - ((($$lcssa275 | 0) == 45 & 1) << 1) | 0; //@line 2315
      $16 = HEAP32[$0 >> 2] | 0; //@line 2316
      if ($16 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
       HEAP32[$0 >> 2] = $16 + 1; //@line 2321
       $c$0 = HEAPU8[$16 >> 0] | 0; //@line 2324
       $sign$0 = $15; //@line 2324
       break L13;
      } else {
       $c$0 = ___shgetc($f) | 0; //@line 2328
       $sign$0 = $15; //@line 2328
       break L13;
      }
      break;
     }
    default:
     {
      $c$0 = $$lcssa275; //@line 2334
      $sign$0 = 1; //@line 2334
     }
    }
   } while (0);
   $c$179 = $c$0; //@line 2338
   $i$078 = 0; //@line 2338
   while (1) {
    if (($c$179 | 32 | 0) != (HEAP8[16784 + $i$078 >> 0] | 0)) {
     $c$1$lcssa = $c$179; //@line 2346
     $i$0$lcssa = $i$078; //@line 2346
     break;
    }
    do {
     if ($i$078 >>> 0 < 7) {
      $29 = HEAP32[$0 >> 2] | 0; //@line 2352
      if ($29 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
       HEAP32[$0 >> 2] = $29 + 1; //@line 2357
       $c$2 = HEAPU8[$29 >> 0] | 0; //@line 2360
       break;
      } else {
       $c$2 = ___shgetc($f) | 0; //@line 2364
       break;
      }
     } else {
      $c$2 = $c$179; //@line 2368
     }
    } while (0);
    $36 = $i$078 + 1 | 0; //@line 2371
    if ($36 >>> 0 < 8) {
     $c$179 = $c$2; //@line 2374
     $i$078 = $36; //@line 2374
    } else {
     $c$1$lcssa = $c$2; //@line 2376
     $i$0$lcssa = $36; //@line 2376
     break;
    }
   }
   L29 : do {
    switch ($i$0$lcssa | 0) {
    case 8:
     {
      break;
     }
    case 3:
     {
      label = 23; //@line 2386
      break;
     }
    default:
     {
      $39 = ($pok | 0) != 0; //@line 2391
      if ($39 & $i$0$lcssa >>> 0 > 3) {
       if (($i$0$lcssa | 0) == 8) {
        break L29;
       } else {
        label = 23; //@line 2398
        break L29;
       }
      }
      L34 : do {
       if (!$i$0$lcssa) {
        $c$377 = $c$1$lcssa; //@line 2405
        $i$276 = 0; //@line 2405
        while (1) {
         if (($c$377 | 32 | 0) != (HEAP8[19661 + $i$276 >> 0] | 0)) {
          $c$5 = $c$377; //@line 2413
          $i$3 = $i$276; //@line 2413
          break L34;
         }
         do {
          if ($i$276 >>> 0 < 2) {
           $60 = HEAP32[$0 >> 2] | 0; //@line 2419
           if ($60 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
            HEAP32[$0 >> 2] = $60 + 1; //@line 2424
            $c$4 = HEAPU8[$60 >> 0] | 0; //@line 2427
            break;
           } else {
            $c$4 = ___shgetc($f) | 0; //@line 2431
            break;
           }
          } else {
           $c$4 = $c$377; //@line 2435
          }
         } while (0);
         $67 = $i$276 + 1 | 0; //@line 2438
         if ($67 >>> 0 < 3) {
          $c$377 = $c$4; //@line 2441
          $i$276 = $67; //@line 2441
         } else {
          $c$5 = $c$4; //@line 2443
          $i$3 = $67; //@line 2443
          break;
         }
        }
       } else {
        $c$5 = $c$1$lcssa; //@line 2448
        $i$3 = $i$0$lcssa; //@line 2448
       }
      } while (0);
      switch ($i$3 | 0) {
      case 3:
       {
        $69 = HEAP32[$0 >> 2] | 0; //@line 2453
        if ($69 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
         HEAP32[$0 >> 2] = $69 + 1; //@line 2458
         $77 = HEAPU8[$69 >> 0] | 0; //@line 2461
        } else {
         $77 = ___shgetc($f) | 0; //@line 2464
        }
        if (($77 | 0) == 40) {
         $i$4 = 1; //@line 2468
        } else {
         if (!(HEAP32[$1 >> 2] | 0)) {
          $$0 = nan; //@line 2473
          break L4;
         }
         HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1; //@line 2478
         $$0 = nan; //@line 2479
         break L4;
        }
        while (1) {
         $82 = HEAP32[$0 >> 2] | 0; //@line 2483
         if ($82 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
          HEAP32[$0 >> 2] = $82 + 1; //@line 2488
          $90 = HEAPU8[$82 >> 0] | 0; //@line 2491
         } else {
          $90 = ___shgetc($f) | 0; //@line 2494
         }
         if (!(($90 + -48 | 0) >>> 0 < 10 | ($90 + -65 | 0) >>> 0 < 26)) {
          if (!(($90 | 0) == 95 | ($90 + -97 | 0) >>> 0 < 26)) {
           $$lcssa = $90; //@line 2507
           $i$4$lcssa = $i$4; //@line 2507
           break;
          }
         }
         $i$4 = $i$4 + 1 | 0; //@line 2512
        }
        if (($$lcssa | 0) == 41) {
         $$0 = nan; //@line 2516
         break L4;
        }
        $99 = (HEAP32[$1 >> 2] | 0) == 0; //@line 2520
        if (!$99) {
         HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1; //@line 2524
        }
        if (!$39) {
         HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 2528
         ___shlim($f, 0); //@line 2529
         $$0 = 0.0; //@line 2530
         break L4;
        }
        if (!$i$4$lcssa) {
         $$0 = nan; //@line 2535
         break L4;
        } else {
         $$in = $i$4$lcssa; //@line 2538
        }
        while (1) {
         $$in = $$in + -1 | 0; //@line 2541
         if (!$99) {
          HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1; //@line 2545
         }
         if (!$$in) {
          $$0 = nan; //@line 2549
          break L4;
         }
        }
        break;
       }
      case 0:
       {
        do {
         if (($c$5 | 0) == 48) {
          $115 = HEAP32[$0 >> 2] | 0; //@line 2561
          if ($115 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
           HEAP32[$0 >> 2] = $115 + 1; //@line 2566
           $123 = HEAPU8[$115 >> 0] | 0; //@line 2569
          } else {
           $123 = ___shgetc($f) | 0; //@line 2572
          }
          if (($123 | 32 | 0) != 120) {
           if (!(HEAP32[$1 >> 2] | 0)) {
            $c$6 = 48; //@line 2580
            break;
           }
           HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1; //@line 2585
           $c$6 = 48; //@line 2586
           break;
          }
          $125 = HEAP32[$0 >> 2] | 0; //@line 2589
          if ($125 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
           HEAP32[$0 >> 2] = $125 + 1; //@line 2594
           $c$0$i = HEAPU8[$125 >> 0] | 0; //@line 2597
           $gotdig$0$i = 0; //@line 2597
          } else {
           $c$0$i = ___shgetc($f) | 0; //@line 2600
           $gotdig$0$i = 0; //@line 2600
          }
          L94 : while (1) {
           switch ($c$0$i | 0) {
           case 46:
            {
             $gotdig$0$i$lcssa242 = $gotdig$0$i; //@line 2605
             label = 74; //@line 2606
             break L94;
             break;
            }
           case 48:
            {
             break;
            }
           default:
            {
             $169 = 0; //@line 2614
             $171 = 0; //@line 2614
             $694 = 0; //@line 2614
             $695 = 0; //@line 2614
             $c$2$i = $c$0$i; //@line 2614
             $gotdig$2$i = $gotdig$0$i; //@line 2614
             $gotrad$0$i = 0; //@line 2614
             $gottail$0$i = 0; //@line 2614
             $scale$0$i = 1.0; //@line 2614
             $x$0$i = 0; //@line 2614
             $y$0$i = 0.0; //@line 2614
             break L94;
            }
           }
           $132 = HEAP32[$0 >> 2] | 0; //@line 2618
           if ($132 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
            HEAP32[$0 >> 2] = $132 + 1; //@line 2623
            $c$0$i = HEAPU8[$132 >> 0] | 0; //@line 2626
            $gotdig$0$i = 1; //@line 2626
            continue;
           } else {
            $c$0$i = ___shgetc($f) | 0; //@line 2630
            $gotdig$0$i = 1; //@line 2630
            continue;
           }
          }
          if ((label | 0) == 74) {
           $139 = HEAP32[$0 >> 2] | 0; //@line 2635
           if ($139 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
            HEAP32[$0 >> 2] = $139 + 1; //@line 2640
            $c$1$ph$i = HEAPU8[$139 >> 0] | 0; //@line 2643
           } else {
            $c$1$ph$i = ___shgetc($f) | 0; //@line 2646
           }
           if (($c$1$ph$i | 0) == 48) {
            $154 = 0; //@line 2650
            $155 = 0; //@line 2650
            while (1) {
             $147 = HEAP32[$0 >> 2] | 0; //@line 2652
             if ($147 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
              HEAP32[$0 >> 2] = $147 + 1; //@line 2657
              $159 = HEAPU8[$147 >> 0] | 0; //@line 2660
             } else {
              $159 = ___shgetc($f) | 0; //@line 2663
             }
             $156 = _i64Add($154 | 0, $155 | 0, -1, -1) | 0; //@line 2665
             $157 = tempRet0; //@line 2666
             if (($159 | 0) == 48) {
              $154 = $156; //@line 2669
              $155 = $157; //@line 2669
             } else {
              $169 = 0; //@line 2671
              $171 = 0; //@line 2671
              $694 = $156; //@line 2671
              $695 = $157; //@line 2671
              $c$2$i = $159; //@line 2671
              $gotdig$2$i = 1; //@line 2671
              $gotrad$0$i = 1; //@line 2671
              $gottail$0$i = 0; //@line 2671
              $scale$0$i = 1.0; //@line 2671
              $x$0$i = 0; //@line 2671
              $y$0$i = 0.0; //@line 2671
              break;
             }
            }
           } else {
            $169 = 0; //@line 2676
            $171 = 0; //@line 2676
            $694 = 0; //@line 2676
            $695 = 0; //@line 2676
            $c$2$i = $c$1$ph$i; //@line 2676
            $gotdig$2$i = $gotdig$0$i$lcssa242; //@line 2676
            $gotrad$0$i = 1; //@line 2676
            $gottail$0$i = 0; //@line 2676
            $scale$0$i = 1.0; //@line 2676
            $x$0$i = 0; //@line 2676
            $y$0$i = 0.0; //@line 2676
           }
          }
          while (1) {
           $160 = $c$2$i + -48 | 0; //@line 2680
           $$pre$i = $c$2$i | 32; //@line 2682
           if ($160 >>> 0 < 10) {
            label = 86; //@line 2684
           } else {
            $164 = ($c$2$i | 0) == 46; //@line 2688
            if (!($164 | ($$pre$i + -97 | 0) >>> 0 < 6)) {
             $213 = $171; //@line 2691
             $214 = $694; //@line 2691
             $216 = $169; //@line 2691
             $217 = $695; //@line 2691
             $c$2$lcssa$i = $c$2$i; //@line 2691
             $gotdig$2$i$lcssa = $gotdig$2$i; //@line 2691
             $gotrad$0$i$lcssa = $gotrad$0$i; //@line 2691
             $x$0$i$lcssa = $x$0$i; //@line 2691
             $y$0$i$lcssa = $y$0$i; //@line 2691
             break;
            }
            if ($164) {
             if (!$gotrad$0$i) {
              $696 = $171; //@line 2697
              $697 = $169; //@line 2697
              $698 = $171; //@line 2697
              $699 = $169; //@line 2697
              $gotdig$3$i = $gotdig$2$i; //@line 2697
              $gotrad$1$i = 1; //@line 2697
              $gottail$2$i = $gottail$0$i; //@line 2697
              $scale$2$i = $scale$0$i; //@line 2697
              $x$2$i = $x$0$i; //@line 2697
              $y$2$i = $y$0$i; //@line 2697
             } else {
              $213 = $171; //@line 2699
              $214 = $694; //@line 2699
              $216 = $169; //@line 2699
              $217 = $695; //@line 2699
              $c$2$lcssa$i = 46; //@line 2699
              $gotdig$2$i$lcssa = $gotdig$2$i; //@line 2699
              $gotrad$0$i$lcssa = $gotrad$0$i; //@line 2699
              $x$0$i$lcssa = $x$0$i; //@line 2699
              $y$0$i$lcssa = $y$0$i; //@line 2699
              break;
             }
            } else {
             label = 86; //@line 2703
            }
           }
           if ((label | 0) == 86) {
            label = 0; //@line 2707
            $d$0$i = ($c$2$i | 0) > 57 ? $$pre$i + -87 | 0 : $160; //@line 2710
            do {
             if (($169 | 0) < 0 | ($169 | 0) == 0 & $171 >>> 0 < 8) {
              $gottail$1$i = $gottail$0$i; //@line 2720
              $scale$1$i = $scale$0$i; //@line 2720
              $x$1$i = $d$0$i + ($x$0$i << 4) | 0; //@line 2720
              $y$1$i = $y$0$i; //@line 2720
             } else {
              if (($169 | 0) < 0 | ($169 | 0) == 0 & $171 >>> 0 < 14) {
               $183 = $scale$0$i * .0625; //@line 2729
               $gottail$1$i = $gottail$0$i; //@line 2732
               $scale$1$i = $183; //@line 2732
               $x$1$i = $x$0$i; //@line 2732
               $y$1$i = $y$0$i + $183 * +($d$0$i | 0); //@line 2732
               break;
              }
              if (($gottail$0$i | 0) != 0 | ($d$0$i | 0) == 0) {
               $gottail$1$i = $gottail$0$i; //@line 2739
               $scale$1$i = $scale$0$i; //@line 2739
               $x$1$i = $x$0$i; //@line 2739
               $y$1$i = $y$0$i; //@line 2739
              } else {
               $gottail$1$i = 1; //@line 2743
               $scale$1$i = $scale$0$i; //@line 2743
               $x$1$i = $x$0$i; //@line 2743
               $y$1$i = $y$0$i + $scale$0$i * .5; //@line 2743
              }
             }
            } while (0);
            $190 = _i64Add($171 | 0, $169 | 0, 1, 0) | 0; //@line 2747
            $696 = $694; //@line 2749
            $697 = $695; //@line 2749
            $698 = $190; //@line 2749
            $699 = tempRet0; //@line 2749
            $gotdig$3$i = 1; //@line 2749
            $gotrad$1$i = $gotrad$0$i; //@line 2749
            $gottail$2$i = $gottail$1$i; //@line 2749
            $scale$2$i = $scale$1$i; //@line 2749
            $x$2$i = $x$1$i; //@line 2749
            $y$2$i = $y$1$i; //@line 2749
           }
           $192 = HEAP32[$0 >> 2] | 0; //@line 2751
           if ($192 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
            HEAP32[$0 >> 2] = $192 + 1; //@line 2756
            $169 = $699; //@line 2759
            $171 = $698; //@line 2759
            $694 = $696; //@line 2759
            $695 = $697; //@line 2759
            $c$2$i = HEAPU8[$192 >> 0] | 0; //@line 2759
            $gotdig$2$i = $gotdig$3$i; //@line 2759
            $gotrad$0$i = $gotrad$1$i; //@line 2759
            $gottail$0$i = $gottail$2$i; //@line 2759
            $scale$0$i = $scale$2$i; //@line 2759
            $x$0$i = $x$2$i; //@line 2759
            $y$0$i = $y$2$i; //@line 2759
            continue;
           } else {
            $169 = $699; //@line 2763
            $171 = $698; //@line 2763
            $694 = $696; //@line 2763
            $695 = $697; //@line 2763
            $c$2$i = ___shgetc($f) | 0; //@line 2763
            $gotdig$2$i = $gotdig$3$i; //@line 2763
            $gotrad$0$i = $gotrad$1$i; //@line 2763
            $gottail$0$i = $gottail$2$i; //@line 2763
            $scale$0$i = $scale$2$i; //@line 2763
            $x$0$i = $x$2$i; //@line 2763
            $y$0$i = $y$2$i; //@line 2763
            continue;
           }
          }
          if (!$gotdig$2$i$lcssa) {
           $201 = (HEAP32[$1 >> 2] | 0) == 0; //@line 2770
           if (!$201) {
            HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1; //@line 2774
           }
           if (!$pok) {
            ___shlim($f, 0); //@line 2778
           } else {
            if (!$201) {
             $205 = HEAP32[$0 >> 2] | 0; //@line 2781
             HEAP32[$0 >> 2] = $205 + -1; //@line 2783
             if ($gotrad$0$i$lcssa) {
              HEAP32[$0 >> 2] = $205 + -2; //@line 2787
             }
            }
           }
           $$0 = +($sign$0 | 0) * 0.0; //@line 2793
           break L4;
          }
          $211 = ($gotrad$0$i$lcssa | 0) == 0; //@line 2796
          $212 = $211 ? $213 : $214; //@line 2797
          $215 = $211 ? $216 : $217; //@line 2798
          if (($216 | 0) < 0 | ($216 | 0) == 0 & $213 >>> 0 < 8) {
           $224 = $213; //@line 2805
           $225 = $216; //@line 2805
           $x$324$i = $x$0$i$lcssa; //@line 2805
           while (1) {
            $223 = $x$324$i << 4; //@line 2807
            $224 = _i64Add($224 | 0, $225 | 0, 1, 0) | 0; //@line 2808
            $225 = tempRet0; //@line 2809
            if (!(($225 | 0) < 0 | ($225 | 0) == 0 & $224 >>> 0 < 8)) {
             $x$3$lcssa$i = $223; //@line 2818
             break;
            } else {
             $x$324$i = $223; //@line 2816
            }
           }
          } else {
           $x$3$lcssa$i = $x$0$i$lcssa; //@line 2823
          }
          if (($c$2$lcssa$i | 32 | 0) == 112) {
           $235 = _scanexp($f, $pok) | 0; //@line 2828
           $236 = tempRet0; //@line 2829
           if (($235 | 0) == 0 & ($236 | 0) == -2147483648) {
            if (!$pok) {
             ___shlim($f, 0); //@line 2836
             $$0 = 0.0; //@line 2837
             break L4;
            }
            if (!(HEAP32[$1 >> 2] | 0)) {
             $253 = 0; //@line 2843
             $254 = 0; //@line 2843
            } else {
             HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1; //@line 2847
             $253 = 0; //@line 2848
             $254 = 0; //@line 2848
            }
           } else {
            $253 = $235; //@line 2851
            $254 = $236; //@line 2851
           }
          } else {
           if (!(HEAP32[$1 >> 2] | 0)) {
            $253 = 0; //@line 2857
            $254 = 0; //@line 2857
           } else {
            HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1; //@line 2861
            $253 = 0; //@line 2862
            $254 = 0; //@line 2862
           }
          }
          $249 = _bitshift64Shl($212 | 0, $215 | 0, 2) | 0; //@line 2865
          $251 = _i64Add($249 | 0, tempRet0 | 0, -32, -1) | 0; //@line 2867
          $255 = _i64Add($251 | 0, tempRet0 | 0, $253 | 0, $254 | 0) | 0; //@line 2869
          $256 = tempRet0; //@line 2870
          if (!$x$3$lcssa$i) {
           $$0 = +($sign$0 | 0) * 0.0; //@line 2875
           break L4;
          }
          if (($256 | 0) > 0 | ($256 | 0) == 0 & $255 >>> 0 > (0 - $emin$0$ph | 0) >>> 0) {
           HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 2886
           $$0 = +($sign$0 | 0) * 1.7976931348623157e+308 * 1.7976931348623157e+308; //@line 2890
           break L4;
          }
          $270 = $emin$0$ph + -106 | 0; //@line 2893
          $272 = (($270 | 0) < 0) << 31 >> 31; //@line 2895
          if (($256 | 0) < ($272 | 0) | ($256 | 0) == ($272 | 0) & $255 >>> 0 < $270 >>> 0) {
           HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 2903
           $$0 = +($sign$0 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308; //@line 2907
           break L4;
          }
          if (($x$3$lcssa$i | 0) > -1) {
           $288 = $255; //@line 2912
           $289 = $256; //@line 2912
           $x$419$i = $x$3$lcssa$i; //@line 2912
           $y$320$i = $y$0$i$lcssa; //@line 2912
           while (1) {
            $283 = !($y$320$i >= .5); //@line 2914
            $287 = $283 & 1 | $x$419$i << 1; //@line 2918
            $x$5$i = $287 ^ 1; //@line 2919
            $y$4$i = $y$320$i + ($283 ? $y$320$i : $y$320$i + -1.0); //@line 2921
            $290 = _i64Add($288 | 0, $289 | 0, -1, -1) | 0; //@line 2922
            $291 = tempRet0; //@line 2923
            if (($287 | 0) > -1) {
             $288 = $290; //@line 2926
             $289 = $291; //@line 2926
             $x$419$i = $x$5$i; //@line 2926
             $y$320$i = $y$4$i; //@line 2926
            } else {
             $297 = $290; //@line 2928
             $298 = $291; //@line 2928
             $x$4$lcssa$i = $x$5$i; //@line 2928
             $y$3$lcssa$i = $y$4$i; //@line 2928
             break;
            }
           }
          } else {
           $297 = $255; //@line 2933
           $298 = $256; //@line 2933
           $x$4$lcssa$i = $x$3$lcssa$i; //@line 2933
           $y$3$lcssa$i = $y$0$i$lcssa; //@line 2933
          }
          $295 = _i64Subtract(32, 0, $emin$0$ph | 0, (($emin$0$ph | 0) < 0) << 31 >> 31 | 0) | 0; //@line 2937
          $299 = _i64Add($297 | 0, $298 | 0, $295 | 0, tempRet0 | 0) | 0; //@line 2939
          $300 = tempRet0; //@line 2940
          if (0 > ($300 | 0) | 0 == ($300 | 0) & $bits$0$ph >>> 0 > $299 >>> 0) {
           if (($299 | 0) < 0) {
            $$0710$i = 0; //@line 2949
            label = 127; //@line 2950
           } else {
            $$07$i = $299; //@line 2952
            label = 125; //@line 2953
           }
          } else {
           $$07$i = $bits$0$ph; //@line 2956
           label = 125; //@line 2957
          }
          if ((label | 0) == 125) {
           if (($$07$i | 0) < 53) {
            $$0710$i = $$07$i; //@line 2962
            label = 127; //@line 2963
           } else {
            $$0711$i = $$07$i; //@line 2966
            $$pre$phi42$iZ2D = +($sign$0 | 0); //@line 2966
            $bias$0$i = 0.0; //@line 2966
           }
          }
          if ((label | 0) == 127) {
           $310 = +($sign$0 | 0); //@line 2972
           $$0711$i = $$0710$i; //@line 2974
           $$pre$phi42$iZ2D = $310; //@line 2974
           $bias$0$i = +_copysignl(+_scalbn(1.0, 84 - $$0710$i | 0), $310); //@line 2974
          }
          $or$cond9$i = ($x$4$lcssa$i & 1 | 0) == 0 & ($y$3$lcssa$i != 0.0 & ($$0711$i | 0) < 32); //@line 2981
          $322 = $$pre$phi42$iZ2D * ($or$cond9$i ? 0.0 : $y$3$lcssa$i) + ($bias$0$i + $$pre$phi42$iZ2D * +((($or$cond9$i & 1) + $x$4$lcssa$i | 0) >>> 0)) - $bias$0$i; //@line 2990
          if (!($322 != 0.0)) {
           HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 2994
          }
          $$0 = +_scalbnl($322, $297); //@line 2997
          break L4;
         } else {
          $c$6 = $c$5; //@line 3000
         }
        } while (0);
        $sum$i = $emin$0$ph + $bits$0$ph | 0; //@line 3003
        $330 = 0 - $sum$i | 0; //@line 3004
        $$09$i = $c$6; //@line 3005
        $gotdig$0$i12 = 0; //@line 3005
        L184 : while (1) {
         switch ($$09$i | 0) {
         case 46:
          {
           $gotdig$0$i12$lcssa273 = $gotdig$0$i12; //@line 3009
           label = 138; //@line 3010
           break L184;
           break;
          }
         case 48:
          {
           break;
          }
         default:
          {
           $$2$i = $$09$i; //@line 3018
           $700 = 0; //@line 3018
           $701 = 0; //@line 3018
           $gotdig$2$i13 = $gotdig$0$i12; //@line 3018
           $gotrad$0$i14 = 0; //@line 3018
           break L184;
          }
         }
         $331 = HEAP32[$0 >> 2] | 0; //@line 3022
         if ($331 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
          HEAP32[$0 >> 2] = $331 + 1; //@line 3027
          $$09$i = HEAPU8[$331 >> 0] | 0; //@line 3030
          $gotdig$0$i12 = 1; //@line 3030
          continue;
         } else {
          $$09$i = ___shgetc($f) | 0; //@line 3034
          $gotdig$0$i12 = 1; //@line 3034
          continue;
         }
        }
        if ((label | 0) == 138) {
         $338 = HEAP32[$0 >> 2] | 0; //@line 3039
         if ($338 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
          HEAP32[$0 >> 2] = $338 + 1; //@line 3044
          $$1$ph$i = HEAPU8[$338 >> 0] | 0; //@line 3047
         } else {
          $$1$ph$i = ___shgetc($f) | 0; //@line 3050
         }
         if (($$1$ph$i | 0) == 48) {
          $346 = 0; //@line 3054
          $347 = 0; //@line 3054
          while (1) {
           $348 = _i64Add($346 | 0, $347 | 0, -1, -1) | 0; //@line 3056
           $349 = tempRet0; //@line 3057
           $350 = HEAP32[$0 >> 2] | 0; //@line 3058
           if ($350 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
            HEAP32[$0 >> 2] = $350 + 1; //@line 3063
            $$1$be$i = HEAPU8[$350 >> 0] | 0; //@line 3066
           } else {
            $$1$be$i = ___shgetc($f) | 0; //@line 3069
           }
           if (($$1$be$i | 0) == 48) {
            $346 = $348; //@line 3073
            $347 = $349; //@line 3073
           } else {
            $$2$i = $$1$be$i; //@line 3075
            $700 = $348; //@line 3075
            $701 = $349; //@line 3075
            $gotdig$2$i13 = 1; //@line 3075
            $gotrad$0$i14 = 1; //@line 3075
            break;
           }
          }
         } else {
          $$2$i = $$1$ph$i; //@line 3080
          $700 = 0; //@line 3080
          $701 = 0; //@line 3080
          $gotdig$2$i13 = $gotdig$0$i12$lcssa273; //@line 3080
          $gotrad$0$i14 = 1; //@line 3080
         }
        }
        HEAP32[$x$i >> 2] = 0; //@line 3083
        $358 = $$2$i + -48 | 0; //@line 3084
        $360 = ($$2$i | 0) == 46; //@line 3086
        L203 : do {
         if ($360 | $358 >>> 0 < 10) {
          $362 = $x$i + 496 | 0; //@line 3090
          $$3105$i = $$2$i; //@line 3091
          $365 = 0; //@line 3091
          $366 = 0; //@line 3091
          $702 = $360; //@line 3091
          $703 = $358; //@line 3091
          $704 = $700; //@line 3091
          $705 = $701; //@line 3091
          $gotdig$3101$i = $gotdig$2$i13; //@line 3091
          $gotrad$1102$i = $gotrad$0$i14; //@line 3091
          $j$0104$i = 0; //@line 3091
          $k$0103$i = 0; //@line 3091
          $lnz$0100$i = 0; //@line 3091
          L205 : while (1) {
           do {
            if ($702) {
             if (!$gotrad$1102$i) {
              $706 = $365; //@line 3097
              $707 = $366; //@line 3097
              $708 = $365; //@line 3097
              $709 = $366; //@line 3097
              $gotdig$4$i = $gotdig$3101$i; //@line 3097
              $gotrad$2$i = 1; //@line 3097
              $j$2$i = $j$0104$i; //@line 3097
              $k$2$i = $k$0103$i; //@line 3097
              $lnz$2$i = $lnz$0100$i; //@line 3097
             } else {
              $710 = $704; //@line 3099
              $711 = $705; //@line 3099
              $712 = $365; //@line 3099
              $713 = $366; //@line 3099
              $gotdig$3101$i$lcssa = $gotdig$3101$i; //@line 3099
              $j$0104$i$lcssa = $j$0104$i; //@line 3099
              $k$0103$i$lcssa = $k$0103$i; //@line 3099
              $lnz$0100$i$lcssa = $lnz$0100$i; //@line 3099
              break L205;
             }
            } else {
             $367 = _i64Add($365 | 0, $366 | 0, 1, 0) | 0; //@line 3104
             $368 = tempRet0; //@line 3105
             $369 = ($$3105$i | 0) != 48; //@line 3106
             if (($k$0103$i | 0) >= 125) {
              if (!$369) {
               $706 = $704; //@line 3109
               $707 = $705; //@line 3109
               $708 = $367; //@line 3109
               $709 = $368; //@line 3109
               $gotdig$4$i = $gotdig$3101$i; //@line 3109
               $gotrad$2$i = $gotrad$1102$i; //@line 3109
               $j$2$i = $j$0104$i; //@line 3109
               $k$2$i = $k$0103$i; //@line 3109
               $lnz$2$i = $lnz$0100$i; //@line 3109
               break;
              }
              HEAP32[$362 >> 2] = HEAP32[$362 >> 2] | 1; //@line 3114
              $706 = $704; //@line 3115
              $707 = $705; //@line 3115
              $708 = $367; //@line 3115
              $709 = $368; //@line 3115
              $gotdig$4$i = $gotdig$3101$i; //@line 3115
              $gotrad$2$i = $gotrad$1102$i; //@line 3115
              $j$2$i = $j$0104$i; //@line 3115
              $k$2$i = $k$0103$i; //@line 3115
              $lnz$2$i = $lnz$0100$i; //@line 3115
              break;
             }
             $371 = $x$i + ($k$0103$i << 2) | 0; //@line 3120
             if (!$j$0104$i) {
              $storemerge$i = $703; //@line 3122
             } else {
              $storemerge$i = $$3105$i + -48 + ((HEAP32[$371 >> 2] | 0) * 10 | 0) | 0; //@line 3128
             }
             HEAP32[$371 >> 2] = $storemerge$i; //@line 3130
             $376 = $j$0104$i + 1 | 0; //@line 3131
             $377 = ($376 | 0) == 9; //@line 3132
             $706 = $704; //@line 3136
             $707 = $705; //@line 3136
             $708 = $367; //@line 3136
             $709 = $368; //@line 3136
             $gotdig$4$i = 1; //@line 3136
             $gotrad$2$i = $gotrad$1102$i; //@line 3136
             $j$2$i = $377 ? 0 : $376; //@line 3136
             $k$2$i = ($377 & 1) + $k$0103$i | 0; //@line 3136
             $lnz$2$i = $369 ? $367 : $lnz$0100$i; //@line 3136
            }
           } while (0);
           $381 = HEAP32[$0 >> 2] | 0; //@line 3139
           if ($381 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
            HEAP32[$0 >> 2] = $381 + 1; //@line 3144
            $$3$be$i = HEAPU8[$381 >> 0] | 0; //@line 3147
           } else {
            $$3$be$i = ___shgetc($f) | 0; //@line 3150
           }
           $703 = $$3$be$i + -48 | 0; //@line 3152
           $702 = ($$3$be$i | 0) == 46; //@line 3154
           if (!($702 | $703 >>> 0 < 10)) {
            $$3$lcssa$i = $$3$be$i; //@line 3159
            $394 = $708; //@line 3159
            $395 = $706; //@line 3159
            $397 = $709; //@line 3159
            $398 = $707; //@line 3159
            $gotdig$3$lcssa$i = $gotdig$4$i; //@line 3159
            $gotrad$1$lcssa$i = $gotrad$2$i; //@line 3159
            $j$0$lcssa$i = $j$2$i; //@line 3159
            $k$0$lcssa$i = $k$2$i; //@line 3159
            $lnz$0$lcssa$i = $lnz$2$i; //@line 3159
            label = 161; //@line 3160
            break L203;
           } else {
            $$3105$i = $$3$be$i; //@line 3157
            $365 = $708; //@line 3157
            $366 = $709; //@line 3157
            $704 = $706; //@line 3157
            $705 = $707; //@line 3157
            $gotdig$3101$i = $gotdig$4$i; //@line 3157
            $gotrad$1102$i = $gotrad$2$i; //@line 3157
            $j$0104$i = $j$2$i; //@line 3157
            $k$0103$i = $k$2$i; //@line 3157
            $lnz$0100$i = $lnz$2$i; //@line 3157
           }
          }
          $714 = $712; //@line 3165
          $715 = $713; //@line 3165
          $716 = $710; //@line 3165
          $717 = $711; //@line 3165
          $718 = ($gotdig$3101$i$lcssa | 0) != 0; //@line 3165
          $j$069$i = $j$0104$i$lcssa; //@line 3165
          $k$065$i = $k$0103$i$lcssa; //@line 3165
          $lnz$059$i = $lnz$0100$i$lcssa; //@line 3165
          label = 169; //@line 3166
         } else {
          $$3$lcssa$i = $$2$i; //@line 3168
          $394 = 0; //@line 3168
          $395 = $700; //@line 3168
          $397 = 0; //@line 3168
          $398 = $701; //@line 3168
          $gotdig$3$lcssa$i = $gotdig$2$i13; //@line 3168
          $gotrad$1$lcssa$i = $gotrad$0$i14; //@line 3168
          $j$0$lcssa$i = 0; //@line 3168
          $k$0$lcssa$i = 0; //@line 3168
          $lnz$0$lcssa$i = 0; //@line 3168
          label = 161; //@line 3169
         }
        } while (0);
        do {
         if ((label | 0) == 161) {
          $392 = ($gotrad$1$lcssa$i | 0) == 0; //@line 3174
          $393 = $392 ? $394 : $395; //@line 3175
          $396 = $392 ? $397 : $398; //@line 3176
          $399 = ($gotdig$3$lcssa$i | 0) != 0; //@line 3177
          if (!(($$3$lcssa$i | 32 | 0) == 101 & $399)) {
           if (($$3$lcssa$i | 0) > -1) {
            $714 = $394; //@line 3184
            $715 = $397; //@line 3184
            $716 = $393; //@line 3184
            $717 = $396; //@line 3184
            $718 = $399; //@line 3184
            $j$069$i = $j$0$lcssa$i; //@line 3184
            $k$065$i = $k$0$lcssa$i; //@line 3184
            $lnz$059$i = $lnz$0$lcssa$i; //@line 3184
            label = 169; //@line 3185
            break;
           } else {
            $719 = $394; //@line 3188
            $720 = $397; //@line 3188
            $721 = $399; //@line 3188
            $722 = $393; //@line 3188
            $723 = $396; //@line 3188
            $j$068$i = $j$0$lcssa$i; //@line 3188
            $k$064$i = $k$0$lcssa$i; //@line 3188
            $lnz$058$i = $lnz$0$lcssa$i; //@line 3188
            label = 171; //@line 3189
            break;
           }
          }
          $402 = _scanexp($f, $pok) | 0; //@line 3193
          $403 = tempRet0; //@line 3194
          if (($402 | 0) == 0 & ($403 | 0) == -2147483648) {
           if (!$pok) {
            ___shlim($f, 0); //@line 3201
            $$0$i27 = 0.0; //@line 3202
            break;
           }
           if (!(HEAP32[$1 >> 2] | 0)) {
            $412 = 0; //@line 3208
            $413 = 0; //@line 3208
           } else {
            HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1; //@line 3212
            $412 = 0; //@line 3213
            $413 = 0; //@line 3213
           }
          } else {
           $412 = $402; //@line 3216
           $413 = $403; //@line 3216
          }
          $414 = _i64Add($412 | 0, $413 | 0, $393 | 0, $396 | 0) | 0; //@line 3218
          $427 = $414; //@line 3220
          $428 = $394; //@line 3220
          $430 = tempRet0; //@line 3220
          $431 = $397; //@line 3220
          $j$067$i = $j$0$lcssa$i; //@line 3220
          $k$063$i = $k$0$lcssa$i; //@line 3220
          $lnz$057$i = $lnz$0$lcssa$i; //@line 3220
          label = 173; //@line 3221
         }
        } while (0);
        if ((label | 0) == 169) {
         if (!(HEAP32[$1 >> 2] | 0)) {
          $719 = $714; //@line 3228
          $720 = $715; //@line 3228
          $721 = $718; //@line 3228
          $722 = $716; //@line 3228
          $723 = $717; //@line 3228
          $j$068$i = $j$069$i; //@line 3228
          $k$064$i = $k$065$i; //@line 3228
          $lnz$058$i = $lnz$059$i; //@line 3228
          label = 171; //@line 3229
         } else {
          HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1; //@line 3233
          if ($718) {
           $427 = $716; //@line 3235
           $428 = $714; //@line 3235
           $430 = $717; //@line 3235
           $431 = $715; //@line 3235
           $j$067$i = $j$069$i; //@line 3235
           $k$063$i = $k$065$i; //@line 3235
           $lnz$057$i = $lnz$059$i; //@line 3235
           label = 173; //@line 3236
          } else {
           label = 172; //@line 3238
          }
         }
        }
        if ((label | 0) == 171) {
         if ($721) {
          $427 = $722; //@line 3244
          $428 = $719; //@line 3244
          $430 = $723; //@line 3244
          $431 = $720; //@line 3244
          $j$067$i = $j$068$i; //@line 3244
          $k$063$i = $k$064$i; //@line 3244
          $lnz$057$i = $lnz$058$i; //@line 3244
          label = 173; //@line 3245
         } else {
          label = 172; //@line 3247
         }
        }
        do {
         if ((label | 0) == 172) {
          HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 3253
          ___shlim($f, 0); //@line 3254
          $$0$i27 = 0.0; //@line 3255
         } else if ((label | 0) == 173) {
          $422 = HEAP32[$x$i >> 2] | 0; //@line 3258
          if (!$422) {
           $$0$i27 = +($sign$0 | 0) * 0.0; //@line 3263
           break;
          }
          if ((($431 | 0) < 0 | ($431 | 0) == 0 & $428 >>> 0 < 10) & (($427 | 0) == ($428 | 0) & ($430 | 0) == ($431 | 0))) {
           if ($bits$0$ph >>> 0 > 30 | ($422 >>> $bits$0$ph | 0) == 0) {
            $$0$i27 = +($sign$0 | 0) * +($422 >>> 0); //@line 3284
            break;
           }
          }
          $444 = ($emin$0$ph | 0) / -2 | 0; //@line 3288
          $446 = (($444 | 0) < 0) << 31 >> 31; //@line 3290
          if (($430 | 0) > ($446 | 0) | ($430 | 0) == ($446 | 0) & $427 >>> 0 > $444 >>> 0) {
           HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 3298
           $$0$i27 = +($sign$0 | 0) * 1.7976931348623157e+308 * 1.7976931348623157e+308; //@line 3302
           break;
          }
          $456 = $emin$0$ph + -106 | 0; //@line 3305
          $458 = (($456 | 0) < 0) << 31 >> 31; //@line 3307
          if (($430 | 0) < ($458 | 0) | ($430 | 0) == ($458 | 0) & $427 >>> 0 < $456 >>> 0) {
           HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 3315
           $$0$i27 = +($sign$0 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308; //@line 3319
           break;
          }
          if (!$j$067$i) {
           $k$3$i = $k$063$i; //@line 3324
          } else {
           if (($j$067$i | 0) < 9) {
            $470 = $x$i + ($k$063$i << 2) | 0; //@line 3328
            $472 = HEAP32[$470 >> 2] | 0; //@line 3330
            $j$394$i = $j$067$i; //@line 3330
            while (1) {
             $471 = $472 * 10 | 0; //@line 3332
             $j$394$i = $j$394$i + 1 | 0; //@line 3333
             if (($j$394$i | 0) == 9) {
              $$lcssa265 = $471; //@line 3336
              break;
             } else {
              $472 = $471; //@line 3339
             }
            }
            HEAP32[$470 >> 2] = $$lcssa265; //@line 3342
           }
           $k$3$i = $k$063$i + 1 | 0; //@line 3345
          }
          if (($lnz$057$i | 0) < 9) {
           if (($lnz$057$i | 0) <= ($427 | 0) & ($427 | 0) < 18) {
            if (($427 | 0) == 9) {
             $$0$i27 = +($sign$0 | 0) * +((HEAP32[$x$i >> 2] | 0) >>> 0); //@line 3359
             break;
            }
            if (($427 | 0) < 9) {
             $$0$i27 = +($sign$0 | 0) * +((HEAP32[$x$i >> 2] | 0) >>> 0) / +(HEAP32[2576 + (8 - $427 << 2) >> 2] | 0); //@line 3373
             break;
            }
            $494 = $bits$0$ph + 27 + (Math_imul($427, -3) | 0) | 0; //@line 3378
            $$pre$i17 = HEAP32[$x$i >> 2] | 0; //@line 3380
            if (($494 | 0) > 30 | ($$pre$i17 >>> $494 | 0) == 0) {
             $$0$i27 = +($sign$0 | 0) * +($$pre$i17 >>> 0) * +(HEAP32[2576 + ($427 + -10 << 2) >> 2] | 0); //@line 3393
             break;
            }
           }
          }
          $506 = ($427 | 0) % 9 | 0; //@line 3398
          if (!$506) {
           $a$2$ph38$i = 0; //@line 3401
           $e2$0$ph$i = 0; //@line 3401
           $rp$2$ph36$i = $427; //@line 3401
           $z$1$ph37$i = $k$3$i; //@line 3401
          } else {
           $510 = ($427 | 0) > -1 ? $506 : $506 + 9 | 0; //@line 3405
           $513 = HEAP32[2576 + (8 - $510 << 2) >> 2] | 0; //@line 3408
           if (!$k$3$i) {
            $a$0$lcssa151$i = 0; //@line 3411
            $rp$0$lcssa152$i = $427; //@line 3411
            $z$0$i = 0; //@line 3411
           } else {
            $515 = 1e9 / ($513 | 0) | 0; //@line 3413
            $a$085$i = 0; //@line 3414
            $carry$087$i = 0; //@line 3414
            $k$486$i = 0; //@line 3414
            $rp$084$i = $427; //@line 3414
            while (1) {
             $516 = $x$i + ($k$486$i << 2) | 0; //@line 3416
             $517 = HEAP32[$516 >> 2] | 0; //@line 3417
             $520 = (($517 >>> 0) / ($513 >>> 0) | 0) + $carry$087$i | 0; //@line 3420
             HEAP32[$516 >> 2] = $520; //@line 3421
             $521 = Math_imul(($517 >>> 0) % ($513 >>> 0) | 0, $515) | 0; //@line 3422
             $or$cond16$i = ($k$486$i | 0) == ($a$085$i | 0) & ($520 | 0) == 0; //@line 3425
             $k$486$i = $k$486$i + 1 | 0; //@line 3426
             $rp$1$i18 = $or$cond16$i ? $rp$084$i + -9 | 0 : $rp$084$i; //@line 3429
             $a$1$i = $or$cond16$i ? $k$486$i & 127 : $a$085$i; //@line 3430
             if (($k$486$i | 0) == ($k$3$i | 0)) {
              $$lcssa264 = $521; //@line 3433
              $a$1$i$lcssa = $a$1$i; //@line 3433
              $rp$1$i18$lcssa = $rp$1$i18; //@line 3433
              break;
             } else {
              $a$085$i = $a$1$i; //@line 3436
              $carry$087$i = $521; //@line 3436
              $rp$084$i = $rp$1$i18; //@line 3436
             }
            }
            if (!$$lcssa264) {
             $a$0$lcssa151$i = $a$1$i$lcssa; //@line 3441
             $rp$0$lcssa152$i = $rp$1$i18$lcssa; //@line 3441
             $z$0$i = $k$3$i; //@line 3441
            } else {
             HEAP32[$x$i + ($k$3$i << 2) >> 2] = $$lcssa264; //@line 3445
             $a$0$lcssa151$i = $a$1$i$lcssa; //@line 3446
             $rp$0$lcssa152$i = $rp$1$i18$lcssa; //@line 3446
             $z$0$i = $k$3$i + 1 | 0; //@line 3446
            }
           }
           $a$2$ph38$i = $a$0$lcssa151$i; //@line 3451
           $e2$0$ph$i = 0; //@line 3451
           $rp$2$ph36$i = 9 - $510 + $rp$0$lcssa152$i | 0; //@line 3451
           $z$1$ph37$i = $z$0$i; //@line 3451
          }
          L284 : while (1) {
           $533 = ($rp$2$ph36$i | 0) < 18; //@line 3454
           $534 = ($rp$2$ph36$i | 0) == 18; //@line 3455
           $535 = $x$i + ($a$2$ph38$i << 2) | 0; //@line 3456
           $e2$0$i19 = $e2$0$ph$i; //@line 3457
           $z$1$i = $z$1$ph37$i; //@line 3457
           while (1) {
            if (!$533) {
             if (!$534) {
              $a$3$ph$i = $a$2$ph38$i; //@line 3461
              $e2$1$ph$i = $e2$0$i19; //@line 3461
              $rp$3$ph34$i = $rp$2$ph36$i; //@line 3461
              $z$5$ph$i = $z$1$i; //@line 3461
              break L284;
             }
             if ((HEAP32[$535 >> 2] | 0) >>> 0 >= 9007199) {
              $a$3$ph$i = $a$2$ph38$i; //@line 3467
              $e2$1$ph$i = $e2$0$i19; //@line 3467
              $rp$3$ph34$i = 18; //@line 3467
              $z$5$ph$i = $z$1$i; //@line 3467
              break L284;
             }
            }
            $carry1$0$i = 0; //@line 3472
            $k$5$in$i = $z$1$i + 127 | 0; //@line 3472
            $z$2$i = $z$1$i; //@line 3472
            while (1) {
             $k$5$i = $k$5$in$i & 127; //@line 3474
             $539 = $x$i + ($k$5$i << 2) | 0; //@line 3475
             $541 = _bitshift64Shl(HEAP32[$539 >> 2] | 0, 0, 29) | 0; //@line 3477
             $543 = _i64Add($541 | 0, tempRet0 | 0, $carry1$0$i | 0, 0) | 0; //@line 3479
             $544 = tempRet0; //@line 3480
             if ($544 >>> 0 > 0 | ($544 | 0) == 0 & $543 >>> 0 > 1e9) {
              $550 = ___udivdi3($543 | 0, $544 | 0, 1e9, 0) | 0; //@line 3487
              $552 = ___uremdi3($543 | 0, $544 | 0, 1e9, 0) | 0; //@line 3489
              $$sink$off0$i = $552; //@line 3491
              $carry1$1$i = $550; //@line 3491
             } else {
              $$sink$off0$i = $543; //@line 3493
              $carry1$1$i = 0; //@line 3493
             }
             HEAP32[$539 >> 2] = $$sink$off0$i; //@line 3495
             $557 = ($k$5$i | 0) == ($a$2$ph38$i | 0); //@line 3499
             $z$3$i = ($k$5$i | 0) != ($z$2$i + 127 & 127 | 0) | $557 ? $z$2$i : ($$sink$off0$i | 0) == 0 ? $k$5$i : $z$2$i; //@line 3503
             if ($557) {
              $carry1$1$i$lcssa = $carry1$1$i; //@line 3506
              $z$3$i$lcssa = $z$3$i; //@line 3506
              break;
             } else {
              $carry1$0$i = $carry1$1$i; //@line 3509
              $k$5$in$i = $k$5$i + -1 | 0; //@line 3509
              $z$2$i = $z$3$i; //@line 3509
             }
            }
            $560 = $e2$0$i19 + -29 | 0; //@line 3512
            if (!$carry1$1$i$lcssa) {
             $e2$0$i19 = $560; //@line 3515
             $z$1$i = $z$3$i$lcssa; //@line 3515
            } else {
             $$lcssa263 = $560; //@line 3517
             $carry1$1$i$lcssa$lcssa = $carry1$1$i$lcssa; //@line 3517
             $z$3$i$lcssa$lcssa = $z$3$i$lcssa; //@line 3517
             break;
            }
           }
           $564 = $a$2$ph38$i + 127 & 127; //@line 3523
           if (($564 | 0) == ($z$3$i$lcssa$lcssa | 0)) {
            $567 = $z$3$i$lcssa$lcssa + 127 & 127; //@line 3527
            $572 = $x$i + (($z$3$i$lcssa$lcssa + 126 & 127) << 2) | 0; //@line 3532
            HEAP32[$572 >> 2] = HEAP32[$572 >> 2] | HEAP32[$x$i + ($567 << 2) >> 2]; //@line 3535
            $z$4$i = $567; //@line 3536
           } else {
            $z$4$i = $z$3$i$lcssa$lcssa; //@line 3538
           }
           HEAP32[$x$i + ($564 << 2) >> 2] = $carry1$1$i$lcssa$lcssa; //@line 3541
           $a$2$ph38$i = $564; //@line 3542
           $e2$0$ph$i = $$lcssa263; //@line 3542
           $rp$2$ph36$i = $rp$2$ph36$i + 9 | 0; //@line 3542
           $z$1$ph37$i = $z$4$i; //@line 3542
          }
          L302 : while (1) {
           $604 = $z$5$ph$i + 1 & 127; //@line 3546
           $609 = $x$i + (($z$5$ph$i + 127 & 127) << 2) | 0; //@line 3549
           $a$3$ph157$i = $a$3$ph$i; //@line 3550
           $e2$1$ph156$i = $e2$1$ph$i; //@line 3550
           $rp$3$ph$i = $rp$3$ph34$i; //@line 3550
           while (1) {
            $610 = ($rp$3$ph$i | 0) == 18; //@line 3552
            $$18$i = ($rp$3$ph$i | 0) > 27 ? 9 : 1; //@line 3554
            $$not$i = $610 ^ 1; //@line 3555
            $a$3$i = $a$3$ph157$i; //@line 3556
            $e2$1$i = $e2$1$ph156$i; //@line 3556
            while (1) {
             $576 = $a$3$i & 127; //@line 3558
             $577 = ($576 | 0) == ($z$5$ph$i | 0); //@line 3559
             do {
              if ($577) {
               label = 219; //@line 3562
              } else {
               $579 = HEAP32[$x$i + ($576 << 2) >> 2] | 0; //@line 3565
               if ($579 >>> 0 < 9007199) {
                label = 219; //@line 3568
                break;
               }
               if ($579 >>> 0 > 9007199) {
                break;
               }
               $583 = $a$3$i + 1 & 127; //@line 3576
               if (($583 | 0) == ($z$5$ph$i | 0)) {
                label = 219; //@line 3579
                break;
               }
               $691 = HEAP32[$x$i + ($583 << 2) >> 2] | 0; //@line 3583
               if ($691 >>> 0 < 254740991) {
                label = 219; //@line 3586
                break;
               }
               if (!($691 >>> 0 > 254740991 | $$not$i)) {
                $617 = $576; //@line 3592
                $a$3$i249 = $a$3$i; //@line 3592
                $e2$1$i246 = $e2$1$i; //@line 3592
                $z$7$i = $z$5$ph$i; //@line 3592
                break L302;
               }
              }
             } while (0);
             if ((label | 0) == 219) {
              label = 0; //@line 3598
              if ($610) {
               label = 220; //@line 3600
               break L302;
              }
             }
             $585 = $e2$1$i + $$18$i | 0; //@line 3604
             if (($a$3$i | 0) == ($z$5$ph$i | 0)) {
              $a$3$i = $z$5$ph$i; //@line 3607
              $e2$1$i = $585; //@line 3607
             } else {
              $$lcssa256 = $585; //@line 3609
              $a$3$i$lcssa248 = $a$3$i; //@line 3609
              break;
             }
            }
            $588 = (1 << $$18$i) + -1 | 0; //@line 3614
            $589 = 1e9 >>> $$18$i; //@line 3615
            $a$478$i = $a$3$i$lcssa248; //@line 3616
            $carry3$081$i = 0; //@line 3616
            $k$679$i = $a$3$i$lcssa248; //@line 3616
            $rp$477$i = $rp$3$ph$i; //@line 3616
            while (1) {
             $590 = $x$i + ($k$679$i << 2) | 0; //@line 3618
             $591 = HEAP32[$590 >> 2] | 0; //@line 3619
             $594 = ($591 >>> $$18$i) + $carry3$081$i | 0; //@line 3622
             HEAP32[$590 >> 2] = $594; //@line 3623
             $595 = Math_imul($591 & $588, $589) | 0; //@line 3624
             $or$cond19$i = ($k$679$i | 0) == ($a$478$i | 0) & ($594 | 0) == 0; //@line 3627
             $k$679$i = $k$679$i + 1 & 127; //@line 3629
             $rp$5$i = $or$cond19$i ? $rp$477$i + -9 | 0 : $rp$477$i; //@line 3631
             $a$5$i = $or$cond19$i ? $k$679$i : $a$478$i; //@line 3632
             if (($k$679$i | 0) == ($z$5$ph$i | 0)) {
              $$lcssa257 = $595; //@line 3635
              $a$5$i$lcssa = $a$5$i; //@line 3635
              $rp$5$i$lcssa = $rp$5$i; //@line 3635
              break;
             } else {
              $a$478$i = $a$5$i; //@line 3638
              $carry3$081$i = $595; //@line 3638
              $rp$477$i = $rp$5$i; //@line 3638
             }
            }
            if (!$$lcssa257) {
             $a$3$ph157$i = $a$5$i$lcssa; //@line 3643
             $e2$1$ph156$i = $$lcssa256; //@line 3643
             $rp$3$ph$i = $rp$5$i$lcssa; //@line 3643
             continue;
            }
            if (($604 | 0) != ($a$5$i$lcssa | 0)) {
             $$lcssa256$lcssa = $$lcssa256; //@line 3648
             $$lcssa257$lcssa = $$lcssa257; //@line 3648
             $a$5$i$lcssa$lcssa = $a$5$i$lcssa; //@line 3648
             $rp$5$i$lcssa$lcssa = $rp$5$i$lcssa; //@line 3648
             break;
            }
            HEAP32[$609 >> 2] = HEAP32[$609 >> 2] | 1; //@line 3653
            $a$3$ph157$i = $a$5$i$lcssa; //@line 3654
            $e2$1$ph156$i = $$lcssa256; //@line 3654
            $rp$3$ph$i = $rp$5$i$lcssa; //@line 3654
           }
           HEAP32[$x$i + ($z$5$ph$i << 2) >> 2] = $$lcssa257$lcssa; //@line 3657
           $a$3$ph$i = $a$5$i$lcssa$lcssa; //@line 3658
           $e2$1$ph$i = $$lcssa256$lcssa; //@line 3658
           $rp$3$ph34$i = $rp$5$i$lcssa$lcssa; //@line 3658
           $z$5$ph$i = $604; //@line 3658
          }
          if ((label | 0) == 220) {
           if ($577) {
            HEAP32[$x$i + ($604 + -1 << 2) >> 2] = 0; //@line 3664
            $617 = $z$5$ph$i; //@line 3665
            $a$3$i249 = $a$3$i; //@line 3665
            $e2$1$i246 = $e2$1$i; //@line 3665
            $z$7$i = $604; //@line 3665
           } else {
            $617 = $576; //@line 3667
            $a$3$i249 = $a$3$i; //@line 3667
            $e2$1$i246 = $e2$1$i; //@line 3667
            $z$7$i = $z$5$ph$i; //@line 3667
           }
          }
          $619 = +((HEAP32[$x$i + ($617 << 2) >> 2] | 0) >>> 0); //@line 3672
          $621 = $a$3$i249 + 1 & 127; //@line 3674
          if (($621 | 0) == ($z$7$i | 0)) {
           $680 = $a$3$i249 + 2 & 127; //@line 3678
           HEAP32[$x$i + ($680 + -1 << 2) >> 2] = 0; //@line 3681
           $z$7$1$i = $680; //@line 3682
          } else {
           $z$7$1$i = $z$7$i; //@line 3684
          }
          $643 = +($sign$0 | 0); //@line 3691
          $625 = $643 * ($619 * 1.0e9 + +((HEAP32[$x$i + ($621 << 2) >> 2] | 0) >>> 0)); //@line 3692
          $663 = $e2$1$i246 + 53 | 0; //@line 3693
          $669 = $663 - $emin$0$ph | 0; //@line 3694
          $670 = ($669 | 0) < ($bits$0$ph | 0); //@line 3695
          $denormal$0$i = $670 & 1; //@line 3698
          $$010$i = $670 ? ($669 | 0) < 0 ? 0 : $669 : $bits$0$ph; //@line 3699
          if (($$010$i | 0) < 53) {
           $626 = +_copysignl(+_scalbn(1.0, 105 - $$010$i | 0), $625); //@line 3704
           $629 = +_fmodl($625, +_scalbn(1.0, 53 - $$010$i | 0)); //@line 3707
           $bias$0$i25 = $626; //@line 3710
           $frac$0$i = $629; //@line 3710
           $y$1$i24 = $626 + ($625 - $629); //@line 3710
          } else {
           $bias$0$i25 = 0.0; //@line 3712
           $frac$0$i = 0.0; //@line 3712
           $y$1$i24 = $625; //@line 3712
          }
          $633 = $a$3$i249 + 2 & 127; //@line 3715
          do {
           if (($633 | 0) == ($z$7$1$i | 0)) {
            $frac$2$i = $frac$0$i; //@line 3719
           } else {
            $636 = HEAP32[$x$i + ($633 << 2) >> 2] | 0; //@line 3722
            do {
             if ($636 >>> 0 < 5e8) {
              if (!$636) {
               if (($a$3$i249 + 3 & 127 | 0) == ($z$7$1$i | 0)) {
                $frac$1$i = $frac$0$i; //@line 3732
                break;
               }
              }
              $frac$1$i = $643 * .25 + $frac$0$i; //@line 3738
             } else {
              if ($636 >>> 0 > 5e8) {
               $frac$1$i = $643 * .75 + $frac$0$i; //@line 3744
               break;
              }
              if (($a$3$i249 + 3 & 127 | 0) == ($z$7$1$i | 0)) {
               $frac$1$i = $643 * .5 + $frac$0$i; //@line 3753
               break;
              } else {
               $frac$1$i = $643 * .75 + $frac$0$i; //@line 3758
               break;
              }
             }
            } while (0);
            if ((53 - $$010$i | 0) <= 1) {
             $frac$2$i = $frac$1$i; //@line 3766
             break;
            }
            if (+_fmodl($frac$1$i, 1.0) != 0.0) {
             $frac$2$i = $frac$1$i; //@line 3772
             break;
            }
            $frac$2$i = $frac$1$i + 1.0; //@line 3776
           }
          } while (0);
          $661 = $y$1$i24 + $frac$2$i - $bias$0$i25; //@line 3780
          do {
           if (($663 & 2147483647 | 0) > (-2 - $sum$i | 0)) {
            if (!(+Math_abs(+$661) >= 9007199254740992.0)) {
             $denormal$2$i = $denormal$0$i; //@line 3789
             $e2$2$i = $e2$1$i246; //@line 3789
             $y$2$i26 = $661; //@line 3789
            } else {
             $denormal$2$i = $670 & ($$010$i | 0) == ($669 | 0) ? 0 : $denormal$0$i; //@line 3796
             $e2$2$i = $e2$1$i246 + 1 | 0; //@line 3796
             $y$2$i26 = $661 * .5; //@line 3796
            }
            if (($e2$2$i + 50 | 0) <= ($330 | 0)) {
             if (!($frac$2$i != 0.0 & ($denormal$2$i | 0) != 0)) {
              $e2$3$i = $e2$2$i; //@line 3805
              $y$3$i = $y$2$i26; //@line 3805
              break;
             }
            }
            HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 3810
            $e2$3$i = $e2$2$i; //@line 3811
            $y$3$i = $y$2$i26; //@line 3811
           } else {
            $e2$3$i = $e2$1$i246; //@line 3813
            $y$3$i = $661; //@line 3813
           }
          } while (0);
          $$0$i27 = +_scalbnl($y$3$i, $e2$3$i); //@line 3817
         }
        } while (0);
        $$0 = $$0$i27; //@line 3820
        break L4;
        break;
       }
      default:
       {
        if (HEAP32[$1 >> 2] | 0) {
         HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1; //@line 3830
        }
        HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 3833
        ___shlim($f, 0); //@line 3834
        $$0 = 0.0; //@line 3835
        break L4;
       }
      }
     }
    }
   } while (0);
   if ((label | 0) == 23) {
    $42 = (HEAP32[$1 >> 2] | 0) == 0; //@line 3844
    if (!$42) {
     HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1; //@line 3848
    }
    if (($pok | 0) != 0 & $i$0$lcssa >>> 0 > 3) {
     $i$1 = $i$0$lcssa; //@line 3854
     do {
      if (!$42) {
       HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1; //@line 3859
      }
      $i$1 = $i$1 + -1 | 0; //@line 3861
     } while ($i$1 >>> 0 > 3);
    }
   }
   $$0 = +($sign$0 | 0) * inf; //@line 3874
  }
 } while (0);
 STACKTOP = sp; //@line 3877
 return +$$0;
}
function _printf_core($f, $fmt, $ap, $nl_arg, $nl_type) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 $nl_arg = $nl_arg | 0;
 $nl_type = $nl_type | 0;
 var $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$012$i = 0, $$013$i = 0, $$03$i33 = 0, $$07$i = 0.0, $$1$i = 0.0, $$114$i = 0, $$2$i = 0.0, $$20$i = 0.0, $$21$i = 0, $$210$i = 0, $$23$i = 0, $$3$i = 0.0, $$31$i = 0, $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$41276$i = 0, $$5$lcssa$i = 0, $$51 = 0, $$587$i = 0, $$a$3$i = 0, $$a$3186$i = 0, $$fl$4 = 0, $$lcssa = 0, $$lcssa159$i = 0, $$lcssa318 = 0, $$lcssa323 = 0, $$lcssa324 = 0, $$lcssa325 = 0, $$lcssa326 = 0, $$lcssa327 = 0, $$lcssa329 = 0, $$lcssa339 = 0, $$lcssa342 = 0.0, $$lcssa344 = 0, $$p$$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr47$i = 0, $$pre$phi184$iZ2D = 0, $$pre182$i = 0, $$z$4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $106 = 0, $107 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $133 = 0, $134 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $144 = 0, $146 = 0, $148 = 0, $149 = 0, $15 = 0, $154 = 0, $157 = 0, $162 = 0, $163 = 0, $168 = 0, $175 = 0, $176 = 0, $187 = 0, $199 = 0, $2 = 0, $206 = 0, $208 = 0, $21 = 0, $211 = 0, $212 = 0, $217 = 0, $223 = 0, $224 = 0, $23 = 0, $230 = 0, $24 = 0, $243 = 0, $245 = 0, $248 = 0, $253 = 0, $256 = 0, $257 = 0, $267 = 0, $269 = 0, $271 = 0, $274 = 0, $276 = 0, $277 = 0, $278 = 0, $28 = 0, $284 = 0, $286 = 0, $287 = 0, $29 = 0, $291 = 0, $299 = 0, $3 = 0, $305 = 0, $317 = 0, $320 = 0, $321 = 0, $334 = 0, $336 = 0, $34 = 0, $341 = 0, $346 = 0, $349 = 0, $359 = 0.0, $366 = 0, $370 = 0, $377 = 0, $379 = 0, $381 = 0, $382 = 0, $386 = 0, $39 = 0, $392 = 0.0, $393 = 0, $396 = 0, $398 = 0, $4 = 0, $40 = 0, $401 = 0, $403 = 0, $407 = 0.0, $417 = 0, $420 = 0, $423 = 0, $432 = 0, $434 = 0, $435 = 0, $44 = 0, $441 = 0, $459 = 0, $46 = 0, $464 = 0, $469 = 0, $47 = 0, $479 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $491 = 0, $492 = 0, $495 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $501 = 0, $505 = 0, $507 = 0, $51 = 0, $511 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $521 = 0, $527 = 0, $528 = 0, $529 = 0, $533 = 0, $541 = 0, $555 = 0, $556 = 0, $559 = 0, $56 = 0, $564 = 0, $565 = 0, $567 = 0, $574 = 0, $575 = 0, $576 = 0, $579 = 0, $580 = 0, $581 = 0, $588 = 0, $59 = 0, $598 = 0, $6 = 0, $60 = 0, $601 = 0, $603 = 0, $605 = 0, $607 = 0, $61 = 0, $612 = 0, $613 = 0, $616 = 0, $618 = 0, $620 = 0, $622 = 0, $633 = 0, $636 = 0, $641 = 0, $650 = 0, $651 = 0, $655 = 0, $658 = 0, $66 = 0, $660 = 0, $662 = 0, $666 = 0, $669 = 0, $67 = 0, $673 = 0, $683 = 0, $688 = 0, $695 = 0, $698 = 0, $7 = 0, $706 = 0, $716 = 0, $718 = 0, $726 = 0, $733 = 0, $735 = 0, $739 = 0, $741 = 0, $750 = 0, $756 = 0, $771 = 0, $773 = 0, $786 = 0, $8 = 0, $9 = 0, $91 = 0, $92 = 0, $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1147$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3134$i = 0, $a$5$lcssa$i = 0, $a$5109$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arg = 0, $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0140$i = 0, $carry3$0128$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0139$i = 0, $d$0141$i = 0, $d$1127$i = 0, $d$2$lcssa$i = 0, $d$2108$i = 0, $d$3$i = 0, $d$482$i = 0, $d$575$i = 0, $d$686$i = 0, $e$0123$i = 0, $e$1$i = 0, $e$2104$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$193$i = 0, $estr$2$i = 0, $fl$0109 = 0, $fl$062 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $fmt39$lcssa = 0, $fmt39101 = 0, $fmt40 = 0, $fmt41 = 0, $fmt42 = 0, $fmt44 = 0, $fmt44$lcssa321 = 0, $fmt45 = 0, $i$0$lcssa = 0, $i$0$lcssa200 = 0, $i$0114 = 0, $i$0122$i = 0, $i$03$i = 0, $i$03$i25 = 0, $i$1$lcssa$i = 0, $i$1116$i = 0, $i$1125 = 0, $i$2100 = 0, $i$2100$lcssa = 0, $i$2103$i = 0, $i$398 = 0, $i$399$i = 0, $isdigittmp = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i24 = 0, $isdigittmp9 = 0, $j$0115$i = 0, $j$0117$i = 0, $j$1100$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1113 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notrhs$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$4198 = 0, $p$5 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$169$i = 0, $round$068$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s7$079$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$070$i = 0, $s9$0$i = 0, $s9$183$i = 0, $s9$2$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa322 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8108 = 0, $storemerge860 = 0, $t$0 = 0, $t$1 = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $wc = 0, $ws$0115 = 0, $ws$1126 = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0102 = 0, $z$1$lcssa$i = 0, $z$1146$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3133$i = 0, $z$4$i = 0, $z$6$$i = 0, $z$6$i = 0, $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9287
 STACKTOP = STACKTOP + 624 | 0; //@line 9288
 $big$i = sp + 24 | 0; //@line 9289
 $e2$i = sp + 16 | 0; //@line 9290
 $buf$i = sp + 588 | 0; //@line 9291
 $ebuf0$i = sp + 576 | 0; //@line 9292
 $arg = sp; //@line 9293
 $buf = sp + 536 | 0; //@line 9294
 $wc = sp + 8 | 0; //@line 9295
 $mb = sp + 528 | 0; //@line 9296
 $0 = ($f | 0) != 0; //@line 9297
 $1 = $buf + 40 | 0; //@line 9298
 $2 = $1; //@line 9299
 $3 = $buf + 39 | 0; //@line 9300
 $4 = $wc + 4 | 0; //@line 9301
 $5 = $ebuf0$i + 12 | 0; //@line 9302
 $6 = $ebuf0$i + 11 | 0; //@line 9303
 $7 = $buf$i; //@line 9304
 $8 = $5; //@line 9305
 $9 = $8 - $7 | 0; //@line 9306
 $10 = -2 - $7 | 0; //@line 9307
 $11 = $8 + 2 | 0; //@line 9308
 $12 = $big$i + 288 | 0; //@line 9309
 $13 = $buf$i + 9 | 0; //@line 9310
 $14 = $13; //@line 9311
 $15 = $buf$i + 8 | 0; //@line 9312
 $cnt$0 = 0; //@line 9313
 $fmt41 = $fmt; //@line 9313
 $l$0 = 0; //@line 9313
 $l10n$0 = 0; //@line 9313
 L1 : while (1) {
  do {
   if (($cnt$0 | 0) > -1) {
    if (($l$0 | 0) > (2147483647 - $cnt$0 | 0)) {
     HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 9322
     $cnt$1 = -1; //@line 9323
     break;
    } else {
     $cnt$1 = $l$0 + $cnt$0 | 0; //@line 9327
     break;
    }
   } else {
    $cnt$1 = $cnt$0; //@line 9331
   }
  } while (0);
  $21 = HEAP8[$fmt41 >> 0] | 0; //@line 9334
  if (!($21 << 24 >> 24)) {
   $cnt$1$lcssa = $cnt$1; //@line 9337
   $l10n$0$lcssa = $l10n$0; //@line 9337
   label = 245; //@line 9338
   break;
  } else {
   $23 = $21; //@line 9341
   $fmt40 = $fmt41; //@line 9341
  }
  L9 : while (1) {
   switch ($23 << 24 >> 24) {
   case 37:
    {
     $fmt39101 = $fmt40; //@line 9346
     $z$0102 = $fmt40; //@line 9346
     label = 9; //@line 9347
     break L9;
     break;
    }
   case 0:
    {
     $fmt39$lcssa = $fmt40; //@line 9352
     $z$0$lcssa = $fmt40; //@line 9352
     break L9;
     break;
    }
   default:
    {}
   }
   $24 = $fmt40 + 1 | 0; //@line 9359
   $23 = HEAP8[$24 >> 0] | 0; //@line 9361
   $fmt40 = $24; //@line 9361
  }
  L12 : do {
   if ((label | 0) == 9) {
    while (1) {
     label = 0; //@line 9366
     if ((HEAP8[$fmt39101 + 1 >> 0] | 0) != 37) {
      $fmt39$lcssa = $fmt39101; //@line 9371
      $z$0$lcssa = $z$0102; //@line 9371
      break L12;
     }
     $28 = $z$0102 + 1 | 0; //@line 9374
     $29 = $fmt39101 + 2 | 0; //@line 9375
     if ((HEAP8[$29 >> 0] | 0) == 37) {
      $fmt39101 = $29; //@line 9379
      $z$0102 = $28; //@line 9379
      label = 9; //@line 9380
     } else {
      $fmt39$lcssa = $29; //@line 9382
      $z$0$lcssa = $28; //@line 9382
      break;
     }
    }
   }
  } while (0);
  $34 = $z$0$lcssa - $fmt41 | 0; //@line 9390
  if ($0) {
   if (!(HEAP32[$f >> 2] & 32)) {
    ___fwritex($fmt41, $34, $f) | 0; //@line 9396
   }
  }
  if (($z$0$lcssa | 0) != ($fmt41 | 0)) {
   $cnt$0 = $cnt$1; //@line 9401
   $fmt41 = $fmt39$lcssa; //@line 9401
   $l$0 = $34; //@line 9401
   continue;
  }
  $39 = $fmt39$lcssa + 1 | 0; //@line 9404
  $40 = HEAP8[$39 >> 0] | 0; //@line 9405
  $isdigittmp = ($40 << 24 >> 24) + -48 | 0; //@line 9407
  if ($isdigittmp >>> 0 < 10) {
   $44 = (HEAP8[$fmt39$lcssa + 2 >> 0] | 0) == 36; //@line 9412
   $$51 = $44 ? $fmt39$lcssa + 3 | 0 : $39; //@line 9414
   $47 = HEAP8[$$51 >> 0] | 0; //@line 9418
   $argpos$0 = $44 ? $isdigittmp : -1; //@line 9418
   $l10n$1 = $44 ? 1 : $l10n$0; //@line 9418
   $storemerge = $$51; //@line 9418
  } else {
   $47 = $40; //@line 9420
   $argpos$0 = -1; //@line 9420
   $l10n$1 = $l10n$0; //@line 9420
   $storemerge = $39; //@line 9420
  }
  $46 = $47 << 24 >> 24; //@line 9422
  L25 : do {
   if (($46 & -32 | 0) == 32) {
    $51 = $46; //@line 9427
    $56 = $47; //@line 9427
    $fl$0109 = 0; //@line 9427
    $storemerge8108 = $storemerge; //@line 9427
    while (1) {
     if (!(1 << $51 + -32 & 75913)) {
      $66 = $56; //@line 9434
      $fl$062 = $fl$0109; //@line 9434
      $storemerge860 = $storemerge8108; //@line 9434
      break L25;
     }
     $59 = 1 << ($56 << 24 >> 24) + -32 | $fl$0109; //@line 9440
     $60 = $storemerge8108 + 1 | 0; //@line 9441
     $61 = HEAP8[$60 >> 0] | 0; //@line 9442
     $51 = $61 << 24 >> 24; //@line 9443
     if (($51 & -32 | 0) != 32) {
      $66 = $61; //@line 9449
      $fl$062 = $59; //@line 9449
      $storemerge860 = $60; //@line 9449
      break;
     } else {
      $56 = $61; //@line 9447
      $fl$0109 = $59; //@line 9447
      $storemerge8108 = $60; //@line 9447
     }
    }
   } else {
    $66 = $47; //@line 9454
    $fl$062 = 0; //@line 9454
    $storemerge860 = $storemerge; //@line 9454
   }
  } while (0);
  do {
   if ($66 << 24 >> 24 == 42) {
    $67 = $storemerge860 + 1 | 0; //@line 9460
    $isdigittmp11 = (HEAP8[$67 >> 0] | 0) + -48 | 0; //@line 9463
    if ($isdigittmp11 >>> 0 < 10) {
     if ((HEAP8[$storemerge860 + 2 >> 0] | 0) == 36) {
      HEAP32[$nl_type + ($isdigittmp11 << 2) >> 2] = 10; //@line 9471
      $l10n$2 = 1; //@line 9483
      $storemerge13 = $storemerge860 + 3 | 0; //@line 9483
      $w$0 = HEAP32[$nl_arg + ((HEAP8[$67 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 9483
     } else {
      label = 24; //@line 9485
     }
    } else {
     label = 24; //@line 9488
    }
    if ((label | 0) == 24) {
     label = 0; //@line 9491
     if ($l10n$1) {
      $$0 = -1; //@line 9494
      break L1;
     }
     if (!$0) {
      $fl$1 = $fl$062; //@line 9498
      $fmt42 = $67; //@line 9498
      $l10n$3 = 0; //@line 9498
      $w$1 = 0; //@line 9498
      break;
     }
     $91 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 9512
     $92 = HEAP32[$91 >> 2] | 0; //@line 9513
     HEAP32[$ap >> 2] = $91 + 4; //@line 9515
     $l10n$2 = 0; //@line 9516
     $storemerge13 = $67; //@line 9516
     $w$0 = $92; //@line 9516
    }
    if (($w$0 | 0) < 0) {
     $fl$1 = $fl$062 | 8192; //@line 9522
     $fmt42 = $storemerge13; //@line 9522
     $l10n$3 = $l10n$2; //@line 9522
     $w$1 = 0 - $w$0 | 0; //@line 9522
    } else {
     $fl$1 = $fl$062; //@line 9524
     $fmt42 = $storemerge13; //@line 9524
     $l10n$3 = $l10n$2; //@line 9524
     $w$1 = $w$0; //@line 9524
    }
   } else {
    $isdigittmp1$i = ($66 << 24 >> 24) + -48 | 0; //@line 9528
    if ($isdigittmp1$i >>> 0 < 10) {
     $100 = $storemerge860; //@line 9531
     $i$03$i = 0; //@line 9531
     $isdigittmp4$i = $isdigittmp1$i; //@line 9531
     while (1) {
      $98 = ($i$03$i * 10 | 0) + $isdigittmp4$i | 0; //@line 9534
      $99 = $100 + 1 | 0; //@line 9535
      $isdigittmp4$i = (HEAP8[$99 >> 0] | 0) + -48 | 0; //@line 9538
      if ($isdigittmp4$i >>> 0 >= 10) {
       $$lcssa = $98; //@line 9543
       $$lcssa318 = $99; //@line 9543
       break;
      } else {
       $100 = $99; //@line 9541
       $i$03$i = $98; //@line 9541
      }
     }
     if (($$lcssa | 0) < 0) {
      $$0 = -1; //@line 9549
      break L1;
     } else {
      $fl$1 = $fl$062; //@line 9552
      $fmt42 = $$lcssa318; //@line 9552
      $l10n$3 = $l10n$1; //@line 9552
      $w$1 = $$lcssa; //@line 9552
     }
    } else {
     $fl$1 = $fl$062; //@line 9555
     $fmt42 = $storemerge860; //@line 9555
     $l10n$3 = $l10n$1; //@line 9555
     $w$1 = 0; //@line 9555
    }
   }
  } while (0);
  L46 : do {
   if ((HEAP8[$fmt42 >> 0] | 0) == 46) {
    $106 = $fmt42 + 1 | 0; //@line 9563
    $107 = HEAP8[$106 >> 0] | 0; //@line 9564
    if ($107 << 24 >> 24 != 42) {
     $isdigittmp1$i22 = ($107 << 24 >> 24) + -48 | 0; //@line 9568
     if ($isdigittmp1$i22 >>> 0 < 10) {
      $139 = $106; //@line 9571
      $i$03$i25 = 0; //@line 9571
      $isdigittmp4$i24 = $isdigittmp1$i22; //@line 9571
     } else {
      $fmt45 = $106; //@line 9573
      $p$0 = 0; //@line 9573
      break;
     }
     while (1) {
      $137 = ($i$03$i25 * 10 | 0) + $isdigittmp4$i24 | 0; //@line 9578
      $138 = $139 + 1 | 0; //@line 9579
      $isdigittmp4$i24 = (HEAP8[$138 >> 0] | 0) + -48 | 0; //@line 9582
      if ($isdigittmp4$i24 >>> 0 >= 10) {
       $fmt45 = $138; //@line 9587
       $p$0 = $137; //@line 9587
       break L46;
      } else {
       $139 = $138; //@line 9585
       $i$03$i25 = $137; //@line 9585
      }
     }
    }
    $109 = $fmt42 + 2 | 0; //@line 9592
    $isdigittmp9 = (HEAP8[$109 >> 0] | 0) + -48 | 0; //@line 9595
    if ($isdigittmp9 >>> 0 < 10) {
     if ((HEAP8[$fmt42 + 3 >> 0] | 0) == 36) {
      HEAP32[$nl_type + ($isdigittmp9 << 2) >> 2] = 10; //@line 9603
      $fmt45 = $fmt42 + 4 | 0; //@line 9615
      $p$0 = HEAP32[$nl_arg + ((HEAP8[$109 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 9615
      break;
     }
    }
    if ($l10n$3) {
     $$0 = -1; //@line 9621
     break L1;
    }
    if ($0) {
     $133 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 9636
     $134 = HEAP32[$133 >> 2] | 0; //@line 9637
     HEAP32[$ap >> 2] = $133 + 4; //@line 9639
     $fmt45 = $109; //@line 9640
     $p$0 = $134; //@line 9640
    } else {
     $fmt45 = $109; //@line 9642
     $p$0 = 0; //@line 9642
    }
   } else {
    $fmt45 = $fmt42; //@line 9645
    $p$0 = -1; //@line 9645
   }
  } while (0);
  $fmt44 = $fmt45; //@line 9648
  $st$0 = 0; //@line 9648
  while (1) {
   $144 = (HEAP8[$fmt44 >> 0] | 0) + -65 | 0; //@line 9652
   if ($144 >>> 0 > 57) {
    $$0 = -1; //@line 9655
    break L1;
   }
   $146 = $fmt44 + 1 | 0; //@line 9658
   $148 = HEAP8[19137 + ($st$0 * 58 | 0) + $144 >> 0] | 0; //@line 9660
   $149 = $148 & 255; //@line 9661
   if (($149 + -1 | 0) >>> 0 < 8) {
    $fmt44 = $146; //@line 9665
    $st$0 = $149; //@line 9665
   } else {
    $$lcssa323 = $146; //@line 9667
    $$lcssa324 = $148; //@line 9667
    $$lcssa325 = $149; //@line 9667
    $fmt44$lcssa321 = $fmt44; //@line 9667
    $st$0$lcssa322 = $st$0; //@line 9667
    break;
   }
  }
  if (!($$lcssa324 << 24 >> 24)) {
   $$0 = -1; //@line 9673
   break;
  }
  $154 = ($argpos$0 | 0) > -1; //@line 9677
  do {
   if ($$lcssa324 << 24 >> 24 == 19) {
    if ($154) {
     $$0 = -1; //@line 9681
     break L1;
    } else {
     label = 52; //@line 9684
    }
   } else {
    if ($154) {
     HEAP32[$nl_type + ($argpos$0 << 2) >> 2] = $$lcssa325; //@line 9689
     $157 = $nl_arg + ($argpos$0 << 3) | 0; //@line 9691
     $162 = HEAP32[$157 + 4 >> 2] | 0; //@line 9696
     $163 = $arg; //@line 9697
     HEAP32[$163 >> 2] = HEAP32[$157 >> 2]; //@line 9699
     HEAP32[$163 + 4 >> 2] = $162; //@line 9702
     label = 52; //@line 9703
     break;
    }
    if (!$0) {
     $$0 = 0; //@line 9707
     break L1;
    }
    _pop_arg($arg, $$lcssa325, $ap); //@line 9710
   }
  } while (0);
  if ((label | 0) == 52) {
   label = 0; //@line 9714
   if (!$0) {
    $cnt$0 = $cnt$1; //@line 9716
    $fmt41 = $$lcssa323; //@line 9716
    $l$0 = $34; //@line 9716
    $l10n$0 = $l10n$3; //@line 9716
    continue;
   }
  }
  $168 = HEAP8[$fmt44$lcssa321 >> 0] | 0; //@line 9721
  $t$0 = ($st$0$lcssa322 | 0) != 0 & ($168 & 15 | 0) == 3 ? $168 & -33 : $168; //@line 9727
  $175 = $fl$1 & -65537; //@line 9730
  $fl$1$ = ($fl$1 & 8192 | 0) == 0 ? $fl$1 : $175; //@line 9731
  L75 : do {
   switch ($t$0 | 0) {
   case 110:
    {
     switch ($st$0$lcssa322 | 0) {
     case 0:
      {
       HEAP32[HEAP32[$arg >> 2] >> 2] = $cnt$1; //@line 9738
       $cnt$0 = $cnt$1; //@line 9739
       $fmt41 = $$lcssa323; //@line 9739
       $l$0 = $34; //@line 9739
       $l10n$0 = $l10n$3; //@line 9739
       continue L1;
       break;
      }
     case 1:
      {
       HEAP32[HEAP32[$arg >> 2] >> 2] = $cnt$1; //@line 9745
       $cnt$0 = $cnt$1; //@line 9746
       $fmt41 = $$lcssa323; //@line 9746
       $l$0 = $34; //@line 9746
       $l10n$0 = $l10n$3; //@line 9746
       continue L1;
       break;
      }
     case 2:
      {
       $187 = HEAP32[$arg >> 2] | 0; //@line 9754
       HEAP32[$187 >> 2] = $cnt$1; //@line 9756
       HEAP32[$187 + 4 >> 2] = (($cnt$1 | 0) < 0) << 31 >> 31; //@line 9759
       $cnt$0 = $cnt$1; //@line 9760
       $fmt41 = $$lcssa323; //@line 9760
       $l$0 = $34; //@line 9760
       $l10n$0 = $l10n$3; //@line 9760
       continue L1;
       break;
      }
     case 3:
      {
       HEAP16[HEAP32[$arg >> 2] >> 1] = $cnt$1; //@line 9767
       $cnt$0 = $cnt$1; //@line 9768
       $fmt41 = $$lcssa323; //@line 9768
       $l$0 = $34; //@line 9768
       $l10n$0 = $l10n$3; //@line 9768
       continue L1;
       break;
      }
     case 4:
      {
       HEAP8[HEAP32[$arg >> 2] >> 0] = $cnt$1; //@line 9775
       $cnt$0 = $cnt$1; //@line 9776
       $fmt41 = $$lcssa323; //@line 9776
       $l$0 = $34; //@line 9776
       $l10n$0 = $l10n$3; //@line 9776
       continue L1;
       break;
      }
     case 6:
      {
       HEAP32[HEAP32[$arg >> 2] >> 2] = $cnt$1; //@line 9782
       $cnt$0 = $cnt$1; //@line 9783
       $fmt41 = $$lcssa323; //@line 9783
       $l$0 = $34; //@line 9783
       $l10n$0 = $l10n$3; //@line 9783
       continue L1;
       break;
      }
     case 7:
      {
       $199 = HEAP32[$arg >> 2] | 0; //@line 9791
       HEAP32[$199 >> 2] = $cnt$1; //@line 9793
       HEAP32[$199 + 4 >> 2] = (($cnt$1 | 0) < 0) << 31 >> 31; //@line 9796
       $cnt$0 = $cnt$1; //@line 9797
       $fmt41 = $$lcssa323; //@line 9797
       $l$0 = $34; //@line 9797
       $l10n$0 = $l10n$3; //@line 9797
       continue L1;
       break;
      }
     default:
      {
       $cnt$0 = $cnt$1; //@line 9802
       $fmt41 = $$lcssa323; //@line 9802
       $l$0 = $34; //@line 9802
       $l10n$0 = $l10n$3; //@line 9802
       continue L1;
      }
     }
     break;
    }
   case 112:
    {
     $fl$3 = $fl$1$ | 8; //@line 9812
     $p$1 = $p$0 >>> 0 > 8 ? $p$0 : 8; //@line 9812
     $t$1 = 120; //@line 9812
     label = 64; //@line 9813
     break;
    }
   case 88:
   case 120:
    {
     $fl$3 = $fl$1$; //@line 9817
     $p$1 = $p$0; //@line 9817
     $t$1 = $t$0; //@line 9817
     label = 64; //@line 9818
     break;
    }
   case 111:
    {
     $243 = $arg; //@line 9822
     $245 = HEAP32[$243 >> 2] | 0; //@line 9824
     $248 = HEAP32[$243 + 4 >> 2] | 0; //@line 9827
     if (($245 | 0) == 0 & ($248 | 0) == 0) {
      $$0$lcssa$i = $1; //@line 9832
     } else {
      $$03$i33 = $1; //@line 9834
      $253 = $245; //@line 9834
      $257 = $248; //@line 9834
      while (1) {
       $256 = $$03$i33 + -1 | 0; //@line 9839
       HEAP8[$256 >> 0] = $253 & 7 | 48; //@line 9840
       $253 = _bitshift64Lshr($253 | 0, $257 | 0, 3) | 0; //@line 9841
       $257 = tempRet0; //@line 9842
       if (($253 | 0) == 0 & ($257 | 0) == 0) {
        $$0$lcssa$i = $256; //@line 9847
        break;
       } else {
        $$03$i33 = $256; //@line 9850
       }
      }
     }
     if (!($fl$1$ & 8)) {
      $a$0 = $$0$lcssa$i; //@line 9857
      $fl$4 = $fl$1$; //@line 9857
      $p$2 = $p$0; //@line 9857
      $pl$1 = 0; //@line 9857
      $prefix$1 = 19617; //@line 9857
      label = 77; //@line 9858
     } else {
      $267 = $2 - $$0$lcssa$i + 1 | 0; //@line 9862
      $a$0 = $$0$lcssa$i; //@line 9865
      $fl$4 = $fl$1$; //@line 9865
      $p$2 = ($p$0 | 0) < ($267 | 0) ? $267 : $p$0; //@line 9865
      $pl$1 = 0; //@line 9865
      $prefix$1 = 19617; //@line 9865
      label = 77; //@line 9866
     }
     break;
    }
   case 105:
   case 100:
    {
     $269 = $arg; //@line 9871
     $271 = HEAP32[$269 >> 2] | 0; //@line 9873
     $274 = HEAP32[$269 + 4 >> 2] | 0; //@line 9876
     if (($274 | 0) < 0) {
      $276 = _i64Subtract(0, 0, $271 | 0, $274 | 0) | 0; //@line 9879
      $277 = tempRet0; //@line 9880
      $278 = $arg; //@line 9881
      HEAP32[$278 >> 2] = $276; //@line 9883
      HEAP32[$278 + 4 >> 2] = $277; //@line 9886
      $286 = $276; //@line 9887
      $287 = $277; //@line 9887
      $pl$0 = 1; //@line 9887
      $prefix$0 = 19617; //@line 9887
      label = 76; //@line 9888
      break L75;
     }
     if (!($fl$1$ & 2048)) {
      $284 = $fl$1$ & 1; //@line 9894
      $286 = $271; //@line 9897
      $287 = $274; //@line 9897
      $pl$0 = $284; //@line 9897
      $prefix$0 = ($284 | 0) == 0 ? 19617 : 19619; //@line 9897
      label = 76; //@line 9898
     } else {
      $286 = $271; //@line 9900
      $287 = $274; //@line 9900
      $pl$0 = 1; //@line 9900
      $prefix$0 = 19618; //@line 9900
      label = 76; //@line 9901
     }
     break;
    }
   case 117:
    {
     $176 = $arg; //@line 9906
     $286 = HEAP32[$176 >> 2] | 0; //@line 9912
     $287 = HEAP32[$176 + 4 >> 2] | 0; //@line 9912
     $pl$0 = 0; //@line 9912
     $prefix$0 = 19617; //@line 9912
     label = 76; //@line 9913
     break;
    }
   case 99:
    {
     HEAP8[$3 >> 0] = HEAP32[$arg >> 2]; //@line 9924
     $a$2 = $3; //@line 9925
     $fl$6 = $175; //@line 9925
     $p$5 = 1; //@line 9925
     $pl$2 = 0; //@line 9925
     $prefix$2 = 19617; //@line 9925
     $z$2 = $1; //@line 9925
     break;
    }
   case 109:
    {
     $a$1 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0; //@line 9932
     label = 82; //@line 9933
     break;
    }
   case 115:
    {
     $317 = HEAP32[$arg >> 2] | 0; //@line 9937
     $a$1 = ($317 | 0) != 0 ? $317 : 19627; //@line 9940
     label = 82; //@line 9941
     break;
    }
   case 67:
    {
     HEAP32[$wc >> 2] = HEAP32[$arg >> 2]; //@line 9951
     HEAP32[$4 >> 2] = 0; //@line 9952
     HEAP32[$arg >> 2] = $wc; //@line 9953
     $p$4198 = -1; //@line 9954
     label = 86; //@line 9955
     break;
    }
   case 83:
    {
     if (!$p$0) {
      _pad($f, 32, $w$1, 0, $fl$1$); //@line 9961
      $i$0$lcssa200 = 0; //@line 9962
      label = 98; //@line 9963
     } else {
      $p$4198 = $p$0; //@line 9965
      label = 86; //@line 9966
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $359 = +HEAPF64[$arg >> 3]; //@line 9971
     HEAP32[$e2$i >> 2] = 0; //@line 9972
     HEAPF64[tempDoublePtr >> 3] = $359; //@line 9973
     if ((HEAP32[tempDoublePtr + 4 >> 2] | 0) < 0) {
      $$07$i = -$359; //@line 9978
      $pl$0$i = 1; //@line 9978
      $prefix$0$i = 19634; //@line 9978
     } else {
      if (!($fl$1$ & 2048)) {
       $366 = $fl$1$ & 1; //@line 9983
       $$07$i = $359; //@line 9986
       $pl$0$i = $366; //@line 9986
       $prefix$0$i = ($366 | 0) == 0 ? 19635 : 19640; //@line 9986
      } else {
       $$07$i = $359; //@line 9988
       $pl$0$i = 1; //@line 9988
       $prefix$0$i = 19637; //@line 9988
      }
     }
     HEAPF64[tempDoublePtr >> 3] = $$07$i; //@line 9991
     $370 = HEAP32[tempDoublePtr + 4 >> 2] & 2146435072; //@line 9993
     do {
      if ($370 >>> 0 < 2146435072 | ($370 | 0) == 2146435072 & 0 < 0) {
       $392 = +_frexpl($$07$i, $e2$i) * 2.0; //@line 10002
       $393 = $392 != 0.0; //@line 10003
       if ($393) {
        HEAP32[$e2$i >> 2] = (HEAP32[$e2$i >> 2] | 0) + -1; //@line 10007
       }
       $396 = $t$0 | 32; //@line 10009
       if (($396 | 0) == 97) {
        $398 = $t$0 & 32; //@line 10012
        $prefix$0$$i = ($398 | 0) == 0 ? $prefix$0$i : $prefix$0$i + 9 | 0; //@line 10015
        $401 = $pl$0$i | 2; //@line 10016
        $403 = 12 - $p$0 | 0; //@line 10018
        do {
         if ($p$0 >>> 0 > 11 | ($403 | 0) == 0) {
          $$1$i = $392; //@line 10023
         } else {
          $re$169$i = $403; //@line 10025
          $round$068$i = 8.0; //@line 10025
          while (1) {
           $re$169$i = $re$169$i + -1 | 0; //@line 10027
           $407 = $round$068$i * 16.0; //@line 10028
           if (!$re$169$i) {
            $$lcssa342 = $407; //@line 10031
            break;
           } else {
            $round$068$i = $407; //@line 10034
           }
          }
          if ((HEAP8[$prefix$0$$i >> 0] | 0) == 45) {
           $$1$i = -($$lcssa342 + (-$392 - $$lcssa342)); //@line 10044
           break;
          } else {
           $$1$i = $392 + $$lcssa342 - $$lcssa342; //@line 10049
           break;
          }
         }
        } while (0);
        $417 = HEAP32[$e2$i >> 2] | 0; //@line 10054
        $420 = ($417 | 0) < 0 ? 0 - $417 | 0 : $417; //@line 10057
        $423 = _fmt_u($420, (($420 | 0) < 0) << 31 >> 31, $5) | 0; //@line 10060
        if (($423 | 0) == ($5 | 0)) {
         HEAP8[$6 >> 0] = 48; //@line 10063
         $estr$0$i = $6; //@line 10064
        } else {
         $estr$0$i = $423; //@line 10066
        }
        HEAP8[$estr$0$i + -1 >> 0] = ($417 >> 31 & 2) + 43; //@line 10073
        $432 = $estr$0$i + -2 | 0; //@line 10076
        HEAP8[$432 >> 0] = $t$0 + 15; //@line 10077
        $notrhs$i = ($p$0 | 0) < 1; //@line 10078
        $434 = ($fl$1$ & 8 | 0) == 0; //@line 10080
        $$2$i = $$1$i; //@line 10081
        $s$0$i = $buf$i; //@line 10081
        while (1) {
         $435 = ~~$$2$i; //@line 10083
         $441 = $s$0$i + 1 | 0; //@line 10089
         HEAP8[$s$0$i >> 0] = HEAPU8[19601 + $435 >> 0] | $398; //@line 10090
         $$2$i = ($$2$i - +($435 | 0)) * 16.0; //@line 10093
         do {
          if (($441 - $7 | 0) == 1) {
           if ($434 & ($notrhs$i & $$2$i == 0.0)) {
            $s$1$i = $441; //@line 10103
            break;
           }
           HEAP8[$441 >> 0] = 46; //@line 10107
           $s$1$i = $s$0$i + 2 | 0; //@line 10108
          } else {
           $s$1$i = $441; //@line 10110
          }
         } while (0);
         if (!($$2$i != 0.0)) {
          $s$1$i$lcssa = $s$1$i; //@line 10117
          break;
         } else {
          $s$0$i = $s$1$i; //@line 10115
         }
        }
        $$pre182$i = $s$1$i$lcssa; //@line 10122
        $l$0$i = ($p$0 | 0) != 0 & ($10 + $$pre182$i | 0) < ($p$0 | 0) ? $11 + $p$0 - $432 | 0 : $9 - $432 + $$pre182$i | 0; //@line 10132
        $459 = $l$0$i + $401 | 0; //@line 10133
        _pad($f, 32, $w$1, $459, $fl$1$); //@line 10134
        if (!(HEAP32[$f >> 2] & 32)) {
         ___fwritex($prefix$0$$i, $401, $f) | 0; //@line 10139
        }
        _pad($f, 48, $w$1, $459, $fl$1$ ^ 65536); //@line 10142
        $464 = $$pre182$i - $7 | 0; //@line 10143
        if (!(HEAP32[$f >> 2] & 32)) {
         ___fwritex($buf$i, $464, $f) | 0; //@line 10148
        }
        $469 = $8 - $432 | 0; //@line 10151
        _pad($f, 48, $l$0$i - ($464 + $469) | 0, 0, 0); //@line 10154
        if (!(HEAP32[$f >> 2] & 32)) {
         ___fwritex($432, $469, $f) | 0; //@line 10159
        }
        _pad($f, 32, $w$1, $459, $fl$1$ ^ 8192); //@line 10162
        $$0$i = ($459 | 0) < ($w$1 | 0) ? $w$1 : $459; //@line 10165
        break;
       }
       $$p$i = ($p$0 | 0) < 0 ? 6 : $p$0; //@line 10169
       if ($393) {
        $479 = (HEAP32[$e2$i >> 2] | 0) + -28 | 0; //@line 10173
        HEAP32[$e2$i >> 2] = $479; //@line 10174
        $$3$i = $392 * 268435456.0; //@line 10175
        $481 = $479; //@line 10175
       } else {
        $$3$i = $392; //@line 10178
        $481 = HEAP32[$e2$i >> 2] | 0; //@line 10178
       }
       $$31$i = ($481 | 0) < 0 ? $big$i : $12; //@line 10181
       $482 = $$31$i; //@line 10182
       $$4$i = $$3$i; //@line 10183
       $z$0$i = $$31$i; //@line 10183
       while (1) {
        $483 = ~~$$4$i >>> 0; //@line 10185
        HEAP32[$z$0$i >> 2] = $483; //@line 10186
        $484 = $z$0$i + 4 | 0; //@line 10187
        $$4$i = ($$4$i - +($483 >>> 0)) * 1.0e9; //@line 10190
        if (!($$4$i != 0.0)) {
         $$lcssa326 = $484; //@line 10195
         break;
        } else {
         $z$0$i = $484; //@line 10193
        }
       }
       $$pr$i = HEAP32[$e2$i >> 2] | 0; //@line 10199
       if (($$pr$i | 0) > 0) {
        $491 = $$pr$i; //@line 10202
        $a$1147$i = $$31$i; //@line 10202
        $z$1146$i = $$lcssa326; //@line 10202
        while (1) {
         $492 = ($491 | 0) > 29 ? 29 : $491; //@line 10205
         $d$0139$i = $z$1146$i + -4 | 0; //@line 10206
         do {
          if ($d$0139$i >>> 0 < $a$1147$i >>> 0) {
           $a$2$ph$i = $a$1147$i; //@line 10210
          } else {
           $carry$0140$i = 0; //@line 10212
           $d$0141$i = $d$0139$i; //@line 10212
           while (1) {
            $495 = _bitshift64Shl(HEAP32[$d$0141$i >> 2] | 0, 0, $492 | 0) | 0; //@line 10215
            $497 = _i64Add($495 | 0, tempRet0 | 0, $carry$0140$i | 0, 0) | 0; //@line 10217
            $498 = tempRet0; //@line 10218
            $499 = ___uremdi3($497 | 0, $498 | 0, 1e9, 0) | 0; //@line 10219
            HEAP32[$d$0141$i >> 2] = $499; //@line 10221
            $501 = ___udivdi3($497 | 0, $498 | 0, 1e9, 0) | 0; //@line 10222
            $d$0141$i = $d$0141$i + -4 | 0; //@line 10224
            if ($d$0141$i >>> 0 < $a$1147$i >>> 0) {
             $$lcssa327 = $501; //@line 10227
             break;
            } else {
             $carry$0140$i = $501; //@line 10230
            }
           }
           if (!$$lcssa327) {
            $a$2$ph$i = $a$1147$i; //@line 10235
            break;
           }
           $505 = $a$1147$i + -4 | 0; //@line 10238
           HEAP32[$505 >> 2] = $$lcssa327; //@line 10239
           $a$2$ph$i = $505; //@line 10240
          }
         } while (0);
         $z$2$i = $z$1146$i; //@line 10243
         while (1) {
          if ($z$2$i >>> 0 <= $a$2$ph$i >>> 0) {
           $z$2$i$lcssa = $z$2$i; //@line 10247
           break;
          }
          $507 = $z$2$i + -4 | 0; //@line 10250
          if (!(HEAP32[$507 >> 2] | 0)) {
           $z$2$i = $507; //@line 10254
          } else {
           $z$2$i$lcssa = $z$2$i; //@line 10256
           break;
          }
         }
         $511 = (HEAP32[$e2$i >> 2] | 0) - $492 | 0; //@line 10261
         HEAP32[$e2$i >> 2] = $511; //@line 10262
         if (($511 | 0) > 0) {
          $491 = $511; //@line 10265
          $a$1147$i = $a$2$ph$i; //@line 10265
          $z$1146$i = $z$2$i$lcssa; //@line 10265
         } else {
          $$pr47$i = $511; //@line 10267
          $a$1$lcssa$i = $a$2$ph$i; //@line 10267
          $z$1$lcssa$i = $z$2$i$lcssa; //@line 10267
          break;
         }
        }
       } else {
        $$pr47$i = $$pr$i; //@line 10272
        $a$1$lcssa$i = $$31$i; //@line 10272
        $z$1$lcssa$i = $$lcssa326; //@line 10272
       }
       if (($$pr47$i | 0) < 0) {
        $516 = (($$p$i + 25 | 0) / 9 | 0) + 1 | 0; //@line 10278
        $517 = ($396 | 0) == 102; //@line 10279
        $519 = $$pr47$i; //@line 10280
        $a$3134$i = $a$1$lcssa$i; //@line 10280
        $z$3133$i = $z$1$lcssa$i; //@line 10280
        while (1) {
         $518 = 0 - $519 | 0; //@line 10282
         $521 = ($518 | 0) > 9 ? 9 : $518; //@line 10284
         do {
          if ($a$3134$i >>> 0 < $z$3133$i >>> 0) {
           $527 = (1 << $521) + -1 | 0; //@line 10289
           $528 = 1e9 >>> $521; //@line 10290
           $carry3$0128$i = 0; //@line 10291
           $d$1127$i = $a$3134$i; //@line 10291
           while (1) {
            $529 = HEAP32[$d$1127$i >> 2] | 0; //@line 10293
            HEAP32[$d$1127$i >> 2] = ($529 >>> $521) + $carry3$0128$i; //@line 10297
            $533 = Math_imul($529 & $527, $528) | 0; //@line 10298
            $d$1127$i = $d$1127$i + 4 | 0; //@line 10299
            if ($d$1127$i >>> 0 >= $z$3133$i >>> 0) {
             $$lcssa329 = $533; //@line 10304
             break;
            } else {
             $carry3$0128$i = $533; //@line 10302
            }
           }
           $$a$3$i = (HEAP32[$a$3134$i >> 2] | 0) == 0 ? $a$3134$i + 4 | 0 : $a$3134$i; //@line 10311
           if (!$$lcssa329) {
            $$a$3186$i = $$a$3$i; //@line 10314
            $z$4$i = $z$3133$i; //@line 10314
            break;
           }
           HEAP32[$z$3133$i >> 2] = $$lcssa329; //@line 10318
           $$a$3186$i = $$a$3$i; //@line 10319
           $z$4$i = $z$3133$i + 4 | 0; //@line 10319
          } else {
           $$a$3186$i = (HEAP32[$a$3134$i >> 2] | 0) == 0 ? $a$3134$i + 4 | 0 : $a$3134$i; //@line 10325
           $z$4$i = $z$3133$i; //@line 10325
          }
         } while (0);
         $541 = $517 ? $$31$i : $$a$3186$i; //@line 10328
         $$z$4$i = ($z$4$i - $541 >> 2 | 0) > ($516 | 0) ? $541 + ($516 << 2) | 0 : $z$4$i; //@line 10335
         $519 = (HEAP32[$e2$i >> 2] | 0) + $521 | 0; //@line 10337
         HEAP32[$e2$i >> 2] = $519; //@line 10338
         if (($519 | 0) >= 0) {
          $a$3$lcssa$i = $$a$3186$i; //@line 10343
          $z$3$lcssa$i = $$z$4$i; //@line 10343
          break;
         } else {
          $a$3134$i = $$a$3186$i; //@line 10341
          $z$3133$i = $$z$4$i; //@line 10341
         }
        }
       } else {
        $a$3$lcssa$i = $a$1$lcssa$i; //@line 10348
        $z$3$lcssa$i = $z$1$lcssa$i; //@line 10348
       }
       do {
        if ($a$3$lcssa$i >>> 0 < $z$3$lcssa$i >>> 0) {
         $555 = ($482 - $a$3$lcssa$i >> 2) * 9 | 0; //@line 10356
         $556 = HEAP32[$a$3$lcssa$i >> 2] | 0; //@line 10357
         if ($556 >>> 0 < 10) {
          $e$1$i = $555; //@line 10360
          break;
         } else {
          $e$0123$i = $555; //@line 10363
          $i$0122$i = 10; //@line 10363
         }
         while (1) {
          $i$0122$i = $i$0122$i * 10 | 0; //@line 10366
          $559 = $e$0123$i + 1 | 0; //@line 10367
          if ($556 >>> 0 < $i$0122$i >>> 0) {
           $e$1$i = $559; //@line 10370
           break;
          } else {
           $e$0123$i = $559; //@line 10373
          }
         }
        } else {
         $e$1$i = 0; //@line 10377
        }
       } while (0);
       $564 = ($396 | 0) == 103; //@line 10383
       $565 = ($$p$i | 0) != 0; //@line 10384
       $567 = $$p$i - (($396 | 0) != 102 ? $e$1$i : 0) + (($565 & $564) << 31 >> 31) | 0; //@line 10387
       if (($567 | 0) < ((($z$3$lcssa$i - $482 >> 2) * 9 | 0) + -9 | 0)) {
        $574 = $567 + 9216 | 0; //@line 10395
        $575 = ($574 | 0) / 9 | 0; //@line 10396
        $576 = $$31$i + ($575 + -1023 << 2) | 0; //@line 10398
        $j$0115$i = (($574 | 0) % 9 | 0) + 1 | 0; //@line 10400
        if (($j$0115$i | 0) < 9) {
         $i$1116$i = 10; //@line 10403
         $j$0117$i = $j$0115$i; //@line 10403
         while (1) {
          $579 = $i$1116$i * 10 | 0; //@line 10405
          $j$0117$i = $j$0117$i + 1 | 0; //@line 10406
          if (($j$0117$i | 0) == 9) {
           $i$1$lcssa$i = $579; //@line 10409
           break;
          } else {
           $i$1116$i = $579; //@line 10412
          }
         }
        } else {
         $i$1$lcssa$i = 10; //@line 10416
        }
        $580 = HEAP32[$576 >> 2] | 0; //@line 10418
        $581 = ($580 >>> 0) % ($i$1$lcssa$i >>> 0) | 0; //@line 10419
        if (!$581) {
         if (($$31$i + ($575 + -1022 << 2) | 0) == ($z$3$lcssa$i | 0)) {
          $a$7$i = $a$3$lcssa$i; //@line 10426
          $d$3$i = $576; //@line 10426
          $e$3$i = $e$1$i; //@line 10426
         } else {
          label = 163; //@line 10428
         }
        } else {
         label = 163; //@line 10431
        }
        do {
         if ((label | 0) == 163) {
          label = 0; //@line 10435
          $$20$i = ((($580 >>> 0) / ($i$1$lcssa$i >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0; //@line 10439
          $588 = ($i$1$lcssa$i | 0) / 2 | 0; //@line 10440
          do {
           if ($581 >>> 0 < $588 >>> 0) {
            $small$0$i = .5; //@line 10444
           } else {
            if (($581 | 0) == ($588 | 0)) {
             if (($$31$i + ($575 + -1022 << 2) | 0) == ($z$3$lcssa$i | 0)) {
              $small$0$i = 1.0; //@line 10452
              break;
             }
            }
            $small$0$i = 1.5; //@line 10456
           }
          } while (0);
          do {
           if (!$pl$0$i) {
            $round6$1$i = $$20$i; //@line 10462
            $small$1$i = $small$0$i; //@line 10462
           } else {
            if ((HEAP8[$prefix$0$i >> 0] | 0) != 45) {
             $round6$1$i = $$20$i; //@line 10467
             $small$1$i = $small$0$i; //@line 10467
             break;
            }
            $round6$1$i = -$$20$i; //@line 10472
            $small$1$i = -$small$0$i; //@line 10472
           }
          } while (0);
          $598 = $580 - $581 | 0; //@line 10475
          HEAP32[$576 >> 2] = $598; //@line 10476
          if (!($round6$1$i + $small$1$i != $round6$1$i)) {
           $a$7$i = $a$3$lcssa$i; //@line 10480
           $d$3$i = $576; //@line 10480
           $e$3$i = $e$1$i; //@line 10480
           break;
          }
          $601 = $598 + $i$1$lcssa$i | 0; //@line 10483
          HEAP32[$576 >> 2] = $601; //@line 10484
          if ($601 >>> 0 > 999999999) {
           $a$5109$i = $a$3$lcssa$i; //@line 10487
           $d$2108$i = $576; //@line 10487
           while (1) {
            $603 = $d$2108$i + -4 | 0; //@line 10489
            HEAP32[$d$2108$i >> 2] = 0; //@line 10490
            if ($603 >>> 0 < $a$5109$i >>> 0) {
             $605 = $a$5109$i + -4 | 0; //@line 10493
             HEAP32[$605 >> 2] = 0; //@line 10494
             $a$6$i = $605; //@line 10495
            } else {
             $a$6$i = $a$5109$i; //@line 10497
            }
            $607 = (HEAP32[$603 >> 2] | 0) + 1 | 0; //@line 10500
            HEAP32[$603 >> 2] = $607; //@line 10501
            if ($607 >>> 0 > 999999999) {
             $a$5109$i = $a$6$i; //@line 10504
             $d$2108$i = $603; //@line 10504
            } else {
             $a$5$lcssa$i = $a$6$i; //@line 10506
             $d$2$lcssa$i = $603; //@line 10506
             break;
            }
           }
          } else {
           $a$5$lcssa$i = $a$3$lcssa$i; //@line 10511
           $d$2$lcssa$i = $576; //@line 10511
          }
          $612 = ($482 - $a$5$lcssa$i >> 2) * 9 | 0; //@line 10516
          $613 = HEAP32[$a$5$lcssa$i >> 2] | 0; //@line 10517
          if ($613 >>> 0 < 10) {
           $a$7$i = $a$5$lcssa$i; //@line 10520
           $d$3$i = $d$2$lcssa$i; //@line 10520
           $e$3$i = $612; //@line 10520
           break;
          } else {
           $e$2104$i = $612; //@line 10523
           $i$2103$i = 10; //@line 10523
          }
          while (1) {
           $i$2103$i = $i$2103$i * 10 | 0; //@line 10526
           $616 = $e$2104$i + 1 | 0; //@line 10527
           if ($613 >>> 0 < $i$2103$i >>> 0) {
            $a$7$i = $a$5$lcssa$i; //@line 10530
            $d$3$i = $d$2$lcssa$i; //@line 10530
            $e$3$i = $616; //@line 10530
            break;
           } else {
            $e$2104$i = $616; //@line 10533
           }
          }
         }
        } while (0);
        $618 = $d$3$i + 4 | 0; //@line 10538
        $a$8$ph$i = $a$7$i; //@line 10541
        $e$4$ph$i = $e$3$i; //@line 10541
        $z$6$ph$i = $z$3$lcssa$i >>> 0 > $618 >>> 0 ? $618 : $z$3$lcssa$i; //@line 10541
       } else {
        $a$8$ph$i = $a$3$lcssa$i; //@line 10543
        $e$4$ph$i = $e$1$i; //@line 10543
        $z$6$ph$i = $z$3$lcssa$i; //@line 10543
       }
       $620 = 0 - $e$4$ph$i | 0; //@line 10545
       $z$6$i = $z$6$ph$i; //@line 10546
       while (1) {
        if ($z$6$i >>> 0 <= $a$8$ph$i >>> 0) {
         $$lcssa159$i = 0; //@line 10550
         $z$6$i$lcssa = $z$6$i; //@line 10550
         break;
        }
        $622 = $z$6$i + -4 | 0; //@line 10553
        if (!(HEAP32[$622 >> 2] | 0)) {
         $z$6$i = $622; //@line 10557
        } else {
         $$lcssa159$i = 1; //@line 10559
         $z$6$i$lcssa = $z$6$i; //@line 10559
         break;
        }
       }
       do {
        if ($564) {
         $$p$$i = ($565 & 1 ^ 1) + $$p$i | 0; //@line 10567
         if (($$p$$i | 0) > ($e$4$ph$i | 0) & ($e$4$ph$i | 0) > -5) {
          $$013$i = $t$0 + -1 | 0; //@line 10575
          $$210$i = $$p$$i + -1 - $e$4$ph$i | 0; //@line 10575
         } else {
          $$013$i = $t$0 + -2 | 0; //@line 10579
          $$210$i = $$p$$i + -1 | 0; //@line 10579
         }
         $633 = $fl$1$ & 8; //@line 10581
         if ($633) {
          $$114$i = $$013$i; //@line 10584
          $$311$i = $$210$i; //@line 10584
          $$pre$phi184$iZ2D = $633; //@line 10584
          break;
         }
         do {
          if ($$lcssa159$i) {
           $636 = HEAP32[$z$6$i$lcssa + -4 >> 2] | 0; //@line 10590
           if (!$636) {
            $j$2$i = 9; //@line 10593
            break;
           }
           if (!(($636 >>> 0) % 10 | 0)) {
            $i$399$i = 10; //@line 10599
            $j$1100$i = 0; //@line 10599
           } else {
            $j$2$i = 0; //@line 10601
            break;
           }
           while (1) {
            $i$399$i = $i$399$i * 10 | 0; //@line 10605
            $641 = $j$1100$i + 1 | 0; //@line 10606
            if (($636 >>> 0) % ($i$399$i >>> 0) | 0) {
             $j$2$i = $641; //@line 10612
             break;
            } else {
             $j$1100$i = $641; //@line 10610
            }
           }
          } else {
           $j$2$i = 9; //@line 10617
          }
         } while (0);
         $650 = (($z$6$i$lcssa - $482 >> 2) * 9 | 0) + -9 | 0; //@line 10626
         if (($$013$i | 32 | 0) == 102) {
          $651 = $650 - $j$2$i | 0; //@line 10628
          $$21$i = ($651 | 0) < 0 ? 0 : $651; //@line 10630
          $$114$i = $$013$i; //@line 10633
          $$311$i = ($$210$i | 0) < ($$21$i | 0) ? $$210$i : $$21$i; //@line 10633
          $$pre$phi184$iZ2D = 0; //@line 10633
          break;
         } else {
          $655 = $650 + $e$4$ph$i - $j$2$i | 0; //@line 10637
          $$23$i = ($655 | 0) < 0 ? 0 : $655; //@line 10639
          $$114$i = $$013$i; //@line 10642
          $$311$i = ($$210$i | 0) < ($$23$i | 0) ? $$210$i : $$23$i; //@line 10642
          $$pre$phi184$iZ2D = 0; //@line 10642
          break;
         }
        } else {
         $$114$i = $t$0; //@line 10647
         $$311$i = $$p$i; //@line 10647
         $$pre$phi184$iZ2D = $fl$1$ & 8; //@line 10647
        }
       } while (0);
       $658 = $$311$i | $$pre$phi184$iZ2D; //@line 10650
       $660 = ($658 | 0) != 0 & 1; //@line 10652
       $662 = ($$114$i | 32 | 0) == 102; //@line 10654
       if ($662) {
        $$pn$i = ($e$4$ph$i | 0) > 0 ? $e$4$ph$i : 0; //@line 10658
        $estr$2$i = 0; //@line 10658
       } else {
        $666 = ($e$4$ph$i | 0) < 0 ? $620 : $e$4$ph$i; //@line 10661
        $669 = _fmt_u($666, (($666 | 0) < 0) << 31 >> 31, $5) | 0; //@line 10664
        if (($8 - $669 | 0) < 2) {
         $estr$193$i = $669; //@line 10669
         while (1) {
          $673 = $estr$193$i + -1 | 0; //@line 10671
          HEAP8[$673 >> 0] = 48; //@line 10672
          if (($8 - $673 | 0) < 2) {
           $estr$193$i = $673; //@line 10677
          } else {
           $estr$1$lcssa$i = $673; //@line 10679
           break;
          }
         }
        } else {
         $estr$1$lcssa$i = $669; //@line 10684
        }
        HEAP8[$estr$1$lcssa$i + -1 >> 0] = ($e$4$ph$i >> 31 & 2) + 43; //@line 10691
        $683 = $estr$1$lcssa$i + -2 | 0; //@line 10693
        HEAP8[$683 >> 0] = $$114$i; //@line 10694
        $$pn$i = $8 - $683 | 0; //@line 10697
        $estr$2$i = $683; //@line 10697
       }
       $688 = $pl$0$i + 1 + $$311$i + $660 + $$pn$i | 0; //@line 10702
       _pad($f, 32, $w$1, $688, $fl$1$); //@line 10703
       if (!(HEAP32[$f >> 2] & 32)) {
        ___fwritex($prefix$0$i, $pl$0$i, $f) | 0; //@line 10708
       }
       _pad($f, 48, $w$1, $688, $fl$1$ ^ 65536); //@line 10711
       do {
        if ($662) {
         $r$0$a$8$i = $a$8$ph$i >>> 0 > $$31$i >>> 0 ? $$31$i : $a$8$ph$i; //@line 10715
         $d$482$i = $r$0$a$8$i; //@line 10716
         while (1) {
          $695 = _fmt_u(HEAP32[$d$482$i >> 2] | 0, 0, $13) | 0; //@line 10719
          do {
           if (($d$482$i | 0) == ($r$0$a$8$i | 0)) {
            if (($695 | 0) != ($13 | 0)) {
             $s7$1$i = $695; //@line 10725
             break;
            }
            HEAP8[$15 >> 0] = 48; //@line 10728
            $s7$1$i = $15; //@line 10729
           } else {
            if ($695 >>> 0 > $buf$i >>> 0) {
             $s7$079$i = $695; //@line 10733
            } else {
             $s7$1$i = $695; //@line 10735
             break;
            }
            while (1) {
             $698 = $s7$079$i + -1 | 0; //@line 10739
             HEAP8[$698 >> 0] = 48; //@line 10740
             if ($698 >>> 0 > $buf$i >>> 0) {
              $s7$079$i = $698; //@line 10743
             } else {
              $s7$1$i = $698; //@line 10745
              break;
             }
            }
           }
          } while (0);
          if (!(HEAP32[$f >> 2] & 32)) {
           ___fwritex($s7$1$i, $14 - $s7$1$i | 0, $f) | 0; //@line 10757
          }
          $706 = $d$482$i + 4 | 0; //@line 10759
          if ($706 >>> 0 > $$31$i >>> 0) {
           $$lcssa339 = $706; //@line 10762
           break;
          } else {
           $d$482$i = $706; //@line 10765
          }
         }
         do {
          if ($658) {
           if (HEAP32[$f >> 2] & 32) {
            break;
           }
           ___fwritex(19669, 1, $f) | 0; //@line 10777
          }
         } while (0);
         if (($$311$i | 0) > 0 & $$lcssa339 >>> 0 < $z$6$i$lcssa >>> 0) {
          $$41276$i = $$311$i; //@line 10784
          $d$575$i = $$lcssa339; //@line 10784
          while (1) {
           $716 = _fmt_u(HEAP32[$d$575$i >> 2] | 0, 0, $13) | 0; //@line 10787
           if ($716 >>> 0 > $buf$i >>> 0) {
            $s8$070$i = $716; //@line 10790
            while (1) {
             $718 = $s8$070$i + -1 | 0; //@line 10792
             HEAP8[$718 >> 0] = 48; //@line 10793
             if ($718 >>> 0 > $buf$i >>> 0) {
              $s8$070$i = $718; //@line 10796
             } else {
              $s8$0$lcssa$i = $718; //@line 10798
              break;
             }
            }
           } else {
            $s8$0$lcssa$i = $716; //@line 10803
           }
           if (!(HEAP32[$f >> 2] & 32)) {
            ___fwritex($s8$0$lcssa$i, ($$41276$i | 0) > 9 ? 9 : $$41276$i, $f) | 0; //@line 10811
           }
           $d$575$i = $d$575$i + 4 | 0; //@line 10813
           $726 = $$41276$i + -9 | 0; //@line 10814
           if (!(($$41276$i | 0) > 9 & $d$575$i >>> 0 < $z$6$i$lcssa >>> 0)) {
            $$412$lcssa$i = $726; //@line 10821
            break;
           } else {
            $$41276$i = $726; //@line 10819
           }
          }
         } else {
          $$412$lcssa$i = $$311$i; //@line 10826
         }
         _pad($f, 48, $$412$lcssa$i + 9 | 0, 9, 0); //@line 10829
        } else {
         $z$6$$i = $$lcssa159$i ? $z$6$i$lcssa : $a$8$ph$i + 4 | 0; //@line 10832
         if (($$311$i | 0) > -1) {
          $733 = ($$pre$phi184$iZ2D | 0) == 0; //@line 10835
          $$587$i = $$311$i; //@line 10836
          $d$686$i = $a$8$ph$i; //@line 10836
          while (1) {
           $735 = _fmt_u(HEAP32[$d$686$i >> 2] | 0, 0, $13) | 0; //@line 10839
           if (($735 | 0) == ($13 | 0)) {
            HEAP8[$15 >> 0] = 48; //@line 10842
            $s9$0$i = $15; //@line 10843
           } else {
            $s9$0$i = $735; //@line 10845
           }
           do {
            if (($d$686$i | 0) == ($a$8$ph$i | 0)) {
             $741 = $s9$0$i + 1 | 0; //@line 10850
             if (!(HEAP32[$f >> 2] & 32)) {
              ___fwritex($s9$0$i, 1, $f) | 0; //@line 10855
             }
             if ($733 & ($$587$i | 0) < 1) {
              $s9$2$i = $741; //@line 10860
              break;
             }
             if (HEAP32[$f >> 2] & 32) {
              $s9$2$i = $741; //@line 10867
              break;
             }
             ___fwritex(19669, 1, $f) | 0; //@line 10870
             $s9$2$i = $741; //@line 10871
            } else {
             if ($s9$0$i >>> 0 > $buf$i >>> 0) {
              $s9$183$i = $s9$0$i; //@line 10875
             } else {
              $s9$2$i = $s9$0$i; //@line 10877
              break;
             }
             while (1) {
              $739 = $s9$183$i + -1 | 0; //@line 10881
              HEAP8[$739 >> 0] = 48; //@line 10882
              if ($739 >>> 0 > $buf$i >>> 0) {
               $s9$183$i = $739; //@line 10885
              } else {
               $s9$2$i = $739; //@line 10887
               break;
              }
             }
            }
           } while (0);
           $750 = $14 - $s9$2$i | 0; //@line 10894
           if (!(HEAP32[$f >> 2] & 32)) {
            ___fwritex($s9$2$i, ($$587$i | 0) > ($750 | 0) ? $750 : $$587$i, $f) | 0; //@line 10901
           }
           $756 = $$587$i - $750 | 0; //@line 10903
           $d$686$i = $d$686$i + 4 | 0; //@line 10904
           if (!($d$686$i >>> 0 < $z$6$$i >>> 0 & ($756 | 0) > -1)) {
            $$5$lcssa$i = $756; //@line 10911
            break;
           } else {
            $$587$i = $756; //@line 10909
           }
          }
         } else {
          $$5$lcssa$i = $$311$i; //@line 10916
         }
         _pad($f, 48, $$5$lcssa$i + 18 | 0, 18, 0); //@line 10919
         if (HEAP32[$f >> 2] & 32) {
          break;
         }
         ___fwritex($estr$2$i, $8 - $estr$2$i | 0, $f) | 0; //@line 10928
        }
       } while (0);
       _pad($f, 32, $w$1, $688, $fl$1$ ^ 8192); //@line 10932
       $$0$i = ($688 | 0) < ($w$1 | 0) ? $w$1 : $688; //@line 10935
      } else {
       $377 = ($t$0 & 32 | 0) != 0; //@line 10938
       $379 = $$07$i != $$07$i | 0.0 != 0.0; //@line 10940
       $pl$1$i = $379 ? 0 : $pl$0$i; //@line 10942
       $381 = $pl$1$i + 3 | 0; //@line 10944
       _pad($f, 32, $w$1, $381, $175); //@line 10945
       $382 = HEAP32[$f >> 2] | 0; //@line 10946
       if (!($382 & 32)) {
        ___fwritex($prefix$0$i, $pl$1$i, $f) | 0; //@line 10950
        $386 = HEAP32[$f >> 2] | 0; //@line 10952
       } else {
        $386 = $382; //@line 10954
       }
       if (!($386 & 32)) {
        ___fwritex($379 ? $377 ? 19661 : 19665 : $377 ? 19653 : 19657, 3, $f) | 0; //@line 10959
       }
       _pad($f, 32, $w$1, $381, $fl$1$ ^ 8192); //@line 10962
       $$0$i = ($381 | 0) < ($w$1 | 0) ? $w$1 : $381; //@line 10965
      }
     } while (0);
     $cnt$0 = $cnt$1; //@line 10968
     $fmt41 = $$lcssa323; //@line 10968
     $l$0 = $$0$i; //@line 10968
     $l10n$0 = $l10n$3; //@line 10968
     continue L1;
     break;
    }
   default:
    {
     $a$2 = $fmt41; //@line 10973
     $fl$6 = $fl$1$; //@line 10973
     $p$5 = $p$0; //@line 10973
     $pl$2 = 0; //@line 10973
     $prefix$2 = 19617; //@line 10973
     $z$2 = $1; //@line 10973
    }
   }
  } while (0);
  L313 : do {
   if ((label | 0) == 64) {
    label = 0; //@line 10979
    $206 = $arg; //@line 10980
    $208 = HEAP32[$206 >> 2] | 0; //@line 10982
    $211 = HEAP32[$206 + 4 >> 2] | 0; //@line 10985
    $212 = $t$1 & 32; //@line 10986
    if (($208 | 0) == 0 & ($211 | 0) == 0) {
     $a$0 = $1; //@line 10991
     $fl$4 = $fl$3; //@line 10991
     $p$2 = $p$1; //@line 10991
     $pl$1 = 0; //@line 10991
     $prefix$1 = 19617; //@line 10991
     label = 77; //@line 10992
    } else {
     $$012$i = $1; //@line 10994
     $217 = $208; //@line 10994
     $224 = $211; //@line 10994
     while (1) {
      $223 = $$012$i + -1 | 0; //@line 11002
      HEAP8[$223 >> 0] = HEAPU8[19601 + ($217 & 15) >> 0] | $212; //@line 11003
      $217 = _bitshift64Lshr($217 | 0, $224 | 0, 4) | 0; //@line 11004
      $224 = tempRet0; //@line 11005
      if (($217 | 0) == 0 & ($224 | 0) == 0) {
       $$lcssa344 = $223; //@line 11010
       break;
      } else {
       $$012$i = $223; //@line 11013
      }
     }
     $230 = $arg; //@line 11016
     if (($fl$3 & 8 | 0) == 0 | (HEAP32[$230 >> 2] | 0) == 0 & (HEAP32[$230 + 4 >> 2] | 0) == 0) {
      $a$0 = $$lcssa344; //@line 11029
      $fl$4 = $fl$3; //@line 11029
      $p$2 = $p$1; //@line 11029
      $pl$1 = 0; //@line 11029
      $prefix$1 = 19617; //@line 11029
      label = 77; //@line 11030
     } else {
      $a$0 = $$lcssa344; //@line 11034
      $fl$4 = $fl$3; //@line 11034
      $p$2 = $p$1; //@line 11034
      $pl$1 = 2; //@line 11034
      $prefix$1 = 19617 + ($t$1 >> 4) | 0; //@line 11034
      label = 77; //@line 11035
     }
    }
   } else if ((label | 0) == 76) {
    label = 0; //@line 11040
    $a$0 = _fmt_u($286, $287, $1) | 0; //@line 11042
    $fl$4 = $fl$1$; //@line 11042
    $p$2 = $p$0; //@line 11042
    $pl$1 = $pl$0; //@line 11042
    $prefix$1 = $prefix$0; //@line 11042
    label = 77; //@line 11043
   } else if ((label | 0) == 82) {
    label = 0; //@line 11046
    $320 = _memchr($a$1, 0, $p$0) | 0; //@line 11047
    $321 = ($320 | 0) == 0; //@line 11048
    $a$2 = $a$1; //@line 11055
    $fl$6 = $175; //@line 11055
    $p$5 = $321 ? $p$0 : $320 - $a$1 | 0; //@line 11055
    $pl$2 = 0; //@line 11055
    $prefix$2 = 19617; //@line 11055
    $z$2 = $321 ? $a$1 + $p$0 | 0 : $320; //@line 11055
   } else if ((label | 0) == 86) {
    label = 0; //@line 11058
    $i$0114 = 0; //@line 11060
    $l$1113 = 0; //@line 11060
    $ws$0115 = HEAP32[$arg >> 2] | 0; //@line 11060
    while (1) {
     $334 = HEAP32[$ws$0115 >> 2] | 0; //@line 11062
     if (!$334) {
      $i$0$lcssa = $i$0114; //@line 11065
      $l$2 = $l$1113; //@line 11065
      break;
     }
     $336 = _wctomb($mb, $334) | 0; //@line 11068
     if (($336 | 0) < 0 | $336 >>> 0 > ($p$4198 - $i$0114 | 0) >>> 0) {
      $i$0$lcssa = $i$0114; //@line 11074
      $l$2 = $336; //@line 11074
      break;
     }
     $341 = $336 + $i$0114 | 0; //@line 11078
     if ($p$4198 >>> 0 > $341 >>> 0) {
      $i$0114 = $341; //@line 11081
      $l$1113 = $336; //@line 11081
      $ws$0115 = $ws$0115 + 4 | 0; //@line 11081
     } else {
      $i$0$lcssa = $341; //@line 11083
      $l$2 = $336; //@line 11083
      break;
     }
    }
    if (($l$2 | 0) < 0) {
     $$0 = -1; //@line 11089
     break L1;
    }
    _pad($f, 32, $w$1, $i$0$lcssa, $fl$1$); //@line 11092
    if (!$i$0$lcssa) {
     $i$0$lcssa200 = 0; //@line 11095
     label = 98; //@line 11096
    } else {
     $i$1125 = 0; //@line 11099
     $ws$1126 = HEAP32[$arg >> 2] | 0; //@line 11099
     while (1) {
      $346 = HEAP32[$ws$1126 >> 2] | 0; //@line 11101
      if (!$346) {
       $i$0$lcssa200 = $i$0$lcssa; //@line 11104
       label = 98; //@line 11105
       break L313;
      }
      $349 = _wctomb($mb, $346) | 0; //@line 11109
      $i$1125 = $349 + $i$1125 | 0; //@line 11110
      if (($i$1125 | 0) > ($i$0$lcssa | 0)) {
       $i$0$lcssa200 = $i$0$lcssa; //@line 11113
       label = 98; //@line 11114
       break L313;
      }
      if (!(HEAP32[$f >> 2] & 32)) {
       ___fwritex($mb, $349, $f) | 0; //@line 11121
      }
      if ($i$1125 >>> 0 >= $i$0$lcssa >>> 0) {
       $i$0$lcssa200 = $i$0$lcssa; //@line 11127
       label = 98; //@line 11128
       break;
      } else {
       $ws$1126 = $ws$1126 + 4 | 0; //@line 11125
      }
     }
    }
   }
  } while (0);
  if ((label | 0) == 98) {
   label = 0; //@line 11136
   _pad($f, 32, $w$1, $i$0$lcssa200, $fl$1$ ^ 8192); //@line 11138
   $cnt$0 = $cnt$1; //@line 11141
   $fmt41 = $$lcssa323; //@line 11141
   $l$0 = ($w$1 | 0) > ($i$0$lcssa200 | 0) ? $w$1 : $i$0$lcssa200; //@line 11141
   $l10n$0 = $l10n$3; //@line 11141
   continue;
  }
  if ((label | 0) == 77) {
   label = 0; //@line 11145
   $$fl$4 = ($p$2 | 0) > -1 ? $fl$4 & -65537 : $fl$4; //@line 11148
   $291 = $arg; //@line 11149
   $299 = (HEAP32[$291 >> 2] | 0) != 0 | (HEAP32[$291 + 4 >> 2] | 0) != 0; //@line 11157
   if (($p$2 | 0) != 0 | $299) {
    $305 = ($299 & 1 ^ 1) + ($2 - $a$0) | 0; //@line 11165
    $a$2 = $a$0; //@line 11168
    $fl$6 = $$fl$4; //@line 11168
    $p$5 = ($p$2 | 0) > ($305 | 0) ? $p$2 : $305; //@line 11168
    $pl$2 = $pl$1; //@line 11168
    $prefix$2 = $prefix$1; //@line 11168
    $z$2 = $1; //@line 11168
   } else {
    $a$2 = $1; //@line 11170
    $fl$6 = $$fl$4; //@line 11170
    $p$5 = 0; //@line 11170
    $pl$2 = $pl$1; //@line 11170
    $prefix$2 = $prefix$1; //@line 11170
    $z$2 = $1; //@line 11170
   }
  }
  $771 = $z$2 - $a$2 | 0; //@line 11175
  $$p$5 = ($p$5 | 0) < ($771 | 0) ? $771 : $p$5; //@line 11177
  $773 = $pl$2 + $$p$5 | 0; //@line 11178
  $w$2 = ($w$1 | 0) < ($773 | 0) ? $773 : $w$1; //@line 11180
  _pad($f, 32, $w$2, $773, $fl$6); //@line 11181
  if (!(HEAP32[$f >> 2] & 32)) {
   ___fwritex($prefix$2, $pl$2, $f) | 0; //@line 11186
  }
  _pad($f, 48, $w$2, $773, $fl$6 ^ 65536); //@line 11189
  _pad($f, 48, $$p$5, $771, 0); //@line 11190
  if (!(HEAP32[$f >> 2] & 32)) {
   ___fwritex($a$2, $771, $f) | 0; //@line 11195
  }
  _pad($f, 32, $w$2, $773, $fl$6 ^ 8192); //@line 11198
  $cnt$0 = $cnt$1; //@line 11199
  $fmt41 = $$lcssa323; //@line 11199
  $l$0 = $w$2; //@line 11199
  $l10n$0 = $l10n$3; //@line 11199
 }
 L348 : do {
  if ((label | 0) == 245) {
   if (!$f) {
    if (!$l10n$0$lcssa) {
     $$0 = 0; //@line 11207
    } else {
     $i$2100 = 1; //@line 11209
     while (1) {
      $786 = HEAP32[$nl_type + ($i$2100 << 2) >> 2] | 0; //@line 11212
      if (!$786) {
       $i$2100$lcssa = $i$2100; //@line 11215
       break;
      }
      _pop_arg($nl_arg + ($i$2100 << 3) | 0, $786, $ap); //@line 11219
      $i$2100 = $i$2100 + 1 | 0; //@line 11220
      if (($i$2100 | 0) >= 10) {
       $$0 = 1; //@line 11225
       break L348;
      }
     }
     if (($i$2100$lcssa | 0) < 10) {
      $i$398 = $i$2100$lcssa; //@line 11231
      while (1) {
       if (HEAP32[$nl_type + ($i$398 << 2) >> 2] | 0) {
        $$0 = -1; //@line 11238
        break L348;
       }
       $i$398 = $i$398 + 1 | 0; //@line 11236
       if (($i$398 | 0) >= 10) {
        $$0 = 1; //@line 11245
        break;
       }
      }
     } else {
      $$0 = 1; //@line 11250
     }
    }
   } else {
    $$0 = $cnt$1$lcssa; //@line 11254
   }
  }
 } while (0);
 STACKTOP = sp; //@line 11258
 return $$0 | 0; //@line 11258
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b, $__e, $__intl, $__loc, $__flags, $__err, $__neg, $__ct, $__wb, $__wn, $__we) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__loc = $__loc | 0;
 $__flags = $__flags | 0;
 $__err = $__err | 0;
 $__neg = $__neg | 0;
 $__ct = $__ct | 0;
 $__wb = $__wb | 0;
 $__wn = $__wn | 0;
 $__we = $__we | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i103 = 0, $$0$i$i105 = 0, $$0$i$i120 = 0, $$0$i$i27 = 0, $$0$i$i37 = 0, $$0$i$i39 = 0, $$0$i$i49 = 0, $$0$i$i55 = 0, $$0$i$i59 = 0, $$0$i$i75 = 0, $$0$i$i87 = 0, $$0$i$i95 = 0, $$in241 = 0, $$lcssa = 0, $$lcssa176 = 0, $$lcssa223 = 0, $$lcssa224 = 0, $$ph = 0, $$pre$i2$i$i113 = 0, $$pre$i2$i$i113183 = 0, $$pre$i2$i$i113185 = 0, $$pre$i2$i$i128192 = 0, $$pre$i2$i$i128193 = 0, $$pre$i2$i$i128246 = 0, $$pre$i2$i$i45 = 0, $$pre$i2$i$i45200 = 0, $$pre$i2$i$i45202 = 0, $$pre$i2$i$i67188$ph = 0, $$pre$i2$i$i67188205 = 0, $$pre$i2$i$i67237 = 0, $$pre$i2$i$i83 = 0, $$pre190 = 0, $$pre196 = 0, $0 = 0, $110 = 0, $111 = 0, $113 = 0, $125 = 0, $127 = 0, $144 = 0, $145 = 0, $146 = 0, $15 = 0, $158 = 0, $16 = 0, $164 = 0, $165 = 0, $17 = 0, $171 = 0, $174 = 0, $176 = 0, $178 = 0, $18 = 0, $180 = 0, $181 = 0, $188 = 0, $19 = 0, $196 = 0, $197 = 0, $198 = 0, $2 = 0, $20 = 0, $206 = 0, $21 = 0, $221 = 0, $222 = 0, $223 = 0, $23 = 0, $231 = 0, $24 = 0, $242 = 0, $247 = 0, $25 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $26 = 0, $262 = 0, $27 = 0, $28 = 0, $284 = 0, $285 = 0, $286 = 0, $29 = 0, $294 = 0, $30 = 0, $31 = 0, $310 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $318 = 0, $32 = 0, $324 = 0, $325 = 0, $333 = 0, $334 = 0, $335 = 0, $337 = 0, $338 = 0, $345 = 0, $347 = 0, $348 = 0, $350 = 0, $354 = 0, $357 = 0, $358 = 0, $362 = 0, $368 = 0, $380 = 0, $381 = 0, $383 = 0, $395 = 0, $397 = 0, $409 = 0, $411 = 0, $412 = 0, $413 = 0, $423 = 0, $429 = 0, $431 = 0, $433 = 0, $44 = 0, $444 = 0, $45 = 0, $456 = 0, $457 = 0, $459 = 0, $46 = 0, $471 = 0, $473 = 0, $483 = 0, $490 = 0, $494 = 0, $496 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $526 = 0, $527 = 0, $528 = 0, $530 = 0, $542 = 0, $543 = 0, $555 = 0, $557 = 0, $572 = 0, $573 = 0, $574 = 0, $583 = 0, $595 = 0, $596 = 0, $598 = 0, $61 = 0, $610 = 0, $612 = 0, $62 = 0, $634 = 0, $636 = 0, $64 = 0, $647 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $680 = 0, $681 = 0, $693 = 0, $694 = 0, $695 = 0, $707 = 0, $709 = 0, $725 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $741 = 0, $747 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $760 = 0, $81 = 0, $82 = 0, $83 = 0, $98 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$0$lcssa = 0, $__ng$1 = 0, $__nsn = 0, $__p$0253 = 0, $__pat = 0, $__psn = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0255 = 0, $__trailing_sign$1 = 0, $__ts = 0, label = 0, sp = 0, $650$looptemp = 0;
 sp = STACKTOP; //@line 14142
 STACKTOP = STACKTOP + 512 | 0; //@line 14143
 $0 = sp + 88 | 0; //@line 14144
 $__gbuf = sp + 96 | 0; //@line 14145
 $__gb = sp + 80 | 0; //@line 14146
 $__gn = sp + 72 | 0; //@line 14147
 $__ge = sp + 68 | 0; //@line 14148
 $__pat = sp + 500 | 0; //@line 14149
 $__dp = sp + 497 | 0; //@line 14150
 $__ts = sp + 496 | 0; //@line 14151
 $__grp = sp + 56 | 0; //@line 14152
 $__sym = sp + 44 | 0; //@line 14153
 $__psn = sp + 32 | 0; //@line 14154
 $__nsn = sp + 20 | 0; //@line 14155
 $__spaces = sp + 8 | 0; //@line 14156
 $__fd = sp + 4 | 0; //@line 14157
 $__et = sp; //@line 14158
 HEAP32[$0 >> 2] = $__we; //@line 14159
 HEAP32[$__gb >> 2] = $__gbuf; //@line 14161
 $2 = $__gb + 4 | 0; //@line 14162
 HEAP32[$2 >> 2] = 98; //@line 14163
 HEAP32[$__gn >> 2] = $__gbuf; //@line 14164
 HEAP32[$__ge >> 2] = $__gbuf + 400; //@line 14166
 HEAP32[$__grp >> 2] = 0; //@line 14167
 HEAP32[$__grp + 4 >> 2] = 0; //@line 14169
 HEAP32[$__grp + 8 >> 2] = 0; //@line 14171
 HEAP32[$__sym >> 2] = 0; //@line 14172
 HEAP32[$__sym + 4 >> 2] = 0; //@line 14174
 HEAP32[$__sym + 8 >> 2] = 0; //@line 14176
 HEAP32[$__psn >> 2] = 0; //@line 14177
 HEAP32[$__psn + 4 >> 2] = 0; //@line 14179
 HEAP32[$__psn + 8 >> 2] = 0; //@line 14181
 HEAP32[$__nsn >> 2] = 0; //@line 14182
 HEAP32[$__nsn + 4 >> 2] = 0; //@line 14184
 HEAP32[$__nsn + 8 >> 2] = 0; //@line 14186
 HEAP32[$__spaces >> 2] = 0; //@line 14187
 HEAP32[$__spaces + 4 >> 2] = 0; //@line 14189
 HEAP32[$__spaces + 8 >> 2] = 0; //@line 14191
 __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd); //@line 14192
 HEAP32[$__wn >> 2] = HEAP32[$__wb >> 2]; //@line 14194
 $15 = $__ct + 8 | 0; //@line 14195
 $16 = $__psn + 4 | 0; //@line 14196
 $17 = $__nsn + 4 | 0; //@line 14197
 $18 = $__nsn + 8 | 0; //@line 14198
 $19 = $__nsn + 1 | 0; //@line 14199
 $20 = $__psn + 8 | 0; //@line 14200
 $21 = $__psn + 1 | 0; //@line 14201
 $23 = ($__flags & 512 | 0) != 0; //@line 14203
 $24 = $__sym + 8 | 0; //@line 14204
 $25 = $__sym + 1 | 0; //@line 14205
 $26 = $__sym + 4 | 0; //@line 14206
 $27 = $__spaces + 4 | 0; //@line 14207
 $28 = $__spaces + 8 | 0; //@line 14208
 $29 = $__spaces + 1 | 0; //@line 14209
 $30 = $__pat + 3 | 0; //@line 14210
 $31 = $__grp + 4 | 0; //@line 14211
 $750 = $__gbuf; //@line 14212
 $__p$0253 = 0; //@line 14212
 $__trailing_sign$0255 = 0; //@line 14212
 L1 : while (1) {
  $32 = HEAP32[$__b >> 2] | 0; //@line 14214
  do {
   if (!$32) {
    $45 = 0; //@line 14218
   } else {
    if ((HEAP32[$32 + 12 >> 2] | 0) == (HEAP32[$32 + 16 >> 2] | 0)) {
     if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 63]($32) | 0) == -1) {
      HEAP32[$__b >> 2] = 0; //@line 14232
      $45 = 0; //@line 14233
      break;
     } else {
      $45 = HEAP32[$__b >> 2] | 0; //@line 14237
      break;
     }
    } else {
     $45 = $32; //@line 14241
    }
   }
  } while (0);
  $44 = ($45 | 0) == 0; //@line 14245
  $46 = HEAP32[$__e >> 2] | 0; //@line 14246
  do {
   if (!$46) {
    label = 12; //@line 14250
   } else {
    if ((HEAP32[$46 + 12 >> 2] | 0) != (HEAP32[$46 + 16 >> 2] | 0)) {
     if ($44) {
      $751 = $46; //@line 14259
      break;
     } else {
      $$lcssa224 = $750; //@line 14262
      $__trailing_sign$0$lcssa = $__trailing_sign$0255; //@line 14262
      label = 202; //@line 14263
      break L1;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$46 >> 2] | 0) + 36 >> 2] & 63]($46) | 0) == -1) {
     HEAP32[$__e >> 2] = 0; //@line 14273
     label = 12; //@line 14274
     break;
    } else {
     if ($44) {
      $751 = $46; //@line 14278
      break;
     } else {
      $$lcssa224 = $750; //@line 14281
      $__trailing_sign$0$lcssa = $__trailing_sign$0255; //@line 14281
      label = 202; //@line 14282
      break L1;
     }
    }
   }
  } while (0);
  if ((label | 0) == 12) {
   label = 0; //@line 14289
   if ($44) {
    $$lcssa224 = $750; //@line 14291
    $__trailing_sign$0$lcssa = $__trailing_sign$0255; //@line 14291
    label = 202; //@line 14292
    break;
   } else {
    $751 = 0; //@line 14295
   }
  }
  L21 : do {
   switch (HEAP8[$__pat + $__p$0253 >> 0] | 0) {
   case 1:
    {
     if (($__p$0253 | 0) == 3) {
      $752 = $750; //@line 14306
      $__trailing_sign$1 = $__trailing_sign$0255; //@line 14306
     } else {
      $62 = HEAP32[$__b >> 2] | 0; //@line 14308
      $64 = HEAP32[$62 + 12 >> 2] | 0; //@line 14310
      if (($64 | 0) == (HEAP32[$62 + 16 >> 2] | 0)) {
       $$0$i$i37 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$62 >> 2] | 0) + 36 >> 2] & 63]($62) | 0; //@line 14319
      } else {
       $$0$i$i37 = HEAPU8[$64 >> 0] | 0; //@line 14323
      }
      if (($$0$i$i37 & 255) << 24 >> 24 <= -1) {
       label = 26; //@line 14328
       break L1;
      }
      if (!(HEAP16[(HEAP32[$15 >> 2] | 0) + ($$0$i$i37 << 24 >> 24 << 1) >> 1] & 8192)) {
       label = 26; //@line 14339
       break L1;
      }
      $81 = HEAP32[$__b >> 2] | 0; //@line 14342
      $82 = $81 + 12 | 0; //@line 14343
      $83 = HEAP32[$82 >> 2] | 0; //@line 14344
      if (($83 | 0) == (HEAP32[$81 + 16 >> 2] | 0)) {
       $$0$i$i39 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$81 >> 2] | 0) + 40 >> 2] & 63]($81) | 0; //@line 14353
      } else {
       HEAP32[$82 >> 2] = $83 + 1; //@line 14356
       $$0$i$i39 = HEAPU8[$83 >> 0] | 0; //@line 14359
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces, $$0$i$i39 & 255); //@line 14362
      $$pre$i2$i$i45 = $751; //@line 14363
      $113 = $751; //@line 14363
      label = 28; //@line 14364
     }
     break;
    }
   case 0:
    {
     if (($__p$0253 | 0) == 3) {
      $752 = $750; //@line 14371
      $__trailing_sign$1 = $__trailing_sign$0255; //@line 14371
     } else {
      $$pre$i2$i$i45 = $751; //@line 14373
      $113 = $751; //@line 14373
      label = 28; //@line 14374
     }
     break;
    }
   case 3:
    {
     $158 = HEAP8[$__psn >> 0] | 0; //@line 14379
     $164 = ($158 & 1) == 0 ? ($158 & 255) >>> 1 : HEAP32[$16 >> 2] | 0; //@line 14385
     $165 = HEAP8[$__nsn >> 0] | 0; //@line 14386
     $171 = ($165 & 1) == 0 ? ($165 & 255) >>> 1 : HEAP32[$17 >> 2] | 0; //@line 14392
     if (($164 | 0) == (0 - $171 | 0)) {
      $752 = $750; //@line 14396
      $__trailing_sign$1 = $__trailing_sign$0255; //@line 14396
     } else {
      $174 = ($164 | 0) == 0; //@line 14398
      $176 = HEAP32[$__b >> 2] | 0; //@line 14401
      $178 = HEAP32[$176 + 12 >> 2] | 0; //@line 14403
      $180 = HEAP32[$176 + 16 >> 2] | 0; //@line 14405
      $181 = ($178 | 0) == ($180 | 0); //@line 14406
      if ($174 | ($171 | 0) == 0) {
       if ($181) {
        $$0$i$i87 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$176 >> 2] | 0) + 36 >> 2] & 63]($176) | 0; //@line 14413
       } else {
        $$0$i$i87 = HEAPU8[$178 >> 0] | 0; //@line 14417
       }
       $188 = $$0$i$i87 & 255; //@line 14419
       if ($174) {
        if ($188 << 24 >> 24 != (HEAP8[((HEAP8[$__nsn >> 0] & 1) == 0 ? $19 : HEAP32[$18 >> 2] | 0) >> 0] | 0)) {
         $752 = $750; //@line 14429
         $__trailing_sign$1 = $__trailing_sign$0255; //@line 14429
         break L21;
        }
        $221 = HEAP32[$__b >> 2] | 0; //@line 14432
        $222 = $221 + 12 | 0; //@line 14433
        $223 = HEAP32[$222 >> 2] | 0; //@line 14434
        if (($223 | 0) == (HEAP32[$221 + 16 >> 2] | 0)) {
         FUNCTION_TABLE_ii[HEAP32[(HEAP32[$221 >> 2] | 0) + 40 >> 2] & 63]($221) | 0; //@line 14442
        } else {
         HEAP32[$222 >> 2] = $223 + 1; //@line 14445
        }
        HEAP8[$__neg >> 0] = 1; //@line 14447
        $231 = HEAP8[$__nsn >> 0] | 0; //@line 14448
        $752 = $750; //@line 14457
        $__trailing_sign$1 = (($231 & 1) == 0 ? ($231 & 255) >>> 1 : HEAP32[$17 >> 2] | 0) >>> 0 > 1 ? $__nsn : $__trailing_sign$0255; //@line 14457
        break L21;
       }
       if ($188 << 24 >> 24 != (HEAP8[((HEAP8[$__psn >> 0] & 1) == 0 ? $21 : HEAP32[$20 >> 2] | 0) >> 0] | 0)) {
        HEAP8[$__neg >> 0] = 1; //@line 14468
        $752 = $750; //@line 14469
        $__trailing_sign$1 = $__trailing_sign$0255; //@line 14469
        break L21;
       }
       $196 = HEAP32[$__b >> 2] | 0; //@line 14472
       $197 = $196 + 12 | 0; //@line 14473
       $198 = HEAP32[$197 >> 2] | 0; //@line 14474
       if (($198 | 0) == (HEAP32[$196 + 16 >> 2] | 0)) {
        FUNCTION_TABLE_ii[HEAP32[(HEAP32[$196 >> 2] | 0) + 40 >> 2] & 63]($196) | 0; //@line 14482
       } else {
        HEAP32[$197 >> 2] = $198 + 1; //@line 14485
       }
       $206 = HEAP8[$__psn >> 0] | 0; //@line 14487
       $752 = $750; //@line 14496
       $__trailing_sign$1 = (($206 & 1) == 0 ? ($206 & 255) >>> 1 : HEAP32[$16 >> 2] | 0) >>> 0 > 1 ? $__psn : $__trailing_sign$0255; //@line 14496
       break L21;
      }
      if ($181) {
       $242 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$176 >> 2] | 0) + 36 >> 2] & 63]($176) | 0; //@line 14503
       $$pre196 = HEAP32[$__b >> 2] | 0; //@line 14505
       $$0$i$i95 = $242; //@line 14510
       $247 = HEAP8[$__psn >> 0] | 0; //@line 14510
       $254 = $$pre196; //@line 14510
       $256 = HEAP32[$$pre196 + 12 >> 2] | 0; //@line 14510
       $257 = HEAP32[$$pre196 + 16 >> 2] | 0; //@line 14510
      } else {
       $$0$i$i95 = HEAPU8[$178 >> 0] | 0; //@line 14514
       $247 = $158; //@line 14514
       $254 = $176; //@line 14514
       $256 = $178; //@line 14514
       $257 = $180; //@line 14514
      }
      $253 = $254 + 12 | 0; //@line 14523
      $255 = ($256 | 0) == ($257 | 0); //@line 14524
      if (($$0$i$i95 & 255) << 24 >> 24 == (HEAP8[(($247 & 1) == 0 ? $21 : HEAP32[$20 >> 2] | 0) >> 0] | 0)) {
       if ($255) {
        FUNCTION_TABLE_ii[HEAP32[(HEAP32[$254 >> 2] | 0) + 40 >> 2] & 63]($254) | 0; //@line 14530
       } else {
        HEAP32[$253 >> 2] = $256 + 1; //@line 14533
       }
       $262 = HEAP8[$__psn >> 0] | 0; //@line 14535
       $752 = $750; //@line 14544
       $__trailing_sign$1 = (($262 & 1) == 0 ? ($262 & 255) >>> 1 : HEAP32[$16 >> 2] | 0) >>> 0 > 1 ? $__psn : $__trailing_sign$0255; //@line 14544
       break L21;
      }
      if ($255) {
       $$0$i$i105 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$254 >> 2] | 0) + 36 >> 2] & 63]($254) | 0; //@line 14552
      } else {
       $$0$i$i105 = HEAPU8[$256 >> 0] | 0; //@line 14556
      }
      if (($$0$i$i105 & 255) << 24 >> 24 != (HEAP8[((HEAP8[$__nsn >> 0] & 1) == 0 ? $19 : HEAP32[$18 >> 2] | 0) >> 0] | 0)) {
       label = 82; //@line 14567
       break L1;
      }
      $284 = HEAP32[$__b >> 2] | 0; //@line 14570
      $285 = $284 + 12 | 0; //@line 14571
      $286 = HEAP32[$285 >> 2] | 0; //@line 14572
      if (($286 | 0) == (HEAP32[$284 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$284 >> 2] | 0) + 40 >> 2] & 63]($284) | 0; //@line 14580
      } else {
       HEAP32[$285 >> 2] = $286 + 1; //@line 14583
      }
      HEAP8[$__neg >> 0] = 1; //@line 14585
      $294 = HEAP8[$__nsn >> 0] | 0; //@line 14586
      $752 = $750; //@line 14595
      $__trailing_sign$1 = (($294 & 1) == 0 ? ($294 & 255) >>> 1 : HEAP32[$17 >> 2] | 0) >>> 0 > 1 ? $__nsn : $__trailing_sign$0255; //@line 14595
     }
     break;
    }
   case 2:
    {
     if (!($__p$0253 >>> 0 < 2 | ($__trailing_sign$0255 | 0) != 0)) {
      if (!($23 | ($__p$0253 | 0) == 2 & (HEAP8[$30 >> 0] | 0) != 0)) {
       $752 = $750; //@line 14610
       $__trailing_sign$1 = 0; //@line 14610
       break L21;
      }
     }
     $310 = HEAP8[$__sym >> 0] | 0; //@line 14614
     $312 = ($310 & 1) == 0; //@line 14616
     $313 = HEAP32[$24 >> 2] | 0; //@line 14617
     $314 = $312 ? $25 : $313; //@line 14618
     $315 = $314; //@line 14619
     L83 : do {
      if (!$__p$0253) {
       $$ph = $315; //@line 14623
      } else {
       if ((HEAPU8[$__pat + ($__p$0253 + -1) >> 0] | 0) < 2) {
        $333 = $312 ? ($310 & 255) >>> 1 : HEAP32[$26 >> 2] | 0; //@line 14633
        $334 = $314 + $333 | 0; //@line 14634
        $335 = HEAP32[$15 >> 2] | 0; //@line 14635
        L86 : do {
         if (!$333) {
          $$lcssa223 = $315; //@line 14639
         } else {
          $338 = $314; //@line 14641
          $754 = $315; //@line 14641
          while (1) {
           $337 = HEAP8[$338 >> 0] | 0; //@line 14643
           if ($337 << 24 >> 24 <= -1) {
            $$lcssa223 = $754; //@line 14646
            break L86;
           }
           if (!(HEAP16[$335 + ($337 << 24 >> 24 << 1) >> 1] & 8192)) {
            $$lcssa223 = $754; //@line 14655
            break L86;
           }
           $338 = $338 + 1 | 0; //@line 14658
           $345 = $338; //@line 14659
           if (($338 | 0) == ($334 | 0)) {
            $$lcssa223 = $345; //@line 14662
            break;
           } else {
            $754 = $345; //@line 14665
           }
          }
         }
        } while (0);
        $347 = $$lcssa223 - $315 | 0; //@line 14670
        $348 = HEAP8[$__spaces >> 0] | 0; //@line 14671
        $350 = ($348 & 1) == 0; //@line 14673
        $354 = $350 ? ($348 & 255) >>> 1 : HEAP32[$27 >> 2] | 0; //@line 14677
        if ($354 >>> 0 < $347 >>> 0) {
         $$ph = $315; //@line 14680
        } else {
         $357 = $350 ? $29 : HEAP32[$28 >> 2] | 0; //@line 14683
         $358 = $357 + $354 | 0; //@line 14684
         if (($$lcssa223 | 0) == ($315 | 0)) {
          $$ph = $$lcssa223; //@line 14687
         } else {
          $$in241 = $314; //@line 14691
          $362 = $357 + ($354 - $347) | 0; //@line 14691
          while (1) {
           if ((HEAP8[$362 >> 0] | 0) != (HEAP8[$$in241 >> 0] | 0)) {
            $$ph = $315; //@line 14697
            break L83;
           }
           $362 = $362 + 1 | 0; //@line 14700
           if (($362 | 0) == ($358 | 0)) {
            $$ph = $$lcssa223; //@line 14704
            break;
           } else {
            $$in241 = $$in241 + 1 | 0; //@line 14707
           }
          }
         }
        }
       } else {
        $$ph = $315; //@line 14713
       }
      }
     } while (0);
     $318 = ($310 & 1) == 0; //@line 14718
     $324 = ($318 ? $25 : $313) + ($318 ? ($310 & 255) >>> 1 : HEAP32[$26 >> 2] | 0) | 0; //@line 14724
     $325 = $$ph; //@line 14725
     L98 : do {
      if (($325 | 0) == ($324 | 0)) {
       $$lcssa176 = $324; //@line 14729
      } else {
       $$pre$i2$i$i128246 = $751; //@line 14731
       $383 = $751; //@line 14731
       $409 = $325; //@line 14731
       while (1) {
        $368 = HEAP32[$__b >> 2] | 0; //@line 14733
        do {
         if (!$368) {
          $381 = 0; //@line 14737
         } else {
          if ((HEAP32[$368 + 12 >> 2] | 0) == (HEAP32[$368 + 16 >> 2] | 0)) {
           if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$368 >> 2] | 0) + 36 >> 2] & 63]($368) | 0) == -1) {
            HEAP32[$__b >> 2] = 0; //@line 14751
            $381 = 0; //@line 14752
            break;
           } else {
            $381 = HEAP32[$__b >> 2] | 0; //@line 14756
            break;
           }
          } else {
           $381 = $368; //@line 14760
          }
         }
        } while (0);
        $380 = ($381 | 0) == 0; //@line 14764
        do {
         if (!$383) {
          $$pre$i2$i$i128193 = $$pre$i2$i$i128246; //@line 14768
          label = 107; //@line 14769
         } else {
          if ((HEAP32[$383 + 12 >> 2] | 0) != (HEAP32[$383 + 16 >> 2] | 0)) {
           if ($380) {
            $$pre$i2$i$i128192 = $$pre$i2$i$i128246; //@line 14778
            $755 = $383; //@line 14778
            break;
           } else {
            $$lcssa176 = $409; //@line 14781
            break L98;
           }
          }
          if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$383 >> 2] | 0) + 36 >> 2] & 63]($383) | 0) == -1) {
           HEAP32[$__e >> 2] = 0; //@line 14791
           $$pre$i2$i$i128193 = 0; //@line 14792
           label = 107; //@line 14793
           break;
          } else {
           if ($380 ^ ($$pre$i2$i$i128246 | 0) == 0) {
            $$pre$i2$i$i128192 = $$pre$i2$i$i128246; //@line 14799
            $755 = $$pre$i2$i$i128246; //@line 14799
            break;
           } else {
            $$lcssa176 = $409; //@line 14802
            break L98;
           }
          }
         }
        } while (0);
        if ((label | 0) == 107) {
         label = 0; //@line 14809
         if ($380) {
          $$lcssa176 = $409; //@line 14811
          break L98;
         } else {
          $$pre$i2$i$i128192 = $$pre$i2$i$i128193; //@line 14814
          $755 = 0; //@line 14814
         }
        }
        $395 = HEAP32[$__b >> 2] | 0; //@line 14817
        $397 = HEAP32[$395 + 12 >> 2] | 0; //@line 14819
        if (($397 | 0) == (HEAP32[$395 + 16 >> 2] | 0)) {
         $$0$i$i120 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$395 >> 2] | 0) + 36 >> 2] & 63]($395) | 0; //@line 14828
        } else {
         $$0$i$i120 = HEAPU8[$397 >> 0] | 0; //@line 14832
        }
        if (($$0$i$i120 & 255) << 24 >> 24 != (HEAP8[$409 >> 0] | 0)) {
         $$lcssa176 = $409; //@line 14838
         break L98;
        }
        $411 = HEAP32[$__b >> 2] | 0; //@line 14841
        $412 = $411 + 12 | 0; //@line 14842
        $413 = HEAP32[$412 >> 2] | 0; //@line 14843
        if (($413 | 0) == (HEAP32[$411 + 16 >> 2] | 0)) {
         FUNCTION_TABLE_ii[HEAP32[(HEAP32[$411 >> 2] | 0) + 40 >> 2] & 63]($411) | 0; //@line 14851
        } else {
         HEAP32[$412 >> 2] = $413 + 1; //@line 14854
        }
        $409 = $409 + 1 | 0; //@line 14856
        $$pre190 = HEAP8[$__sym >> 0] | 0; //@line 14857
        $423 = ($$pre190 & 1) == 0; //@line 14860
        $429 = ($423 ? $25 : HEAP32[$24 >> 2] | 0) + ($423 ? ($$pre190 & 255) >>> 1 : HEAP32[$26 >> 2] | 0) | 0; //@line 14866
        if (($409 | 0) == ($429 | 0)) {
         $$lcssa176 = $429; //@line 14869
         break;
        } else {
         $$pre$i2$i$i128246 = $$pre$i2$i$i128192; //@line 14872
         $383 = $755; //@line 14872
        }
       }
      }
     } while (0);
     if ($23) {
      $431 = HEAP8[$__sym >> 0] | 0; //@line 14878
      $433 = ($431 & 1) == 0; //@line 14880
      if (($$lcssa176 | 0) == (($433 ? $25 : HEAP32[$24 >> 2] | 0) + ($433 ? ($431 & 255) >>> 1 : HEAP32[$26 >> 2] | 0) | 0)) {
       $752 = $750; //@line 14890
       $__trailing_sign$1 = $__trailing_sign$0255; //@line 14890
      } else {
       label = 119; //@line 14892
       break L1;
      }
     } else {
      $752 = $750; //@line 14896
      $__trailing_sign$1 = $__trailing_sign$0255; //@line 14896
     }
     break;
    }
   case 4:
    {
     $61 = HEAP8[$__ts >> 0] | 0; //@line 14901
     $$pre$i2$i$i113 = $751; //@line 14902
     $459 = $751; //@line 14902
     $508 = $750; //@line 14902
     $__ng$0 = 0; //@line 14902
     L131 : while (1) {
      $444 = HEAP32[$__b >> 2] | 0; //@line 14904
      do {
       if (!$444) {
        $457 = 0; //@line 14908
       } else {
        if ((HEAP32[$444 + 12 >> 2] | 0) == (HEAP32[$444 + 16 >> 2] | 0)) {
         if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$444 >> 2] | 0) + 36 >> 2] & 63]($444) | 0) == -1) {
          HEAP32[$__b >> 2] = 0; //@line 14922
          $457 = 0; //@line 14923
          break;
         } else {
          $457 = HEAP32[$__b >> 2] | 0; //@line 14927
          break;
         }
        } else {
         $457 = $444; //@line 14931
        }
       }
      } while (0);
      $456 = ($457 | 0) == 0; //@line 14935
      do {
       if (!$459) {
        $$pre$i2$i$i113183 = $$pre$i2$i$i113; //@line 14939
        label = 130; //@line 14940
       } else {
        if ((HEAP32[$459 + 12 >> 2] | 0) != (HEAP32[$459 + 16 >> 2] | 0)) {
         if ($456) {
          $$pre$i2$i$i113185 = $$pre$i2$i$i113; //@line 14949
          $756 = $459; //@line 14949
          break;
         } else {
          $$lcssa = $508; //@line 14952
          $$pre$i2$i$i83 = $$pre$i2$i$i113; //@line 14952
          $__ng$0$lcssa = $__ng$0; //@line 14952
          break L131;
         }
        }
        if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$459 >> 2] | 0) + 36 >> 2] & 63]($459) | 0) == -1) {
         HEAP32[$__e >> 2] = 0; //@line 14962
         $$pre$i2$i$i113183 = 0; //@line 14963
         label = 130; //@line 14964
         break;
        } else {
         if ($456 ^ ($$pre$i2$i$i113 | 0) == 0) {
          $$pre$i2$i$i113185 = $$pre$i2$i$i113; //@line 14970
          $756 = $$pre$i2$i$i113; //@line 14970
          break;
         } else {
          $$lcssa = $508; //@line 14973
          $$pre$i2$i$i83 = $$pre$i2$i$i113; //@line 14973
          $__ng$0$lcssa = $__ng$0; //@line 14973
          break L131;
         }
        }
       }
      } while (0);
      if ((label | 0) == 130) {
       label = 0; //@line 14980
       if ($456) {
        $$lcssa = $508; //@line 14982
        $$pre$i2$i$i83 = $$pre$i2$i$i113183; //@line 14982
        $__ng$0$lcssa = $__ng$0; //@line 14982
        break;
       } else {
        $$pre$i2$i$i113185 = $$pre$i2$i$i113183; //@line 14985
        $756 = 0; //@line 14985
       }
      }
      $471 = HEAP32[$__b >> 2] | 0; //@line 14988
      $473 = HEAP32[$471 + 12 >> 2] | 0; //@line 14990
      if (($473 | 0) == (HEAP32[$471 + 16 >> 2] | 0)) {
       $$0$i$i103 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$471 >> 2] | 0) + 36 >> 2] & 63]($471) | 0; //@line 14999
      } else {
       $$0$i$i103 = HEAPU8[$473 >> 0] | 0; //@line 15003
      }
      $483 = $$0$i$i103 & 255; //@line 15005
      if ($483 << 24 >> 24 > -1) {
       if (!(HEAP16[(HEAP32[$15 >> 2] | 0) + ($$0$i$i103 << 24 >> 24 << 1) >> 1] & 2048)) {
        label = 140; //@line 15016
       } else {
        $490 = HEAP32[$__wn >> 2] | 0; //@line 15018
        if (($490 | 0) == (HEAP32[$0 >> 2] | 0)) {
         __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb, $__wn, $0); //@line 15022
         $494 = HEAP32[$__wn >> 2] | 0; //@line 15024
        } else {
         $494 = $490; //@line 15026
        }
        HEAP32[$__wn >> 2] = $494 + 1; //@line 15029
        HEAP8[$494 >> 0] = $483; //@line 15030
        $757 = $508; //@line 15032
        $__ng$1 = $__ng$0 + 1 | 0; //@line 15032
       }
      } else {
       label = 140; //@line 15035
      }
      if ((label | 0) == 140) {
       label = 0; //@line 15038
       $496 = HEAP8[$__grp >> 0] | 0; //@line 15039
       if (!($483 << 24 >> 24 == $61 << 24 >> 24 & (($__ng$0 | 0) != 0 ? ((($496 & 1) == 0 ? ($496 & 255) >>> 1 : HEAP32[$31 >> 2] | 0) | 0) != 0 : 0))) {
        $$lcssa = $508; //@line 15052
        $$pre$i2$i$i83 = $$pre$i2$i$i113185; //@line 15052
        $__ng$0$lcssa = $__ng$0; //@line 15052
        break;
       }
       if (($508 | 0) == (HEAP32[$__ge >> 2] | 0)) {
        __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb, $__gn, $__ge); //@line 15058
        $510 = HEAP32[$__gn >> 2] | 0; //@line 15060
       } else {
        $510 = $508; //@line 15062
       }
       $509 = $510 + 4 | 0; //@line 15064
       HEAP32[$__gn >> 2] = $509; //@line 15065
       HEAP32[$510 >> 2] = $__ng$0; //@line 15066
       $757 = $509; //@line 15067
       $__ng$1 = 0; //@line 15067
      }
      $511 = HEAP32[$__b >> 2] | 0; //@line 15069
      $512 = $511 + 12 | 0; //@line 15070
      $513 = HEAP32[$512 >> 2] | 0; //@line 15071
      if (($513 | 0) == (HEAP32[$511 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$511 >> 2] | 0) + 40 >> 2] & 63]($511) | 0; //@line 15079
       $$pre$i2$i$i113 = $$pre$i2$i$i113185; //@line 15080
       $459 = $756; //@line 15080
       $508 = $757; //@line 15080
       $__ng$0 = $__ng$1; //@line 15080
       continue;
      } else {
       HEAP32[$512 >> 2] = $513 + 1; //@line 15084
       $$pre$i2$i$i113 = $$pre$i2$i$i113185; //@line 15085
       $459 = $756; //@line 15085
       $508 = $757; //@line 15085
       $__ng$0 = $__ng$1; //@line 15085
       continue;
      }
     }
     if (($__ng$0$lcssa | 0) != 0 ? (HEAP32[$__gb >> 2] | 0) != ($$lcssa | 0) : 0) {
      if (($$lcssa | 0) == (HEAP32[$__ge >> 2] | 0)) {
       __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb, $__gn, $__ge); //@line 15097
       $527 = HEAP32[$__gn >> 2] | 0; //@line 15099
      } else {
       $527 = $$lcssa; //@line 15101
      }
      $526 = $527 + 4 | 0; //@line 15103
      HEAP32[$__gn >> 2] = $526; //@line 15104
      HEAP32[$527 >> 2] = $__ng$0$lcssa; //@line 15105
      $758 = $526; //@line 15106
     } else {
      $758 = $$lcssa; //@line 15108
     }
     $528 = HEAP32[$__fd >> 2] | 0; //@line 15110
     if (($528 | 0) > 0) {
      $530 = HEAP32[$__b >> 2] | 0; //@line 15113
      do {
       if (!$530) {
        $543 = 0; //@line 15117
       } else {
        if ((HEAP32[$530 + 12 >> 2] | 0) == (HEAP32[$530 + 16 >> 2] | 0)) {
         if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$530 >> 2] | 0) + 36 >> 2] & 63]($530) | 0) == -1) {
          HEAP32[$__b >> 2] = 0; //@line 15131
          $543 = 0; //@line 15132
          break;
         } else {
          $543 = HEAP32[$__b >> 2] | 0; //@line 15136
          break;
         }
        } else {
         $543 = $530; //@line 15140
        }
       }
      } while (0);
      $542 = ($543 | 0) == 0; //@line 15144
      do {
       if (!$$pre$i2$i$i83) {
        label = 162; //@line 15148
       } else {
        if ((HEAP32[$$pre$i2$i$i83 + 12 >> 2] | 0) == (HEAP32[$$pre$i2$i$i83 + 16 >> 2] | 0)) {
         if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i83 >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i83) | 0) == -1) {
          HEAP32[$__e >> 2] = 0; //@line 15162
          label = 162; //@line 15163
          break;
         }
        }
        if ($542) {
         $759 = $$pre$i2$i$i83; //@line 15168
        } else {
         label = 167; //@line 15170
         break L1;
        }
       }
      } while (0);
      if ((label | 0) == 162) {
       label = 0; //@line 15176
       if ($542) {
        label = 167; //@line 15178
        break L1;
       } else {
        $759 = 0; //@line 15181
       }
      }
      $555 = HEAP32[$__b >> 2] | 0; //@line 15184
      $557 = HEAP32[$555 + 12 >> 2] | 0; //@line 15186
      if (($557 | 0) == (HEAP32[$555 + 16 >> 2] | 0)) {
       $$0$i$i75 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$555 >> 2] | 0) + 36 >> 2] & 63]($555) | 0; //@line 15195
      } else {
       $$0$i$i75 = HEAPU8[$557 >> 0] | 0; //@line 15199
      }
      if (($$0$i$i75 & 255) << 24 >> 24 != (HEAP8[$__dp >> 0] | 0)) {
       label = 167; //@line 15205
       break L1;
      }
      $572 = HEAP32[$__b >> 2] | 0; //@line 15208
      $573 = $572 + 12 | 0; //@line 15209
      $574 = HEAP32[$573 >> 2] | 0; //@line 15210
      if (($574 | 0) == (HEAP32[$572 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$572 >> 2] | 0) + 40 >> 2] & 63]($572) | 0; //@line 15218
      } else {
       HEAP32[$573 >> 2] = $574 + 1; //@line 15221
      }
      if (($528 | 0) > 0) {
       $$pre$i2$i$i67237 = $759; //@line 15225
       $598 = $759; //@line 15225
       $650 = $528; //@line 15225
       while (1) {
        $583 = HEAP32[$__b >> 2] | 0; //@line 15227
        do {
         if (!$583) {
          $596 = 0; //@line 15231
         } else {
          if ((HEAP32[$583 + 12 >> 2] | 0) == (HEAP32[$583 + 16 >> 2] | 0)) {
           if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$583 >> 2] | 0) + 36 >> 2] & 63]($583) | 0) == -1) {
            HEAP32[$__b >> 2] = 0; //@line 15245
            $596 = 0; //@line 15246
            break;
           } else {
            $596 = HEAP32[$__b >> 2] | 0; //@line 15250
            break;
           }
          } else {
           $596 = $583; //@line 15254
          }
         }
        } while (0);
        $595 = ($596 | 0) == 0; //@line 15258
        do {
         if (!$598) {
          $$pre$i2$i$i67188$ph = $$pre$i2$i$i67237; //@line 15262
          label = 182; //@line 15263
         } else {
          if ((HEAP32[$598 + 12 >> 2] | 0) != (HEAP32[$598 + 16 >> 2] | 0)) {
           if ($595) {
            $$pre$i2$i$i67188205 = $$pre$i2$i$i67237; //@line 15272
            $760 = $598; //@line 15272
            break;
           } else {
            label = 189; //@line 15275
            break L1;
           }
          }
          if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$598 >> 2] | 0) + 36 >> 2] & 63]($598) | 0) == -1) {
           HEAP32[$__e >> 2] = 0; //@line 15285
           $$pre$i2$i$i67188$ph = 0; //@line 15286
           label = 182; //@line 15287
           break;
          } else {
           if ($595 ^ ($$pre$i2$i$i67237 | 0) == 0) {
            $$pre$i2$i$i67188205 = $$pre$i2$i$i67237; //@line 15293
            $760 = $$pre$i2$i$i67237; //@line 15293
            break;
           } else {
            label = 189; //@line 15296
            break L1;
           }
          }
         }
        } while (0);
        if ((label | 0) == 182) {
         label = 0; //@line 15303
         if ($595) {
          label = 189; //@line 15305
          break L1;
         } else {
          $$pre$i2$i$i67188205 = $$pre$i2$i$i67188$ph; //@line 15308
          $760 = 0; //@line 15308
         }
        }
        $610 = HEAP32[$__b >> 2] | 0; //@line 15311
        $612 = HEAP32[$610 + 12 >> 2] | 0; //@line 15313
        if (($612 | 0) == (HEAP32[$610 + 16 >> 2] | 0)) {
         $$0$i$i59 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$610 >> 2] | 0) + 36 >> 2] & 63]($610) | 0; //@line 15322
        } else {
         $$0$i$i59 = HEAPU8[$612 >> 0] | 0; //@line 15326
        }
        if (($$0$i$i59 & 255) << 24 >> 24 <= -1) {
         label = 189; //@line 15331
         break L1;
        }
        if (!(HEAP16[(HEAP32[$15 >> 2] | 0) + ($$0$i$i59 << 24 >> 24 << 1) >> 1] & 2048)) {
         label = 189; //@line 15342
         break L1;
        }
        if ((HEAP32[$__wn >> 2] | 0) == (HEAP32[$0 >> 2] | 0)) {
         __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb, $__wn, $0); //@line 15349
        }
        $634 = HEAP32[$__b >> 2] | 0; //@line 15351
        $636 = HEAP32[$634 + 12 >> 2] | 0; //@line 15353
        if (($636 | 0) == (HEAP32[$634 + 16 >> 2] | 0)) {
         $$0$i$i27 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$634 >> 2] | 0) + 36 >> 2] & 63]($634) | 0; //@line 15362
        } else {
         $$0$i$i27 = HEAPU8[$636 >> 0] | 0; //@line 15366
        }
        $647 = HEAP32[$__wn >> 2] | 0; //@line 15369
        HEAP32[$__wn >> 2] = $647 + 1; //@line 15371
        HEAP8[$647 >> 0] = $$0$i$i27; //@line 15372
        $650$looptemp = $650;
        $650 = $650 + -1 | 0; //@line 15373
        HEAP32[$__fd >> 2] = $650; //@line 15374
        $651 = HEAP32[$__b >> 2] | 0; //@line 15375
        $652 = $651 + 12 | 0; //@line 15376
        $653 = HEAP32[$652 >> 2] | 0; //@line 15377
        if (($653 | 0) == (HEAP32[$651 + 16 >> 2] | 0)) {
         FUNCTION_TABLE_ii[HEAP32[(HEAP32[$651 >> 2] | 0) + 40 >> 2] & 63]($651) | 0; //@line 15385
        } else {
         HEAP32[$652 >> 2] = $653 + 1; //@line 15388
        }
        if (($650$looptemp | 0) <= 1) {
         break;
        } else {
         $$pre$i2$i$i67237 = $$pre$i2$i$i67188205; //@line 15392
         $598 = $760; //@line 15392
        }
       }
      }
     }
     if ((HEAP32[$__wn >> 2] | 0) == (HEAP32[$__wb >> 2] | 0)) {
      label = 200; //@line 15403
      break L1;
     } else {
      $752 = $758; //@line 15406
      $__trailing_sign$1 = $__trailing_sign$0255; //@line 15406
     }
     break;
    }
   default:
    {
     $752 = $750; //@line 15411
     $__trailing_sign$1 = $__trailing_sign$0255; //@line 15411
    }
   }
  } while (0);
  L243 : do {
   if ((label | 0) == 28) {
    while (1) {
     label = 0; //@line 15418
     $98 = HEAP32[$__b >> 2] | 0; //@line 15419
     do {
      if (!$98) {
       $111 = 0; //@line 15423
      } else {
       if ((HEAP32[$98 + 12 >> 2] | 0) == (HEAP32[$98 + 16 >> 2] | 0)) {
        if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$98 >> 2] | 0) + 36 >> 2] & 63]($98) | 0) == -1) {
         HEAP32[$__b >> 2] = 0; //@line 15437
         $111 = 0; //@line 15438
         break;
        } else {
         $111 = HEAP32[$__b >> 2] | 0; //@line 15442
         break;
        }
       } else {
        $111 = $98; //@line 15446
       }
      }
     } while (0);
     $110 = ($111 | 0) == 0; //@line 15450
     do {
      if (!$113) {
       $$pre$i2$i$i45200 = $$pre$i2$i$i45; //@line 15454
       label = 38; //@line 15455
      } else {
       if ((HEAP32[$113 + 12 >> 2] | 0) != (HEAP32[$113 + 16 >> 2] | 0)) {
        if ($110) {
         $$pre$i2$i$i45202 = $$pre$i2$i$i45; //@line 15464
         $753 = $113; //@line 15464
         break;
        } else {
         $752 = $750; //@line 15467
         $__trailing_sign$1 = $__trailing_sign$0255; //@line 15467
         break L243;
        }
       }
       if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$113 >> 2] | 0) + 36 >> 2] & 63]($113) | 0) == -1) {
        HEAP32[$__e >> 2] = 0; //@line 15477
        $$pre$i2$i$i45200 = 0; //@line 15478
        label = 38; //@line 15479
        break;
       } else {
        if ($110 ^ ($$pre$i2$i$i45 | 0) == 0) {
         $$pre$i2$i$i45202 = $$pre$i2$i$i45; //@line 15485
         $753 = $$pre$i2$i$i45; //@line 15485
         break;
        } else {
         $752 = $750; //@line 15488
         $__trailing_sign$1 = $__trailing_sign$0255; //@line 15488
         break L243;
        }
       }
      }
     } while (0);
     if ((label | 0) == 38) {
      label = 0; //@line 15495
      if ($110) {
       $752 = $750; //@line 15497
       $__trailing_sign$1 = $__trailing_sign$0255; //@line 15497
       break L243;
      } else {
       $$pre$i2$i$i45202 = $$pre$i2$i$i45200; //@line 15500
       $753 = 0; //@line 15500
      }
     }
     $125 = HEAP32[$__b >> 2] | 0; //@line 15503
     $127 = HEAP32[$125 + 12 >> 2] | 0; //@line 15505
     if (($127 | 0) == (HEAP32[$125 + 16 >> 2] | 0)) {
      $$0$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$125 >> 2] | 0) + 36 >> 2] & 63]($125) | 0; //@line 15514
     } else {
      $$0$i$i49 = HEAPU8[$127 >> 0] | 0; //@line 15518
     }
     if (($$0$i$i49 & 255) << 24 >> 24 <= -1) {
      $752 = $750; //@line 15523
      $__trailing_sign$1 = $__trailing_sign$0255; //@line 15523
      break L243;
     }
     if (!(HEAP16[(HEAP32[$15 >> 2] | 0) + ($$0$i$i49 << 24 >> 24 << 1) >> 1] & 8192)) {
      $752 = $750; //@line 15534
      $__trailing_sign$1 = $__trailing_sign$0255; //@line 15534
      break L243;
     }
     $144 = HEAP32[$__b >> 2] | 0; //@line 15537
     $145 = $144 + 12 | 0; //@line 15538
     $146 = HEAP32[$145 >> 2] | 0; //@line 15539
     if (($146 | 0) == (HEAP32[$144 + 16 >> 2] | 0)) {
      $$0$i$i55 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$144 >> 2] | 0) + 40 >> 2] & 63]($144) | 0; //@line 15548
     } else {
      HEAP32[$145 >> 2] = $146 + 1; //@line 15551
      $$0$i$i55 = HEAPU8[$146 >> 0] | 0; //@line 15554
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces, $$0$i$i55 & 255); //@line 15557
     $$pre$i2$i$i45 = $$pre$i2$i$i45202; //@line 15558
     $113 = $753; //@line 15558
     label = 28; //@line 15559
    }
   }
  } while (0);
  $__p$0253 = $__p$0253 + 1 | 0; //@line 15563
  if ($__p$0253 >>> 0 >= 4) {
   $$lcssa224 = $752; //@line 15568
   $__trailing_sign$0$lcssa = $__trailing_sign$1; //@line 15568
   label = 202; //@line 15569
   break;
  } else {
   $750 = $752; //@line 15566
   $__trailing_sign$0255 = $__trailing_sign$1; //@line 15566
  }
 }
 L275 : do {
  if ((label | 0) == 26) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 15577
   $$0 = 0; //@line 15578
  } else if ((label | 0) == 82) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 15583
   $$0 = 0; //@line 15584
  } else if ((label | 0) == 119) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 15589
   $$0 = 0; //@line 15590
  } else if ((label | 0) == 167) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 15595
   $$0 = 0; //@line 15596
  } else if ((label | 0) == 189) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 15601
   $$0 = 0; //@line 15602
  } else if ((label | 0) == 200) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 15607
   $$0 = 0; //@line 15608
  } else if ((label | 0) == 202) {
   L277 : do {
    if ($__trailing_sign$0$lcssa) {
     $670 = $__trailing_sign$0$lcssa + 1 | 0; //@line 15614
     $671 = $__trailing_sign$0$lcssa + 8 | 0; //@line 15615
     $672 = $__trailing_sign$0$lcssa + 4 | 0; //@line 15616
     $__i$0 = 1; //@line 15617
     L279 : while (1) {
      $673 = HEAP8[$__trailing_sign$0$lcssa >> 0] | 0; //@line 15619
      if (!($673 & 1)) {
       $680 = ($673 & 255) >>> 1; //@line 15625
      } else {
       $680 = HEAP32[$672 >> 2] | 0; //@line 15628
      }
      if ($__i$0 >>> 0 >= $680 >>> 0) {
       break L277;
      }
      $681 = HEAP32[$__b >> 2] | 0; //@line 15634
      do {
       if (!$681) {
        $694 = 0; //@line 15638
       } else {
        if ((HEAP32[$681 + 12 >> 2] | 0) == (HEAP32[$681 + 16 >> 2] | 0)) {
         if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$681 >> 2] | 0) + 36 >> 2] & 63]($681) | 0) == -1) {
          HEAP32[$__b >> 2] = 0; //@line 15652
          $694 = 0; //@line 15653
          break;
         } else {
          $694 = HEAP32[$__b >> 2] | 0; //@line 15657
          break;
         }
        } else {
         $694 = $681; //@line 15661
        }
       }
      } while (0);
      $693 = ($694 | 0) == 0; //@line 15665
      $695 = HEAP32[$__e >> 2] | 0; //@line 15666
      do {
       if (!$695) {
        label = 218; //@line 15670
       } else {
        if ((HEAP32[$695 + 12 >> 2] | 0) == (HEAP32[$695 + 16 >> 2] | 0)) {
         if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$695 >> 2] | 0) + 36 >> 2] & 63]($695) | 0) == -1) {
          HEAP32[$__e >> 2] = 0; //@line 15684
          label = 218; //@line 15685
          break;
         }
        }
        if (!$693) {
         break L279;
        }
       }
      } while (0);
      if ((label | 0) == 218) {
       label = 0; //@line 15695
       if ($693) {
        break;
       }
      }
      $707 = HEAP32[$__b >> 2] | 0; //@line 15700
      $709 = HEAP32[$707 + 12 >> 2] | 0; //@line 15702
      if (($709 | 0) == (HEAP32[$707 + 16 >> 2] | 0)) {
       $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$707 >> 2] | 0) + 36 >> 2] & 63]($707) | 0; //@line 15711
      } else {
       $$0$i$i = HEAPU8[$709 >> 0] | 0; //@line 15715
      }
      if (!(HEAP8[$__trailing_sign$0$lcssa >> 0] & 1)) {
       $725 = $670; //@line 15722
      } else {
       $725 = HEAP32[$671 >> 2] | 0; //@line 15725
      }
      if (($$0$i$i & 255) << 24 >> 24 != (HEAP8[$725 + $__i$0 >> 0] | 0)) {
       break;
      }
      $730 = $__i$0 + 1 | 0; //@line 15733
      $731 = HEAP32[$__b >> 2] | 0; //@line 15734
      $732 = $731 + 12 | 0; //@line 15735
      $733 = HEAP32[$732 >> 2] | 0; //@line 15736
      if (($733 | 0) == (HEAP32[$731 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$731 >> 2] | 0) + 40 >> 2] & 63]($731) | 0; //@line 15744
       $__i$0 = $730; //@line 15745
       continue;
      } else {
       HEAP32[$732 >> 2] = $733 + 1; //@line 15749
       $__i$0 = $730; //@line 15750
       continue;
      }
     }
     HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 15756
     $$0 = 0; //@line 15757
     break L275;
    }
   } while (0);
   $741 = HEAP32[$__gb >> 2] | 0; //@line 15761
   if (($741 | 0) == ($$lcssa224 | 0)) {
    $$0 = 1; //@line 15764
   } else {
    HEAP32[$__et >> 2] = 0; //@line 15766
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp, $741, $$lcssa224, $__et); //@line 15767
    if (!(HEAP32[$__et >> 2] | 0)) {
     $$0 = 1; //@line 15771
    } else {
     HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 15775
     $$0 = 0; //@line 15776
    }
   }
  }
 } while (0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__spaces); //@line 15781
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nsn); //@line 15782
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__psn); //@line 15783
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym); //@line 15784
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp); //@line 15785
 $747 = HEAP32[$__gb >> 2] | 0; //@line 15786
 HEAP32[$__gb >> 2] = 0; //@line 15787
 if ($747) {
  FUNCTION_TABLE_vi[HEAP32[$2 >> 2] & 127]($747); //@line 15791
 }
 STACKTOP = sp; //@line 15793
 return $$0 | 0; //@line 15793
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b, $__e, $__intl, $__loc, $__flags, $__err, $__neg, $__ct, $__wb, $__wn, $__we) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__loc = $__loc | 0;
 $__flags = $__flags | 0;
 $__err = $__err | 0;
 $__neg = $__neg | 0;
 $__ct = $__ct | 0;
 $__wb = $__wb | 0;
 $__wn = $__wn | 0;
 $__we = $__we | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i118 = 0, $$0$i$i$i$i136 = 0, $$0$i$i$i$i28 = 0, $$0$i$i$i$i43 = 0, $$0$i$i$i$i68 = 0, $$0$i$i$i$i90 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i124 = 0, $$0$i$i1$i$i142 = 0, $$0$i$i1$i$i34 = 0, $$0$i$i1$i$i49 = 0, $$0$i$i1$i$i74 = 0, $$0$i$i1$i$i96 = 0, $$0$i$i105 = 0, $$0$i$i111 = 0, $$0$i$i116 = 0, $$0$i$i133 = 0, $$0$i$i26 = 0, $$0$i$i40 = 0, $$0$i$i42 = 0, $$0$i$i56 = 0, $$0$i$i60 = 0, $$0$i$i65 = 0, $$0$i$i82 = 0, $$0$i$i87 = 0, $$in265 = 0, $$lcssa = 0, $$lcssa183 = 0, $$lcssa248 = 0, $$lcssa294 = 0, $$ph = 0, $$ph240 = 0, $$ph241 = 0, $$pre$i3$i$i126 = 0, $$pre$i3$i$i126190 = 0, $$pre$i3$i$i126192 = 0, $$pre$i3$i$i144203 = 0, $$pre$i3$i$i144204 = 0, $$pre$i3$i$i144270 = 0, $$pre$i3$i$i51 = 0, $$pre$i3$i$i51211 = 0, $$pre$i3$i$i51213 = 0, $$pre$i3$i$i76195$ph = 0, $$pre$i3$i$i76195216 = 0, $$pre$i3$i$i76261 = 0, $$pre$i3$i$i98 = 0, $$pre197 = 0, $$pre198 = 0, $$pre201 = 0, $$pre207 = 0, $0 = 0, $101 = 0, $103 = 0, $113 = 0, $114 = 0, $116 = 0, $129 = 0, $130 = 0, $131 = 0, $141 = 0, $147 = 0, $148 = 0, $15 = 0, $154 = 0, $157 = 0, $159 = 0, $16 = 0, $161 = 0, $163 = 0, $164 = 0, $17 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $187 = 0, $2 = 0, $20 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0, $212 = 0, $22 = 0, $223 = 0, $226 = 0, $23 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $24 = 0, $241 = 0, $25 = 0, $26 = 0, $261 = 0, $262 = 0, $263 = 0, $27 = 0, $271 = 0, $287 = 0, $290 = 0, $291 = 0, $292 = 0, $295 = 0, $30 = 0, $301 = 0, $302 = 0, $308 = 0, $317 = 0, $323 = 0, $325 = 0, $334 = 0, $336 = 0, $337 = 0, $338 = 0, $340 = 0, $341 = 0, $342 = 0, $344 = 0, $348 = 0, $351 = 0, $352 = 0, $356 = 0, $362 = 0, $365 = 0, $376 = 0, $378 = 0, $388 = 0, $389 = 0, $391 = 0, $40 = 0, $401 = 0, $403 = 0, $404 = 0, $405 = 0, $415 = 0, $421 = 0, $423 = 0, $425 = 0, $43 = 0, $436 = 0, $439 = 0, $450 = 0, $452 = 0, $462 = 0, $463 = 0, $465 = 0, $478 = 0, $482 = 0, $484 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $500 = 0, $501 = 0, $514 = 0, $515 = 0, $516 = 0, $518 = 0, $521 = 0, $533 = 0, $543 = 0, $545 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $569 = 0, $57 = 0, $572 = 0, $583 = 0, $585 = 0, $59 = 0, $595 = 0, $596 = 0, $598 = 0, $616 = 0, $618 = 0, $627 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $650 = 0, $651 = 0, $652 = 0, $659 = 0, $660 = 0, $663 = 0, $673 = 0, $676 = 0, $686 = 0, $688 = 0, $702 = 0, $707 = 0, $708 = 0, $709 = 0, $710 = 0, $718 = 0, $72 = 0, $724 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $87 = 0, $90 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$0$lcssa = 0, $__ng$1 = 0, $__nsn = 0, $__p$0276 = 0, $__pat = 0, $__psn = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0278 = 0, $__trailing_sign$1 = 0, $__ts = 0, label = 0, sp = 0, $630$looptemp = 0;
 sp = STACKTOP; //@line 56
 STACKTOP = STACKTOP + 512 | 0; //@line 57
 $0 = sp + 96 | 0; //@line 58
 $__gbuf = sp + 104 | 0; //@line 59
 $__gb = sp + 88 | 0; //@line 60
 $__gn = sp + 80 | 0; //@line 61
 $__ge = sp + 76 | 0; //@line 62
 $__pat = sp + 504 | 0; //@line 63
 $__dp = sp + 72 | 0; //@line 64
 $__ts = sp + 68 | 0; //@line 65
 $__grp = sp + 56 | 0; //@line 66
 $__sym = sp + 44 | 0; //@line 67
 $__psn = sp + 32 | 0; //@line 68
 $__nsn = sp + 20 | 0; //@line 69
 $__spaces = sp + 8 | 0; //@line 70
 $__fd = sp + 4 | 0; //@line 71
 $__et = sp; //@line 72
 HEAP32[$0 >> 2] = $__we; //@line 73
 HEAP32[$__gb >> 2] = $__gbuf; //@line 75
 $2 = $__gb + 4 | 0; //@line 76
 HEAP32[$2 >> 2] = 98; //@line 77
 HEAP32[$__gn >> 2] = $__gbuf; //@line 78
 HEAP32[$__ge >> 2] = $__gbuf + 400; //@line 80
 HEAP32[$__grp >> 2] = 0; //@line 81
 HEAP32[$__grp + 4 >> 2] = 0; //@line 83
 HEAP32[$__grp + 8 >> 2] = 0; //@line 85
 HEAP32[$__sym >> 2] = 0; //@line 86
 HEAP32[$__sym + 4 >> 2] = 0; //@line 88
 HEAP32[$__sym + 8 >> 2] = 0; //@line 90
 HEAP32[$__psn >> 2] = 0; //@line 91
 HEAP32[$__psn + 4 >> 2] = 0; //@line 93
 HEAP32[$__psn + 8 >> 2] = 0; //@line 95
 HEAP32[$__nsn >> 2] = 0; //@line 96
 HEAP32[$__nsn + 4 >> 2] = 0; //@line 98
 HEAP32[$__nsn + 8 >> 2] = 0; //@line 100
 HEAP32[$__spaces >> 2] = 0; //@line 101
 HEAP32[$__spaces + 4 >> 2] = 0; //@line 103
 HEAP32[$__spaces + 8 >> 2] = 0; //@line 105
 __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd); //@line 106
 HEAP32[$__wn >> 2] = HEAP32[$__wb >> 2]; //@line 108
 $15 = $__psn + 4 | 0; //@line 109
 $16 = $__nsn + 4 | 0; //@line 110
 $17 = $__nsn + 8 | 0; //@line 111
 $18 = $__psn + 8 | 0; //@line 112
 $20 = ($__flags & 512 | 0) != 0; //@line 114
 $21 = $__sym + 8 | 0; //@line 115
 $22 = $__sym + 4 | 0; //@line 116
 $23 = $__spaces + 4 | 0; //@line 117
 $24 = $__spaces + 8 | 0; //@line 118
 $25 = $__pat + 3 | 0; //@line 119
 $26 = $__grp + 4 | 0; //@line 120
 $727 = $__gbuf; //@line 121
 $__p$0276 = 0; //@line 121
 $__trailing_sign$0278 = 0; //@line 121
 L1 : while (1) {
  $27 = HEAP32[$__b >> 2] | 0; //@line 123
  do {
   if (!$27) {
    $728 = 1; //@line 127
   } else {
    $30 = HEAP32[$27 + 12 >> 2] | 0; //@line 130
    if (($30 | 0) == (HEAP32[$27 + 16 >> 2] | 0)) {
     $$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$27 >> 2] | 0) + 36 >> 2] & 63]($27) | 0; //@line 139
    } else {
     $$0$i$i$i$i28 = HEAP32[$30 >> 2] | 0; //@line 142
    }
    if (($$0$i$i$i$i28 | 0) == -1) {
     HEAP32[$__b >> 2] = 0; //@line 146
     $728 = 1; //@line 147
     break;
    } else {
     $728 = (HEAP32[$__b >> 2] | 0) == 0; //@line 152
     break;
    }
   }
  } while (0);
  $40 = HEAP32[$__e >> 2] | 0; //@line 157
  do {
   if (!$40) {
    label = 15; //@line 161
   } else {
    $43 = HEAP32[$40 + 12 >> 2] | 0; //@line 164
    if (($43 | 0) == (HEAP32[$40 + 16 >> 2] | 0)) {
     $$0$i$i1$i$i34 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$40 >> 2] | 0) + 36 >> 2] & 63]($40) | 0; //@line 173
    } else {
     $$0$i$i1$i$i34 = HEAP32[$43 >> 2] | 0; //@line 176
    }
    if (($$0$i$i1$i$i34 | 0) == -1) {
     HEAP32[$__e >> 2] = 0; //@line 180
     label = 15; //@line 181
     break;
    } else {
     if ($728) {
      $729 = $40; //@line 185
      break;
     } else {
      $$lcssa248 = $727; //@line 188
      $__trailing_sign$0$lcssa = $__trailing_sign$0278; //@line 188
      label = 217; //@line 189
      break L1;
     }
    }
   }
  } while (0);
  if ((label | 0) == 15) {
   label = 0; //@line 196
   if ($728) {
    $$lcssa248 = $727; //@line 198
    $__trailing_sign$0$lcssa = $__trailing_sign$0278; //@line 198
    label = 217; //@line 199
    break;
   } else {
    $729 = 0; //@line 202
   }
  }
  L25 : do {
   switch (HEAP8[$__pat + $__p$0276 >> 0] | 0) {
   case 1:
    {
     if (($__p$0276 | 0) == 3) {
      $730 = $727; //@line 213
      $__trailing_sign$1 = $__trailing_sign$0278; //@line 213
     } else {
      $57 = HEAP32[$__b >> 2] | 0; //@line 215
      $59 = HEAP32[$57 + 12 >> 2] | 0; //@line 217
      if (($59 | 0) == (HEAP32[$57 + 16 >> 2] | 0)) {
       $$0$i$i40 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$57 >> 2] | 0) + 36 >> 2] & 63]($57) | 0; //@line 226
      } else {
       $$0$i$i40 = HEAP32[$59 >> 2] | 0; //@line 229
      }
      if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 8192, $$0$i$i40) | 0)) {
       label = 28; //@line 236
       break L1;
      }
      $72 = HEAP32[$__b >> 2] | 0; //@line 239
      $73 = $72 + 12 | 0; //@line 240
      $74 = HEAP32[$73 >> 2] | 0; //@line 241
      if (($74 | 0) == (HEAP32[$72 + 16 >> 2] | 0)) {
       $$0$i$i42 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$72 >> 2] | 0) + 40 >> 2] & 63]($72) | 0; //@line 250
      } else {
       HEAP32[$73 >> 2] = $74 + 4; //@line 253
       $$0$i$i42 = HEAP32[$74 >> 2] | 0; //@line 255
      }
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces, $$0$i$i42); //@line 257
      $$pre$i3$i$i51 = $729; //@line 258
      $101 = $729; //@line 258
      label = 30; //@line 259
     }
     break;
    }
   case 0:
    {
     if (($__p$0276 | 0) == 3) {
      $730 = $727; //@line 266
      $__trailing_sign$1 = $__trailing_sign$0278; //@line 266
     } else {
      $$pre$i3$i$i51 = $729; //@line 268
      $101 = $729; //@line 268
      label = 30; //@line 269
     }
     break;
    }
   case 3:
    {
     $141 = HEAP8[$__psn >> 0] | 0; //@line 274
     $147 = ($141 & 1) == 0 ? ($141 & 255) >>> 1 : HEAP32[$15 >> 2] | 0; //@line 280
     $148 = HEAP8[$__nsn >> 0] | 0; //@line 281
     $154 = ($148 & 1) == 0 ? ($148 & 255) >>> 1 : HEAP32[$16 >> 2] | 0; //@line 287
     if (($147 | 0) == (0 - $154 | 0)) {
      $730 = $727; //@line 291
      $__trailing_sign$1 = $__trailing_sign$0278; //@line 291
     } else {
      $157 = ($147 | 0) == 0; //@line 293
      $159 = HEAP32[$__b >> 2] | 0; //@line 296
      $161 = HEAP32[$159 + 12 >> 2] | 0; //@line 298
      $163 = HEAP32[$159 + 16 >> 2] | 0; //@line 300
      $164 = ($161 | 0) == ($163 | 0); //@line 301
      if ($157 | ($154 | 0) == 0) {
       if ($164) {
        $$0$i$i82 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$159 >> 2] | 0) + 36 >> 2] & 63]($159) | 0; //@line 308
       } else {
        $$0$i$i82 = HEAP32[$161 >> 2] | 0; //@line 311
       }
       if ($157) {
        if (($$0$i$i82 | 0) != (HEAP32[((HEAP8[$__nsn >> 0] & 1) == 0 ? $16 : HEAP32[$17 >> 2] | 0) >> 2] | 0)) {
         $730 = $727; //@line 322
         $__trailing_sign$1 = $__trailing_sign$0278; //@line 322
         break L25;
        }
        $202 = HEAP32[$__b >> 2] | 0; //@line 325
        $203 = $202 + 12 | 0; //@line 326
        $204 = HEAP32[$203 >> 2] | 0; //@line 327
        if (($204 | 0) == (HEAP32[$202 + 16 >> 2] | 0)) {
         FUNCTION_TABLE_ii[HEAP32[(HEAP32[$202 >> 2] | 0) + 40 >> 2] & 63]($202) | 0; //@line 335
        } else {
         HEAP32[$203 >> 2] = $204 + 4; //@line 338
        }
        HEAP8[$__neg >> 0] = 1; //@line 340
        $212 = HEAP8[$__nsn >> 0] | 0; //@line 341
        $730 = $727; //@line 350
        $__trailing_sign$1 = (($212 & 1) == 0 ? ($212 & 255) >>> 1 : HEAP32[$16 >> 2] | 0) >>> 0 > 1 ? $__nsn : $__trailing_sign$0278; //@line 350
        break L25;
       }
       if (($$0$i$i82 | 0) != (HEAP32[((HEAP8[$__psn >> 0] & 1) == 0 ? $15 : HEAP32[$18 >> 2] | 0) >> 2] | 0)) {
        HEAP8[$__neg >> 0] = 1; //@line 361
        $730 = $727; //@line 362
        $__trailing_sign$1 = $__trailing_sign$0278; //@line 362
        break L25;
       }
       $177 = HEAP32[$__b >> 2] | 0; //@line 365
       $178 = $177 + 12 | 0; //@line 366
       $179 = HEAP32[$178 >> 2] | 0; //@line 367
       if (($179 | 0) == (HEAP32[$177 + 16 >> 2] | 0)) {
        FUNCTION_TABLE_ii[HEAP32[(HEAP32[$177 >> 2] | 0) + 40 >> 2] & 63]($177) | 0; //@line 375
       } else {
        HEAP32[$178 >> 2] = $179 + 4; //@line 378
       }
       $187 = HEAP8[$__psn >> 0] | 0; //@line 380
       $730 = $727; //@line 389
       $__trailing_sign$1 = (($187 & 1) == 0 ? ($187 & 255) >>> 1 : HEAP32[$15 >> 2] | 0) >>> 0 > 1 ? $__psn : $__trailing_sign$0278; //@line 389
       break L25;
      }
      if ($164) {
       $223 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$159 >> 2] | 0) + 36 >> 2] & 63]($159) | 0; //@line 396
       $$pre207 = HEAP32[$__b >> 2] | 0; //@line 398
       $$0$i$i105 = $223; //@line 403
       $226 = HEAP8[$__psn >> 0] | 0; //@line 403
       $233 = $$pre207; //@line 403
       $235 = HEAP32[$$pre207 + 12 >> 2] | 0; //@line 403
       $236 = HEAP32[$$pre207 + 16 >> 2] | 0; //@line 403
      } else {
       $$0$i$i105 = HEAP32[$161 >> 2] | 0; //@line 406
       $226 = $141; //@line 406
       $233 = $159; //@line 406
       $235 = $161; //@line 406
       $236 = $163; //@line 406
      }
      $232 = $233 + 12 | 0; //@line 414
      $234 = ($235 | 0) == ($236 | 0); //@line 415
      if (($$0$i$i105 | 0) == (HEAP32[(($226 & 1) == 0 ? $15 : HEAP32[$18 >> 2] | 0) >> 2] | 0)) {
       if ($234) {
        FUNCTION_TABLE_ii[HEAP32[(HEAP32[$233 >> 2] | 0) + 40 >> 2] & 63]($233) | 0; //@line 421
       } else {
        HEAP32[$232 >> 2] = $235 + 4; //@line 424
       }
       $241 = HEAP8[$__psn >> 0] | 0; //@line 426
       $730 = $727; //@line 435
       $__trailing_sign$1 = (($241 & 1) == 0 ? ($241 & 255) >>> 1 : HEAP32[$15 >> 2] | 0) >>> 0 > 1 ? $__psn : $__trailing_sign$0278; //@line 435
       break L25;
      }
      if ($234) {
       $$0$i$i111 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$233 >> 2] | 0) + 36 >> 2] & 63]($233) | 0; //@line 443
      } else {
       $$0$i$i111 = HEAP32[$235 >> 2] | 0; //@line 446
      }
      if (($$0$i$i111 | 0) != (HEAP32[((HEAP8[$__nsn >> 0] & 1) == 0 ? $16 : HEAP32[$17 >> 2] | 0) >> 2] | 0)) {
       label = 86; //@line 456
       break L1;
      }
      $261 = HEAP32[$__b >> 2] | 0; //@line 459
      $262 = $261 + 12 | 0; //@line 460
      $263 = HEAP32[$262 >> 2] | 0; //@line 461
      if (($263 | 0) == (HEAP32[$261 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$261 >> 2] | 0) + 40 >> 2] & 63]($261) | 0; //@line 469
      } else {
       HEAP32[$262 >> 2] = $263 + 4; //@line 472
      }
      HEAP8[$__neg >> 0] = 1; //@line 474
      $271 = HEAP8[$__nsn >> 0] | 0; //@line 475
      $730 = $727; //@line 484
      $__trailing_sign$1 = (($271 & 1) == 0 ? ($271 & 255) >>> 1 : HEAP32[$16 >> 2] | 0) >>> 0 > 1 ? $__nsn : $__trailing_sign$0278; //@line 484
     }
     break;
    }
   case 2:
    {
     if (!($__p$0276 >>> 0 < 2 | ($__trailing_sign$0278 | 0) != 0)) {
      if (!($20 | ($__p$0276 | 0) == 2 & (HEAP8[$25 >> 0] | 0) != 0)) {
       $730 = $727; //@line 499
       $__trailing_sign$1 = 0; //@line 499
       break L25;
      }
     }
     $287 = HEAP8[$__sym >> 0] | 0; //@line 503
     $290 = HEAP32[$21 >> 2] | 0; //@line 506
     $291 = ($287 & 1) == 0 ? $22 : $290; //@line 507
     $292 = $291; //@line 508
     L86 : do {
      if (!$__p$0276) {
       $$ph = $290; //@line 512
       $$ph240 = $287; //@line 512
       $$ph241 = $292; //@line 512
      } else {
       if ((HEAPU8[$__pat + ($__p$0276 + -1) >> 0] | 0) < 2) {
        $308 = ($287 & 1) == 0; //@line 520
        L89 : do {
         if (($291 | 0) == (($308 ? $22 : $290) + (($308 ? ($287 & 255) >>> 1 : HEAP32[$22 >> 2] | 0) << 2) | 0)) {
          $334 = $287; //@line 530
          $337 = $290; //@line 530
          $340 = $292; //@line 530
         } else {
          $317 = $291; //@line 532
          $732 = $292; //@line 532
          while (1) {
           if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 8192, HEAP32[$317 >> 2] | 0) | 0)) {
            $$lcssa294 = $732; //@line 540
            break;
           }
           $317 = $317 + 4 | 0; //@line 543
           $323 = $317; //@line 544
           $$pre197 = HEAP8[$__sym >> 0] | 0; //@line 545
           $$pre198 = HEAP32[$21 >> 2] | 0; //@line 546
           $325 = ($$pre197 & 1) == 0; //@line 548
           if (($317 | 0) == (($325 ? $22 : $$pre198) + (($325 ? ($$pre197 & 255) >>> 1 : HEAP32[$22 >> 2] | 0) << 2) | 0)) {
            $334 = $$pre197; //@line 557
            $337 = $$pre198; //@line 557
            $340 = $323; //@line 557
            break L89;
           } else {
            $732 = $323; //@line 560
           }
          }
          $334 = HEAP8[$__sym >> 0] | 0; //@line 565
          $337 = HEAP32[$21 >> 2] | 0; //@line 565
          $340 = $$lcssa294; //@line 565
         }
        } while (0);
        $336 = ($334 & 1) == 0 ? $22 : $337; //@line 570
        $338 = $336; //@line 571
        $341 = $340 - $338 >> 2; //@line 573
        $342 = HEAP8[$__spaces >> 0] | 0; //@line 574
        $344 = ($342 & 1) == 0; //@line 576
        $348 = $344 ? ($342 & 255) >>> 1 : HEAP32[$23 >> 2] | 0; //@line 580
        if ($348 >>> 0 < $341 >>> 0) {
         $$ph = $337; //@line 583
         $$ph240 = $334; //@line 583
         $$ph241 = $338; //@line 583
        } else {
         $351 = $344 ? $23 : HEAP32[$24 >> 2] | 0; //@line 586
         $352 = $351 + ($348 << 2) | 0; //@line 587
         if (!$341) {
          $$ph = $337; //@line 590
          $$ph240 = $334; //@line 590
          $$ph241 = $340; //@line 590
         } else {
          $$in265 = $336; //@line 594
          $356 = $351 + ($348 - $341 << 2) | 0; //@line 594
          while (1) {
           if ((HEAP32[$356 >> 2] | 0) != (HEAP32[$$in265 >> 2] | 0)) {
            $$ph = $337; //@line 600
            $$ph240 = $334; //@line 600
            $$ph241 = $338; //@line 600
            break L86;
           }
           $356 = $356 + 4 | 0; //@line 603
           if (($356 | 0) == ($352 | 0)) {
            $$ph = $337; //@line 607
            $$ph240 = $334; //@line 607
            $$ph241 = $340; //@line 607
            break;
           } else {
            $$in265 = $$in265 + 4 | 0; //@line 610
           }
          }
         }
        }
       } else {
        $$ph = $290; //@line 616
        $$ph240 = $287; //@line 616
        $$ph241 = $292; //@line 616
       }
      }
     } while (0);
     $295 = ($$ph240 & 1) == 0; //@line 621
     $301 = ($295 ? $22 : $$ph) + (($295 ? ($$ph240 & 255) >>> 1 : HEAP32[$22 >> 2] | 0) << 2) | 0; //@line 627
     $302 = $$ph241; //@line 628
     L101 : do {
      if (($302 | 0) == ($301 | 0)) {
       $$lcssa183 = $301; //@line 632
      } else {
       $$pre$i3$i$i144270 = $729; //@line 634
       $376 = $729; //@line 634
       $401 = $302; //@line 634
       while (1) {
        $362 = HEAP32[$__b >> 2] | 0; //@line 636
        do {
         if (!$362) {
          $388 = 1; //@line 640
         } else {
          $365 = HEAP32[$362 + 12 >> 2] | 0; //@line 643
          if (($365 | 0) == (HEAP32[$362 + 16 >> 2] | 0)) {
           $$0$i$i$i$i136 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$362 >> 2] | 0) + 36 >> 2] & 63]($362) | 0; //@line 652
          } else {
           $$0$i$i$i$i136 = HEAP32[$365 >> 2] | 0; //@line 655
          }
          if (($$0$i$i$i$i136 | 0) == -1) {
           HEAP32[$__b >> 2] = 0; //@line 659
           $388 = 1; //@line 660
           break;
          } else {
           $388 = (HEAP32[$__b >> 2] | 0) == 0; //@line 665
           break;
          }
         }
        } while (0);
        do {
         if (!$376) {
          $$pre$i3$i$i144204 = $$pre$i3$i$i144270; //@line 673
          label = 114; //@line 674
         } else {
          $378 = HEAP32[$376 + 12 >> 2] | 0; //@line 677
          if (($378 | 0) == (HEAP32[$376 + 16 >> 2] | 0)) {
           $$0$i$i1$i$i142 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$376 >> 2] | 0) + 36 >> 2] & 63]($376) | 0; //@line 686
          } else {
           $$0$i$i1$i$i142 = HEAP32[$378 >> 2] | 0; //@line 689
          }
          if (($$0$i$i1$i$i142 | 0) == -1) {
           HEAP32[$__e >> 2] = 0; //@line 693
           $$pre$i3$i$i144204 = 0; //@line 694
           label = 114; //@line 695
           break;
          } else {
           if ($388 ^ ($$pre$i3$i$i144270 | 0) == 0) {
            $$pre$i3$i$i144203 = $$pre$i3$i$i144270; //@line 701
            $733 = $$pre$i3$i$i144270; //@line 701
            break;
           } else {
            $$lcssa183 = $401; //@line 704
            break L101;
           }
          }
         }
        } while (0);
        if ((label | 0) == 114) {
         label = 0; //@line 711
         if ($388) {
          $$lcssa183 = $401; //@line 713
          break L101;
         } else {
          $$pre$i3$i$i144203 = $$pre$i3$i$i144204; //@line 716
          $733 = 0; //@line 716
         }
        }
        $389 = HEAP32[$__b >> 2] | 0; //@line 719
        $391 = HEAP32[$389 + 12 >> 2] | 0; //@line 721
        if (($391 | 0) == (HEAP32[$389 + 16 >> 2] | 0)) {
         $$0$i$i133 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$389 >> 2] | 0) + 36 >> 2] & 63]($389) | 0; //@line 730
        } else {
         $$0$i$i133 = HEAP32[$391 >> 2] | 0; //@line 733
        }
        if (($$0$i$i133 | 0) != (HEAP32[$401 >> 2] | 0)) {
         $$lcssa183 = $401; //@line 738
         break L101;
        }
        $403 = HEAP32[$__b >> 2] | 0; //@line 741
        $404 = $403 + 12 | 0; //@line 742
        $405 = HEAP32[$404 >> 2] | 0; //@line 743
        if (($405 | 0) == (HEAP32[$403 + 16 >> 2] | 0)) {
         FUNCTION_TABLE_ii[HEAP32[(HEAP32[$403 >> 2] | 0) + 40 >> 2] & 63]($403) | 0; //@line 751
        } else {
         HEAP32[$404 >> 2] = $405 + 4; //@line 754
        }
        $401 = $401 + 4 | 0; //@line 756
        $$pre201 = HEAP8[$__sym >> 0] | 0; //@line 757
        $415 = ($$pre201 & 1) == 0; //@line 760
        $421 = ($415 ? $22 : HEAP32[$21 >> 2] | 0) + (($415 ? ($$pre201 & 255) >>> 1 : HEAP32[$22 >> 2] | 0) << 2) | 0; //@line 766
        if (($401 | 0) == ($421 | 0)) {
         $$lcssa183 = $421; //@line 769
         break;
        } else {
         $$pre$i3$i$i144270 = $$pre$i3$i$i144203; //@line 772
         $376 = $733; //@line 772
        }
       }
      }
     } while (0);
     if ($20) {
      $423 = HEAP8[$__sym >> 0] | 0; //@line 778
      $425 = ($423 & 1) == 0; //@line 780
      if (($$lcssa183 | 0) == (($425 ? $22 : HEAP32[$21 >> 2] | 0) + (($425 ? ($423 & 255) >>> 1 : HEAP32[$22 >> 2] | 0) << 2) | 0)) {
       $730 = $727; //@line 790
       $__trailing_sign$1 = $__trailing_sign$0278; //@line 790
      } else {
       label = 126; //@line 792
       break L1;
      }
     } else {
      $730 = $727; //@line 796
      $__trailing_sign$1 = $__trailing_sign$0278; //@line 796
     }
     break;
    }
   case 4:
    {
     $56 = HEAP32[$__ts >> 2] | 0; //@line 801
     $$pre$i3$i$i126 = $729; //@line 802
     $450 = $729; //@line 802
     $496 = $727; //@line 802
     $__ng$0 = 0; //@line 802
     L138 : while (1) {
      $436 = HEAP32[$__b >> 2] | 0; //@line 804
      do {
       if (!$436) {
        $462 = 1; //@line 808
       } else {
        $439 = HEAP32[$436 + 12 >> 2] | 0; //@line 811
        if (($439 | 0) == (HEAP32[$436 + 16 >> 2] | 0)) {
         $$0$i$i$i$i118 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$436 >> 2] | 0) + 36 >> 2] & 63]($436) | 0; //@line 820
        } else {
         $$0$i$i$i$i118 = HEAP32[$439 >> 2] | 0; //@line 823
        }
        if (($$0$i$i$i$i118 | 0) == -1) {
         HEAP32[$__b >> 2] = 0; //@line 827
         $462 = 1; //@line 828
         break;
        } else {
         $462 = (HEAP32[$__b >> 2] | 0) == 0; //@line 833
         break;
        }
       }
      } while (0);
      do {
       if (!$450) {
        $$pre$i3$i$i126190 = $$pre$i3$i$i126; //@line 841
        label = 140; //@line 842
       } else {
        $452 = HEAP32[$450 + 12 >> 2] | 0; //@line 845
        if (($452 | 0) == (HEAP32[$450 + 16 >> 2] | 0)) {
         $$0$i$i1$i$i124 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$450 >> 2] | 0) + 36 >> 2] & 63]($450) | 0; //@line 854
        } else {
         $$0$i$i1$i$i124 = HEAP32[$452 >> 2] | 0; //@line 857
        }
        if (($$0$i$i1$i$i124 | 0) == -1) {
         HEAP32[$__e >> 2] = 0; //@line 861
         $$pre$i3$i$i126190 = 0; //@line 862
         label = 140; //@line 863
         break;
        } else {
         if ($462 ^ ($$pre$i3$i$i126 | 0) == 0) {
          $$pre$i3$i$i126192 = $$pre$i3$i$i126; //@line 869
          $734 = $$pre$i3$i$i126; //@line 869
          break;
         } else {
          $$lcssa = $496; //@line 872
          $$pre$i3$i$i98 = $$pre$i3$i$i126; //@line 872
          $__ng$0$lcssa = $__ng$0; //@line 872
          break L138;
         }
        }
       }
      } while (0);
      if ((label | 0) == 140) {
       label = 0; //@line 879
       if ($462) {
        $$lcssa = $496; //@line 881
        $$pre$i3$i$i98 = $$pre$i3$i$i126190; //@line 881
        $__ng$0$lcssa = $__ng$0; //@line 881
        break;
       } else {
        $$pre$i3$i$i126192 = $$pre$i3$i$i126190; //@line 884
        $734 = 0; //@line 884
       }
      }
      $463 = HEAP32[$__b >> 2] | 0; //@line 887
      $465 = HEAP32[$463 + 12 >> 2] | 0; //@line 889
      if (($465 | 0) == (HEAP32[$463 + 16 >> 2] | 0)) {
       $$0$i$i116 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$463 >> 2] | 0) + 36 >> 2] & 63]($463) | 0; //@line 898
      } else {
       $$0$i$i116 = HEAP32[$465 >> 2] | 0; //@line 901
      }
      if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 2048, $$0$i$i116) | 0) {
       $478 = HEAP32[$__wn >> 2] | 0; //@line 908
       if (($478 | 0) == (HEAP32[$0 >> 2] | 0)) {
        __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb, $__wn, $0); //@line 912
        $482 = HEAP32[$__wn >> 2] | 0; //@line 914
       } else {
        $482 = $478; //@line 916
       }
       HEAP32[$__wn >> 2] = $482 + 4; //@line 919
       HEAP32[$482 >> 2] = $$0$i$i116; //@line 920
       $735 = $496; //@line 922
       $__ng$1 = $__ng$0 + 1 | 0; //@line 922
      } else {
       $484 = HEAP8[$__grp >> 0] | 0; //@line 924
       if (!(($$0$i$i116 | 0) == ($56 | 0) & (($__ng$0 | 0) != 0 ? ((($484 & 1) == 0 ? ($484 & 255) >>> 1 : HEAP32[$26 >> 2] | 0) | 0) != 0 : 0))) {
        $$lcssa = $496; //@line 937
        $$pre$i3$i$i98 = $$pre$i3$i$i126192; //@line 937
        $__ng$0$lcssa = $__ng$0; //@line 937
        break;
       }
       if (($496 | 0) == (HEAP32[$__ge >> 2] | 0)) {
        __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb, $__gn, $__ge); //@line 943
        $498 = HEAP32[$__gn >> 2] | 0; //@line 945
       } else {
        $498 = $496; //@line 947
       }
       $497 = $498 + 4 | 0; //@line 949
       HEAP32[$__gn >> 2] = $497; //@line 950
       HEAP32[$498 >> 2] = $__ng$0; //@line 951
       $735 = $497; //@line 952
       $__ng$1 = 0; //@line 952
      }
      $499 = HEAP32[$__b >> 2] | 0; //@line 954
      $500 = $499 + 12 | 0; //@line 955
      $501 = HEAP32[$500 >> 2] | 0; //@line 956
      if (($501 | 0) == (HEAP32[$499 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$499 >> 2] | 0) + 40 >> 2] & 63]($499) | 0; //@line 964
       $$pre$i3$i$i126 = $$pre$i3$i$i126192; //@line 965
       $450 = $734; //@line 965
       $496 = $735; //@line 965
       $__ng$0 = $__ng$1; //@line 965
       continue;
      } else {
       HEAP32[$500 >> 2] = $501 + 4; //@line 969
       $$pre$i3$i$i126 = $$pre$i3$i$i126192; //@line 970
       $450 = $734; //@line 970
       $496 = $735; //@line 970
       $__ng$0 = $__ng$1; //@line 970
       continue;
      }
     }
     if (($__ng$0$lcssa | 0) != 0 ? (HEAP32[$__gb >> 2] | 0) != ($$lcssa | 0) : 0) {
      if (($$lcssa | 0) == (HEAP32[$__ge >> 2] | 0)) {
       __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb, $__gn, $__ge); //@line 982
       $515 = HEAP32[$__gn >> 2] | 0; //@line 984
      } else {
       $515 = $$lcssa; //@line 986
      }
      $514 = $515 + 4 | 0; //@line 988
      HEAP32[$__gn >> 2] = $514; //@line 989
      HEAP32[$515 >> 2] = $__ng$0$lcssa; //@line 990
      $736 = $514; //@line 991
     } else {
      $736 = $$lcssa; //@line 993
     }
     $516 = HEAP32[$__fd >> 2] | 0; //@line 995
     if (($516 | 0) > 0) {
      $518 = HEAP32[$__b >> 2] | 0; //@line 998
      do {
       if (!$518) {
        $737 = 1; //@line 1002
       } else {
        $521 = HEAP32[$518 + 12 >> 2] | 0; //@line 1005
        if (($521 | 0) == (HEAP32[$518 + 16 >> 2] | 0)) {
         $$0$i$i$i$i90 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$518 >> 2] | 0) + 36 >> 2] & 63]($518) | 0; //@line 1014
        } else {
         $$0$i$i$i$i90 = HEAP32[$521 >> 2] | 0; //@line 1017
        }
        if (($$0$i$i$i$i90 | 0) == -1) {
         HEAP32[$__b >> 2] = 0; //@line 1021
         $737 = 1; //@line 1022
         break;
        } else {
         $737 = (HEAP32[$__b >> 2] | 0) == 0; //@line 1027
         break;
        }
       }
      } while (0);
      do {
       if (!$$pre$i3$i$i98) {
        label = 174; //@line 1035
       } else {
        $533 = HEAP32[$$pre$i3$i$i98 + 12 >> 2] | 0; //@line 1038
        if (($533 | 0) == (HEAP32[$$pre$i3$i$i98 + 16 >> 2] | 0)) {
         $$0$i$i1$i$i96 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i98 >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i98) | 0; //@line 1047
        } else {
         $$0$i$i1$i$i96 = HEAP32[$533 >> 2] | 0; //@line 1050
        }
        if (($$0$i$i1$i$i96 | 0) == -1) {
         HEAP32[$__e >> 2] = 0; //@line 1054
         label = 174; //@line 1055
         break;
        } else {
         if ($737) {
          $738 = $$pre$i3$i$i98; //@line 1059
          break;
         } else {
          label = 180; //@line 1062
          break L1;
         }
        }
       }
      } while (0);
      if ((label | 0) == 174) {
       label = 0; //@line 1069
       if ($737) {
        label = 180; //@line 1071
        break L1;
       } else {
        $738 = 0; //@line 1074
       }
      }
      $543 = HEAP32[$__b >> 2] | 0; //@line 1077
      $545 = HEAP32[$543 + 12 >> 2] | 0; //@line 1079
      if (($545 | 0) == (HEAP32[$543 + 16 >> 2] | 0)) {
       $$0$i$i87 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$543 >> 2] | 0) + 36 >> 2] & 63]($543) | 0; //@line 1088
      } else {
       $$0$i$i87 = HEAP32[$545 >> 2] | 0; //@line 1091
      }
      if (($$0$i$i87 | 0) != (HEAP32[$__dp >> 2] | 0)) {
       label = 180; //@line 1096
       break L1;
      }
      $558 = HEAP32[$__b >> 2] | 0; //@line 1099
      $559 = $558 + 12 | 0; //@line 1100
      $560 = HEAP32[$559 >> 2] | 0; //@line 1101
      if (($560 | 0) == (HEAP32[$558 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$558 >> 2] | 0) + 40 >> 2] & 63]($558) | 0; //@line 1109
      } else {
       HEAP32[$559 >> 2] = $560 + 4; //@line 1112
      }
      if (($516 | 0) > 0) {
       $$pre$i3$i$i76261 = $738; //@line 1116
       $583 = $738; //@line 1116
       $630 = $516; //@line 1116
       while (1) {
        $569 = HEAP32[$__b >> 2] | 0; //@line 1118
        do {
         if (!$569) {
          $595 = 1; //@line 1122
         } else {
          $572 = HEAP32[$569 + 12 >> 2] | 0; //@line 1125
          if (($572 | 0) == (HEAP32[$569 + 16 >> 2] | 0)) {
           $$0$i$i$i$i68 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$569 >> 2] | 0) + 36 >> 2] & 63]($569) | 0; //@line 1134
          } else {
           $$0$i$i$i$i68 = HEAP32[$572 >> 2] | 0; //@line 1137
          }
          if (($$0$i$i$i$i68 | 0) == -1) {
           HEAP32[$__b >> 2] = 0; //@line 1141
           $595 = 1; //@line 1142
           break;
          } else {
           $595 = (HEAP32[$__b >> 2] | 0) == 0; //@line 1147
           break;
          }
         }
        } while (0);
        do {
         if (!$583) {
          $$pre$i3$i$i76195$ph = $$pre$i3$i$i76261; //@line 1155
          label = 198; //@line 1156
         } else {
          $585 = HEAP32[$583 + 12 >> 2] | 0; //@line 1159
          if (($585 | 0) == (HEAP32[$583 + 16 >> 2] | 0)) {
           $$0$i$i1$i$i74 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$583 >> 2] | 0) + 36 >> 2] & 63]($583) | 0; //@line 1168
          } else {
           $$0$i$i1$i$i74 = HEAP32[$585 >> 2] | 0; //@line 1171
          }
          if (($$0$i$i1$i$i74 | 0) == -1) {
           HEAP32[$__e >> 2] = 0; //@line 1175
           $$pre$i3$i$i76195$ph = 0; //@line 1176
           label = 198; //@line 1177
           break;
          } else {
           if ($595 ^ ($$pre$i3$i$i76261 | 0) == 0) {
            $$pre$i3$i$i76195216 = $$pre$i3$i$i76261; //@line 1183
            $739 = $$pre$i3$i$i76261; //@line 1183
            break;
           } else {
            label = 204; //@line 1186
            break L1;
           }
          }
         }
        } while (0);
        if ((label | 0) == 198) {
         label = 0; //@line 1193
         if ($595) {
          label = 204; //@line 1195
          break L1;
         } else {
          $$pre$i3$i$i76195216 = $$pre$i3$i$i76195$ph; //@line 1198
          $739 = 0; //@line 1198
         }
        }
        $596 = HEAP32[$__b >> 2] | 0; //@line 1201
        $598 = HEAP32[$596 + 12 >> 2] | 0; //@line 1203
        if (($598 | 0) == (HEAP32[$596 + 16 >> 2] | 0)) {
         $$0$i$i65 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$596 >> 2] | 0) + 36 >> 2] & 63]($596) | 0; //@line 1212
        } else {
         $$0$i$i65 = HEAP32[$598 >> 2] | 0; //@line 1215
        }
        if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 2048, $$0$i$i65) | 0)) {
         label = 204; //@line 1222
         break L1;
        }
        if ((HEAP32[$__wn >> 2] | 0) == (HEAP32[$0 >> 2] | 0)) {
         __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb, $__wn, $0); //@line 1229
        }
        $616 = HEAP32[$__b >> 2] | 0; //@line 1231
        $618 = HEAP32[$616 + 12 >> 2] | 0; //@line 1233
        if (($618 | 0) == (HEAP32[$616 + 16 >> 2] | 0)) {
         $$0$i$i26 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$616 >> 2] | 0) + 36 >> 2] & 63]($616) | 0; //@line 1242
        } else {
         $$0$i$i26 = HEAP32[$618 >> 2] | 0; //@line 1245
        }
        $627 = HEAP32[$__wn >> 2] | 0; //@line 1247
        HEAP32[$__wn >> 2] = $627 + 4; //@line 1249
        HEAP32[$627 >> 2] = $$0$i$i26; //@line 1250
        $630$looptemp = $630;
        $630 = $630 + -1 | 0; //@line 1251
        HEAP32[$__fd >> 2] = $630; //@line 1252
        $631 = HEAP32[$__b >> 2] | 0; //@line 1253
        $632 = $631 + 12 | 0; //@line 1254
        $633 = HEAP32[$632 >> 2] | 0; //@line 1255
        if (($633 | 0) == (HEAP32[$631 + 16 >> 2] | 0)) {
         FUNCTION_TABLE_ii[HEAP32[(HEAP32[$631 >> 2] | 0) + 40 >> 2] & 63]($631) | 0; //@line 1263
        } else {
         HEAP32[$632 >> 2] = $633 + 4; //@line 1266
        }
        if (($630$looptemp | 0) <= 1) {
         break;
        } else {
         $$pre$i3$i$i76261 = $$pre$i3$i$i76195216; //@line 1270
         $583 = $739; //@line 1270
        }
       }
      }
     }
     if ((HEAP32[$__wn >> 2] | 0) == (HEAP32[$__wb >> 2] | 0)) {
      label = 215; //@line 1281
      break L1;
     } else {
      $730 = $736; //@line 1284
      $__trailing_sign$1 = $__trailing_sign$0278; //@line 1284
     }
     break;
    }
   default:
    {
     $730 = $727; //@line 1289
     $__trailing_sign$1 = $__trailing_sign$0278; //@line 1289
    }
   }
  } while (0);
  L261 : do {
   if ((label | 0) == 30) {
    while (1) {
     label = 0; //@line 1296
     $87 = HEAP32[$__b >> 2] | 0; //@line 1297
     do {
      if (!$87) {
       $113 = 1; //@line 1301
      } else {
       $90 = HEAP32[$87 + 12 >> 2] | 0; //@line 1304
       if (($90 | 0) == (HEAP32[$87 + 16 >> 2] | 0)) {
        $$0$i$i$i$i43 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$87 >> 2] | 0) + 36 >> 2] & 63]($87) | 0; //@line 1313
       } else {
        $$0$i$i$i$i43 = HEAP32[$90 >> 2] | 0; //@line 1316
       }
       if (($$0$i$i$i$i43 | 0) == -1) {
        HEAP32[$__b >> 2] = 0; //@line 1320
        $113 = 1; //@line 1321
        break;
       } else {
        $113 = (HEAP32[$__b >> 2] | 0) == 0; //@line 1326
        break;
       }
      }
     } while (0);
     do {
      if (!$101) {
       $$pre$i3$i$i51211 = $$pre$i3$i$i51; //@line 1334
       label = 43; //@line 1335
      } else {
       $103 = HEAP32[$101 + 12 >> 2] | 0; //@line 1338
       if (($103 | 0) == (HEAP32[$101 + 16 >> 2] | 0)) {
        $$0$i$i1$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$101 >> 2] | 0) + 36 >> 2] & 63]($101) | 0; //@line 1347
       } else {
        $$0$i$i1$i$i49 = HEAP32[$103 >> 2] | 0; //@line 1350
       }
       if (($$0$i$i1$i$i49 | 0) == -1) {
        HEAP32[$__e >> 2] = 0; //@line 1354
        $$pre$i3$i$i51211 = 0; //@line 1355
        label = 43; //@line 1356
        break;
       } else {
        if ($113 ^ ($$pre$i3$i$i51 | 0) == 0) {
         $$pre$i3$i$i51213 = $$pre$i3$i$i51; //@line 1362
         $731 = $$pre$i3$i$i51; //@line 1362
         break;
        } else {
         $730 = $727; //@line 1365
         $__trailing_sign$1 = $__trailing_sign$0278; //@line 1365
         break L261;
        }
       }
      }
     } while (0);
     if ((label | 0) == 43) {
      label = 0; //@line 1372
      if ($113) {
       $730 = $727; //@line 1374
       $__trailing_sign$1 = $__trailing_sign$0278; //@line 1374
       break L261;
      } else {
       $$pre$i3$i$i51213 = $$pre$i3$i$i51211; //@line 1377
       $731 = 0; //@line 1377
      }
     }
     $114 = HEAP32[$__b >> 2] | 0; //@line 1380
     $116 = HEAP32[$114 + 12 >> 2] | 0; //@line 1382
     if (($116 | 0) == (HEAP32[$114 + 16 >> 2] | 0)) {
      $$0$i$i56 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$114 >> 2] | 0) + 36 >> 2] & 63]($114) | 0; //@line 1391
     } else {
      $$0$i$i56 = HEAP32[$116 >> 2] | 0; //@line 1394
     }
     if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 8192, $$0$i$i56) | 0)) {
      $730 = $727; //@line 1401
      $__trailing_sign$1 = $__trailing_sign$0278; //@line 1401
      break L261;
     }
     $129 = HEAP32[$__b >> 2] | 0; //@line 1404
     $130 = $129 + 12 | 0; //@line 1405
     $131 = HEAP32[$130 >> 2] | 0; //@line 1406
     if (($131 | 0) == (HEAP32[$129 + 16 >> 2] | 0)) {
      $$0$i$i60 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$129 >> 2] | 0) + 40 >> 2] & 63]($129) | 0; //@line 1415
     } else {
      HEAP32[$130 >> 2] = $131 + 4; //@line 1418
      $$0$i$i60 = HEAP32[$131 >> 2] | 0; //@line 1420
     }
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces, $$0$i$i60); //@line 1422
     $$pre$i3$i$i51 = $$pre$i3$i$i51213; //@line 1423
     $101 = $731; //@line 1423
     label = 30; //@line 1424
    }
   }
  } while (0);
  $__p$0276 = $__p$0276 + 1 | 0; //@line 1428
  if ($__p$0276 >>> 0 >= 4) {
   $$lcssa248 = $730; //@line 1433
   $__trailing_sign$0$lcssa = $__trailing_sign$1; //@line 1433
   label = 217; //@line 1434
   break;
  } else {
   $727 = $730; //@line 1431
   $__trailing_sign$0278 = $__trailing_sign$1; //@line 1431
  }
 }
 L296 : do {
  if ((label | 0) == 28) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 1442
   $$0 = 0; //@line 1443
  } else if ((label | 0) == 86) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 1448
   $$0 = 0; //@line 1449
  } else if ((label | 0) == 126) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 1454
   $$0 = 0; //@line 1455
  } else if ((label | 0) == 180) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 1460
   $$0 = 0; //@line 1461
  } else if ((label | 0) == 204) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 1466
   $$0 = 0; //@line 1467
  } else if ((label | 0) == 215) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 1472
   $$0 = 0; //@line 1473
  } else if ((label | 0) == 217) {
   L298 : do {
    if ($__trailing_sign$0$lcssa) {
     $650 = $__trailing_sign$0$lcssa + 4 | 0; //@line 1479
     $651 = $__trailing_sign$0$lcssa + 8 | 0; //@line 1480
     $__i$0 = 1; //@line 1481
     L300 : while (1) {
      $652 = HEAP8[$__trailing_sign$0$lcssa >> 0] | 0; //@line 1483
      if (!($652 & 1)) {
       $659 = ($652 & 255) >>> 1; //@line 1489
      } else {
       $659 = HEAP32[$650 >> 2] | 0; //@line 1492
      }
      if ($__i$0 >>> 0 >= $659 >>> 0) {
       break L298;
      }
      $660 = HEAP32[$__b >> 2] | 0; //@line 1498
      do {
       if (!$660) {
        $740 = 1; //@line 1502
       } else {
        $663 = HEAP32[$660 + 12 >> 2] | 0; //@line 1505
        if (($663 | 0) == (HEAP32[$660 + 16 >> 2] | 0)) {
         $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$660 >> 2] | 0) + 36 >> 2] & 63]($660) | 0; //@line 1514
        } else {
         $$0$i$i$i$i = HEAP32[$663 >> 2] | 0; //@line 1517
        }
        if (($$0$i$i$i$i | 0) == -1) {
         HEAP32[$__b >> 2] = 0; //@line 1521
         $740 = 1; //@line 1522
         break;
        } else {
         $740 = (HEAP32[$__b >> 2] | 0) == 0; //@line 1527
         break;
        }
       }
      } while (0);
      $673 = HEAP32[$__e >> 2] | 0; //@line 1532
      do {
       if (!$673) {
        label = 236; //@line 1536
       } else {
        $676 = HEAP32[$673 + 12 >> 2] | 0; //@line 1539
        if (($676 | 0) == (HEAP32[$673 + 16 >> 2] | 0)) {
         $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$673 >> 2] | 0) + 36 >> 2] & 63]($673) | 0; //@line 1548
        } else {
         $$0$i$i1$i$i = HEAP32[$676 >> 2] | 0; //@line 1551
        }
        if (($$0$i$i1$i$i | 0) == -1) {
         HEAP32[$__e >> 2] = 0; //@line 1555
         label = 236; //@line 1556
         break;
        } else {
         if ($740) {
          break;
         } else {
          break L300;
         }
        }
       }
      } while (0);
      if ((label | 0) == 236) {
       label = 0; //@line 1568
       if ($740) {
        break;
       }
      }
      $686 = HEAP32[$__b >> 2] | 0; //@line 1573
      $688 = HEAP32[$686 + 12 >> 2] | 0; //@line 1575
      if (($688 | 0) == (HEAP32[$686 + 16 >> 2] | 0)) {
       $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$686 >> 2] | 0) + 36 >> 2] & 63]($686) | 0; //@line 1584
      } else {
       $$0$i$i = HEAP32[$688 >> 2] | 0; //@line 1587
      }
      if (!(HEAP8[$__trailing_sign$0$lcssa >> 0] & 1)) {
       $702 = $650; //@line 1593
      } else {
       $702 = HEAP32[$651 >> 2] | 0; //@line 1596
      }
      if (($$0$i$i | 0) != (HEAP32[$702 + ($__i$0 << 2) >> 2] | 0)) {
       break;
      }
      $707 = $__i$0 + 1 | 0; //@line 1604
      $708 = HEAP32[$__b >> 2] | 0; //@line 1605
      $709 = $708 + 12 | 0; //@line 1606
      $710 = HEAP32[$709 >> 2] | 0; //@line 1607
      if (($710 | 0) == (HEAP32[$708 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$708 >> 2] | 0) + 40 >> 2] & 63]($708) | 0; //@line 1615
       $__i$0 = $707; //@line 1616
       continue;
      } else {
       HEAP32[$709 >> 2] = $710 + 4; //@line 1620
       $__i$0 = $707; //@line 1621
       continue;
      }
     }
     HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 1627
     $$0 = 0; //@line 1628
     break L296;
    }
   } while (0);
   $718 = HEAP32[$__gb >> 2] | 0; //@line 1632
   if (($718 | 0) == ($$lcssa248 | 0)) {
    $$0 = 1; //@line 1635
   } else {
    HEAP32[$__et >> 2] = 0; //@line 1637
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp, $718, $$lcssa248, $__et); //@line 1638
    if (!(HEAP32[$__et >> 2] | 0)) {
     $$0 = 1; //@line 1642
    } else {
     HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 1646
     $$0 = 0; //@line 1647
    }
   }
  }
 } while (0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__spaces); //@line 1652
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nsn); //@line 1653
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__psn); //@line 1654
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym); //@line 1655
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp); //@line 1656
 $724 = HEAP32[$__gb >> 2] | 0; //@line 1657
 HEAP32[$__gb >> 2] = 0; //@line 1658
 if ($724) {
  FUNCTION_TABLE_vi[HEAP32[$2 >> 2] & 127]($724); //@line 1662
 }
 STACKTOP = sp; //@line 1664
 return $$0 | 0; //@line 1664
}
function _vfscanf($f, $fmt, $ap) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$ = 0, $$lcssa = 0, $$lcssa38 = 0, $$lcssa384 = 0, $$pre = 0, $$pre$phi182Z2D = 0, $$pre170 = 0, $$pre178 = 0, $$size$0 = 0, $0 = 0, $10 = 0, $104 = 0, $105 = 0, $107 = 0, $109 = 0, $11 = 0, $112 = 0, $115 = 0, $117 = 0, $12 = 0, $125 = 0, $129 = 0, $13 = 0, $136 = 0, $14 = 0, $141 = 0, $145 = 0, $15 = 0, $150 = 0, $151 = 0, $157 = 0, $160 = 0, $164 = 0, $166 = 0, $168 = 0, $17 = 0, $173 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $181 = 0, $186 = 0, $190 = 0, $195 = 0, $196 = 0, $197 = 0, $199 = 0, $20 = 0, $201 = 0, $202 = 0, $210 = 0, $220 = 0, $222 = 0, $226 = 0, $228 = 0, $236 = 0, $244 = 0, $245 = 0, $248 = 0, $25 = 0, $250 = 0, $256 = 0, $263 = 0, $265 = 0, $271 = 0, $277 = 0, $281 = 0, $284 = 0, $291 = 0, $306 = 0, $310 = 0.0, $32 = 0, $334 = 0, $37 = 0, $41 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $51 = 0, $52 = 0, $62 = 0, $7 = 0, $8 = 0, $81 = 0, $82 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alloc$0 = 0, $alloc$0400 = 0, $alloc$1 = 0, $alloc$2 = 0, $ap2$i = 0, $base$0 = 0, $c$0100 = 0, $dest$0 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph$phi = 0, $i$0$ph20 = 0, $i$0$ph20$lcssa = 0, $i$1 = 0, $i$2 = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$4 = 0, $invert$0 = 0, $isdigittmp = 0, $k$0$ph = 0, $k$1$ph = 0, $matches$0104 = 0, $matches$0104$lcssa = 0, $matches$0104376 = 0, $matches$1 = 0, $matches$2 = 0, $matches$3 = 0, $p$0109 = 0, $p$1 = 0, $p$1$lcssa = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$396 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0, $p$7 = 0, $p$7$ph = 0, $p$8 = 0, $p$9 = 0, $pos$0108 = 0, $pos$1 = 0, $pos$2 = 0, $s$0107 = 0, $s$0107$lcssa = 0, $s$1 = 0, $s$2$ph = 0, $s$3 = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0, $s$8 = 0, $scanset = 0, $size$0 = 0, $st = 0, $wc = 0, $wcs$0103 = 0, $wcs$0103$lcssa = 0, $wcs$1 = 0, $wcs$2 = 0, $wcs$3$ph = 0, $wcs$3$ph$lcssa = 0, $wcs$4 = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $wcs$8 = 0, $wcs$9 = 0, $width$0$lcssa = 0, $width$097 = 0, $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7441
 STACKTOP = STACKTOP + 304 | 0; //@line 7442
 $ap2$i = sp + 16 | 0; //@line 7443
 $st = sp + 8 | 0; //@line 7444
 $scanset = sp + 33 | 0; //@line 7445
 $wc = sp; //@line 7446
 $0 = sp + 32 | 0; //@line 7447
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) {
  $334 = ___lockfile($f) | 0; //@line 7453
 } else {
  $334 = 0; //@line 7455
 }
 $5 = HEAP8[$fmt >> 0] | 0; //@line 7457
 L4 : do {
  if (!($5 << 24 >> 24)) {
   $matches$3 = 0; //@line 7461
  } else {
   $7 = $f + 4 | 0; //@line 7463
   $8 = $f + 100 | 0; //@line 7464
   $9 = $f + 108 | 0; //@line 7465
   $10 = $f + 8 | 0; //@line 7466
   $11 = $scanset + 10 | 0; //@line 7467
   $12 = $scanset + 33 | 0; //@line 7468
   $13 = $st + 4 | 0; //@line 7469
   $14 = $scanset + 46 | 0; //@line 7470
   $15 = $scanset + 94 | 0; //@line 7471
   $17 = $5; //@line 7472
   $matches$0104 = 0; //@line 7472
   $p$0109 = $fmt; //@line 7472
   $pos$0108 = 0; //@line 7472
   $s$0107 = 0; //@line 7472
   $wcs$0103 = 0; //@line 7472
   L6 : while (1) {
    L8 : do {
     if (!(_isspace($17 & 255) | 0)) {
      $47 = (HEAP8[$p$0109 >> 0] | 0) == 37; //@line 7480
      L10 : do {
       if ($47) {
        $48 = $p$0109 + 1 | 0; //@line 7483
        $49 = HEAP8[$48 >> 0] | 0; //@line 7484
        L12 : do {
         switch ($49 << 24 >> 24) {
         case 37:
          {
           break L10;
           break;
          }
         case 42:
          {
           $dest$0 = 0; //@line 7493
           $p$2 = $p$0109 + 2 | 0; //@line 7493
           break;
          }
         default:
          {
           $isdigittmp = ($49 & 255) + -48 | 0; //@line 7498
           if ($isdigittmp >>> 0 < 10) {
            if ((HEAP8[$p$0109 + 2 >> 0] | 0) == 36) {
             HEAP32[$ap2$i >> 2] = HEAP32[$ap >> 2]; //@line 7506
             $i$0$i = $isdigittmp; //@line 7507
             while (1) {
              $81 = (HEAP32[$ap2$i >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 7521
              $82 = HEAP32[$81 >> 2] | 0; //@line 7522
              HEAP32[$ap2$i >> 2] = $81 + 4; //@line 7524
              if ($i$0$i >>> 0 > 1) {
               $i$0$i = $i$0$i + -1 | 0; //@line 7527
              } else {
               $$lcssa = $82; //@line 7529
               break;
              }
             }
             $dest$0 = $$lcssa; //@line 7534
             $p$2 = $p$0109 + 3 | 0; //@line 7534
             break L12;
            }
           }
           $90 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 7549
           $91 = HEAP32[$90 >> 2] | 0; //@line 7550
           HEAP32[$ap >> 2] = $90 + 4; //@line 7552
           $dest$0 = $91; //@line 7553
           $p$2 = $48; //@line 7553
          }
         }
        } while (0);
        $92 = HEAP8[$p$2 >> 0] | 0; //@line 7557
        $93 = $92 & 255; //@line 7558
        if (($93 + -48 | 0) >>> 0 < 10) {
         $97 = $93; //@line 7562
         $p$396 = $p$2; //@line 7562
         $width$097 = 0; //@line 7562
         while (1) {
          $96 = ($width$097 * 10 | 0) + -48 + $97 | 0; //@line 7566
          $98 = $p$396 + 1 | 0; //@line 7567
          $99 = HEAP8[$98 >> 0] | 0; //@line 7568
          $97 = $99 & 255; //@line 7569
          if (($97 + -48 | 0) >>> 0 >= 10) {
           $$lcssa38 = $99; //@line 7575
           $p$3$lcssa = $98; //@line 7575
           $width$0$lcssa = $96; //@line 7575
           break;
          } else {
           $p$396 = $98; //@line 7573
           $width$097 = $96; //@line 7573
          }
         }
        } else {
         $$lcssa38 = $92; //@line 7580
         $p$3$lcssa = $p$2; //@line 7580
         $width$0$lcssa = 0; //@line 7580
        }
        if ($$lcssa38 << 24 >> 24 == 109) {
         $104 = $p$3$lcssa + 1 | 0; //@line 7586
         $107 = HEAP8[$104 >> 0] | 0; //@line 7588
         $alloc$0 = ($dest$0 | 0) != 0 & 1; //@line 7588
         $p$4 = $104; //@line 7588
         $s$1 = 0; //@line 7588
         $wcs$1 = 0; //@line 7588
        } else {
         $107 = $$lcssa38; //@line 7590
         $alloc$0 = 0; //@line 7590
         $p$4 = $p$3$lcssa; //@line 7590
         $s$1 = $s$0107; //@line 7590
         $wcs$1 = $wcs$0103; //@line 7590
        }
        $105 = $p$4 + 1 | 0; //@line 7592
        switch ($107 & 255 | 0) {
        case 104:
         {
          $109 = (HEAP8[$105 >> 0] | 0) == 104; //@line 7597
          $p$5 = $109 ? $p$4 + 2 | 0 : $105; //@line 7601
          $size$0 = $109 ? -2 : -1; //@line 7601
          break;
         }
        case 108:
         {
          $112 = (HEAP8[$105 >> 0] | 0) == 108; //@line 7606
          $p$5 = $112 ? $p$4 + 2 | 0 : $105; //@line 7610
          $size$0 = $112 ? 3 : 1; //@line 7610
          break;
         }
        case 106:
         {
          $p$5 = $105; //@line 7614
          $size$0 = 3; //@line 7614
          break;
         }
        case 116:
        case 122:
         {
          $p$5 = $105; //@line 7618
          $size$0 = 1; //@line 7618
          break;
         }
        case 76:
         {
          $p$5 = $105; //@line 7622
          $size$0 = 2; //@line 7622
          break;
         }
        case 110:
        case 112:
        case 67:
        case 83:
        case 91:
        case 99:
        case 115:
        case 88:
        case 71:
        case 70:
        case 69:
        case 65:
        case 103:
        case 102:
        case 101:
        case 97:
        case 120:
        case 117:
        case 111:
        case 105:
        case 100:
         {
          $p$5 = $p$4; //@line 7626
          $size$0 = 0; //@line 7626
          break;
         }
        default:
         {
          $alloc$0400 = $alloc$0; //@line 7630
          $matches$0104376 = $matches$0104; //@line 7630
          $s$6 = $s$1; //@line 7630
          $wcs$7 = $wcs$1; //@line 7630
          label = 152; //@line 7631
          break L6;
         }
        }
        $115 = HEAPU8[$p$5 >> 0] | 0; //@line 7636
        $117 = ($115 & 47 | 0) == 3; //@line 7638
        $$ = $117 ? $115 | 32 : $115; //@line 7640
        $$size$0 = $117 ? 1 : $size$0; //@line 7641
        switch ($$ | 0) {
        case 99:
         {
          $pos$1 = $pos$0108; //@line 7646
          $width$1 = ($width$0$lcssa | 0) < 1 ? 1 : $width$0$lcssa; //@line 7646
          break;
         }
        case 91:
         {
          $pos$1 = $pos$0108; //@line 7650
          $width$1 = $width$0$lcssa; //@line 7650
          break;
         }
        case 110:
         {
          if (!$dest$0) {
           $matches$1 = $matches$0104; //@line 7658
           $p$11 = $p$5; //@line 7658
           $pos$2 = $pos$0108; //@line 7658
           $s$5 = $s$1; //@line 7658
           $wcs$6 = $wcs$1; //@line 7658
           break L8;
          }
          switch ($$size$0 | 0) {
          case -2:
           {
            HEAP8[$dest$0 >> 0] = $pos$0108; //@line 7664
            $matches$1 = $matches$0104; //@line 7665
            $p$11 = $p$5; //@line 7665
            $pos$2 = $pos$0108; //@line 7665
            $s$5 = $s$1; //@line 7665
            $wcs$6 = $wcs$1; //@line 7665
            break L8;
            break;
           }
          case -1:
           {
            HEAP16[$dest$0 >> 1] = $pos$0108; //@line 7671
            $matches$1 = $matches$0104; //@line 7672
            $p$11 = $p$5; //@line 7672
            $pos$2 = $pos$0108; //@line 7672
            $s$5 = $s$1; //@line 7672
            $wcs$6 = $wcs$1; //@line 7672
            break L8;
            break;
           }
          case 0:
           {
            HEAP32[$dest$0 >> 2] = $pos$0108; //@line 7677
            $matches$1 = $matches$0104; //@line 7678
            $p$11 = $p$5; //@line 7678
            $pos$2 = $pos$0108; //@line 7678
            $s$5 = $s$1; //@line 7678
            $wcs$6 = $wcs$1; //@line 7678
            break L8;
            break;
           }
          case 1:
           {
            HEAP32[$dest$0 >> 2] = $pos$0108; //@line 7683
            $matches$1 = $matches$0104; //@line 7684
            $p$11 = $p$5; //@line 7684
            $pos$2 = $pos$0108; //@line 7684
            $s$5 = $s$1; //@line 7684
            $wcs$6 = $wcs$1; //@line 7684
            break L8;
            break;
           }
          case 3:
           {
            $125 = $dest$0; //@line 7689
            HEAP32[$125 >> 2] = $pos$0108; //@line 7691
            HEAP32[$125 + 4 >> 2] = (($pos$0108 | 0) < 0) << 31 >> 31; //@line 7694
            $matches$1 = $matches$0104; //@line 7695
            $p$11 = $p$5; //@line 7695
            $pos$2 = $pos$0108; //@line 7695
            $s$5 = $s$1; //@line 7695
            $wcs$6 = $wcs$1; //@line 7695
            break L8;
            break;
           }
          default:
           {
            $matches$1 = $matches$0104; //@line 7700
            $p$11 = $p$5; //@line 7700
            $pos$2 = $pos$0108; //@line 7700
            $s$5 = $s$1; //@line 7700
            $wcs$6 = $wcs$1; //@line 7700
            break L8;
           }
          }
          break;
         }
        default:
         {
          ___shlim($f, 0); //@line 7707
          do {
           $129 = HEAP32[$7 >> 2] | 0; //@line 7709
           if ($129 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
            HEAP32[$7 >> 2] = $129 + 1; //@line 7714
            $136 = HEAPU8[$129 >> 0] | 0; //@line 7717
           } else {
            $136 = ___shgetc($f) | 0; //@line 7720
           }
          } while ((_isspace($136) | 0) != 0);
          $$pre170 = HEAP32[$7 >> 2] | 0; //@line 7730
          if (!(HEAP32[$8 >> 2] | 0)) {
           $145 = $$pre170; //@line 7732
          } else {
           $141 = $$pre170 + -1 | 0; //@line 7734
           HEAP32[$7 >> 2] = $141; //@line 7735
           $145 = $141; //@line 7736
          }
          $pos$1 = (HEAP32[$9 >> 2] | 0) + $pos$0108 + $145 - (HEAP32[$10 >> 2] | 0) | 0; //@line 7745
          $width$1 = $width$0$lcssa; //@line 7745
         }
        }
        ___shlim($f, $width$1); //@line 7748
        $150 = HEAP32[$7 >> 2] | 0; //@line 7749
        $151 = HEAP32[$8 >> 2] | 0; //@line 7750
        if ($150 >>> 0 < $151 >>> 0) {
         HEAP32[$7 >> 2] = $150 + 1; //@line 7754
         $157 = $151; //@line 7755
        } else {
         if ((___shgetc($f) | 0) < 0) {
          $alloc$0400 = $alloc$0; //@line 7760
          $matches$0104376 = $matches$0104; //@line 7760
          $s$6 = $s$1; //@line 7760
          $wcs$7 = $wcs$1; //@line 7760
          label = 152; //@line 7761
          break L6;
         }
         $157 = HEAP32[$8 >> 2] | 0; //@line 7765
        }
        if ($157) {
         HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1; //@line 7771
        }
        L67 : do {
         switch ($$ | 0) {
         case 91:
         case 99:
         case 115:
          {
           $160 = ($$ | 0) == 99; //@line 7776
           L69 : do {
            if (($$ & 239 | 0) == 99) {
             _memset($scanset | 0, -1, 257) | 0; //@line 7782
             HEAP8[$scanset >> 0] = 0; //@line 7783
             if (($$ | 0) == 115) {
              HEAP8[$12 >> 0] = 0; //@line 7785
              HEAP8[$11 >> 0] = 0; //@line 7786
              HEAP8[$11 + 1 >> 0] = 0; //@line 7786
              HEAP8[$11 + 2 >> 0] = 0; //@line 7786
              HEAP8[$11 + 3 >> 0] = 0; //@line 7786
              HEAP8[$11 + 4 >> 0] = 0; //@line 7786
              $p$9 = $p$5; //@line 7787
             } else {
              $p$9 = $p$5; //@line 7789
             }
            } else {
             $164 = $p$5 + 1 | 0; //@line 7792
             $166 = (HEAP8[$164 >> 0] | 0) == 94; //@line 7794
             $invert$0 = $166 & 1; //@line 7796
             $168 = $166 ? $164 : $p$5; //@line 7797
             $p$6 = $166 ? $p$5 + 2 | 0 : $164; //@line 7798
             _memset($scanset | 0, $166 & 1 | 0, 257) | 0; //@line 7800
             HEAP8[$scanset >> 0] = 0; //@line 7801
             switch (HEAP8[$p$6 >> 0] | 0) {
             case 45:
              {
               $173 = ($invert$0 ^ 1) & 255; //@line 7807
               HEAP8[$14 >> 0] = $173; //@line 7808
               $$pre$phi182Z2D = $173; //@line 7809
               $p$7$ph = $168 + 2 | 0; //@line 7809
               break;
              }
             case 93:
              {
               $176 = ($invert$0 ^ 1) & 255; //@line 7815
               HEAP8[$15 >> 0] = $176; //@line 7816
               $$pre$phi182Z2D = $176; //@line 7817
               $p$7$ph = $168 + 2 | 0; //@line 7817
               break;
              }
             default:
              {
               $$pre$phi182Z2D = ($invert$0 ^ 1) & 255; //@line 7823
               $p$7$ph = $p$6; //@line 7823
              }
             }
             $p$7 = $p$7$ph; //@line 7826
             while (1) {
              $177 = HEAP8[$p$7 >> 0] | 0; //@line 7828
              L80 : do {
               switch ($177 << 24 >> 24) {
               case 0:
                {
                 $alloc$0400 = $alloc$0; //@line 7832
                 $matches$0104376 = $matches$0104; //@line 7832
                 $s$6 = $s$1; //@line 7832
                 $wcs$7 = $wcs$1; //@line 7832
                 label = 152; //@line 7833
                 break L6;
                 break;
                }
               case 93:
                {
                 $p$9 = $p$7; //@line 7838
                 break L69;
                 break;
                }
               case 45:
                {
                 $178 = $p$7 + 1 | 0; //@line 7843
                 $179 = HEAP8[$178 >> 0] | 0; //@line 7844
                 switch ($179 << 24 >> 24) {
                 case 93:
                 case 0:
                  {
                   $190 = 45; //@line 7847
                   $p$8 = $p$7; //@line 7847
                   break L80;
                   break;
                  }
                 default:
                  {}
                 }
                 $181 = HEAP8[$p$7 + -1 >> 0] | 0; //@line 7855
                 if (($181 & 255) < ($179 & 255)) {
                  $c$0100 = $181 & 255; //@line 7859
                  do {
                   $c$0100 = $c$0100 + 1 | 0; //@line 7861
                   HEAP8[$scanset + $c$0100 >> 0] = $$pre$phi182Z2D; //@line 7863
                   $186 = HEAP8[$178 >> 0] | 0; //@line 7864
                  } while (($c$0100 | 0) < ($186 & 255 | 0));
                  $190 = $186; //@line 7870
                  $p$8 = $178; //@line 7870
                 } else {
                  $190 = $179; //@line 7875
                  $p$8 = $178; //@line 7875
                 }
                 break;
                }
               default:
                {
                 $190 = $177; //@line 7880
                 $p$8 = $p$7; //@line 7880
                }
               }
              } while (0);
              HEAP8[$scanset + (($190 & 255) + 1) >> 0] = $$pre$phi182Z2D; //@line 7887
              $p$7 = $p$8 + 1 | 0; //@line 7889
             }
            }
           } while (0);
           $195 = $160 ? $width$1 + 1 | 0 : 31; //@line 7894
           $196 = ($$size$0 | 0) == 1; //@line 7895
           $197 = ($alloc$0 | 0) != 0; //@line 7896
           L88 : do {
            if ($196) {
             if ($197) {
              $199 = _malloc($195 << 2) | 0; //@line 7901
              if (!$199) {
               $alloc$0400 = $alloc$0; //@line 7904
               $matches$0104376 = $matches$0104; //@line 7904
               $s$6 = 0; //@line 7904
               $wcs$7 = $199; //@line 7904
               label = 152; //@line 7905
               break L6;
              } else {
               $wcs$2 = $199; //@line 7908
              }
             } else {
              $wcs$2 = $dest$0; //@line 7911
             }
             HEAP32[$st >> 2] = 0; //@line 7913
             HEAP32[$13 >> 2] = 0; //@line 7914
             $i$0$ph = 0; //@line 7915
             $k$0$ph = $195; //@line 7915
             $wcs$3$ph = $wcs$2; //@line 7915
             L94 : while (1) {
              $201 = ($wcs$3$ph | 0) == 0; //@line 7917
              $i$0$ph20 = $i$0$ph; //@line 7918
              while (1) {
               L98 : while (1) {
                $202 = HEAP32[$7 >> 2] | 0; //@line 7921
                if ($202 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
                 HEAP32[$7 >> 2] = $202 + 1; //@line 7926
                 $210 = HEAPU8[$202 >> 0] | 0; //@line 7929
                } else {
                 $210 = ___shgetc($f) | 0; //@line 7932
                }
                if (!(HEAP8[$scanset + ($210 + 1) >> 0] | 0)) {
                 $i$0$ph20$lcssa = $i$0$ph20; //@line 7939
                 $wcs$3$ph$lcssa = $wcs$3$ph; //@line 7939
                 break L94;
                }
                HEAP8[$0 >> 0] = $210; //@line 7943
                switch (_mbrtowc($wc, $0, 1, $st) | 0) {
                case -1:
                 {
                  $alloc$0400 = $alloc$0; //@line 7947
                  $matches$0104376 = $matches$0104; //@line 7947
                  $s$6 = 0; //@line 7947
                  $wcs$7 = $wcs$3$ph; //@line 7947
                  label = 152; //@line 7948
                  break L6;
                  break;
                 }
                case -2:
                 {
                  break;
                 }
                default:
                 {
                  break L98;
                 }
                }
               }
               if ($201) {
                $i$1 = $i$0$ph20; //@line 7961
               } else {
                HEAP32[$wcs$3$ph + ($i$0$ph20 << 2) >> 2] = HEAP32[$wc >> 2]; //@line 7966
                $i$1 = $i$0$ph20 + 1 | 0; //@line 7967
               }
               if ($197 & ($i$1 | 0) == ($k$0$ph | 0)) {
                break;
               } else {
                $i$0$ph20 = $i$1; //@line 7974
               }
              }
              $220 = $k$0$ph << 1 | 1; //@line 7978
              $222 = _realloc($wcs$3$ph, $220 << 2) | 0; //@line 7980
              if (!$222) {
               $alloc$0400 = $alloc$0; //@line 7983
               $matches$0104376 = $matches$0104; //@line 7983
               $s$6 = 0; //@line 7983
               $wcs$7 = $wcs$3$ph; //@line 7983
               label = 152; //@line 7984
               break L6;
              }
              $i$0$ph$phi = $k$0$ph; //@line 7987
              $k$0$ph = $220; //@line 7987
              $wcs$3$ph = $222; //@line 7987
              $i$0$ph = $i$0$ph$phi; //@line 7987
             }
             if (!(_mbsinit($st) | 0)) {
              $alloc$0400 = $alloc$0; //@line 7992
              $matches$0104376 = $matches$0104; //@line 7992
              $s$6 = 0; //@line 7992
              $wcs$7 = $wcs$3$ph$lcssa; //@line 7992
              label = 152; //@line 7993
              break L6;
             } else {
              $i$4 = $i$0$ph20$lcssa; //@line 7996
              $s$3 = 0; //@line 7996
              $wcs$4 = $wcs$3$ph$lcssa; //@line 7996
             }
            } else {
             if ($197) {
              $226 = _malloc($195) | 0; //@line 8000
              if (!$226) {
               $alloc$0400 = $alloc$0; //@line 8003
               $matches$0104376 = $matches$0104; //@line 8003
               $s$6 = 0; //@line 8003
               $wcs$7 = 0; //@line 8003
               label = 152; //@line 8004
               break L6;
              } else {
               $i$2$ph = 0; //@line 8007
               $k$1$ph = $195; //@line 8007
               $s$2$ph = $226; //@line 8007
              }
              while (1) {
               $i$2 = $i$2$ph; //@line 8010
               do {
                $228 = HEAP32[$7 >> 2] | 0; //@line 8012
                if ($228 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
                 HEAP32[$7 >> 2] = $228 + 1; //@line 8017
                 $236 = HEAPU8[$228 >> 0] | 0; //@line 8020
                } else {
                 $236 = ___shgetc($f) | 0; //@line 8023
                }
                if (!(HEAP8[$scanset + ($236 + 1) >> 0] | 0)) {
                 $i$4 = $i$2; //@line 8030
                 $s$3 = $s$2$ph; //@line 8030
                 $wcs$4 = 0; //@line 8030
                 break L88;
                }
                HEAP8[$s$2$ph + $i$2 >> 0] = $236; //@line 8036
                $i$2 = $i$2 + 1 | 0; //@line 8034
               } while (($i$2 | 0) != ($k$1$ph | 0));
               $244 = $k$1$ph << 1 | 1; //@line 8045
               $245 = _realloc($s$2$ph, $244) | 0; //@line 8046
               if (!$245) {
                $alloc$0400 = $alloc$0; //@line 8049
                $matches$0104376 = $matches$0104; //@line 8049
                $s$6 = $s$2$ph; //@line 8049
                $wcs$7 = 0; //@line 8049
                label = 152; //@line 8050
                break L6;
               } else {
                $i$2$ph$phi = $k$1$ph; //@line 8053
                $k$1$ph = $244; //@line 8053
                $s$2$ph = $245; //@line 8053
                $i$2$ph = $i$2$ph$phi; //@line 8053
               }
              }
             }
             if (!$dest$0) {
              $265 = $157; //@line 8059
              while (1) {
               $263 = HEAP32[$7 >> 2] | 0; //@line 8061
               if ($263 >>> 0 < $265 >>> 0) {
                HEAP32[$7 >> 2] = $263 + 1; //@line 8065
                $271 = HEAPU8[$263 >> 0] | 0; //@line 8068
               } else {
                $271 = ___shgetc($f) | 0; //@line 8071
               }
               if (!(HEAP8[$scanset + ($271 + 1) >> 0] | 0)) {
                $i$4 = 0; //@line 8078
                $s$3 = 0; //@line 8078
                $wcs$4 = 0; //@line 8078
                break L88;
               }
               $265 = HEAP32[$8 >> 2] | 0; //@line 8082
              }
             } else {
              $250 = $157; //@line 8085
              $i$3 = 0; //@line 8085
              while (1) {
               $248 = HEAP32[$7 >> 2] | 0; //@line 8087
               if ($248 >>> 0 < $250 >>> 0) {
                HEAP32[$7 >> 2] = $248 + 1; //@line 8091
                $256 = HEAPU8[$248 >> 0] | 0; //@line 8094
               } else {
                $256 = ___shgetc($f) | 0; //@line 8097
               }
               if (!(HEAP8[$scanset + ($256 + 1) >> 0] | 0)) {
                $i$4 = $i$3; //@line 8104
                $s$3 = $dest$0; //@line 8104
                $wcs$4 = 0; //@line 8104
                break L88;
               }
               HEAP8[$dest$0 + $i$3 >> 0] = $256; //@line 8110
               $250 = HEAP32[$8 >> 2] | 0; //@line 8112
               $i$3 = $i$3 + 1 | 0; //@line 8112
              }
             }
            }
           } while (0);
           $$pre178 = HEAP32[$7 >> 2] | 0; //@line 8119
           if (!(HEAP32[$8 >> 2] | 0)) {
            $281 = $$pre178; //@line 8121
           } else {
            $277 = $$pre178 + -1 | 0; //@line 8123
            HEAP32[$7 >> 2] = $277; //@line 8124
            $281 = $277; //@line 8125
           }
           $284 = $281 - (HEAP32[$10 >> 2] | 0) + (HEAP32[$9 >> 2] | 0) | 0; //@line 8132
           if (!$284) {
            $alloc$2 = $alloc$0; //@line 8135
            $matches$2 = $matches$0104; //@line 8135
            $s$8 = $s$3; //@line 8135
            $wcs$9 = $wcs$4; //@line 8135
            break L6;
           }
           if (!(($284 | 0) == ($width$1 | 0) | $160 ^ 1)) {
            $alloc$2 = $alloc$0; //@line 8142
            $matches$2 = $matches$0104; //@line 8142
            $s$8 = $s$3; //@line 8142
            $wcs$9 = $wcs$4; //@line 8142
            break L6;
           }
           do {
            if ($197) {
             if ($196) {
              HEAP32[$dest$0 >> 2] = $wcs$4; //@line 8148
              break;
             } else {
              HEAP32[$dest$0 >> 2] = $s$3; //@line 8151
              break;
             }
            }
           } while (0);
           if ($160) {
            $p$10 = $p$9; //@line 8157
            $s$4 = $s$3; //@line 8157
            $wcs$5 = $wcs$4; //@line 8157
           } else {
            if ($wcs$4) {
             HEAP32[$wcs$4 + ($i$4 << 2) >> 2] = 0; //@line 8162
            }
            if (!$s$3) {
             $p$10 = $p$9; //@line 8166
             $s$4 = 0; //@line 8166
             $wcs$5 = $wcs$4; //@line 8166
             break L67;
            }
            HEAP8[$s$3 + $i$4 >> 0] = 0; //@line 8170
            $p$10 = $p$9; //@line 8171
            $s$4 = $s$3; //@line 8171
            $wcs$5 = $wcs$4; //@line 8171
           }
           break;
          }
         case 120:
         case 88:
         case 112:
          {
           $base$0 = 16; //@line 8176
           label = 134; //@line 8177
           break;
          }
         case 111:
          {
           $base$0 = 8; //@line 8181
           label = 134; //@line 8182
           break;
          }
         case 117:
         case 100:
          {
           $base$0 = 10; //@line 8186
           label = 134; //@line 8187
           break;
          }
         case 105:
          {
           $base$0 = 0; //@line 8191
           label = 134; //@line 8192
           break;
          }
         case 71:
         case 103:
         case 70:
         case 102:
         case 69:
         case 101:
         case 65:
         case 97:
          {
           $310 = +___floatscan($f, $$size$0, 0); //@line 8196
           if ((HEAP32[$9 >> 2] | 0) == ((HEAP32[$10 >> 2] | 0) - (HEAP32[$7 >> 2] | 0) | 0)) {
            $alloc$2 = $alloc$0; //@line 8205
            $matches$2 = $matches$0104; //@line 8205
            $s$8 = $s$1; //@line 8205
            $wcs$9 = $wcs$1; //@line 8205
            break L6;
           }
           if (!$dest$0) {
            $p$10 = $p$5; //@line 8210
            $s$4 = $s$1; //@line 8210
            $wcs$5 = $wcs$1; //@line 8210
           } else {
            switch ($$size$0 | 0) {
            case 0:
             {
              HEAPF32[$dest$0 >> 2] = $310; //@line 8215
              $p$10 = $p$5; //@line 8216
              $s$4 = $s$1; //@line 8216
              $wcs$5 = $wcs$1; //@line 8216
              break L67;
              break;
             }
            case 1:
             {
              HEAPF64[$dest$0 >> 3] = $310; //@line 8221
              $p$10 = $p$5; //@line 8222
              $s$4 = $s$1; //@line 8222
              $wcs$5 = $wcs$1; //@line 8222
              break L67;
              break;
             }
            case 2:
             {
              HEAPF64[$dest$0 >> 3] = $310; //@line 8227
              $p$10 = $p$5; //@line 8228
              $s$4 = $s$1; //@line 8228
              $wcs$5 = $wcs$1; //@line 8228
              break L67;
              break;
             }
            default:
             {
              $p$10 = $p$5; //@line 8233
              $s$4 = $s$1; //@line 8233
              $wcs$5 = $wcs$1; //@line 8233
              break L67;
             }
            }
           }
           break;
          }
         default:
          {
           $p$10 = $p$5; //@line 8241
           $s$4 = $s$1; //@line 8241
           $wcs$5 = $wcs$1; //@line 8241
          }
         }
        } while (0);
        L168 : do {
         if ((label | 0) == 134) {
          label = 0; //@line 8247
          $291 = ___intscan($f, $base$0, 0, -1, -1) | 0; //@line 8248
          if ((HEAP32[$9 >> 2] | 0) == ((HEAP32[$10 >> 2] | 0) - (HEAP32[$7 >> 2] | 0) | 0)) {
           $alloc$2 = $alloc$0; //@line 8258
           $matches$2 = $matches$0104; //@line 8258
           $s$8 = $s$1; //@line 8258
           $wcs$9 = $wcs$1; //@line 8258
           break L6;
          }
          if (($dest$0 | 0) != 0 & ($$ | 0) == 112) {
           HEAP32[$dest$0 >> 2] = $291; //@line 8266
           $p$10 = $p$5; //@line 8267
           $s$4 = $s$1; //@line 8267
           $wcs$5 = $wcs$1; //@line 8267
           break;
          }
          if (!$dest$0) {
           $p$10 = $p$5; //@line 8272
           $s$4 = $s$1; //@line 8272
           $wcs$5 = $wcs$1; //@line 8272
          } else {
           switch ($$size$0 | 0) {
           case -2:
            {
             HEAP8[$dest$0 >> 0] = $291; //@line 8277
             $p$10 = $p$5; //@line 8278
             $s$4 = $s$1; //@line 8278
             $wcs$5 = $wcs$1; //@line 8278
             break L168;
             break;
            }
           case -1:
            {
             HEAP16[$dest$0 >> 1] = $291; //@line 8284
             $p$10 = $p$5; //@line 8285
             $s$4 = $s$1; //@line 8285
             $wcs$5 = $wcs$1; //@line 8285
             break L168;
             break;
            }
           case 0:
            {
             HEAP32[$dest$0 >> 2] = $291; //@line 8290
             $p$10 = $p$5; //@line 8291
             $s$4 = $s$1; //@line 8291
             $wcs$5 = $wcs$1; //@line 8291
             break L168;
             break;
            }
           case 1:
            {
             HEAP32[$dest$0 >> 2] = $291; //@line 8296
             $p$10 = $p$5; //@line 8297
             $s$4 = $s$1; //@line 8297
             $wcs$5 = $wcs$1; //@line 8297
             break L168;
             break;
            }
           case 3:
            {
             $306 = $dest$0; //@line 8302
             HEAP32[$306 >> 2] = $291; //@line 8304
             HEAP32[$306 + 4 >> 2] = tempRet0; //@line 8307
             $p$10 = $p$5; //@line 8308
             $s$4 = $s$1; //@line 8308
             $wcs$5 = $wcs$1; //@line 8308
             break L168;
             break;
            }
           default:
            {
             $p$10 = $p$5; //@line 8313
             $s$4 = $s$1; //@line 8313
             $wcs$5 = $wcs$1; //@line 8313
             break L168;
            }
           }
          }
         }
        } while (0);
        $matches$1 = (($dest$0 | 0) != 0 & 1) + $matches$0104 | 0; //@line 8331
        $p$11 = $p$10; //@line 8331
        $pos$2 = (HEAP32[$9 >> 2] | 0) + $pos$1 + (HEAP32[$7 >> 2] | 0) - (HEAP32[$10 >> 2] | 0) | 0; //@line 8331
        $s$5 = $s$4; //@line 8331
        $wcs$6 = $wcs$5; //@line 8331
        break L8;
       }
      } while (0);
      $51 = $p$0109 + ($47 & 1) | 0; //@line 8336
      ___shlim($f, 0); //@line 8337
      $52 = HEAP32[$7 >> 2] | 0; //@line 8338
      if ($52 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
       HEAP32[$7 >> 2] = $52 + 1; //@line 8343
       $62 = HEAPU8[$52 >> 0] | 0; //@line 8346
      } else {
       $62 = ___shgetc($f) | 0; //@line 8349
      }
      if (($62 | 0) != (HEAPU8[$51 >> 0] | 0)) {
       $$lcssa384 = $62; //@line 8355
       $matches$0104$lcssa = $matches$0104; //@line 8355
       $s$0107$lcssa = $s$0107; //@line 8355
       $wcs$0103$lcssa = $wcs$0103; //@line 8355
       label = 21; //@line 8356
       break L6;
      }
      $matches$1 = $matches$0104; //@line 8360
      $p$11 = $51; //@line 8360
      $pos$2 = $pos$0108 + 1 | 0; //@line 8360
      $s$5 = $s$0107; //@line 8360
      $wcs$6 = $wcs$0103; //@line 8360
     } else {
      $p$1 = $p$0109; //@line 8362
      while (1) {
       $20 = $p$1 + 1 | 0; //@line 8364
       if (!(_isspace(HEAPU8[$20 >> 0] | 0) | 0)) {
        $p$1$lcssa = $p$1; //@line 8370
        break;
       } else {
        $p$1 = $20; //@line 8373
       }
      }
      ___shlim($f, 0); //@line 8376
      do {
       $25 = HEAP32[$7 >> 2] | 0; //@line 8378
       if ($25 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
        HEAP32[$7 >> 2] = $25 + 1; //@line 8383
        $32 = HEAPU8[$25 >> 0] | 0; //@line 8386
       } else {
        $32 = ___shgetc($f) | 0; //@line 8389
       }
      } while ((_isspace($32) | 0) != 0);
      $$pre = HEAP32[$7 >> 2] | 0; //@line 8399
      if (!(HEAP32[$8 >> 2] | 0)) {
       $41 = $$pre; //@line 8401
      } else {
       $37 = $$pre + -1 | 0; //@line 8403
       HEAP32[$7 >> 2] = $37; //@line 8404
       $41 = $37; //@line 8405
      }
      $matches$1 = $matches$0104; //@line 8414
      $p$11 = $p$1$lcssa; //@line 8414
      $pos$2 = (HEAP32[$9 >> 2] | 0) + $pos$0108 + $41 - (HEAP32[$10 >> 2] | 0) | 0; //@line 8414
      $s$5 = $s$0107; //@line 8414
      $wcs$6 = $wcs$0103; //@line 8414
     }
    } while (0);
    $p$0109 = $p$11 + 1 | 0; //@line 8417
    $17 = HEAP8[$p$0109 >> 0] | 0; //@line 8418
    if (!($17 << 24 >> 24)) {
     $matches$3 = $matches$1; //@line 8421
     break L4;
    } else {
     $matches$0104 = $matches$1; //@line 8424
     $pos$0108 = $pos$2; //@line 8424
     $s$0107 = $s$5; //@line 8424
     $wcs$0103 = $wcs$6; //@line 8424
    }
   }
   if ((label | 0) == 21) {
    if (HEAP32[$8 >> 2] | 0) {
     HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1; //@line 8433
    }
    if (($matches$0104$lcssa | 0) != 0 | ($$lcssa384 | 0) > -1) {
     $matches$3 = $matches$0104$lcssa; //@line 8439
     break;
    } else {
     $alloc$1 = 0; //@line 8442
     $s$7 = $s$0107$lcssa; //@line 8442
     $wcs$8 = $wcs$0103$lcssa; //@line 8442
     label = 153; //@line 8443
    }
   } else if ((label | 0) == 152) {
    if (!$matches$0104376) {
     $alloc$1 = $alloc$0400; //@line 8449
     $s$7 = $s$6; //@line 8449
     $wcs$8 = $wcs$7; //@line 8449
     label = 153; //@line 8450
    } else {
     $alloc$2 = $alloc$0400; //@line 8452
     $matches$2 = $matches$0104376; //@line 8452
     $s$8 = $s$6; //@line 8452
     $wcs$9 = $wcs$7; //@line 8452
    }
   }
   if ((label | 0) == 153) {
    $alloc$2 = $alloc$1; //@line 8456
    $matches$2 = -1; //@line 8456
    $s$8 = $s$7; //@line 8456
    $wcs$9 = $wcs$8; //@line 8456
   }
   if (!$alloc$2) {
    $matches$3 = $matches$2; //@line 8460
   } else {
    _free($s$8); //@line 8462
    _free($wcs$9); //@line 8463
    $matches$3 = $matches$2; //@line 8464
   }
  }
 } while (0);
 if ($334) {
  ___unlockfile($f); //@line 8470
 }
 STACKTOP = sp; //@line 8472
 return $matches$3 | 0; //@line 8472
}
function _free($mem) {
 $mem = $mem | 0;
 var $$lcssa = 0, $$pre$phi59Z2D = 0, $$pre$phi61Z2D = 0, $$pre$phiZ2D = 0, $$sum2 = 0, $1 = 0, $103 = 0, $104 = 0, $111 = 0, $112 = 0, $12 = 0, $120 = 0, $128 = 0, $133 = 0, $134 = 0, $137 = 0, $139 = 0, $14 = 0, $141 = 0, $15 = 0, $156 = 0, $161 = 0, $163 = 0, $166 = 0, $169 = 0, $172 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $19 = 0, $191 = 0, $192 = 0, $2 = 0, $201 = 0, $206 = 0, $210 = 0, $216 = 0, $22 = 0, $231 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $24 = 0, $240 = 0, $241 = 0, $247 = 0, $252 = 0, $253 = 0, $256 = 0, $258 = 0, $26 = 0, $261 = 0, $266 = 0, $272 = 0, $276 = 0, $277 = 0, $284 = 0, $296 = 0, $301 = 0, $308 = 0, $309 = 0, $310 = 0, $318 = 0, $39 = 0, $44 = 0, $46 = 0, $49 = 0, $5 = 0, $51 = 0, $54 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $66 = 0, $67 = 0, $72 = 0, $73 = 0, $8 = 0, $82 = 0, $87 = 0, $9 = 0, $91 = 0, $97 = 0, $F16$0 = 0, $I18$0 = 0, $K19$052 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$051 = 0, $T$051$lcssa = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0;
 if (!$mem) {
  return;
 }
 $1 = $mem + -8 | 0; //@line 14227
 $2 = HEAP32[1538] | 0; //@line 14228
 if ($1 >>> 0 < $2 >>> 0) {
  _abort(); //@line 14231
 }
 $5 = HEAP32[$mem + -4 >> 2] | 0; //@line 14235
 $6 = $5 & 3; //@line 14236
 if (($6 | 0) == 1) {
  _abort(); //@line 14239
 }
 $8 = $5 & -8; //@line 14242
 $9 = $mem + ($8 + -8) | 0; //@line 14244
 do {
  if (!($5 & 1)) {
   $12 = HEAP32[$1 >> 2] | 0; //@line 14249
   if (!$6) {
    return;
   }
   $$sum2 = -8 - $12 | 0; //@line 14254
   $14 = $mem + $$sum2 | 0; //@line 14255
   $15 = $12 + $8 | 0; //@line 14256
   if ($14 >>> 0 < $2 >>> 0) {
    _abort(); //@line 14259
   }
   if (($14 | 0) == (HEAP32[1539] | 0)) {
    $103 = $mem + ($8 + -4) | 0; //@line 14266
    $104 = HEAP32[$103 >> 2] | 0; //@line 14267
    if (($104 & 3 | 0) != 3) {
     $p$0 = $14; //@line 14271
     $psize$0 = $15; //@line 14271
     break;
    }
    HEAP32[1536] = $15; //@line 14274
    HEAP32[$103 >> 2] = $104 & -2; //@line 14276
    HEAP32[$mem + ($$sum2 + 4) >> 2] = $15 | 1; //@line 14280
    HEAP32[$9 >> 2] = $15; //@line 14281
    return;
   }
   $19 = $12 >>> 3; //@line 14284
   if ($12 >>> 0 < 256) {
    $22 = HEAP32[$mem + ($$sum2 + 8) >> 2] | 0; //@line 14289
    $24 = HEAP32[$mem + ($$sum2 + 12) >> 2] | 0; //@line 14292
    $26 = 6176 + ($19 << 1 << 2) | 0; //@line 14294
    if (($22 | 0) != ($26 | 0)) {
     if ($22 >>> 0 < $2 >>> 0) {
      _abort(); //@line 14299
     }
     if ((HEAP32[$22 + 12 >> 2] | 0) != ($14 | 0)) {
      _abort(); //@line 14306
     }
    }
    if (($24 | 0) == ($22 | 0)) {
     HEAP32[1534] = HEAP32[1534] & ~(1 << $19); //@line 14316
     $p$0 = $14; //@line 14317
     $psize$0 = $15; //@line 14317
     break;
    }
    if (($24 | 0) == ($26 | 0)) {
     $$pre$phi61Z2D = $24 + 8 | 0; //@line 14323
    } else {
     if ($24 >>> 0 < $2 >>> 0) {
      _abort(); //@line 14327
     }
     $39 = $24 + 8 | 0; //@line 14330
     if ((HEAP32[$39 >> 2] | 0) == ($14 | 0)) {
      $$pre$phi61Z2D = $39; //@line 14334
     } else {
      _abort(); //@line 14336
     }
    }
    HEAP32[$22 + 12 >> 2] = $24; //@line 14341
    HEAP32[$$pre$phi61Z2D >> 2] = $22; //@line 14342
    $p$0 = $14; //@line 14343
    $psize$0 = $15; //@line 14343
    break;
   }
   $44 = HEAP32[$mem + ($$sum2 + 24) >> 2] | 0; //@line 14348
   $46 = HEAP32[$mem + ($$sum2 + 12) >> 2] | 0; //@line 14351
   do {
    if (($46 | 0) == ($14 | 0)) {
     $57 = $mem + ($$sum2 + 20) | 0; //@line 14356
     $58 = HEAP32[$57 >> 2] | 0; //@line 14357
     if (!$58) {
      $60 = $mem + ($$sum2 + 16) | 0; //@line 14361
      $61 = HEAP32[$60 >> 2] | 0; //@line 14362
      if (!$61) {
       $R$1 = 0; //@line 14365
       break;
      } else {
       $R$0 = $61; //@line 14368
       $RP$0 = $60; //@line 14368
      }
     } else {
      $R$0 = $58; //@line 14371
      $RP$0 = $57; //@line 14371
     }
     while (1) {
      $63 = $R$0 + 20 | 0; //@line 14374
      $64 = HEAP32[$63 >> 2] | 0; //@line 14375
      if ($64) {
       $R$0 = $64; //@line 14378
       $RP$0 = $63; //@line 14378
       continue;
      }
      $66 = $R$0 + 16 | 0; //@line 14381
      $67 = HEAP32[$66 >> 2] | 0; //@line 14382
      if (!$67) {
       $R$0$lcssa = $R$0; //@line 14385
       $RP$0$lcssa = $RP$0; //@line 14385
       break;
      } else {
       $R$0 = $67; //@line 14388
       $RP$0 = $66; //@line 14388
      }
     }
     if ($RP$0$lcssa >>> 0 < $2 >>> 0) {
      _abort(); //@line 14393
     } else {
      HEAP32[$RP$0$lcssa >> 2] = 0; //@line 14396
      $R$1 = $R$0$lcssa; //@line 14397
      break;
     }
    } else {
     $49 = HEAP32[$mem + ($$sum2 + 8) >> 2] | 0; //@line 14403
     if ($49 >>> 0 < $2 >>> 0) {
      _abort(); //@line 14406
     }
     $51 = $49 + 12 | 0; //@line 14409
     if ((HEAP32[$51 >> 2] | 0) != ($14 | 0)) {
      _abort(); //@line 14413
     }
     $54 = $46 + 8 | 0; //@line 14416
     if ((HEAP32[$54 >> 2] | 0) == ($14 | 0)) {
      HEAP32[$51 >> 2] = $46; //@line 14420
      HEAP32[$54 >> 2] = $49; //@line 14421
      $R$1 = $46; //@line 14422
      break;
     } else {
      _abort(); //@line 14425
     }
    }
   } while (0);
   if (!$44) {
    $p$0 = $14; //@line 14432
    $psize$0 = $15; //@line 14432
   } else {
    $72 = HEAP32[$mem + ($$sum2 + 28) >> 2] | 0; //@line 14436
    $73 = 6440 + ($72 << 2) | 0; //@line 14437
    if (($14 | 0) == (HEAP32[$73 >> 2] | 0)) {
     HEAP32[$73 >> 2] = $R$1; //@line 14441
     if (!$R$1) {
      HEAP32[1535] = HEAP32[1535] & ~(1 << $72); //@line 14448
      $p$0 = $14; //@line 14449
      $psize$0 = $15; //@line 14449
      break;
     }
    } else {
     if ($44 >>> 0 < (HEAP32[1538] | 0) >>> 0) {
      _abort(); //@line 14456
     }
     $82 = $44 + 16 | 0; //@line 14459
     if ((HEAP32[$82 >> 2] | 0) == ($14 | 0)) {
      HEAP32[$82 >> 2] = $R$1; //@line 14463
     } else {
      HEAP32[$44 + 20 >> 2] = $R$1; //@line 14466
     }
     if (!$R$1) {
      $p$0 = $14; //@line 14470
      $psize$0 = $15; //@line 14470
      break;
     }
    }
    $87 = HEAP32[1538] | 0; //@line 14474
    if ($R$1 >>> 0 < $87 >>> 0) {
     _abort(); //@line 14477
    }
    HEAP32[$R$1 + 24 >> 2] = $44; //@line 14481
    $91 = HEAP32[$mem + ($$sum2 + 16) >> 2] | 0; //@line 14484
    do {
     if ($91) {
      if ($91 >>> 0 < $87 >>> 0) {
       _abort(); //@line 14490
      } else {
       HEAP32[$R$1 + 16 >> 2] = $91; //@line 14494
       HEAP32[$91 + 24 >> 2] = $R$1; //@line 14496
       break;
      }
     }
    } while (0);
    $97 = HEAP32[$mem + ($$sum2 + 20) >> 2] | 0; //@line 14503
    if (!$97) {
     $p$0 = $14; //@line 14506
     $psize$0 = $15; //@line 14506
    } else {
     if ($97 >>> 0 < (HEAP32[1538] | 0) >>> 0) {
      _abort(); //@line 14511
     } else {
      HEAP32[$R$1 + 20 >> 2] = $97; //@line 14515
      HEAP32[$97 + 24 >> 2] = $R$1; //@line 14517
      $p$0 = $14; //@line 14518
      $psize$0 = $15; //@line 14518
      break;
     }
    }
   }
  } else {
   $p$0 = $1; //@line 14524
   $psize$0 = $8; //@line 14524
  }
 } while (0);
 if ($p$0 >>> 0 >= $9 >>> 0) {
  _abort(); //@line 14529
 }
 $111 = $mem + ($8 + -4) | 0; //@line 14533
 $112 = HEAP32[$111 >> 2] | 0; //@line 14534
 if (!($112 & 1)) {
  _abort(); //@line 14538
 }
 if (!($112 & 2)) {
  if (($9 | 0) == (HEAP32[1540] | 0)) {
   $120 = (HEAP32[1537] | 0) + $psize$0 | 0; //@line 14548
   HEAP32[1537] = $120; //@line 14549
   HEAP32[1540] = $p$0; //@line 14550
   HEAP32[$p$0 + 4 >> 2] = $120 | 1; //@line 14553
   if (($p$0 | 0) != (HEAP32[1539] | 0)) {
    return;
   }
   HEAP32[1539] = 0; //@line 14559
   HEAP32[1536] = 0; //@line 14560
   return;
  }
  if (($9 | 0) == (HEAP32[1539] | 0)) {
   $128 = (HEAP32[1536] | 0) + $psize$0 | 0; //@line 14567
   HEAP32[1536] = $128; //@line 14568
   HEAP32[1539] = $p$0; //@line 14569
   HEAP32[$p$0 + 4 >> 2] = $128 | 1; //@line 14572
   HEAP32[$p$0 + $128 >> 2] = $128; //@line 14574
   return;
  }
  $133 = ($112 & -8) + $psize$0 | 0; //@line 14578
  $134 = $112 >>> 3; //@line 14579
  do {
   if ($112 >>> 0 < 256) {
    $137 = HEAP32[$mem + $8 >> 2] | 0; //@line 14584
    $139 = HEAP32[$mem + ($8 | 4) >> 2] | 0; //@line 14587
    $141 = 6176 + ($134 << 1 << 2) | 0; //@line 14589
    if (($137 | 0) != ($141 | 0)) {
     if ($137 >>> 0 < (HEAP32[1538] | 0) >>> 0) {
      _abort(); //@line 14595
     }
     if ((HEAP32[$137 + 12 >> 2] | 0) != ($9 | 0)) {
      _abort(); //@line 14602
     }
    }
    if (($139 | 0) == ($137 | 0)) {
     HEAP32[1534] = HEAP32[1534] & ~(1 << $134); //@line 14612
     break;
    }
    if (($139 | 0) == ($141 | 0)) {
     $$pre$phi59Z2D = $139 + 8 | 0; //@line 14618
    } else {
     if ($139 >>> 0 < (HEAP32[1538] | 0) >>> 0) {
      _abort(); //@line 14623
     }
     $156 = $139 + 8 | 0; //@line 14626
     if ((HEAP32[$156 >> 2] | 0) == ($9 | 0)) {
      $$pre$phi59Z2D = $156; //@line 14630
     } else {
      _abort(); //@line 14632
     }
    }
    HEAP32[$137 + 12 >> 2] = $139; //@line 14637
    HEAP32[$$pre$phi59Z2D >> 2] = $137; //@line 14638
   } else {
    $161 = HEAP32[$mem + ($8 + 16) >> 2] | 0; //@line 14642
    $163 = HEAP32[$mem + ($8 | 4) >> 2] | 0; //@line 14645
    do {
     if (($163 | 0) == ($9 | 0)) {
      $175 = $mem + ($8 + 12) | 0; //@line 14650
      $176 = HEAP32[$175 >> 2] | 0; //@line 14651
      if (!$176) {
       $178 = $mem + ($8 + 8) | 0; //@line 14655
       $179 = HEAP32[$178 >> 2] | 0; //@line 14656
       if (!$179) {
        $R7$1 = 0; //@line 14659
        break;
       } else {
        $R7$0 = $179; //@line 14662
        $RP9$0 = $178; //@line 14662
       }
      } else {
       $R7$0 = $176; //@line 14665
       $RP9$0 = $175; //@line 14665
      }
      while (1) {
       $181 = $R7$0 + 20 | 0; //@line 14668
       $182 = HEAP32[$181 >> 2] | 0; //@line 14669
       if ($182) {
        $R7$0 = $182; //@line 14672
        $RP9$0 = $181; //@line 14672
        continue;
       }
       $184 = $R7$0 + 16 | 0; //@line 14675
       $185 = HEAP32[$184 >> 2] | 0; //@line 14676
       if (!$185) {
        $R7$0$lcssa = $R7$0; //@line 14679
        $RP9$0$lcssa = $RP9$0; //@line 14679
        break;
       } else {
        $R7$0 = $185; //@line 14682
        $RP9$0 = $184; //@line 14682
       }
      }
      if ($RP9$0$lcssa >>> 0 < (HEAP32[1538] | 0) >>> 0) {
       _abort(); //@line 14688
      } else {
       HEAP32[$RP9$0$lcssa >> 2] = 0; //@line 14691
       $R7$1 = $R7$0$lcssa; //@line 14692
       break;
      }
     } else {
      $166 = HEAP32[$mem + $8 >> 2] | 0; //@line 14697
      if ($166 >>> 0 < (HEAP32[1538] | 0) >>> 0) {
       _abort(); //@line 14701
      }
      $169 = $166 + 12 | 0; //@line 14704
      if ((HEAP32[$169 >> 2] | 0) != ($9 | 0)) {
       _abort(); //@line 14708
      }
      $172 = $163 + 8 | 0; //@line 14711
      if ((HEAP32[$172 >> 2] | 0) == ($9 | 0)) {
       HEAP32[$169 >> 2] = $163; //@line 14715
       HEAP32[$172 >> 2] = $166; //@line 14716
       $R7$1 = $163; //@line 14717
       break;
      } else {
       _abort(); //@line 14720
      }
     }
    } while (0);
    if ($161) {
     $191 = HEAP32[$mem + ($8 + 20) >> 2] | 0; //@line 14729
     $192 = 6440 + ($191 << 2) | 0; //@line 14730
     if (($9 | 0) == (HEAP32[$192 >> 2] | 0)) {
      HEAP32[$192 >> 2] = $R7$1; //@line 14734
      if (!$R7$1) {
       HEAP32[1535] = HEAP32[1535] & ~(1 << $191); //@line 14741
       break;
      }
     } else {
      if ($161 >>> 0 < (HEAP32[1538] | 0) >>> 0) {
       _abort(); //@line 14748
      }
      $201 = $161 + 16 | 0; //@line 14751
      if ((HEAP32[$201 >> 2] | 0) == ($9 | 0)) {
       HEAP32[$201 >> 2] = $R7$1; //@line 14755
      } else {
       HEAP32[$161 + 20 >> 2] = $R7$1; //@line 14758
      }
      if (!$R7$1) {
       break;
      }
     }
     $206 = HEAP32[1538] | 0; //@line 14765
     if ($R7$1 >>> 0 < $206 >>> 0) {
      _abort(); //@line 14768
     }
     HEAP32[$R7$1 + 24 >> 2] = $161; //@line 14772
     $210 = HEAP32[$mem + ($8 + 8) >> 2] | 0; //@line 14775
     do {
      if ($210) {
       if ($210 >>> 0 < $206 >>> 0) {
        _abort(); //@line 14781
       } else {
        HEAP32[$R7$1 + 16 >> 2] = $210; //@line 14785
        HEAP32[$210 + 24 >> 2] = $R7$1; //@line 14787
        break;
       }
      }
     } while (0);
     $216 = HEAP32[$mem + ($8 + 12) >> 2] | 0; //@line 14794
     if ($216) {
      if ($216 >>> 0 < (HEAP32[1538] | 0) >>> 0) {
       _abort(); //@line 14800
      } else {
       HEAP32[$R7$1 + 20 >> 2] = $216; //@line 14804
       HEAP32[$216 + 24 >> 2] = $R7$1; //@line 14806
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[$p$0 + 4 >> 2] = $133 | 1; //@line 14815
  HEAP32[$p$0 + $133 >> 2] = $133; //@line 14817
  if (($p$0 | 0) == (HEAP32[1539] | 0)) {
   HEAP32[1536] = $133; //@line 14821
   return;
  } else {
   $psize$1 = $133; //@line 14824
  }
 } else {
  HEAP32[$111 >> 2] = $112 & -2; //@line 14828
  HEAP32[$p$0 + 4 >> 2] = $psize$0 | 1; //@line 14831
  HEAP32[$p$0 + $psize$0 >> 2] = $psize$0; //@line 14833
  $psize$1 = $psize$0; //@line 14834
 }
 $231 = $psize$1 >>> 3; //@line 14836
 if ($psize$1 >>> 0 < 256) {
  $233 = $231 << 1; //@line 14839
  $234 = 6176 + ($233 << 2) | 0; //@line 14840
  $235 = HEAP32[1534] | 0; //@line 14841
  $236 = 1 << $231; //@line 14842
  if (!($235 & $236)) {
   HEAP32[1534] = $235 | $236; //@line 14847
   $$pre$phiZ2D = 6176 + ($233 + 2 << 2) | 0; //@line 14850
   $F16$0 = $234; //@line 14850
  } else {
   $240 = 6176 + ($233 + 2 << 2) | 0; //@line 14853
   $241 = HEAP32[$240 >> 2] | 0; //@line 14854
   if ($241 >>> 0 < (HEAP32[1538] | 0) >>> 0) {
    _abort(); //@line 14858
   } else {
    $$pre$phiZ2D = $240; //@line 14861
    $F16$0 = $241; //@line 14861
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $p$0; //@line 14864
  HEAP32[$F16$0 + 12 >> 2] = $p$0; //@line 14866
  HEAP32[$p$0 + 8 >> 2] = $F16$0; //@line 14868
  HEAP32[$p$0 + 12 >> 2] = $234; //@line 14870
  return;
 }
 $247 = $psize$1 >>> 8; //@line 14873
 if (!$247) {
  $I18$0 = 0; //@line 14876
 } else {
  if ($psize$1 >>> 0 > 16777215) {
   $I18$0 = 31; //@line 14880
  } else {
   $252 = ($247 + 1048320 | 0) >>> 16 & 8; //@line 14884
   $253 = $247 << $252; //@line 14885
   $256 = ($253 + 520192 | 0) >>> 16 & 4; //@line 14888
   $258 = $253 << $256; //@line 14890
   $261 = ($258 + 245760 | 0) >>> 16 & 2; //@line 14893
   $266 = 14 - ($256 | $252 | $261) + ($258 << $261 >>> 15) | 0; //@line 14898
   $I18$0 = $psize$1 >>> ($266 + 7 | 0) & 1 | $266 << 1; //@line 14904
  }
 }
 $272 = 6440 + ($I18$0 << 2) | 0; //@line 14907
 HEAP32[$p$0 + 28 >> 2] = $I18$0; //@line 14909
 HEAP32[$p$0 + 20 >> 2] = 0; //@line 14912
 HEAP32[$p$0 + 16 >> 2] = 0; //@line 14913
 $276 = HEAP32[1535] | 0; //@line 14914
 $277 = 1 << $I18$0; //@line 14915
 L199 : do {
  if (!($276 & $277)) {
   HEAP32[1535] = $276 | $277; //@line 14921
   HEAP32[$272 >> 2] = $p$0; //@line 14922
   HEAP32[$p$0 + 24 >> 2] = $272; //@line 14924
   HEAP32[$p$0 + 12 >> 2] = $p$0; //@line 14926
   HEAP32[$p$0 + 8 >> 2] = $p$0; //@line 14928
  } else {
   $284 = HEAP32[$272 >> 2] | 0; //@line 14930
   L202 : do {
    if ((HEAP32[$284 + 4 >> 2] & -8 | 0) == ($psize$1 | 0)) {
     $T$0$lcssa = $284; //@line 14937
    } else {
     $K19$052 = $psize$1 << (($I18$0 | 0) == 31 ? 0 : 25 - ($I18$0 >>> 1) | 0); //@line 14944
     $T$051 = $284; //@line 14944
     while (1) {
      $301 = $T$051 + 16 + ($K19$052 >>> 31 << 2) | 0; //@line 14947
      $296 = HEAP32[$301 >> 2] | 0; //@line 14948
      if (!$296) {
       $$lcssa = $301; //@line 14951
       $T$051$lcssa = $T$051; //@line 14951
       break;
      }
      if ((HEAP32[$296 + 4 >> 2] & -8 | 0) == ($psize$1 | 0)) {
       $T$0$lcssa = $296; //@line 14960
       break L202;
      } else {
       $K19$052 = $K19$052 << 1; //@line 14963
       $T$051 = $296; //@line 14963
      }
     }
     if ($$lcssa >>> 0 < (HEAP32[1538] | 0) >>> 0) {
      _abort(); //@line 14969
     } else {
      HEAP32[$$lcssa >> 2] = $p$0; //@line 14972
      HEAP32[$p$0 + 24 >> 2] = $T$051$lcssa; //@line 14974
      HEAP32[$p$0 + 12 >> 2] = $p$0; //@line 14976
      HEAP32[$p$0 + 8 >> 2] = $p$0; //@line 14978
      break L199;
     }
    }
   } while (0);
   $308 = $T$0$lcssa + 8 | 0; //@line 14983
   $309 = HEAP32[$308 >> 2] | 0; //@line 14984
   $310 = HEAP32[1538] | 0; //@line 14985
   if ($309 >>> 0 >= $310 >>> 0 & $T$0$lcssa >>> 0 >= $310 >>> 0) {
    HEAP32[$309 + 12 >> 2] = $p$0; //@line 14991
    HEAP32[$308 >> 2] = $p$0; //@line 14992
    HEAP32[$p$0 + 8 >> 2] = $309; //@line 14994
    HEAP32[$p$0 + 12 >> 2] = $T$0$lcssa; //@line 14996
    HEAP32[$p$0 + 24 >> 2] = 0; //@line 14998
    break;
   } else {
    _abort(); //@line 15001
   }
  }
 } while (0);
 $318 = (HEAP32[1542] | 0) + -1 | 0; //@line 15007
 HEAP32[1542] = $318; //@line 15008
 if (!$318) {
  $sp$0$in$i = 6592; //@line 15011
 } else {
  return;
 }
 while (1) {
  $sp$0$i = HEAP32[$sp$0$in$i >> 2] | 0; //@line 15016
  if (!$sp$0$i) {
   break;
  } else {
   $sp$0$in$i = $sp$0$i + 8 | 0; //@line 15022
  }
 }
 HEAP32[1542] = -1; //@line 15025
 return;
}
function ___intscan($f, $base, $pok, $0, $1) {
 $f = $f | 0;
 $base = $base | 0;
 $pok = $pok | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $$122 = 0, $$123 = 0, $$base21 = 0, $$lcssa = 0, $$lcssa130 = 0, $$lcssa131 = 0, $$lcssa132 = 0, $$lcssa133 = 0, $$lcssa134 = 0, $$lcssa135 = 0, $100 = 0, $101 = 0, $108 = 0, $120 = 0, $121 = 0, $128 = 0, $13 = 0, $130 = 0, $131 = 0, $134 = 0, $135 = 0, $136 = 0, $144 = 0, $149 = 0, $150 = 0, $152 = 0, $155 = 0, $157 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0, $185 = 0, $186 = 0, $187 = 0, $195 = 0, $201 = 0, $203 = 0, $204 = 0, $206 = 0, $208 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $222 = 0, $223 = 0, $224 = 0, $239 = 0, $25 = 0, $260 = 0, $262 = 0, $272 = 0, $281 = 0, $284 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $3 = 0, $37 = 0, $39 = 0, $4 = 0, $46 = 0, $51 = 0, $6 = 0, $67 = 0, $70 = 0, $71 = 0, $72 = 0, $83 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $90 = 0, $91 = 0, $93 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$124 = 0, $c$2$be = 0, $c$2$be$lcssa = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$371 = 0, $c$4$be = 0, $c$4$be$lcssa = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$be$lcssa = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$753 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $neg$1 = 0, $x$082 = 0, $x$146 = 0, $x$266 = 0, label = 0;
 L1 : do {
  if ($base >>> 0 > 36) {
   HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 3908
   $286 = 0; //@line 3909
   $287 = 0; //@line 3909
  } else {
   $3 = $f + 4 | 0; //@line 3911
   $4 = $f + 100 | 0; //@line 3912
   do {
    $6 = HEAP32[$3 >> 2] | 0; //@line 3914
    if ($6 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $6 + 1; //@line 3919
     $13 = HEAPU8[$6 >> 0] | 0; //@line 3922
    } else {
     $13 = ___shgetc($f) | 0; //@line 3925
    }
   } while ((_isspace($13) | 0) != 0);
   $$lcssa135 = $13; //@line 3930
   L11 : do {
    switch ($$lcssa135 | 0) {
    case 43:
    case 45:
     {
      $17 = (($$lcssa135 | 0) == 45) << 31 >> 31; //@line 3938
      $18 = HEAP32[$3 >> 2] | 0; //@line 3939
      if ($18 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
       HEAP32[$3 >> 2] = $18 + 1; //@line 3944
       $c$0 = HEAPU8[$18 >> 0] | 0; //@line 3947
       $neg$0 = $17; //@line 3947
       break L11;
      } else {
       $c$0 = ___shgetc($f) | 0; //@line 3951
       $neg$0 = $17; //@line 3951
       break L11;
      }
      break;
     }
    default:
     {
      $c$0 = $$lcssa135; //@line 3957
      $neg$0 = 0; //@line 3957
     }
    }
   } while (0);
   $25 = ($base | 0) == 0; //@line 3961
   do {
    if (($base & -17 | 0) == 0 & ($c$0 | 0) == 48) {
     $29 = HEAP32[$3 >> 2] | 0; //@line 3968
     if ($29 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
      HEAP32[$3 >> 2] = $29 + 1; //@line 3973
      $37 = HEAPU8[$29 >> 0] | 0; //@line 3976
     } else {
      $37 = ___shgetc($f) | 0; //@line 3979
     }
     if (($37 | 32 | 0) != 120) {
      if ($25) {
       $$123 = 8; //@line 3985
       $c$124 = $37; //@line 3985
       label = 46; //@line 3986
       break;
      } else {
       $$1 = $base; //@line 3989
       $c$1 = $37; //@line 3989
       label = 32; //@line 3990
       break;
      }
     }
     $39 = HEAP32[$3 >> 2] | 0; //@line 3994
     if ($39 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
      HEAP32[$3 >> 2] = $39 + 1; //@line 3999
      $46 = HEAPU8[$39 >> 0] | 0; //@line 4002
     } else {
      $46 = ___shgetc($f) | 0; //@line 4005
     }
     if ((HEAPU8[16793 + ($46 + 1) >> 0] | 0) > 15) {
      $51 = (HEAP32[$4 >> 2] | 0) == 0; //@line 4013
      if (!$51) {
       HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 4017
      }
      if (!$pok) {
       ___shlim($f, 0); //@line 4021
       $286 = 0; //@line 4022
       $287 = 0; //@line 4022
       break L1;
      }
      if ($51) {
       $286 = 0; //@line 4026
       $287 = 0; //@line 4026
       break L1;
      }
      HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 4031
      $286 = 0; //@line 4032
      $287 = 0; //@line 4032
      break L1;
     } else {
      $$123 = 16; //@line 4035
      $c$124 = $46; //@line 4035
      label = 46; //@line 4036
     }
    } else {
     $$base21 = $25 ? 10 : $base; //@line 4039
     if ((HEAPU8[16793 + ($c$0 + 1) >> 0] | 0) >>> 0 < $$base21 >>> 0) {
      $$1 = $$base21; //@line 4046
      $c$1 = $c$0; //@line 4046
      label = 32; //@line 4047
     } else {
      if (HEAP32[$4 >> 2] | 0) {
       HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 4054
      }
      ___shlim($f, 0); //@line 4056
      HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 4058
      $286 = 0; //@line 4059
      $287 = 0; //@line 4059
      break L1;
     }
    }
   } while (0);
   if ((label | 0) == 32) {
    if (($$1 | 0) == 10) {
     $67 = $c$1 + -48 | 0; //@line 4067
     if ($67 >>> 0 < 10) {
      $71 = $67; //@line 4070
      $x$082 = 0; //@line 4070
      while (1) {
       $70 = ($x$082 * 10 | 0) + $71 | 0; //@line 4073
       $72 = HEAP32[$3 >> 2] | 0; //@line 4074
       if ($72 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
        HEAP32[$3 >> 2] = $72 + 1; //@line 4079
        $c$2$be = HEAPU8[$72 >> 0] | 0; //@line 4082
       } else {
        $c$2$be = ___shgetc($f) | 0; //@line 4085
       }
       $71 = $c$2$be + -48 | 0; //@line 4087
       if (!($71 >>> 0 < 10 & $70 >>> 0 < 429496729)) {
        $$lcssa134 = $70; //@line 4094
        $c$2$be$lcssa = $c$2$be; //@line 4094
        break;
       } else {
        $x$082 = $70; //@line 4092
       }
      }
      $288 = $$lcssa134; //@line 4098
      $289 = 0; //@line 4098
      $c$2$lcssa = $c$2$be$lcssa; //@line 4098
     } else {
      $288 = 0; //@line 4100
      $289 = 0; //@line 4100
      $c$2$lcssa = $c$1; //@line 4100
     }
     $83 = $c$2$lcssa + -48 | 0; //@line 4102
     if ($83 >>> 0 < 10) {
      $85 = $288; //@line 4105
      $86 = $289; //@line 4105
      $90 = $83; //@line 4105
      $c$371 = $c$2$lcssa; //@line 4105
      while (1) {
       $87 = ___muldi3($85 | 0, $86 | 0, 10, 0) | 0; //@line 4107
       $88 = tempRet0; //@line 4108
       $91 = (($90 | 0) < 0) << 31 >> 31; //@line 4110
       $93 = ~$91; //@line 4112
       if ($88 >>> 0 > $93 >>> 0 | ($88 | 0) == ($93 | 0) & $87 >>> 0 > ~$90 >>> 0) {
        $$lcssa = $90; //@line 4119
        $290 = $85; //@line 4119
        $291 = $86; //@line 4119
        $c$3$lcssa = $c$371; //@line 4119
        break;
       }
       $99 = _i64Add($87 | 0, $88 | 0, $90 | 0, $91 | 0) | 0; //@line 4122
       $100 = tempRet0; //@line 4123
       $101 = HEAP32[$3 >> 2] | 0; //@line 4124
       if ($101 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
        HEAP32[$3 >> 2] = $101 + 1; //@line 4129
        $c$3$be = HEAPU8[$101 >> 0] | 0; //@line 4132
       } else {
        $c$3$be = ___shgetc($f) | 0; //@line 4135
       }
       $108 = $c$3$be + -48 | 0; //@line 4137
       if ($108 >>> 0 < 10 & ($100 >>> 0 < 429496729 | ($100 | 0) == 429496729 & $99 >>> 0 < 2576980378)) {
        $85 = $99; //@line 4146
        $86 = $100; //@line 4146
        $90 = $108; //@line 4146
        $c$371 = $c$3$be; //@line 4146
       } else {
        $$lcssa = $108; //@line 4148
        $290 = $99; //@line 4148
        $291 = $100; //@line 4148
        $c$3$lcssa = $c$3$be; //@line 4148
        break;
       }
      }
      if ($$lcssa >>> 0 > 9) {
       $260 = $291; //@line 4154
       $262 = $290; //@line 4154
       $neg$1 = $neg$0; //@line 4154
      } else {
       $$122 = 10; //@line 4156
       $292 = $290; //@line 4156
       $293 = $291; //@line 4156
       $c$8 = $c$3$lcssa; //@line 4156
       label = 72; //@line 4157
      }
     } else {
      $260 = $289; //@line 4160
      $262 = $288; //@line 4160
      $neg$1 = $neg$0; //@line 4160
     }
    } else {
     $$123 = $$1; //@line 4163
     $c$124 = $c$1; //@line 4163
     label = 46; //@line 4164
    }
   }
   L63 : do {
    if ((label | 0) == 46) {
     if (!($$123 + -1 & $$123)) {
      $128 = HEAP8[17050 + (($$123 * 23 | 0) >>> 5 & 7) >> 0] | 0; //@line 4178
      $130 = HEAP8[16793 + ($c$124 + 1) >> 0] | 0; //@line 4181
      $131 = $130 & 255; //@line 4182
      if ($131 >>> 0 < $$123 >>> 0) {
       $135 = $131; //@line 4185
       $x$146 = 0; //@line 4185
       while (1) {
        $134 = $135 | $x$146 << $128; //@line 4188
        $136 = HEAP32[$3 >> 2] | 0; //@line 4189
        if ($136 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
         HEAP32[$3 >> 2] = $136 + 1; //@line 4194
         $c$4$be = HEAPU8[$136 >> 0] | 0; //@line 4197
        } else {
         $c$4$be = ___shgetc($f) | 0; //@line 4200
        }
        $144 = HEAP8[16793 + ($c$4$be + 1) >> 0] | 0; //@line 4204
        $135 = $144 & 255; //@line 4205
        if (!($134 >>> 0 < 134217728 & $135 >>> 0 < $$123 >>> 0)) {
         $$lcssa130 = $134; //@line 4212
         $$lcssa131 = $144; //@line 4212
         $c$4$be$lcssa = $c$4$be; //@line 4212
         break;
        } else {
         $x$146 = $134; //@line 4210
        }
       }
       $152 = $$lcssa131; //@line 4216
       $155 = 0; //@line 4216
       $157 = $$lcssa130; //@line 4216
       $c$4$lcssa = $c$4$be$lcssa; //@line 4216
      } else {
       $152 = $130; //@line 4218
       $155 = 0; //@line 4218
       $157 = 0; //@line 4218
       $c$4$lcssa = $c$124; //@line 4218
      }
      $149 = _bitshift64Lshr(-1, -1, $128 | 0) | 0; //@line 4220
      $150 = tempRet0; //@line 4221
      if (($152 & 255) >>> 0 >= $$123 >>> 0 | ($155 >>> 0 > $150 >>> 0 | ($155 | 0) == ($150 | 0) & $157 >>> 0 > $149 >>> 0)) {
       $$122 = $$123; //@line 4231
       $292 = $157; //@line 4231
       $293 = $155; //@line 4231
       $c$8 = $c$4$lcssa; //@line 4231
       label = 72; //@line 4232
       break;
      } else {
       $161 = $157; //@line 4235
       $162 = $155; //@line 4235
       $166 = $152; //@line 4235
      }
      while (1) {
       $163 = _bitshift64Shl($161 | 0, $162 | 0, $128 | 0) | 0; //@line 4238
       $164 = tempRet0; //@line 4239
       $167 = $166 & 255 | $163; //@line 4241
       $168 = HEAP32[$3 >> 2] | 0; //@line 4242
       if ($168 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
        HEAP32[$3 >> 2] = $168 + 1; //@line 4247
        $c$5$be = HEAPU8[$168 >> 0] | 0; //@line 4250
       } else {
        $c$5$be = ___shgetc($f) | 0; //@line 4253
       }
       $166 = HEAP8[16793 + ($c$5$be + 1) >> 0] | 0; //@line 4257
       if (($166 & 255) >>> 0 >= $$123 >>> 0 | ($164 >>> 0 > $150 >>> 0 | ($164 | 0) == ($150 | 0) & $167 >>> 0 > $149 >>> 0)) {
        $$122 = $$123; //@line 4267
        $292 = $167; //@line 4267
        $293 = $164; //@line 4267
        $c$8 = $c$5$be; //@line 4267
        label = 72; //@line 4268
        break L63;
       } else {
        $161 = $167; //@line 4271
        $162 = $164; //@line 4271
       }
      }
     }
     $120 = HEAP8[16793 + ($c$124 + 1) >> 0] | 0; //@line 4277
     $121 = $120 & 255; //@line 4278
     if ($121 >>> 0 < $$123 >>> 0) {
      $186 = $121; //@line 4281
      $x$266 = 0; //@line 4281
      while (1) {
       $185 = $186 + (Math_imul($x$266, $$123) | 0) | 0; //@line 4284
       $187 = HEAP32[$3 >> 2] | 0; //@line 4285
       if ($187 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
        HEAP32[$3 >> 2] = $187 + 1; //@line 4290
        $c$6$be = HEAPU8[$187 >> 0] | 0; //@line 4293
       } else {
        $c$6$be = ___shgetc($f) | 0; //@line 4296
       }
       $195 = HEAP8[16793 + ($c$6$be + 1) >> 0] | 0; //@line 4300
       $186 = $195 & 255; //@line 4301
       if (!($185 >>> 0 < 119304647 & $186 >>> 0 < $$123 >>> 0)) {
        $$lcssa132 = $185; //@line 4308
        $$lcssa133 = $195; //@line 4308
        $c$6$be$lcssa = $c$6$be; //@line 4308
        break;
       } else {
        $x$266 = $185; //@line 4306
       }
      }
      $201 = $$lcssa133; //@line 4312
      $294 = $$lcssa132; //@line 4312
      $295 = 0; //@line 4312
      $c$6$lcssa = $c$6$be$lcssa; //@line 4312
     } else {
      $201 = $120; //@line 4314
      $294 = 0; //@line 4314
      $295 = 0; //@line 4314
      $c$6$lcssa = $c$124; //@line 4314
     }
     if (($201 & 255) >>> 0 < $$123 >>> 0) {
      $203 = ___udivdi3(-1, -1, $$123 | 0, 0) | 0; //@line 4319
      $204 = tempRet0; //@line 4320
      $206 = $295; //@line 4321
      $208 = $294; //@line 4321
      $215 = $201; //@line 4321
      $c$753 = $c$6$lcssa; //@line 4321
      while (1) {
       if ($206 >>> 0 > $204 >>> 0 | ($206 | 0) == ($204 | 0) & $208 >>> 0 > $203 >>> 0) {
        $$122 = $$123; //@line 4329
        $292 = $208; //@line 4329
        $293 = $206; //@line 4329
        $c$8 = $c$753; //@line 4329
        label = 72; //@line 4330
        break L63;
       }
       $212 = ___muldi3($208 | 0, $206 | 0, $$123 | 0, 0) | 0; //@line 4333
       $213 = tempRet0; //@line 4334
       $214 = $215 & 255; //@line 4335
       if ($213 >>> 0 > 4294967295 | ($213 | 0) == -1 & $212 >>> 0 > ~$214 >>> 0) {
        $$122 = $$123; //@line 4343
        $292 = $208; //@line 4343
        $293 = $206; //@line 4343
        $c$8 = $c$753; //@line 4343
        label = 72; //@line 4344
        break L63;
       }
       $222 = _i64Add($214 | 0, 0, $212 | 0, $213 | 0) | 0; //@line 4347
       $223 = tempRet0; //@line 4348
       $224 = HEAP32[$3 >> 2] | 0; //@line 4349
       if ($224 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
        HEAP32[$3 >> 2] = $224 + 1; //@line 4354
        $c$7$be = HEAPU8[$224 >> 0] | 0; //@line 4357
       } else {
        $c$7$be = ___shgetc($f) | 0; //@line 4360
       }
       $215 = HEAP8[16793 + ($c$7$be + 1) >> 0] | 0; //@line 4364
       if (($215 & 255) >>> 0 >= $$123 >>> 0) {
        $$122 = $$123; //@line 4370
        $292 = $222; //@line 4370
        $293 = $223; //@line 4370
        $c$8 = $c$7$be; //@line 4370
        label = 72; //@line 4371
        break;
       } else {
        $206 = $223; //@line 4368
        $208 = $222; //@line 4368
        $c$753 = $c$7$be; //@line 4368
       }
      }
     } else {
      $$122 = $$123; //@line 4376
      $292 = $294; //@line 4376
      $293 = $295; //@line 4376
      $c$8 = $c$6$lcssa; //@line 4376
      label = 72; //@line 4377
     }
    }
   } while (0);
   if ((label | 0) == 72) {
    if ((HEAPU8[16793 + ($c$8 + 1) >> 0] | 0) >>> 0 < $$122 >>> 0) {
     do {
      $239 = HEAP32[$3 >> 2] | 0; //@line 4389
      if ($239 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
       HEAP32[$3 >> 2] = $239 + 1; //@line 4394
       $c$9$be = HEAPU8[$239 >> 0] | 0; //@line 4397
      } else {
       $c$9$be = ___shgetc($f) | 0; //@line 4400
      }
     } while ((HEAPU8[16793 + ($c$9$be + 1) >> 0] | 0) >>> 0 < $$122 >>> 0);
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 4412
     $260 = $1; //@line 4418
     $262 = $0; //@line 4418
     $neg$1 = ($0 & 1 | 0) == 0 & 0 == 0 ? $neg$0 : 0; //@line 4418
    } else {
     $260 = $293; //@line 4420
     $262 = $292; //@line 4420
     $neg$1 = $neg$0; //@line 4420
    }
   }
   if (HEAP32[$4 >> 2] | 0) {
    HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 4428
   }
   if (!($260 >>> 0 < $1 >>> 0 | ($260 | 0) == ($1 | 0) & $262 >>> 0 < $0 >>> 0)) {
    if (!(($0 & 1 | 0) != 0 | 0 != 0 | ($neg$1 | 0) != 0)) {
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 4444
     $272 = _i64Add($0 | 0, $1 | 0, -1, -1) | 0; //@line 4445
     $286 = tempRet0; //@line 4447
     $287 = $272; //@line 4447
     break;
    }
    if ($260 >>> 0 > $1 >>> 0 | ($260 | 0) == ($1 | 0) & $262 >>> 0 > $0 >>> 0) {
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 4457
     $286 = $1; //@line 4458
     $287 = $0; //@line 4458
     break;
    }
   }
   $281 = (($neg$1 | 0) < 0) << 31 >> 31; //@line 4463
   $284 = _i64Subtract($262 ^ $neg$1 | 0, $260 ^ $281 | 0, $neg$1 | 0, $281 | 0) | 0; //@line 4466
   $286 = tempRet0; //@line 4468
   $287 = $284; //@line 4468
  }
 } while (0);
 tempRet0 = $286; //@line 4471
 return $287 | 0; //@line 4472
}
function _dispose_chunk($p, $psize) {
 $p = $p | 0;
 $psize = $psize | 0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$pre$phi50Z2D = 0, $$pre$phi52Z2D = 0, $$pre$phiZ2D = 0, $$sum18 = 0, $$sum21 = 0, $0 = 0, $10 = 0, $100 = 0, $106 = 0, $108 = 0, $109 = 0, $11 = 0, $115 = 0, $123 = 0, $128 = 0, $129 = 0, $132 = 0, $134 = 0, $136 = 0, $149 = 0, $15 = 0, $154 = 0, $156 = 0, $159 = 0, $161 = 0, $164 = 0, $167 = 0, $168 = 0, $170 = 0, $171 = 0, $173 = 0, $174 = 0, $176 = 0, $177 = 0, $18 = 0, $182 = 0, $183 = 0, $192 = 0, $197 = 0, $2 = 0, $20 = 0, $201 = 0, $207 = 0, $22 = 0, $222 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $231 = 0, $232 = 0, $238 = 0, $243 = 0, $244 = 0, $247 = 0, $249 = 0, $252 = 0, $257 = 0, $263 = 0, $267 = 0, $268 = 0, $275 = 0, $287 = 0, $292 = 0, $299 = 0, $300 = 0, $301 = 0, $35 = 0, $40 = 0, $42 = 0, $45 = 0, $47 = 0, $5 = 0, $50 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $59 = 0, $60 = 0, $62 = 0, $63 = 0, $68 = 0, $69 = 0, $78 = 0, $83 = 0, $87 = 0, $9 = 0, $93 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $K20$043 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$042 = 0, $T$042$lcssa = 0;
 $0 = $p + $psize | 0; //@line 23
 $2 = HEAP32[$p + 4 >> 2] | 0; //@line 25
 do {
  if (!($2 & 1)) {
   $5 = HEAP32[$p >> 2] | 0; //@line 30
   if (!($2 & 3)) {
    return;
   }
   $9 = $p + (0 - $5) | 0; //@line 37
   $10 = $5 + $psize | 0; //@line 38
   $11 = HEAP32[1538] | 0; //@line 39
   if ($9 >>> 0 < $11 >>> 0) {
    _abort(); //@line 42
   }
   if (($9 | 0) == (HEAP32[1539] | 0)) {
    $99 = $p + ($psize + 4) | 0; //@line 49
    $100 = HEAP32[$99 >> 2] | 0; //@line 50
    if (($100 & 3 | 0) != 3) {
     $$0 = $9; //@line 54
     $$02 = $10; //@line 54
     break;
    }
    HEAP32[1536] = $10; //@line 57
    HEAP32[$99 >> 2] = $100 & -2; //@line 59
    HEAP32[$p + (4 - $5) >> 2] = $10 | 1; //@line 63
    HEAP32[$0 >> 2] = $10; //@line 64
    return;
   }
   $15 = $5 >>> 3; //@line 67
   if ($5 >>> 0 < 256) {
    $18 = HEAP32[$p + (8 - $5) >> 2] | 0; //@line 72
    $20 = HEAP32[$p + (12 - $5) >> 2] | 0; //@line 75
    $22 = 6176 + ($15 << 1 << 2) | 0; //@line 77
    if (($18 | 0) != ($22 | 0)) {
     if ($18 >>> 0 < $11 >>> 0) {
      _abort(); //@line 82
     }
     if ((HEAP32[$18 + 12 >> 2] | 0) != ($9 | 0)) {
      _abort(); //@line 89
     }
    }
    if (($20 | 0) == ($18 | 0)) {
     HEAP32[1534] = HEAP32[1534] & ~(1 << $15); //@line 99
     $$0 = $9; //@line 100
     $$02 = $10; //@line 100
     break;
    }
    if (($20 | 0) == ($22 | 0)) {
     $$pre$phi52Z2D = $20 + 8 | 0; //@line 106
    } else {
     if ($20 >>> 0 < $11 >>> 0) {
      _abort(); //@line 110
     }
     $35 = $20 + 8 | 0; //@line 113
     if ((HEAP32[$35 >> 2] | 0) == ($9 | 0)) {
      $$pre$phi52Z2D = $35; //@line 117
     } else {
      _abort(); //@line 119
     }
    }
    HEAP32[$18 + 12 >> 2] = $20; //@line 124
    HEAP32[$$pre$phi52Z2D >> 2] = $18; //@line 125
    $$0 = $9; //@line 126
    $$02 = $10; //@line 126
    break;
   }
   $40 = HEAP32[$p + (24 - $5) >> 2] | 0; //@line 131
   $42 = HEAP32[$p + (12 - $5) >> 2] | 0; //@line 134
   do {
    if (($42 | 0) == ($9 | 0)) {
     $$sum18 = 16 - $5 | 0; //@line 138
     $53 = $p + ($$sum18 + 4) | 0; //@line 140
     $54 = HEAP32[$53 >> 2] | 0; //@line 141
     if (!$54) {
      $56 = $p + $$sum18 | 0; //@line 144
      $57 = HEAP32[$56 >> 2] | 0; //@line 145
      if (!$57) {
       $R$1 = 0; //@line 148
       break;
      } else {
       $R$0 = $57; //@line 151
       $RP$0 = $56; //@line 151
      }
     } else {
      $R$0 = $54; //@line 154
      $RP$0 = $53; //@line 154
     }
     while (1) {
      $59 = $R$0 + 20 | 0; //@line 157
      $60 = HEAP32[$59 >> 2] | 0; //@line 158
      if ($60) {
       $R$0 = $60; //@line 161
       $RP$0 = $59; //@line 161
       continue;
      }
      $62 = $R$0 + 16 | 0; //@line 164
      $63 = HEAP32[$62 >> 2] | 0; //@line 165
      if (!$63) {
       $R$0$lcssa = $R$0; //@line 168
       $RP$0$lcssa = $RP$0; //@line 168
       break;
      } else {
       $R$0 = $63; //@line 171
       $RP$0 = $62; //@line 171
      }
     }
     if ($RP$0$lcssa >>> 0 < $11 >>> 0) {
      _abort(); //@line 176
     } else {
      HEAP32[$RP$0$lcssa >> 2] = 0; //@line 179
      $R$1 = $R$0$lcssa; //@line 180
      break;
     }
    } else {
     $45 = HEAP32[$p + (8 - $5) >> 2] | 0; //@line 186
     if ($45 >>> 0 < $11 >>> 0) {
      _abort(); //@line 189
     }
     $47 = $45 + 12 | 0; //@line 192
     if ((HEAP32[$47 >> 2] | 0) != ($9 | 0)) {
      _abort(); //@line 196
     }
     $50 = $42 + 8 | 0; //@line 199
     if ((HEAP32[$50 >> 2] | 0) == ($9 | 0)) {
      HEAP32[$47 >> 2] = $42; //@line 203
      HEAP32[$50 >> 2] = $45; //@line 204
      $R$1 = $42; //@line 205
      break;
     } else {
      _abort(); //@line 208
     }
    }
   } while (0);
   if (!$40) {
    $$0 = $9; //@line 215
    $$02 = $10; //@line 215
   } else {
    $68 = HEAP32[$p + (28 - $5) >> 2] | 0; //@line 219
    $69 = 6440 + ($68 << 2) | 0; //@line 220
    if (($9 | 0) == (HEAP32[$69 >> 2] | 0)) {
     HEAP32[$69 >> 2] = $R$1; //@line 224
     if (!$R$1) {
      HEAP32[1535] = HEAP32[1535] & ~(1 << $68); //@line 231
      $$0 = $9; //@line 232
      $$02 = $10; //@line 232
      break;
     }
    } else {
     if ($40 >>> 0 < (HEAP32[1538] | 0) >>> 0) {
      _abort(); //@line 239
     }
     $78 = $40 + 16 | 0; //@line 242
     if ((HEAP32[$78 >> 2] | 0) == ($9 | 0)) {
      HEAP32[$78 >> 2] = $R$1; //@line 246
     } else {
      HEAP32[$40 + 20 >> 2] = $R$1; //@line 249
     }
     if (!$R$1) {
      $$0 = $9; //@line 253
      $$02 = $10; //@line 253
      break;
     }
    }
    $83 = HEAP32[1538] | 0; //@line 257
    if ($R$1 >>> 0 < $83 >>> 0) {
     _abort(); //@line 260
    }
    HEAP32[$R$1 + 24 >> 2] = $40; //@line 264
    $$sum21 = 16 - $5 | 0; //@line 265
    $87 = HEAP32[$p + $$sum21 >> 2] | 0; //@line 267
    do {
     if ($87) {
      if ($87 >>> 0 < $83 >>> 0) {
       _abort(); //@line 273
      } else {
       HEAP32[$R$1 + 16 >> 2] = $87; //@line 277
       HEAP32[$87 + 24 >> 2] = $R$1; //@line 279
       break;
      }
     }
    } while (0);
    $93 = HEAP32[$p + ($$sum21 + 4) >> 2] | 0; //@line 286
    if (!$93) {
     $$0 = $9; //@line 289
     $$02 = $10; //@line 289
    } else {
     if ($93 >>> 0 < (HEAP32[1538] | 0) >>> 0) {
      _abort(); //@line 294
     } else {
      HEAP32[$R$1 + 20 >> 2] = $93; //@line 298
      HEAP32[$93 + 24 >> 2] = $R$1; //@line 300
      $$0 = $9; //@line 301
      $$02 = $10; //@line 301
      break;
     }
    }
   }
  } else {
   $$0 = $p; //@line 307
   $$02 = $psize; //@line 307
  }
 } while (0);
 $106 = HEAP32[1538] | 0; //@line 310
 if ($0 >>> 0 < $106 >>> 0) {
  _abort(); //@line 313
 }
 $108 = $p + ($psize + 4) | 0; //@line 317
 $109 = HEAP32[$108 >> 2] | 0; //@line 318
 if (!($109 & 2)) {
  if (($0 | 0) == (HEAP32[1540] | 0)) {
   $115 = (HEAP32[1537] | 0) + $$02 | 0; //@line 326
   HEAP32[1537] = $115; //@line 327
   HEAP32[1540] = $$0; //@line 328
   HEAP32[$$0 + 4 >> 2] = $115 | 1; //@line 331
   if (($$0 | 0) != (HEAP32[1539] | 0)) {
    return;
   }
   HEAP32[1539] = 0; //@line 337
   HEAP32[1536] = 0; //@line 338
   return;
  }
  if (($0 | 0) == (HEAP32[1539] | 0)) {
   $123 = (HEAP32[1536] | 0) + $$02 | 0; //@line 345
   HEAP32[1536] = $123; //@line 346
   HEAP32[1539] = $$0; //@line 347
   HEAP32[$$0 + 4 >> 2] = $123 | 1; //@line 350
   HEAP32[$$0 + $123 >> 2] = $123; //@line 352
   return;
  }
  $128 = ($109 & -8) + $$02 | 0; //@line 356
  $129 = $109 >>> 3; //@line 357
  do {
   if ($109 >>> 0 < 256) {
    $132 = HEAP32[$p + ($psize + 8) >> 2] | 0; //@line 363
    $134 = HEAP32[$p + ($psize + 12) >> 2] | 0; //@line 366
    $136 = 6176 + ($129 << 1 << 2) | 0; //@line 368
    if (($132 | 0) != ($136 | 0)) {
     if ($132 >>> 0 < $106 >>> 0) {
      _abort(); //@line 373
     }
     if ((HEAP32[$132 + 12 >> 2] | 0) != ($0 | 0)) {
      _abort(); //@line 380
     }
    }
    if (($134 | 0) == ($132 | 0)) {
     HEAP32[1534] = HEAP32[1534] & ~(1 << $129); //@line 390
     break;
    }
    if (($134 | 0) == ($136 | 0)) {
     $$pre$phi50Z2D = $134 + 8 | 0; //@line 396
    } else {
     if ($134 >>> 0 < $106 >>> 0) {
      _abort(); //@line 400
     }
     $149 = $134 + 8 | 0; //@line 403
     if ((HEAP32[$149 >> 2] | 0) == ($0 | 0)) {
      $$pre$phi50Z2D = $149; //@line 407
     } else {
      _abort(); //@line 409
     }
    }
    HEAP32[$132 + 12 >> 2] = $134; //@line 414
    HEAP32[$$pre$phi50Z2D >> 2] = $132; //@line 415
   } else {
    $154 = HEAP32[$p + ($psize + 24) >> 2] | 0; //@line 419
    $156 = HEAP32[$p + ($psize + 12) >> 2] | 0; //@line 422
    do {
     if (($156 | 0) == ($0 | 0)) {
      $167 = $p + ($psize + 20) | 0; //@line 427
      $168 = HEAP32[$167 >> 2] | 0; //@line 428
      if (!$168) {
       $170 = $p + ($psize + 16) | 0; //@line 432
       $171 = HEAP32[$170 >> 2] | 0; //@line 433
       if (!$171) {
        $R7$1 = 0; //@line 436
        break;
       } else {
        $R7$0 = $171; //@line 439
        $RP9$0 = $170; //@line 439
       }
      } else {
       $R7$0 = $168; //@line 442
       $RP9$0 = $167; //@line 442
      }
      while (1) {
       $173 = $R7$0 + 20 | 0; //@line 445
       $174 = HEAP32[$173 >> 2] | 0; //@line 446
       if ($174) {
        $R7$0 = $174; //@line 449
        $RP9$0 = $173; //@line 449
        continue;
       }
       $176 = $R7$0 + 16 | 0; //@line 452
       $177 = HEAP32[$176 >> 2] | 0; //@line 453
       if (!$177) {
        $R7$0$lcssa = $R7$0; //@line 456
        $RP9$0$lcssa = $RP9$0; //@line 456
        break;
       } else {
        $R7$0 = $177; //@line 459
        $RP9$0 = $176; //@line 459
       }
      }
      if ($RP9$0$lcssa >>> 0 < $106 >>> 0) {
       _abort(); //@line 464
      } else {
       HEAP32[$RP9$0$lcssa >> 2] = 0; //@line 467
       $R7$1 = $R7$0$lcssa; //@line 468
       break;
      }
     } else {
      $159 = HEAP32[$p + ($psize + 8) >> 2] | 0; //@line 474
      if ($159 >>> 0 < $106 >>> 0) {
       _abort(); //@line 477
      }
      $161 = $159 + 12 | 0; //@line 480
      if ((HEAP32[$161 >> 2] | 0) != ($0 | 0)) {
       _abort(); //@line 484
      }
      $164 = $156 + 8 | 0; //@line 487
      if ((HEAP32[$164 >> 2] | 0) == ($0 | 0)) {
       HEAP32[$161 >> 2] = $156; //@line 491
       HEAP32[$164 >> 2] = $159; //@line 492
       $R7$1 = $156; //@line 493
       break;
      } else {
       _abort(); //@line 496
      }
     }
    } while (0);
    if ($154) {
     $182 = HEAP32[$p + ($psize + 28) >> 2] | 0; //@line 505
     $183 = 6440 + ($182 << 2) | 0; //@line 506
     if (($0 | 0) == (HEAP32[$183 >> 2] | 0)) {
      HEAP32[$183 >> 2] = $R7$1; //@line 510
      if (!$R7$1) {
       HEAP32[1535] = HEAP32[1535] & ~(1 << $182); //@line 517
       break;
      }
     } else {
      if ($154 >>> 0 < (HEAP32[1538] | 0) >>> 0) {
       _abort(); //@line 524
      }
      $192 = $154 + 16 | 0; //@line 527
      if ((HEAP32[$192 >> 2] | 0) == ($0 | 0)) {
       HEAP32[$192 >> 2] = $R7$1; //@line 531
      } else {
       HEAP32[$154 + 20 >> 2] = $R7$1; //@line 534
      }
      if (!$R7$1) {
       break;
      }
     }
     $197 = HEAP32[1538] | 0; //@line 541
     if ($R7$1 >>> 0 < $197 >>> 0) {
      _abort(); //@line 544
     }
     HEAP32[$R7$1 + 24 >> 2] = $154; //@line 548
     $201 = HEAP32[$p + ($psize + 16) >> 2] | 0; //@line 551
     do {
      if ($201) {
       if ($201 >>> 0 < $197 >>> 0) {
        _abort(); //@line 557
       } else {
        HEAP32[$R7$1 + 16 >> 2] = $201; //@line 561
        HEAP32[$201 + 24 >> 2] = $R7$1; //@line 563
        break;
       }
      }
     } while (0);
     $207 = HEAP32[$p + ($psize + 20) >> 2] | 0; //@line 570
     if ($207) {
      if ($207 >>> 0 < (HEAP32[1538] | 0) >>> 0) {
       _abort(); //@line 576
      } else {
       HEAP32[$R7$1 + 20 >> 2] = $207; //@line 580
       HEAP32[$207 + 24 >> 2] = $R7$1; //@line 582
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[$$0 + 4 >> 2] = $128 | 1; //@line 591
  HEAP32[$$0 + $128 >> 2] = $128; //@line 593
  if (($$0 | 0) == (HEAP32[1539] | 0)) {
   HEAP32[1536] = $128; //@line 597
   return;
  } else {
   $$1 = $128; //@line 600
  }
 } else {
  HEAP32[$108 >> 2] = $109 & -2; //@line 604
  HEAP32[$$0 + 4 >> 2] = $$02 | 1; //@line 607
  HEAP32[$$0 + $$02 >> 2] = $$02; //@line 609
  $$1 = $$02; //@line 610
 }
 $222 = $$1 >>> 3; //@line 612
 if ($$1 >>> 0 < 256) {
  $224 = $222 << 1; //@line 615
  $225 = 6176 + ($224 << 2) | 0; //@line 616
  $226 = HEAP32[1534] | 0; //@line 617
  $227 = 1 << $222; //@line 618
  if (!($226 & $227)) {
   HEAP32[1534] = $226 | $227; //@line 623
   $$pre$phiZ2D = 6176 + ($224 + 2 << 2) | 0; //@line 626
   $F16$0 = $225; //@line 626
  } else {
   $231 = 6176 + ($224 + 2 << 2) | 0; //@line 629
   $232 = HEAP32[$231 >> 2] | 0; //@line 630
   if ($232 >>> 0 < (HEAP32[1538] | 0) >>> 0) {
    _abort(); //@line 634
   } else {
    $$pre$phiZ2D = $231; //@line 637
    $F16$0 = $232; //@line 637
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$0; //@line 640
  HEAP32[$F16$0 + 12 >> 2] = $$0; //@line 642
  HEAP32[$$0 + 8 >> 2] = $F16$0; //@line 644
  HEAP32[$$0 + 12 >> 2] = $225; //@line 646
  return;
 }
 $238 = $$1 >>> 8; //@line 649
 if (!$238) {
  $I19$0 = 0; //@line 652
 } else {
  if ($$1 >>> 0 > 16777215) {
   $I19$0 = 31; //@line 656
  } else {
   $243 = ($238 + 1048320 | 0) >>> 16 & 8; //@line 660
   $244 = $238 << $243; //@line 661
   $247 = ($244 + 520192 | 0) >>> 16 & 4; //@line 664
   $249 = $244 << $247; //@line 666
   $252 = ($249 + 245760 | 0) >>> 16 & 2; //@line 669
   $257 = 14 - ($247 | $243 | $252) + ($249 << $252 >>> 15) | 0; //@line 674
   $I19$0 = $$1 >>> ($257 + 7 | 0) & 1 | $257 << 1; //@line 680
  }
 }
 $263 = 6440 + ($I19$0 << 2) | 0; //@line 683
 HEAP32[$$0 + 28 >> 2] = $I19$0; //@line 685
 HEAP32[$$0 + 20 >> 2] = 0; //@line 688
 HEAP32[$$0 + 16 >> 2] = 0; //@line 689
 $267 = HEAP32[1535] | 0; //@line 690
 $268 = 1 << $I19$0; //@line 691
 if (!($267 & $268)) {
  HEAP32[1535] = $267 | $268; //@line 696
  HEAP32[$263 >> 2] = $$0; //@line 697
  HEAP32[$$0 + 24 >> 2] = $263; //@line 699
  HEAP32[$$0 + 12 >> 2] = $$0; //@line 701
  HEAP32[$$0 + 8 >> 2] = $$0; //@line 703
  return;
 }
 $275 = HEAP32[$263 >> 2] | 0; //@line 706
 L191 : do {
  if ((HEAP32[$275 + 4 >> 2] & -8 | 0) == ($$1 | 0)) {
   $T$0$lcssa = $275; //@line 713
  } else {
   $K20$043 = $$1 << (($I19$0 | 0) == 31 ? 0 : 25 - ($I19$0 >>> 1) | 0); //@line 720
   $T$042 = $275; //@line 720
   while (1) {
    $292 = $T$042 + 16 + ($K20$043 >>> 31 << 2) | 0; //@line 723
    $287 = HEAP32[$292 >> 2] | 0; //@line 724
    if (!$287) {
     $$lcssa = $292; //@line 727
     $T$042$lcssa = $T$042; //@line 727
     break;
    }
    if ((HEAP32[$287 + 4 >> 2] & -8 | 0) == ($$1 | 0)) {
     $T$0$lcssa = $287; //@line 736
     break L191;
    } else {
     $K20$043 = $K20$043 << 1; //@line 739
     $T$042 = $287; //@line 739
    }
   }
   if ($$lcssa >>> 0 < (HEAP32[1538] | 0) >>> 0) {
    _abort(); //@line 745
   }
   HEAP32[$$lcssa >> 2] = $$0; //@line 748
   HEAP32[$$0 + 24 >> 2] = $T$042$lcssa; //@line 750
   HEAP32[$$0 + 12 >> 2] = $$0; //@line 752
   HEAP32[$$0 + 8 >> 2] = $$0; //@line 754
   return;
  }
 } while (0);
 $299 = $T$0$lcssa + 8 | 0; //@line 758
 $300 = HEAP32[$299 >> 2] | 0; //@line 759
 $301 = HEAP32[1538] | 0; //@line 760
 if (!($300 >>> 0 >= $301 >>> 0 & $T$0$lcssa >>> 0 >= $301 >>> 0)) {
  _abort(); //@line 765
 }
 HEAP32[$300 + 12 >> 2] = $$0; //@line 769
 HEAP32[$299 >> 2] = $$0; //@line 770
 HEAP32[$$0 + 8 >> 2] = $300; //@line 772
 HEAP32[$$0 + 12 >> 2] = $T$0$lcssa; //@line 774
 HEAP32[$$0 + 24 >> 2] = 0; //@line 776
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($this, $__b, $__e, $__iob, $__err, $__tm, $__fmt, $0) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $0 = $0 | 0;
 var $$byval_copy26 = 0, $$byval_copy30 = 0, $$sroa$07$0 = 0, $1 = 0, $10 = 0, $103 = 0, $106 = 0, $108 = 0, $11 = 0, $111 = 0, $112 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $40 = 0, $44 = 0, $47 = 0, $49 = 0, $5 = 0, $52 = 0, $53 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $95 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12085
 STACKTOP = STACKTOP + 144 | 0; //@line 12086
 $$byval_copy30 = sp + 132 | 0; //@line 12087
 $$byval_copy26 = sp + 116 | 0; //@line 12088
 $1 = sp + 128 | 0; //@line 12089
 $2 = sp + 124 | 0; //@line 12090
 $3 = sp + 120 | 0; //@line 12091
 $4 = sp + 112 | 0; //@line 12092
 $5 = sp + 108 | 0; //@line 12093
 $6 = sp + 104 | 0; //@line 12094
 $7 = sp + 100 | 0; //@line 12095
 $8 = sp + 96 | 0; //@line 12096
 $9 = sp + 92 | 0; //@line 12097
 $10 = sp + 88 | 0; //@line 12098
 $11 = sp + 84 | 0; //@line 12099
 $12 = sp + 80 | 0; //@line 12100
 $13 = sp + 76 | 0; //@line 12101
 $14 = sp + 72 | 0; //@line 12102
 $15 = sp + 68 | 0; //@line 12103
 $16 = sp + 64 | 0; //@line 12104
 $17 = sp + 60 | 0; //@line 12105
 $18 = sp + 56 | 0; //@line 12106
 $19 = sp + 52 | 0; //@line 12107
 $20 = sp + 48 | 0; //@line 12108
 $21 = sp + 44 | 0; //@line 12109
 $22 = sp + 40 | 0; //@line 12110
 $23 = sp + 36 | 0; //@line 12111
 $24 = sp + 32 | 0; //@line 12112
 $25 = sp + 28 | 0; //@line 12113
 $26 = sp + 24 | 0; //@line 12114
 $27 = sp + 20 | 0; //@line 12115
 $28 = sp + 16 | 0; //@line 12116
 $29 = sp + 12 | 0; //@line 12117
 $30 = sp + 8 | 0; //@line 12118
 $31 = sp + 4 | 0; //@line 12119
 $32 = sp; //@line 12120
 HEAP32[$__err >> 2] = 0; //@line 12121
 $33 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 12122
 HEAP32[$1 >> 2] = $33; //@line 12123
 $34 = __ZNKSt3__16locale9use_facetERNS0_2idE($1, 9320) | 0; //@line 12124
 __ZNSt3__114__shared_count16__release_sharedEv($33) | 0; //@line 12125
 do {
  switch ($__fmt << 24 >> 24 | 0) {
  case 65:
  case 97:
   {
    HEAP32[$2 >> 2] = HEAP32[$__e >> 2]; //@line 12132
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$2 >> 2]; //@line 12133
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 24 | 0, $__b, $$byval_copy30, $__err, $34); //@line 12134
    label = 26; //@line 12135
    break;
   }
  case 104:
  case 66:
  case 98:
   {
    HEAP32[$3 >> 2] = HEAP32[$__e >> 2]; //@line 12141
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$3 >> 2]; //@line 12142
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 16 | 0, $__b, $$byval_copy30, $__err, $34); //@line 12143
    label = 26; //@line 12144
    break;
   }
  case 99:
   {
    $40 = $this + 8 | 0; //@line 12148
    $44 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$40 >> 2] | 0) + 12 >> 2] & 63]($40) | 0; //@line 12152
    HEAP32[$4 >> 2] = HEAP32[$__b >> 2]; //@line 12154
    HEAP32[$5 >> 2] = HEAP32[$__e >> 2]; //@line 12156
    $47 = HEAP8[$44 >> 0] | 0; //@line 12157
    $49 = ($47 & 1) == 0; //@line 12159
    $52 = $44 + 4 | 0; //@line 12162
    $53 = $49 ? $52 : HEAP32[$44 + 8 >> 2] | 0; //@line 12163
    $58 = $53 + (($49 ? ($47 & 255) >>> 1 : HEAP32[$52 >> 2] | 0) << 2) | 0; //@line 12168
    HEAP32[$$byval_copy26 >> 2] = HEAP32[$4 >> 2]; //@line 12169
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$5 >> 2]; //@line 12170
    HEAP32[$__b >> 2] = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, $53, $58) | 0; //@line 12172
    label = 26; //@line 12173
    break;
   }
  case 101:
  case 100:
   {
    HEAP32[$6 >> 2] = HEAP32[$__e >> 2]; //@line 12179
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$6 >> 2]; //@line 12180
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 12 | 0, $__b, $$byval_copy30, $__err, $34); //@line 12181
    label = 26; //@line 12182
    break;
   }
  case 68:
   {
    HEAP32[$7 >> 2] = HEAP32[$__b >> 2]; //@line 12187
    HEAP32[$8 >> 2] = HEAP32[$__e >> 2]; //@line 12189
    HEAP32[$$byval_copy26 >> 2] = HEAP32[$7 >> 2]; //@line 12190
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$8 >> 2]; //@line 12191
    HEAP32[$__b >> 2] = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, 9928, 9960) | 0; //@line 12193
    label = 26; //@line 12194
    break;
   }
  case 70:
   {
    HEAP32[$9 >> 2] = HEAP32[$__b >> 2]; //@line 12199
    HEAP32[$10 >> 2] = HEAP32[$__e >> 2]; //@line 12201
    HEAP32[$$byval_copy26 >> 2] = HEAP32[$9 >> 2]; //@line 12202
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$10 >> 2]; //@line 12203
    HEAP32[$__b >> 2] = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, 9960, 9992) | 0; //@line 12205
    label = 26; //@line 12206
    break;
   }
  case 72:
   {
    HEAP32[$11 >> 2] = HEAP32[$__e >> 2]; //@line 12212
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$11 >> 2]; //@line 12213
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 8 | 0, $__b, $$byval_copy30, $__err, $34); //@line 12214
    label = 26; //@line 12215
    break;
   }
  case 73:
   {
    HEAP32[$12 >> 2] = HEAP32[$__e >> 2]; //@line 12221
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$12 >> 2]; //@line 12222
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 8 | 0, $__b, $$byval_copy30, $__err, $34); //@line 12223
    label = 26; //@line 12224
    break;
   }
  case 106:
   {
    HEAP32[$13 >> 2] = HEAP32[$__e >> 2]; //@line 12230
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$13 >> 2]; //@line 12231
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 28 | 0, $__b, $$byval_copy30, $__err, $34); //@line 12232
    label = 26; //@line 12233
    break;
   }
  case 109:
   {
    HEAP32[$14 >> 2] = HEAP32[$__e >> 2]; //@line 12239
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$14 >> 2]; //@line 12240
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 16 | 0, $__b, $$byval_copy30, $__err, $34); //@line 12241
    label = 26; //@line 12242
    break;
   }
  case 77:
   {
    HEAP32[$15 >> 2] = HEAP32[$__e >> 2]; //@line 12248
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$15 >> 2]; //@line 12249
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 4 | 0, $__b, $$byval_copy30, $__err, $34); //@line 12250
    label = 26; //@line 12251
    break;
   }
  case 116:
  case 110:
   {
    HEAP32[$16 >> 2] = HEAP32[$__e >> 2]; //@line 12256
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$16 >> 2]; //@line 12257
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this, $__b, $$byval_copy30, $__err, $34); //@line 12258
    label = 26; //@line 12259
    break;
   }
  case 112:
   {
    HEAP32[$17 >> 2] = HEAP32[$__e >> 2]; //@line 12265
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$17 >> 2]; //@line 12266
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 8 | 0, $__b, $$byval_copy30, $__err, $34); //@line 12267
    label = 26; //@line 12268
    break;
   }
  case 114:
   {
    HEAP32[$18 >> 2] = HEAP32[$__b >> 2]; //@line 12273
    HEAP32[$19 >> 2] = HEAP32[$__e >> 2]; //@line 12275
    HEAP32[$$byval_copy26 >> 2] = HEAP32[$18 >> 2]; //@line 12276
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$19 >> 2]; //@line 12277
    HEAP32[$__b >> 2] = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, 9992, 10036) | 0; //@line 12279
    label = 26; //@line 12280
    break;
   }
  case 82:
   {
    HEAP32[$20 >> 2] = HEAP32[$__b >> 2]; //@line 12285
    HEAP32[$21 >> 2] = HEAP32[$__e >> 2]; //@line 12287
    HEAP32[$$byval_copy26 >> 2] = HEAP32[$20 >> 2]; //@line 12288
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$21 >> 2]; //@line 12289
    HEAP32[$__b >> 2] = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, 10036, 10056) | 0; //@line 12291
    label = 26; //@line 12292
    break;
   }
  case 83:
   {
    HEAP32[$22 >> 2] = HEAP32[$__e >> 2]; //@line 12297
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$22 >> 2]; //@line 12298
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm, $__b, $$byval_copy30, $__err, $34); //@line 12299
    label = 26; //@line 12300
    break;
   }
  case 84:
   {
    HEAP32[$23 >> 2] = HEAP32[$__b >> 2]; //@line 12305
    HEAP32[$24 >> 2] = HEAP32[$__e >> 2]; //@line 12307
    HEAP32[$$byval_copy26 >> 2] = HEAP32[$23 >> 2]; //@line 12308
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$24 >> 2]; //@line 12309
    HEAP32[$__b >> 2] = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, 10056, 10088) | 0; //@line 12311
    label = 26; //@line 12312
    break;
   }
  case 119:
   {
    HEAP32[$25 >> 2] = HEAP32[$__e >> 2]; //@line 12318
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$25 >> 2]; //@line 12319
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 24 | 0, $__b, $$byval_copy30, $__err, $34); //@line 12320
    label = 26; //@line 12321
    break;
   }
  case 120:
   {
    $95 = HEAP32[(HEAP32[$this >> 2] | 0) + 20 >> 2] | 0; //@line 12327
    HEAP32[$26 >> 2] = HEAP32[$__b >> 2]; //@line 12329
    HEAP32[$27 >> 2] = HEAP32[$__e >> 2]; //@line 12331
    HEAP32[$$byval_copy26 >> 2] = HEAP32[$26 >> 2]; //@line 12332
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$27 >> 2]; //@line 12333
    $$sroa$07$0 = FUNCTION_TABLE_iiiiiii[$95 & 63]($this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm) | 0; //@line 12335
    break;
   }
  case 88:
   {
    $99 = $this + 8 | 0; //@line 12339
    $103 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$99 >> 2] | 0) + 24 >> 2] & 63]($99) | 0; //@line 12343
    HEAP32[$28 >> 2] = HEAP32[$__b >> 2]; //@line 12345
    HEAP32[$29 >> 2] = HEAP32[$__e >> 2]; //@line 12347
    $106 = HEAP8[$103 >> 0] | 0; //@line 12348
    $108 = ($106 & 1) == 0; //@line 12350
    $111 = $103 + 4 | 0; //@line 12353
    $112 = $108 ? $111 : HEAP32[$103 + 8 >> 2] | 0; //@line 12354
    $117 = $112 + (($108 ? ($106 & 255) >>> 1 : HEAP32[$111 >> 2] | 0) << 2) | 0; //@line 12359
    HEAP32[$$byval_copy26 >> 2] = HEAP32[$28 >> 2]; //@line 12360
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$29 >> 2]; //@line 12361
    HEAP32[$__b >> 2] = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, $112, $117) | 0; //@line 12363
    label = 26; //@line 12364
    break;
   }
  case 121:
   {
    HEAP32[$30 >> 2] = HEAP32[$__e >> 2]; //@line 12370
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$30 >> 2]; //@line 12371
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 20 | 0, $__b, $$byval_copy30, $__err, $34); //@line 12372
    label = 26; //@line 12373
    break;
   }
  case 89:
   {
    HEAP32[$31 >> 2] = HEAP32[$__e >> 2]; //@line 12379
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$31 >> 2]; //@line 12380
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 20 | 0, $__b, $$byval_copy30, $__err, $34); //@line 12381
    label = 26; //@line 12382
    break;
   }
  case 37:
   {
    HEAP32[$32 >> 2] = HEAP32[$__e >> 2]; //@line 12387
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$32 >> 2]; //@line 12388
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this, $__b, $$byval_copy30, $__err, $34); //@line 12389
    label = 26; //@line 12390
    break;
   }
  default:
   {
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 12396
    label = 26; //@line 12397
   }
  }
 } while (0);
 if ((label | 0) == 26) {
  $$sroa$07$0 = HEAP32[$__b >> 2] | 0; //@line 12403
 }
 STACKTOP = sp; //@line 12405
 return $$sroa$07$0 | 0; //@line 12405
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($this, $__b, $__e, $__iob, $__err, $__tm, $__fmt, $0) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $0 = $0 | 0;
 var $$byval_copy26 = 0, $$byval_copy30 = 0, $$sroa$07$0 = 0, $1 = 0, $10 = 0, $100 = 0, $104 = 0, $107 = 0, $109 = 0, $11 = 0, $113 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $40 = 0, $44 = 0, $47 = 0, $49 = 0, $5 = 0, $53 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10244
 STACKTOP = STACKTOP + 144 | 0; //@line 10245
 $$byval_copy30 = sp + 132 | 0; //@line 10246
 $$byval_copy26 = sp + 116 | 0; //@line 10247
 $1 = sp + 128 | 0; //@line 10248
 $2 = sp + 124 | 0; //@line 10249
 $3 = sp + 120 | 0; //@line 10250
 $4 = sp + 112 | 0; //@line 10251
 $5 = sp + 108 | 0; //@line 10252
 $6 = sp + 104 | 0; //@line 10253
 $7 = sp + 100 | 0; //@line 10254
 $8 = sp + 96 | 0; //@line 10255
 $9 = sp + 92 | 0; //@line 10256
 $10 = sp + 88 | 0; //@line 10257
 $11 = sp + 84 | 0; //@line 10258
 $12 = sp + 80 | 0; //@line 10259
 $13 = sp + 76 | 0; //@line 10260
 $14 = sp + 72 | 0; //@line 10261
 $15 = sp + 68 | 0; //@line 10262
 $16 = sp + 64 | 0; //@line 10263
 $17 = sp + 60 | 0; //@line 10264
 $18 = sp + 56 | 0; //@line 10265
 $19 = sp + 52 | 0; //@line 10266
 $20 = sp + 48 | 0; //@line 10267
 $21 = sp + 44 | 0; //@line 10268
 $22 = sp + 40 | 0; //@line 10269
 $23 = sp + 36 | 0; //@line 10270
 $24 = sp + 32 | 0; //@line 10271
 $25 = sp + 28 | 0; //@line 10272
 $26 = sp + 24 | 0; //@line 10273
 $27 = sp + 20 | 0; //@line 10274
 $28 = sp + 16 | 0; //@line 10275
 $29 = sp + 12 | 0; //@line 10276
 $30 = sp + 8 | 0; //@line 10277
 $31 = sp + 4 | 0; //@line 10278
 $32 = sp; //@line 10279
 HEAP32[$__err >> 2] = 0; //@line 10280
 $33 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 10281
 HEAP32[$1 >> 2] = $33; //@line 10282
 $34 = __ZNKSt3__16locale9use_facetERNS0_2idE($1, 9328) | 0; //@line 10283
 __ZNSt3__114__shared_count16__release_sharedEv($33) | 0; //@line 10284
 do {
  switch ($__fmt << 24 >> 24 | 0) {
  case 65:
  case 97:
   {
    HEAP32[$2 >> 2] = HEAP32[$__e >> 2]; //@line 10291
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$2 >> 2]; //@line 10292
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 24 | 0, $__b, $$byval_copy30, $__err, $34); //@line 10293
    label = 26; //@line 10294
    break;
   }
  case 104:
  case 66:
  case 98:
   {
    HEAP32[$3 >> 2] = HEAP32[$__e >> 2]; //@line 10300
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$3 >> 2]; //@line 10301
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 16 | 0, $__b, $$byval_copy30, $__err, $34); //@line 10302
    label = 26; //@line 10303
    break;
   }
  case 99:
   {
    $40 = $this + 8 | 0; //@line 10307
    $44 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$40 >> 2] | 0) + 12 >> 2] & 63]($40) | 0; //@line 10311
    HEAP32[$4 >> 2] = HEAP32[$__b >> 2]; //@line 10313
    HEAP32[$5 >> 2] = HEAP32[$__e >> 2]; //@line 10315
    $47 = HEAP8[$44 >> 0] | 0; //@line 10316
    $49 = ($47 & 1) == 0; //@line 10318
    $53 = $49 ? $44 + 1 | 0 : HEAP32[$44 + 8 >> 2] | 0; //@line 10322
    $59 = $53 + ($49 ? ($47 & 255) >>> 1 : HEAP32[$44 + 4 >> 2] | 0) | 0; //@line 10328
    HEAP32[$$byval_copy26 >> 2] = HEAP32[$4 >> 2]; //@line 10329
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$5 >> 2]; //@line 10330
    HEAP32[$__b >> 2] = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, $53, $59) | 0; //@line 10332
    label = 26; //@line 10333
    break;
   }
  case 101:
  case 100:
   {
    HEAP32[$6 >> 2] = HEAP32[$__e >> 2]; //@line 10339
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$6 >> 2]; //@line 10340
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 12 | 0, $__b, $$byval_copy30, $__err, $34); //@line 10341
    label = 26; //@line 10342
    break;
   }
  case 68:
   {
    HEAP32[$7 >> 2] = HEAP32[$__b >> 2]; //@line 10347
    HEAP32[$8 >> 2] = HEAP32[$__e >> 2]; //@line 10349
    HEAP32[$$byval_copy26 >> 2] = HEAP32[$7 >> 2]; //@line 10350
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$8 >> 2]; //@line 10351
    HEAP32[$__b >> 2] = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, 21613, 21621) | 0; //@line 10353
    label = 26; //@line 10354
    break;
   }
  case 70:
   {
    HEAP32[$9 >> 2] = HEAP32[$__b >> 2]; //@line 10359
    HEAP32[$10 >> 2] = HEAP32[$__e >> 2]; //@line 10361
    HEAP32[$$byval_copy26 >> 2] = HEAP32[$9 >> 2]; //@line 10362
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$10 >> 2]; //@line 10363
    HEAP32[$__b >> 2] = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, 21621, 21629) | 0; //@line 10365
    label = 26; //@line 10366
    break;
   }
  case 72:
   {
    HEAP32[$11 >> 2] = HEAP32[$__e >> 2]; //@line 10372
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$11 >> 2]; //@line 10373
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 8 | 0, $__b, $$byval_copy30, $__err, $34); //@line 10374
    label = 26; //@line 10375
    break;
   }
  case 73:
   {
    HEAP32[$12 >> 2] = HEAP32[$__e >> 2]; //@line 10381
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$12 >> 2]; //@line 10382
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 8 | 0, $__b, $$byval_copy30, $__err, $34); //@line 10383
    label = 26; //@line 10384
    break;
   }
  case 106:
   {
    HEAP32[$13 >> 2] = HEAP32[$__e >> 2]; //@line 10390
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$13 >> 2]; //@line 10391
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 28 | 0, $__b, $$byval_copy30, $__err, $34); //@line 10392
    label = 26; //@line 10393
    break;
   }
  case 109:
   {
    HEAP32[$14 >> 2] = HEAP32[$__e >> 2]; //@line 10399
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$14 >> 2]; //@line 10400
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 16 | 0, $__b, $$byval_copy30, $__err, $34); //@line 10401
    label = 26; //@line 10402
    break;
   }
  case 77:
   {
    HEAP32[$15 >> 2] = HEAP32[$__e >> 2]; //@line 10408
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$15 >> 2]; //@line 10409
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 4 | 0, $__b, $$byval_copy30, $__err, $34); //@line 10410
    label = 26; //@line 10411
    break;
   }
  case 116:
  case 110:
   {
    HEAP32[$16 >> 2] = HEAP32[$__e >> 2]; //@line 10416
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$16 >> 2]; //@line 10417
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this, $__b, $$byval_copy30, $__err, $34); //@line 10418
    label = 26; //@line 10419
    break;
   }
  case 112:
   {
    HEAP32[$17 >> 2] = HEAP32[$__e >> 2]; //@line 10425
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$17 >> 2]; //@line 10426
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 8 | 0, $__b, $$byval_copy30, $__err, $34); //@line 10427
    label = 26; //@line 10428
    break;
   }
  case 114:
   {
    HEAP32[$18 >> 2] = HEAP32[$__b >> 2]; //@line 10433
    HEAP32[$19 >> 2] = HEAP32[$__e >> 2]; //@line 10435
    HEAP32[$$byval_copy26 >> 2] = HEAP32[$18 >> 2]; //@line 10436
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$19 >> 2]; //@line 10437
    HEAP32[$__b >> 2] = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, 21629, 21640) | 0; //@line 10439
    label = 26; //@line 10440
    break;
   }
  case 82:
   {
    HEAP32[$20 >> 2] = HEAP32[$__b >> 2]; //@line 10445
    HEAP32[$21 >> 2] = HEAP32[$__e >> 2]; //@line 10447
    HEAP32[$$byval_copy26 >> 2] = HEAP32[$20 >> 2]; //@line 10448
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$21 >> 2]; //@line 10449
    HEAP32[$__b >> 2] = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, 21640, 21645) | 0; //@line 10451
    label = 26; //@line 10452
    break;
   }
  case 83:
   {
    HEAP32[$22 >> 2] = HEAP32[$__e >> 2]; //@line 10457
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$22 >> 2]; //@line 10458
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm, $__b, $$byval_copy30, $__err, $34); //@line 10459
    label = 26; //@line 10460
    break;
   }
  case 84:
   {
    HEAP32[$23 >> 2] = HEAP32[$__b >> 2]; //@line 10465
    HEAP32[$24 >> 2] = HEAP32[$__e >> 2]; //@line 10467
    HEAP32[$$byval_copy26 >> 2] = HEAP32[$23 >> 2]; //@line 10468
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$24 >> 2]; //@line 10469
    HEAP32[$__b >> 2] = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, 21645, 21653) | 0; //@line 10471
    label = 26; //@line 10472
    break;
   }
  case 119:
   {
    HEAP32[$25 >> 2] = HEAP32[$__e >> 2]; //@line 10478
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$25 >> 2]; //@line 10479
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 24 | 0, $__b, $$byval_copy30, $__err, $34); //@line 10480
    label = 26; //@line 10481
    break;
   }
  case 120:
   {
    $96 = HEAP32[(HEAP32[$this >> 2] | 0) + 20 >> 2] | 0; //@line 10487
    HEAP32[$26 >> 2] = HEAP32[$__b >> 2]; //@line 10489
    HEAP32[$27 >> 2] = HEAP32[$__e >> 2]; //@line 10491
    HEAP32[$$byval_copy26 >> 2] = HEAP32[$26 >> 2]; //@line 10492
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$27 >> 2]; //@line 10493
    $$sroa$07$0 = FUNCTION_TABLE_iiiiiii[$96 & 63]($this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm) | 0; //@line 10495
    break;
   }
  case 88:
   {
    $100 = $this + 8 | 0; //@line 10499
    $104 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$100 >> 2] | 0) + 24 >> 2] & 63]($100) | 0; //@line 10503
    HEAP32[$28 >> 2] = HEAP32[$__b >> 2]; //@line 10505
    HEAP32[$29 >> 2] = HEAP32[$__e >> 2]; //@line 10507
    $107 = HEAP8[$104 >> 0] | 0; //@line 10508
    $109 = ($107 & 1) == 0; //@line 10510
    $113 = $109 ? $104 + 1 | 0 : HEAP32[$104 + 8 >> 2] | 0; //@line 10514
    $119 = $113 + ($109 ? ($107 & 255) >>> 1 : HEAP32[$104 + 4 >> 2] | 0) | 0; //@line 10520
    HEAP32[$$byval_copy26 >> 2] = HEAP32[$28 >> 2]; //@line 10521
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$29 >> 2]; //@line 10522
    HEAP32[$__b >> 2] = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, $113, $119) | 0; //@line 10524
    label = 26; //@line 10525
    break;
   }
  case 121:
   {
    HEAP32[$30 >> 2] = HEAP32[$__e >> 2]; //@line 10531
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$30 >> 2]; //@line 10532
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 20 | 0, $__b, $$byval_copy30, $__err, $34); //@line 10533
    label = 26; //@line 10534
    break;
   }
  case 89:
   {
    HEAP32[$31 >> 2] = HEAP32[$__e >> 2]; //@line 10540
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$31 >> 2]; //@line 10541
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 20 | 0, $__b, $$byval_copy30, $__err, $34); //@line 10542
    label = 26; //@line 10543
    break;
   }
  case 37:
   {
    HEAP32[$32 >> 2] = HEAP32[$__e >> 2]; //@line 10548
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$32 >> 2]; //@line 10549
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this, $__b, $$byval_copy30, $__err, $34); //@line 10550
    label = 26; //@line 10551
    break;
   }
  default:
   {
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 10557
    label = 26; //@line 10558
   }
  }
 } while (0);
 if ((label | 0) == 26) {
  $$sroa$07$0 = HEAP32[$__b >> 2] | 0; //@line 10564
 }
 STACKTOP = sp; //@line 10566
 return $$sroa$07$0 | 0; //@line 10566
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $__b, $__e, $__iob, $__err, $__tm, $__fmtb, $__fmte) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmtb = $__fmtb | 0;
 $__fmte = $__fmte | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i20 = 0, $$0$i$i$i$i5 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i11 = 0, $$0$i$i1$i$i26 = 0, $$0$i$i17 = 0, $$0$ph$be = 0, $$0$ph89 = 0, $$0$pn = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$lcssa = 0, $$lcssa97 = 0, $$lcssa98 = 0, $$ph = 0, $$pre$i$i$i22 = 0, $$pre$i$i$i7 = 0, $$pre$i3$i$i13 = 0, $$pre$i3$i$i1344 = 0, $$pre$i3$i$i1345 = 0, $0 = 0, $1 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $118 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $139 = 0, $146 = 0, $157 = 0, $167 = 0, $170 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $2 = 0, $21 = 0, $23 = 0, $25 = 0, $3 = 0, $4 = 0, $41 = 0, $47 = 0, $48 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $62 = 0, $65 = 0, $79 = 0, $8 = 0, $9 = 0, $90 = 0, $92 = 0, $__cmd$0 = 0, $__opt$0 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11356
 STACKTOP = STACKTOP + 32 | 0; //@line 11357
 $$byval_copy1 = sp + 16 | 0; //@line 11358
 $$byval_copy = sp + 12 | 0; //@line 11359
 $0 = sp + 8 | 0; //@line 11360
 $1 = sp + 4 | 0; //@line 11361
 $2 = sp; //@line 11362
 $3 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 11363
 HEAP32[$0 >> 2] = $3; //@line 11364
 $4 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 9320) | 0; //@line 11365
 __ZNSt3__114__shared_count16__release_sharedEv($3) | 0; //@line 11366
 HEAP32[$__err >> 2] = 0; //@line 11367
 $6 = HEAP32[$__b >> 2] | 0; //@line 11369
 L1 : do {
  if (($__fmtb | 0) == ($__fmte | 0)) {
   $$pre$i$i$i22 = $6; //@line 11372
  } else {
   $$0$ph89 = $__fmtb; //@line 11374
   $8 = $6; //@line 11374
   L2 : while (1) {
    $9 = $8; //@line 11377
    if (!$8) {
     $126 = 0; //@line 11379
     $183 = 1; //@line 11379
     $58 = $9; //@line 11379
    } else {
     $11 = HEAP32[$8 + 12 >> 2] | 0; //@line 11382
     if (($11 | 0) == (HEAP32[$8 + 16 >> 2] | 0)) {
      $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$8 >> 2] | 0) + 36 >> 2] & 63]($8) | 0; //@line 11391
     } else {
      $$0$i$i$i$i = HEAP32[$11 >> 2] | 0; //@line 11394
     }
     if (($$0$i$i$i$i | 0) == -1) {
      HEAP32[$__b >> 2] = 0; //@line 11398
      $126 = 0; //@line 11399
      $183 = 1; //@line 11399
      $58 = 0; //@line 11399
     } else {
      $126 = $8; //@line 11401
      $183 = 0; //@line 11401
      $58 = $9; //@line 11401
     }
    }
    $21 = HEAP32[$__e >> 2] | 0; //@line 11404
    $23 = $21; //@line 11406
    do {
     if (!$21) {
      $$ph = $23; //@line 11409
      label = 14; //@line 11410
     } else {
      $25 = HEAP32[$21 + 12 >> 2] | 0; //@line 11413
      if (($25 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) {
       $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 63]($21) | 0; //@line 11422
      } else {
       $$0$i$i1$i$i = HEAP32[$25 >> 2] | 0; //@line 11425
      }
      if (($$0$i$i1$i$i | 0) == -1) {
       HEAP32[$__e >> 2] = 0; //@line 11429
       $$ph = 0; //@line 11430
       label = 14; //@line 11431
       break;
      } else {
       if ($183) {
        $184 = $21; //@line 11435
        $59 = $23; //@line 11435
        break;
       } else {
        $$lcssa = $126; //@line 11438
        label = 16; //@line 11439
        break L2;
       }
      }
     }
    } while (0);
    if ((label | 0) == 14) {
     label = 0; //@line 11446
     if ($183) {
      $$lcssa = $126; //@line 11448
      label = 16; //@line 11449
      break;
     } else {
      $184 = 0; //@line 11452
      $59 = $$ph; //@line 11452
     }
    }
    L24 : do {
     if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 52 >> 2] & 31]($4, HEAP32[$$0$ph89 >> 2] | 0, 0) | 0) << 24 >> 24 == 37) {
      $41 = $$0$ph89 + 4 | 0; //@line 11463
      if (($41 | 0) == ($__fmte | 0)) {
       $$lcssa97 = $126; //@line 11466
       label = 19; //@line 11467
       break L2;
      }
      $47 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 52 >> 2] & 31]($4, HEAP32[$41 >> 2] | 0, 0) | 0; //@line 11474
      switch ($47 << 24 >> 24) {
      case 48:
      case 69:
       {
        $48 = $$0$ph89 + 8 | 0; //@line 11477
        if (($48 | 0) == ($__fmte | 0)) {
         $$lcssa98 = $126; //@line 11480
         label = 22; //@line 11481
         break L2;
        }
        $62 = $41; //@line 11489
        $__cmd$0 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 52 >> 2] & 31]($4, HEAP32[$48 >> 2] | 0, 0) | 0; //@line 11489
        $__opt$0 = $47; //@line 11489
        break;
       }
      default:
       {
        $62 = $$0$ph89; //@line 11493
        $__cmd$0 = $47; //@line 11493
        $__opt$0 = 0; //@line 11493
       }
      }
      $57 = HEAP32[(HEAP32[$this >> 2] | 0) + 36 >> 2] | 0; //@line 11498
      HEAP32[$1 >> 2] = $58; //@line 11499
      HEAP32[$2 >> 2] = $59; //@line 11500
      HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 11501
      HEAP32[$$byval_copy1 >> 2] = HEAP32[$2 >> 2]; //@line 11502
      HEAP32[$__b >> 2] = FUNCTION_TABLE_iiiiiiiii[$57 & 15]($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__tm, $__cmd$0, $__opt$0) | 0; //@line 11504
      $$0$ph$be = $62 + 8 | 0; //@line 11506
     } else {
      if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] & 31]($4, 8192, HEAP32[$$0$ph89 >> 2] | 0) | 0) {
       $$0$pn = $$0$ph89; //@line 11514
      } else {
       $125 = $126 + 12 | 0; //@line 11516
       $127 = HEAP32[$125 >> 2] | 0; //@line 11517
       $128 = $126 + 16 | 0; //@line 11518
       if (($127 | 0) == (HEAP32[$128 >> 2] | 0)) {
        $$0$i$i17 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$126 >> 2] | 0) + 36 >> 2] & 63]($126) | 0; //@line 11526
       } else {
        $$0$i$i17 = HEAP32[$127 >> 2] | 0; //@line 11529
       }
       $139 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$4 >> 2] | 0) + 28 >> 2] & 15]($4, $$0$i$i17) | 0; //@line 11534
       if (($139 | 0) != (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$4 >> 2] | 0) + 28 >> 2] & 15]($4, HEAP32[$$0$ph89 >> 2] | 0) | 0)) {
        label = 59; //@line 11542
        break L2;
       }
       $146 = HEAP32[$125 >> 2] | 0; //@line 11545
       if (($146 | 0) == (HEAP32[$128 >> 2] | 0)) {
        FUNCTION_TABLE_ii[HEAP32[(HEAP32[$126 >> 2] | 0) + 40 >> 2] & 63]($126) | 0; //@line 11552
       } else {
        HEAP32[$125 >> 2] = $146 + 4; //@line 11555
       }
       $$0$ph$be = $$0$ph89 + 4 | 0; //@line 11558
       break;
      }
      while (1) {
       $$2 = $$0$pn + 4 | 0; //@line 11562
       if (($$2 | 0) == ($__fmte | 0)) {
        $$2$lcssa = $__fmte; //@line 11565
        break;
       }
       if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] & 31]($4, 8192, HEAP32[$$2 >> 2] | 0) | 0) {
        $$0$pn = $$2; //@line 11574
       } else {
        $$2$lcssa = $$2; //@line 11576
        break;
       }
      }
      $$pre$i$i$i7 = $126; //@line 11580
      $$pre$i3$i$i13 = $184; //@line 11580
      $90 = $184; //@line 11580
      while (1) {
       if (!$$pre$i$i$i7) {
        $102 = 1; //@line 11584
        $104 = 0; //@line 11584
       } else {
        $79 = HEAP32[$$pre$i$i$i7 + 12 >> 2] | 0; //@line 11587
        if (($79 | 0) == (HEAP32[$$pre$i$i$i7 + 16 >> 2] | 0)) {
         $$0$i$i$i$i5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i7 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i7) | 0; //@line 11596
        } else {
         $$0$i$i$i$i5 = HEAP32[$79 >> 2] | 0; //@line 11599
        }
        if (($$0$i$i$i$i5 | 0) == -1) {
         HEAP32[$__b >> 2] = 0; //@line 11603
         $102 = 1; //@line 11604
         $104 = 0; //@line 11604
        } else {
         $102 = 0; //@line 11606
         $104 = $$pre$i$i$i7; //@line 11606
        }
       }
       do {
        if (!$90) {
         $$pre$i3$i$i1345 = $$pre$i3$i$i13; //@line 11612
         label = 42; //@line 11613
        } else {
         $92 = HEAP32[$90 + 12 >> 2] | 0; //@line 11616
         if (($92 | 0) == (HEAP32[$90 + 16 >> 2] | 0)) {
          $$0$i$i1$i$i11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$90 >> 2] | 0) + 36 >> 2] & 63]($90) | 0; //@line 11625
         } else {
          $$0$i$i1$i$i11 = HEAP32[$92 >> 2] | 0; //@line 11628
         }
         if (($$0$i$i1$i$i11 | 0) == -1) {
          HEAP32[$__e >> 2] = 0; //@line 11632
          $$pre$i3$i$i1345 = 0; //@line 11633
          label = 42; //@line 11634
          break;
         } else {
          if ($102 ^ ($$pre$i3$i$i13 | 0) == 0) {
           $$pre$i3$i$i1344 = $$pre$i3$i$i13; //@line 11640
           $185 = $$pre$i3$i$i13; //@line 11640
           break;
          } else {
           $$0$ph$be = $$2$lcssa; //@line 11643
           break L24;
          }
         }
        }
       } while (0);
       if ((label | 0) == 42) {
        label = 0; //@line 11650
        if ($102) {
         $$0$ph$be = $$2$lcssa; //@line 11652
         break L24;
        } else {
         $$pre$i3$i$i1344 = $$pre$i3$i$i1345; //@line 11655
         $185 = 0; //@line 11655
        }
       }
       $103 = $104 + 12 | 0; //@line 11658
       $105 = HEAP32[$103 >> 2] | 0; //@line 11659
       $106 = $104 + 16 | 0; //@line 11660
       if (($105 | 0) == (HEAP32[$106 >> 2] | 0)) {
        $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$104 >> 2] | 0) + 36 >> 2] & 63]($104) | 0; //@line 11668
       } else {
        $$0$i$i = HEAP32[$105 >> 2] | 0; //@line 11671
       }
       if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] & 31]($4, 8192, $$0$i$i) | 0)) {
        $$0$ph$be = $$2$lcssa; //@line 11678
        break L24;
       }
       $118 = HEAP32[$103 >> 2] | 0; //@line 11681
       if (($118 | 0) == (HEAP32[$106 >> 2] | 0)) {
        FUNCTION_TABLE_ii[HEAP32[(HEAP32[$104 >> 2] | 0) + 40 >> 2] & 63]($104) | 0; //@line 11688
        $$pre$i$i$i7 = $104; //@line 11689
        $$pre$i3$i$i13 = $$pre$i3$i$i1344; //@line 11689
        $90 = $185; //@line 11689
        continue;
       } else {
        HEAP32[$103 >> 2] = $118 + 4; //@line 11693
        $$pre$i$i$i7 = $104; //@line 11694
        $$pre$i3$i$i13 = $$pre$i3$i$i1344; //@line 11694
        $90 = $185; //@line 11694
        continue;
       }
      }
     }
    } while (0);
    $65 = HEAP32[$__b >> 2] | 0; //@line 11704
    if (($$0$ph$be | 0) != ($__fmte | 0) & (HEAP32[$__err >> 2] | 0) == 0) {
     $$0$ph89 = $$0$ph$be; //@line 11706
     $8 = $65; //@line 11706
    } else {
     $$pre$i$i$i22 = $65; //@line 11708
     break L1;
    }
   }
   if ((label | 0) == 16) {
    HEAP32[$__err >> 2] = 4; //@line 11713
    $$pre$i$i$i22 = $$lcssa; //@line 11714
    break;
   } else if ((label | 0) == 19) {
    HEAP32[$__err >> 2] = 4; //@line 11718
    $$pre$i$i$i22 = $$lcssa97; //@line 11719
    break;
   } else if ((label | 0) == 22) {
    HEAP32[$__err >> 2] = 4; //@line 11723
    $$pre$i$i$i22 = $$lcssa98; //@line 11724
    break;
   } else if ((label | 0) == 59) {
    HEAP32[$__err >> 2] = 4; //@line 11728
    $$pre$i$i$i22 = HEAP32[$__b >> 2] | 0; //@line 11730
    break;
   }
  }
 } while (0);
 if (!$$pre$i$i$i22) {
  $182 = 0; //@line 11737
  $186 = 1; //@line 11737
 } else {
  $157 = HEAP32[$$pre$i$i$i22 + 12 >> 2] | 0; //@line 11740
  if (($157 | 0) == (HEAP32[$$pre$i$i$i22 + 16 >> 2] | 0)) {
   $$0$i$i$i$i20 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i22 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i22) | 0; //@line 11749
  } else {
   $$0$i$i$i$i20 = HEAP32[$157 >> 2] | 0; //@line 11752
  }
  if (($$0$i$i$i$i20 | 0) == -1) {
   HEAP32[$__b >> 2] = 0; //@line 11756
   $182 = 0; //@line 11757
   $186 = 1; //@line 11757
  } else {
   $182 = $$pre$i$i$i22; //@line 11759
   $186 = 0; //@line 11759
  }
 }
 $167 = HEAP32[$__e >> 2] | 0; //@line 11762
 do {
  if (!$167) {
   label = 72; //@line 11766
  } else {
   $170 = HEAP32[$167 + 12 >> 2] | 0; //@line 11769
   if (($170 | 0) == (HEAP32[$167 + 16 >> 2] | 0)) {
    $$0$i$i1$i$i26 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$167 >> 2] | 0) + 36 >> 2] & 63]($167) | 0; //@line 11778
   } else {
    $$0$i$i1$i$i26 = HEAP32[$170 >> 2] | 0; //@line 11781
   }
   if (($$0$i$i1$i$i26 | 0) == -1) {
    HEAP32[$__e >> 2] = 0; //@line 11785
    label = 72; //@line 11786
    break;
   } else {
    if ($186) {
     break;
    } else {
     label = 74; //@line 11792
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 72) {
  if ($186) {
   label = 74; //@line 11800
  }
 }
 if ((label | 0) == 74) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 11806
 }
 STACKTOP = sp; //@line 11808
 return $182 | 0; //@line 11808
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $__e, $__kb, $__ke, $__ct, $__err, $__case_sensitive) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__kb = $__kb | 0;
 $__ke = $__ke | 0;
 $__ct = $__ct | 0;
 $__err = $__err | 0;
 $__case_sensitive = $__case_sensitive | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$025 = 0, $$033 = 0, $$lcssa = 0, $$pre$i3$i$i = 0, $$pre$i3$i$i$lcssa = 0, $10 = 0, $101 = 0, $102 = 0, $103 = 0, $115 = 0, $123 = 0, $125 = 0, $130 = 0, $142 = 0, $162 = 0, $163 = 0, $18 = 0, $24 = 0, $27 = 0, $3 = 0, $37 = 0, $40 = 0, $5 = 0, $50 = 0, $51 = 0, $54 = 0, $56 = 0, $69 = 0, $79 = 0, $8 = 0, $80 = 0, $86 = 0, $9 = 0, $94 = 0, $__c$0 = 0, $__consume$0$off0$lcssa = 0, $__consume$0$off038 = 0, $__consume$1$off0 = 0, $__indx$0 = 0, $__kc$0 = 0, $__ky$052 = 0, $__ky1$039 = 0, $__ky2$046 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$050 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$3$lcssa = 0, $__n_does_match$335 = 0, $__n_does_match$4 = 0, $__n_does_match$544 = 0, $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$049 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$3$lcssa = 0, $__n_might_match$334 = 0, $__n_might_match$4 = 0, $__st$051 = 0, $__st$136 = 0, $__st$245 = 0, $__st$332 = 0, $__statbuf = 0, $__status$0 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10458
 STACKTOP = STACKTOP + 112 | 0; //@line 10459
 $__statbuf = sp; //@line 10460
 $3 = ($__ke - $__kb | 0) / 12 | 0; //@line 10464
 if ($3 >>> 0 > 100) {
  $5 = _malloc($3) | 0; //@line 10467
  if (!$5) {
   __ZSt17__throw_bad_allocv(); //@line 10470
  } else {
   $162 = $5; //@line 10473
   $__status$0 = $5; //@line 10473
  }
 } else {
  $162 = 0; //@line 10476
  $__status$0 = $__statbuf; //@line 10476
 }
 if (($__kb | 0) == ($__ke | 0)) {
  $__n_does_match$0$lcssa = 0; //@line 10480
  $__n_might_match$0$lcssa = $3; //@line 10480
 } else {
  $__ky$052 = $__kb; //@line 10482
  $__n_does_match$050 = 0; //@line 10482
  $__n_might_match$049 = $3; //@line 10482
  $__st$051 = $__status$0; //@line 10482
  while (1) {
   $10 = HEAP8[$__ky$052 >> 0] | 0; //@line 10484
   if (!($10 & 1)) {
    $18 = ($10 & 255) >>> 1; //@line 10490
   } else {
    $18 = HEAP32[$__ky$052 + 4 >> 2] | 0; //@line 10494
   }
   if (!$18) {
    HEAP8[$__st$051 >> 0] = 2; //@line 10498
    $__n_does_match$1 = $__n_does_match$050 + 1 | 0; //@line 10501
    $__n_might_match$1 = $__n_might_match$049 + -1 | 0; //@line 10501
   } else {
    HEAP8[$__st$051 >> 0] = 1; //@line 10503
    $__n_does_match$1 = $__n_does_match$050; //@line 10504
    $__n_might_match$1 = $__n_might_match$049; //@line 10504
   }
   $__ky$052 = $__ky$052 + 12 | 0; //@line 10506
   if (($__ky$052 | 0) == ($__ke | 0)) {
    $__n_does_match$0$lcssa = $__n_does_match$1; //@line 10510
    $__n_might_match$0$lcssa = $__n_might_match$1; //@line 10510
    break;
   } else {
    $__n_does_match$050 = $__n_does_match$1; //@line 10513
    $__n_might_match$049 = $__n_might_match$1; //@line 10513
    $__st$051 = $__st$051 + 1 | 0; //@line 10513
   }
  }
 }
 $8 = ($__kb | 0) == ($__ke | 0); //@line 10517
 $9 = ($__kb | 0) == ($__ke | 0); //@line 10518
 $__indx$0 = 0; //@line 10519
 $__n_does_match$2 = $__n_does_match$0$lcssa; //@line 10519
 $__n_might_match$2 = $__n_might_match$0$lcssa; //@line 10519
 L17 : while (1) {
  $24 = HEAP32[$__b >> 2] | 0; //@line 10521
  do {
   if (!$24) {
    $50 = 1; //@line 10525
   } else {
    $27 = HEAP32[$24 + 12 >> 2] | 0; //@line 10528
    if (($27 | 0) == (HEAP32[$24 + 16 >> 2] | 0)) {
     $$0$i$i$i$i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 36 >> 2] & 63]($24) | 0; //@line 10537
    } else {
     $$0$i$i$i$i3 = HEAP32[$27 >> 2] | 0; //@line 10540
    }
    if (($$0$i$i$i$i3 | 0) == -1) {
     HEAP32[$__b >> 2] = 0; //@line 10544
     $50 = 1; //@line 10545
     break;
    } else {
     $50 = (HEAP32[$__b >> 2] | 0) == 0; //@line 10550
     break;
    }
   }
  } while (0);
  $37 = HEAP32[$__e >> 2] | 0; //@line 10555
  if (!$37) {
   $$pre$i3$i$i = 0; //@line 10558
   $51 = 1; //@line 10558
  } else {
   $40 = HEAP32[$37 + 12 >> 2] | 0; //@line 10561
   if (($40 | 0) == (HEAP32[$37 + 16 >> 2] | 0)) {
    $$0$i$i1$i$i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$37 >> 2] | 0) + 36 >> 2] & 63]($37) | 0; //@line 10570
   } else {
    $$0$i$i1$i$i9 = HEAP32[$40 >> 2] | 0; //@line 10573
   }
   if (($$0$i$i1$i$i9 | 0) == -1) {
    HEAP32[$__e >> 2] = 0; //@line 10577
    $$pre$i3$i$i = 0; //@line 10578
    $51 = 1; //@line 10578
   } else {
    $$pre$i3$i$i = $37; //@line 10580
    $51 = 0; //@line 10580
   }
  }
  $54 = HEAP32[$__b >> 2] | 0; //@line 10586
  if (!(($__n_might_match$2 | 0) != 0 & ($50 ^ $51))) {
   $$lcssa = $54; //@line 10588
   $$pre$i3$i$i$lcssa = $$pre$i3$i$i; //@line 10588
   break;
  }
  $56 = HEAP32[$54 + 12 >> 2] | 0; //@line 10592
  if (($56 | 0) == (HEAP32[$54 + 16 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$54 >> 2] | 0) + 36 >> 2] & 63]($54) | 0; //@line 10601
  } else {
   $$0$i$i = HEAP32[$56 >> 2] | 0; //@line 10604
  }
  if ($__case_sensitive) {
   $__c$0 = $$0$i$i; //@line 10607
  } else {
   $__c$0 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 15]($__ct, $$0$i$i) | 0; //@line 10613
  }
  $69 = $__indx$0 + 1 | 0; //@line 10615
  if ($8) {
   $__consume$0$off0$lcssa = 0; //@line 10617
   $__n_does_match$3$lcssa = $__n_does_match$2; //@line 10617
   $__n_might_match$3$lcssa = $__n_might_match$2; //@line 10617
  } else {
   $__consume$0$off038 = 0; //@line 10619
   $__ky1$039 = $__kb; //@line 10619
   $__n_does_match$335 = $__n_does_match$2; //@line 10619
   $__n_might_match$334 = $__n_might_match$2; //@line 10619
   $__st$136 = $__status$0; //@line 10619
   while (1) {
    do {
     if ((HEAP8[$__st$136 >> 0] | 0) == 1) {
      if (!(HEAP8[$__ky1$039 >> 0] & 1)) {
       $79 = $__ky1$039 + 4 | 0; //@line 10630
      } else {
       $79 = HEAP32[$__ky1$039 + 8 >> 2] | 0; //@line 10634
      }
      $80 = HEAP32[$79 + ($__indx$0 << 2) >> 2] | 0; //@line 10637
      if ($__case_sensitive) {
       $__kc$0 = $80; //@line 10639
      } else {
       $__kc$0 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 15]($__ct, $80) | 0; //@line 10645
      }
      if (($__c$0 | 0) != ($__kc$0 | 0)) {
       HEAP8[$__st$136 >> 0] = 0; //@line 10649
       $__consume$1$off0 = $__consume$0$off038; //@line 10651
       $__n_does_match$4 = $__n_does_match$335; //@line 10651
       $__n_might_match$4 = $__n_might_match$334 + -1 | 0; //@line 10651
       break;
      }
      $86 = HEAP8[$__ky1$039 >> 0] | 0; //@line 10654
      if (!($86 & 1)) {
       $94 = ($86 & 255) >>> 1; //@line 10660
      } else {
       $94 = HEAP32[$__ky1$039 + 4 >> 2] | 0; //@line 10664
      }
      if (($94 | 0) == ($69 | 0)) {
       HEAP8[$__st$136 >> 0] = 2; //@line 10668
       $__consume$1$off0 = 1; //@line 10671
       $__n_does_match$4 = $__n_does_match$335 + 1 | 0; //@line 10671
       $__n_might_match$4 = $__n_might_match$334 + -1 | 0; //@line 10671
      } else {
       $__consume$1$off0 = 1; //@line 10673
       $__n_does_match$4 = $__n_does_match$335; //@line 10673
       $__n_might_match$4 = $__n_might_match$334; //@line 10673
      }
     } else {
      $__consume$1$off0 = $__consume$0$off038; //@line 10676
      $__n_does_match$4 = $__n_does_match$335; //@line 10676
      $__n_might_match$4 = $__n_might_match$334; //@line 10676
     }
    } while (0);
    $__ky1$039 = $__ky1$039 + 12 | 0; //@line 10679
    if (($__ky1$039 | 0) == ($__ke | 0)) {
     $__consume$0$off0$lcssa = $__consume$1$off0; //@line 10683
     $__n_does_match$3$lcssa = $__n_does_match$4; //@line 10683
     $__n_might_match$3$lcssa = $__n_might_match$4; //@line 10683
     break;
    } else {
     $__consume$0$off038 = $__consume$1$off0; //@line 10686
     $__n_does_match$335 = $__n_does_match$4; //@line 10686
     $__n_might_match$334 = $__n_might_match$4; //@line 10686
     $__st$136 = $__st$136 + 1 | 0; //@line 10686
    }
   }
  }
  if (!$__consume$0$off0$lcssa) {
   $__indx$0 = $69; //@line 10691
   $__n_does_match$2 = $__n_does_match$3$lcssa; //@line 10691
   $__n_might_match$2 = $__n_might_match$3$lcssa; //@line 10691
   continue;
  }
  $101 = HEAP32[$__b >> 2] | 0; //@line 10694
  $102 = $101 + 12 | 0; //@line 10695
  $103 = HEAP32[$102 >> 2] | 0; //@line 10696
  if (($103 | 0) == (HEAP32[$101 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$101 >> 2] | 0) + 40 >> 2] & 63]($101) | 0; //@line 10704
  } else {
   HEAP32[$102 >> 2] = $103 + 4; //@line 10707
  }
  if (($__n_does_match$3$lcssa + $__n_might_match$3$lcssa | 0) >>> 0 < 2 | $9) {
   $__indx$0 = $69; //@line 10713
   $__n_does_match$2 = $__n_does_match$3$lcssa; //@line 10713
   $__n_might_match$2 = $__n_might_match$3$lcssa; //@line 10713
   continue;
  } else {
   $__ky2$046 = $__kb; //@line 10716
   $__n_does_match$544 = $__n_does_match$3$lcssa; //@line 10716
   $__st$245 = $__status$0; //@line 10716
  }
  while (1) {
   if ((HEAP8[$__st$245 >> 0] | 0) == 2) {
    $115 = HEAP8[$__ky2$046 >> 0] | 0; //@line 10722
    if (!($115 & 1)) {
     $123 = ($115 & 255) >>> 1; //@line 10728
    } else {
     $123 = HEAP32[$__ky2$046 + 4 >> 2] | 0; //@line 10732
    }
    if (($123 | 0) == ($69 | 0)) {
     $__n_does_match$6 = $__n_does_match$544; //@line 10736
    } else {
     HEAP8[$__st$245 >> 0] = 0; //@line 10738
     $__n_does_match$6 = $__n_does_match$544 + -1 | 0; //@line 10740
    }
   } else {
    $__n_does_match$6 = $__n_does_match$544; //@line 10743
   }
   $125 = $__ky2$046 + 12 | 0; //@line 10745
   if (($125 | 0) == ($__ke | 0)) {
    $__indx$0 = $69; //@line 10749
    $__n_does_match$2 = $__n_does_match$6; //@line 10749
    $__n_might_match$2 = $__n_might_match$3$lcssa; //@line 10749
    continue L17;
   } else {
    $__ky2$046 = $125; //@line 10752
    $__n_does_match$544 = $__n_does_match$6; //@line 10752
    $__st$245 = $__st$245 + 1 | 0; //@line 10752
   }
  }
 }
 do {
  if (!$$lcssa) {
   $163 = 1; //@line 10759
  } else {
   $130 = HEAP32[$$lcssa + 12 >> 2] | 0; //@line 10762
   if (($130 | 0) == (HEAP32[$$lcssa + 16 >> 2] | 0)) {
    $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 36 >> 2] & 63]($$lcssa) | 0; //@line 10771
   } else {
    $$0$i$i$i$i = HEAP32[$130 >> 2] | 0; //@line 10774
   }
   if (($$0$i$i$i$i | 0) == -1) {
    HEAP32[$__b >> 2] = 0; //@line 10778
    $163 = 1; //@line 10779
    break;
   } else {
    $163 = (HEAP32[$__b >> 2] | 0) == 0; //@line 10784
    break;
   }
  }
 } while (0);
 do {
  if (!$$pre$i3$i$i$lcssa) {
   label = 72; //@line 10792
  } else {
   $142 = HEAP32[$$pre$i3$i$i$lcssa + 12 >> 2] | 0; //@line 10795
   if (($142 | 0) == (HEAP32[$$pre$i3$i$i$lcssa + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i$lcssa) | 0; //@line 10804
   } else {
    $$0$i$i1$i$i = HEAP32[$142 >> 2] | 0; //@line 10807
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$__e >> 2] = 0; //@line 10811
    label = 72; //@line 10812
    break;
   } else {
    if ($163) {
     break;
    } else {
     label = 74; //@line 10818
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 72) {
  if ($163) {
   label = 74; //@line 10826
  }
 }
 if ((label | 0) == 74) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 10832
 }
 L107 : do {
  if (($__kb | 0) == ($__ke | 0)) {
   label = 78; //@line 10837
  } else {
   $$033 = $__kb; //@line 10839
   $__st$332 = $__status$0; //@line 10839
   while (1) {
    if ((HEAP8[$__st$332 >> 0] | 0) == 2) {
     $$025 = $$033; //@line 10844
     break L107;
    }
    $$033 = $$033 + 12 | 0; //@line 10847
    if (($$033 | 0) == ($__ke | 0)) {
     label = 78; //@line 10851
     break;
    } else {
     $__st$332 = $__st$332 + 1 | 0; //@line 10854
    }
   }
  }
 } while (0);
 if ((label | 0) == 78) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 10862
  $$025 = $__ke; //@line 10863
 }
 _free($162); //@line 10865
 STACKTOP = sp; //@line 10866
 return $$025 | 0; //@line 10866
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $__b, $__e, $__iob, $__err, $__tm, $__fmtb, $__fmte) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmtb = $__fmtb | 0;
 $__fmte = $__fmte | 0;
 var $$0$i$i = 0, $$0$i$i26 = 0, $$0$ph$be = 0, $$0$ph86 = 0, $$0$pn = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$lcssa = 0, $$lcssa94 = 0, $$lcssa95 = 0, $$pre$i$i$i17 = 0, $$pre$i$i$i8 = 0, $$pre$i2$i$i21 = 0, $$pre$i2$i$i2139 = 0, $$pre$i2$i$i2140 = 0, $0 = 0, $1 = 0, $10 = 0, $107 = 0, $108 = 0, $109 = 0, $125 = 0, $132 = 0, $133 = 0, $134 = 0, $147 = 0, $154 = 0, $174 = 0, $175 = 0, $176 = 0, $190 = 0, $191 = 0, $192 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $3 = 0, $4 = 0, $42 = 0, $48 = 0, $49 = 0, $5 = 0, $58 = 0, $59 = 0, $60 = 0, $63 = 0, $66 = 0, $67 = 0, $69 = 0, $7 = 0, $75 = 0, $9 = 0, $92 = 0, $93 = 0, $95 = 0, $__cmd$0 = 0, $__opt$0 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9506
 STACKTOP = STACKTOP + 32 | 0; //@line 9507
 $$byval_copy1 = sp + 16 | 0; //@line 9508
 $$byval_copy = sp + 12 | 0; //@line 9509
 $0 = sp + 8 | 0; //@line 9510
 $1 = sp + 4 | 0; //@line 9511
 $2 = sp; //@line 9512
 $3 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 9513
 HEAP32[$0 >> 2] = $3; //@line 9514
 $4 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 9328) | 0; //@line 9515
 __ZNSt3__114__shared_count16__release_sharedEv($3) | 0; //@line 9516
 HEAP32[$__err >> 2] = 0; //@line 9517
 $5 = $4 + 8 | 0; //@line 9518
 $7 = HEAP32[$__b >> 2] | 0; //@line 9520
 L1 : do {
  if (($__fmtb | 0) == ($__fmte | 0)) {
   $$pre$i$i$i8 = $7; //@line 9523
  } else {
   $$0$ph86 = $__fmtb; //@line 9525
   $9 = $7; //@line 9525
   L2 : while (1) {
    $10 = $9; //@line 9528
    if (!$9) {
     $22 = 0; //@line 9530
     $59 = $10; //@line 9530
    } else {
     if ((HEAP32[$9 + 12 >> 2] | 0) == (HEAP32[$9 + 16 >> 2] | 0)) {
      if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 36 >> 2] & 63]($9) | 0) == -1) {
       HEAP32[$__b >> 2] = 0; //@line 9544
       $22 = 0; //@line 9545
       $59 = 0; //@line 9545
      } else {
       $22 = $9; //@line 9547
       $59 = $10; //@line 9547
      }
     } else {
      $22 = $9; //@line 9550
      $59 = $10; //@line 9550
     }
    }
    $21 = ($22 | 0) == 0; //@line 9553
    $23 = HEAP32[$__e >> 2] | 0; //@line 9554
    $25 = $23; //@line 9556
    do {
     if (!$23) {
      $190 = $25; //@line 9559
      label = 11; //@line 9560
     } else {
      if ((HEAP32[$23 + 12 >> 2] | 0) == (HEAP32[$23 + 16 >> 2] | 0)) {
       if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$23 >> 2] | 0) + 36 >> 2] & 63]($23) | 0) == -1) {
        HEAP32[$__e >> 2] = 0; //@line 9574
        $190 = 0; //@line 9575
        label = 11; //@line 9576
        break;
       }
      }
      if ($21) {
       $191 = $23; //@line 9581
       $60 = $25; //@line 9581
      } else {
       $$lcssa = $22; //@line 9583
       label = 12; //@line 9584
       break L2;
      }
     }
    } while (0);
    if ((label | 0) == 11) {
     label = 0; //@line 9590
     if ($21) {
      $$lcssa = $22; //@line 9592
      label = 12; //@line 9593
      break;
     } else {
      $191 = 0; //@line 9596
      $60 = $190; //@line 9596
     }
    }
    L18 : do {
     if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 31]($4, HEAP8[$$0$ph86 >> 0] | 0, 0) | 0) << 24 >> 24 == 37) {
      $42 = $$0$ph86 + 1 | 0; //@line 9607
      if (($42 | 0) == ($__fmte | 0)) {
       $$lcssa94 = $22; //@line 9610
       label = 15; //@line 9611
       break L2;
      }
      $48 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 31]($4, HEAP8[$42 >> 0] | 0, 0) | 0; //@line 9618
      switch ($48 << 24 >> 24) {
      case 48:
      case 69:
       {
        $49 = $$0$ph86 + 2 | 0; //@line 9621
        if (($49 | 0) == ($__fmte | 0)) {
         $$lcssa95 = $22; //@line 9624
         label = 18; //@line 9625
         break L2;
        }
        $63 = $42; //@line 9633
        $__cmd$0 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 31]($4, HEAP8[$49 >> 0] | 0, 0) | 0; //@line 9633
        $__opt$0 = $48; //@line 9633
        break;
       }
      default:
       {
        $63 = $$0$ph86; //@line 9637
        $__cmd$0 = $48; //@line 9637
        $__opt$0 = 0; //@line 9637
       }
      }
      $58 = HEAP32[(HEAP32[$this >> 2] | 0) + 36 >> 2] | 0; //@line 9642
      HEAP32[$1 >> 2] = $59; //@line 9643
      HEAP32[$2 >> 2] = $60; //@line 9644
      HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 9645
      HEAP32[$$byval_copy1 >> 2] = HEAP32[$2 >> 2]; //@line 9646
      HEAP32[$__b >> 2] = FUNCTION_TABLE_iiiiiiiii[$58 & 15]($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__tm, $__cmd$0, $__opt$0) | 0; //@line 9648
      $$0$ph$be = $63 + 2 | 0; //@line 9650
     } else {
      $67 = HEAP8[$$0$ph86 >> 0] | 0; //@line 9652
      if ($67 << 24 >> 24 > -1) {
       $69 = HEAP32[$5 >> 2] | 0; //@line 9656
       if (HEAP16[$69 + ($67 << 24 >> 24 << 1) >> 1] & 8192) {
        $$0$pn = $$0$ph86; //@line 9662
        while (1) {
         $$2 = $$0$pn + 1 | 0; //@line 9664
         if (($$2 | 0) == ($__fmte | 0)) {
          $$2$lcssa = $__fmte; //@line 9667
          break;
         }
         $75 = HEAP8[$$2 >> 0] | 0; //@line 9670
         if ($75 << 24 >> 24 <= -1) {
          $$2$lcssa = $$2; //@line 9673
          break;
         }
         if (!(HEAP16[$69 + ($75 << 24 >> 24 << 1) >> 1] & 8192)) {
          $$2$lcssa = $$2; //@line 9682
          break;
         } else {
          $$0$pn = $$2; //@line 9685
         }
        }
        $$pre$i$i$i17 = $22; //@line 9688
        $$pre$i2$i$i21 = $191; //@line 9688
        $95 = $191; //@line 9688
        while (1) {
         if (!$$pre$i$i$i17) {
          $93 = 0; //@line 9692
         } else {
          if ((HEAP32[$$pre$i$i$i17 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i17 + 16 >> 2] | 0)) {
           if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i17 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i17) | 0) == -1) {
            HEAP32[$__b >> 2] = 0; //@line 9706
            $93 = 0; //@line 9707
           } else {
            $93 = $$pre$i$i$i17; //@line 9709
           }
          } else {
           $93 = $$pre$i$i$i17; //@line 9712
          }
         }
         $92 = ($93 | 0) == 0; //@line 9715
         do {
          if (!$95) {
           $$pre$i2$i$i2140 = $$pre$i2$i$i21; //@line 9719
           label = 37; //@line 9720
          } else {
           if ((HEAP32[$95 + 12 >> 2] | 0) != (HEAP32[$95 + 16 >> 2] | 0)) {
            if ($92) {
             $$pre$i2$i$i2139 = $$pre$i2$i$i21; //@line 9729
             $192 = $95; //@line 9729
             break;
            } else {
             $$0$ph$be = $$2$lcssa; //@line 9732
             break L18;
            }
           }
           if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$95 >> 2] | 0) + 36 >> 2] & 63]($95) | 0) == -1) {
            HEAP32[$__e >> 2] = 0; //@line 9742
            $$pre$i2$i$i2140 = 0; //@line 9743
            label = 37; //@line 9744
            break;
           } else {
            if ($92 ^ ($$pre$i2$i$i21 | 0) == 0) {
             $$pre$i2$i$i2139 = $$pre$i2$i$i21; //@line 9750
             $192 = $$pre$i2$i$i21; //@line 9750
             break;
            } else {
             $$0$ph$be = $$2$lcssa; //@line 9753
             break L18;
            }
           }
          }
         } while (0);
         if ((label | 0) == 37) {
          label = 0; //@line 9760
          if ($92) {
           $$0$ph$be = $$2$lcssa; //@line 9762
           break L18;
          } else {
           $$pre$i2$i$i2139 = $$pre$i2$i$i2140; //@line 9765
           $192 = 0; //@line 9765
          }
         }
         $107 = $93 + 12 | 0; //@line 9768
         $108 = HEAP32[$107 >> 2] | 0; //@line 9769
         $109 = $93 + 16 | 0; //@line 9770
         if (($108 | 0) == (HEAP32[$109 >> 2] | 0)) {
          $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$93 >> 2] | 0) + 36 >> 2] & 63]($93) | 0; //@line 9778
         } else {
          $$0$i$i = HEAPU8[$108 >> 0] | 0; //@line 9782
         }
         if (($$0$i$i & 255) << 24 >> 24 <= -1) {
          $$0$ph$be = $$2$lcssa; //@line 9787
          break L18;
         }
         if (!(HEAP16[(HEAP32[$5 >> 2] | 0) + ($$0$i$i << 24 >> 24 << 1) >> 1] & 8192)) {
          $$0$ph$be = $$2$lcssa; //@line 9798
          break L18;
         }
         $125 = HEAP32[$107 >> 2] | 0; //@line 9801
         if (($125 | 0) == (HEAP32[$109 >> 2] | 0)) {
          FUNCTION_TABLE_ii[HEAP32[(HEAP32[$93 >> 2] | 0) + 40 >> 2] & 63]($93) | 0; //@line 9808
          $$pre$i$i$i17 = $93; //@line 9809
          $$pre$i2$i$i21 = $$pre$i2$i$i2139; //@line 9809
          $95 = $192; //@line 9809
          continue;
         } else {
          HEAP32[$107 >> 2] = $125 + 1; //@line 9813
          $$pre$i$i$i17 = $93; //@line 9814
          $$pre$i2$i$i21 = $$pre$i2$i$i2139; //@line 9814
          $95 = $192; //@line 9814
          continue;
         }
        }
       }
      }
      $132 = $22 + 12 | 0; //@line 9820
      $133 = HEAP32[$132 >> 2] | 0; //@line 9821
      $134 = $22 + 16 | 0; //@line 9822
      if (($133 | 0) == (HEAP32[$134 >> 2] | 0)) {
       $$0$i$i26 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 63]($22) | 0; //@line 9830
      } else {
       $$0$i$i26 = HEAPU8[$133 >> 0] | 0; //@line 9834
      }
      $147 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] & 15]($4, $$0$i$i26 & 255) | 0; //@line 9840
      if ($147 << 24 >> 24 != (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] & 15]($4, HEAP8[$$0$ph86 >> 0] | 0) | 0) << 24 >> 24) {
       label = 55; //@line 9848
       break L2;
      }
      $154 = HEAP32[$132 >> 2] | 0; //@line 9851
      if (($154 | 0) == (HEAP32[$134 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 40 >> 2] & 63]($22) | 0; //@line 9858
      } else {
       HEAP32[$132 >> 2] = $154 + 1; //@line 9861
      }
      $$0$ph$be = $$0$ph86 + 1 | 0; //@line 9864
     }
    } while (0);
    $66 = HEAP32[$__b >> 2] | 0; //@line 9871
    if (($$0$ph$be | 0) != ($__fmte | 0) & (HEAP32[$__err >> 2] | 0) == 0) {
     $$0$ph86 = $$0$ph$be; //@line 9873
     $9 = $66; //@line 9873
    } else {
     $$pre$i$i$i8 = $66; //@line 9875
     break L1;
    }
   }
   if ((label | 0) == 12) {
    HEAP32[$__err >> 2] = 4; //@line 9880
    $$pre$i$i$i8 = $$lcssa; //@line 9881
    break;
   } else if ((label | 0) == 15) {
    HEAP32[$__err >> 2] = 4; //@line 9885
    $$pre$i$i$i8 = $$lcssa94; //@line 9886
    break;
   } else if ((label | 0) == 18) {
    HEAP32[$__err >> 2] = 4; //@line 9890
    $$pre$i$i$i8 = $$lcssa95; //@line 9891
    break;
   } else if ((label | 0) == 55) {
    HEAP32[$__err >> 2] = 4; //@line 9895
    $$pre$i$i$i8 = HEAP32[$__b >> 2] | 0; //@line 9897
    break;
   }
  }
 } while (0);
 if (!$$pre$i$i$i8) {
  $175 = 0; //@line 9904
 } else {
  if ((HEAP32[$$pre$i$i$i8 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i8 + 16 >> 2] | 0)) {
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i8 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i8) | 0) == -1) {
    HEAP32[$__b >> 2] = 0; //@line 9918
    $175 = 0; //@line 9919
   } else {
    $175 = $$pre$i$i$i8; //@line 9921
   }
  } else {
   $175 = $$pre$i$i$i8; //@line 9924
  }
 }
 $174 = ($175 | 0) == 0; //@line 9927
 $176 = HEAP32[$__e >> 2] | 0; //@line 9928
 do {
  if (!$176) {
   label = 65; //@line 9932
  } else {
   if ((HEAP32[$176 + 12 >> 2] | 0) == (HEAP32[$176 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$176 >> 2] | 0) + 36 >> 2] & 63]($176) | 0) == -1) {
     HEAP32[$__e >> 2] = 0; //@line 9946
     label = 65; //@line 9947
     break;
    }
   }
   if (!$174) {
    label = 66; //@line 9952
   }
  }
 } while (0);
 if ((label | 0) == 65) {
  if ($174) {
   label = 66; //@line 9958
  }
 }
 if ((label | 0) == 66) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 9964
 }
 STACKTOP = sp; //@line 9966
 return $175 | 0; //@line 9966
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $__e, $__kb, $__ke, $__ct, $__err, $__case_sensitive) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__kb = $__kb | 0;
 $__ke = $__ke | 0;
 $__ct = $__ct | 0;
 $__err = $__err | 0;
 $__case_sensitive = $__case_sensitive | 0;
 var $$0$i$i = 0, $$021 = 0, $$033 = 0, $$lcssa = 0, $$lcssa59 = 0, $$pre$i2$i$i = 0, $$pre$i2$i$i$lcssa = 0, $10 = 0, $102 = 0, $103 = 0, $104 = 0, $116 = 0, $124 = 0, $126 = 0, $140 = 0, $141 = 0, $162 = 0, $18 = 0, $24 = 0, $3 = 0, $36 = 0, $37 = 0, $38 = 0, $5 = 0, $50 = 0, $53 = 0, $55 = 0, $65 = 0, $70 = 0, $8 = 0, $80 = 0, $81 = 0, $87 = 0, $9 = 0, $95 = 0, $__c$0 = 0, $__consume$0$off0$lcssa = 0, $__consume$0$off038 = 0, $__consume$1$off0 = 0, $__indx$0 = 0, $__kc$0 = 0, $__ky$052 = 0, $__ky1$039 = 0, $__ky2$046 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$050 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$3$lcssa = 0, $__n_does_match$335 = 0, $__n_does_match$4 = 0, $__n_does_match$544 = 0, $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$049 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$3$lcssa = 0, $__n_might_match$334 = 0, $__n_might_match$4 = 0, $__st$051 = 0, $__st$136 = 0, $__st$245 = 0, $__st$332 = 0, $__statbuf = 0, $__status$0 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7206
 STACKTOP = STACKTOP + 112 | 0; //@line 7207
 $__statbuf = sp; //@line 7208
 $3 = ($__ke - $__kb | 0) / 12 | 0; //@line 7212
 if ($3 >>> 0 > 100) {
  $5 = _malloc($3) | 0; //@line 7215
  if (!$5) {
   __ZSt17__throw_bad_allocv(); //@line 7218
  } else {
   $162 = $5; //@line 7221
   $__status$0 = $5; //@line 7221
  }
 } else {
  $162 = 0; //@line 7224
  $__status$0 = $__statbuf; //@line 7224
 }
 if (($__kb | 0) == ($__ke | 0)) {
  $__n_does_match$0$lcssa = 0; //@line 7228
  $__n_might_match$0$lcssa = $3; //@line 7228
 } else {
  $__ky$052 = $__kb; //@line 7230
  $__n_does_match$050 = 0; //@line 7230
  $__n_might_match$049 = $3; //@line 7230
  $__st$051 = $__status$0; //@line 7230
  while (1) {
   $10 = HEAP8[$__ky$052 >> 0] | 0; //@line 7232
   if (!($10 & 1)) {
    $18 = ($10 & 255) >>> 1; //@line 7238
   } else {
    $18 = HEAP32[$__ky$052 + 4 >> 2] | 0; //@line 7242
   }
   if (!$18) {
    HEAP8[$__st$051 >> 0] = 2; //@line 7246
    $__n_does_match$1 = $__n_does_match$050 + 1 | 0; //@line 7249
    $__n_might_match$1 = $__n_might_match$049 + -1 | 0; //@line 7249
   } else {
    HEAP8[$__st$051 >> 0] = 1; //@line 7251
    $__n_does_match$1 = $__n_does_match$050; //@line 7252
    $__n_might_match$1 = $__n_might_match$049; //@line 7252
   }
   $__ky$052 = $__ky$052 + 12 | 0; //@line 7254
   if (($__ky$052 | 0) == ($__ke | 0)) {
    $__n_does_match$0$lcssa = $__n_does_match$1; //@line 7258
    $__n_might_match$0$lcssa = $__n_might_match$1; //@line 7258
    break;
   } else {
    $__n_does_match$050 = $__n_does_match$1; //@line 7261
    $__n_might_match$049 = $__n_might_match$1; //@line 7261
    $__st$051 = $__st$051 + 1 | 0; //@line 7261
   }
  }
 }
 $8 = ($__kb | 0) == ($__ke | 0); //@line 7265
 $9 = ($__kb | 0) == ($__ke | 0); //@line 7266
 $__indx$0 = 0; //@line 7267
 $__n_does_match$2 = $__n_does_match$0$lcssa; //@line 7267
 $__n_might_match$2 = $__n_might_match$0$lcssa; //@line 7267
 L17 : while (1) {
  $24 = HEAP32[$__b >> 2] | 0; //@line 7269
  do {
   if (!$24) {
    $37 = 0; //@line 7273
   } else {
    if ((HEAP32[$24 + 12 >> 2] | 0) == (HEAP32[$24 + 16 >> 2] | 0)) {
     if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 36 >> 2] & 63]($24) | 0) == -1) {
      HEAP32[$__b >> 2] = 0; //@line 7287
      $37 = 0; //@line 7288
      break;
     } else {
      $37 = HEAP32[$__b >> 2] | 0; //@line 7292
      break;
     }
    } else {
     $37 = $24; //@line 7296
    }
   }
  } while (0);
  $36 = ($37 | 0) == 0; //@line 7300
  $38 = HEAP32[$__e >> 2] | 0; //@line 7301
  if (!$38) {
   $$pre$i2$i$i = 0; //@line 7304
  } else {
   if ((HEAP32[$38 + 12 >> 2] | 0) == (HEAP32[$38 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$38 >> 2] | 0) + 36 >> 2] & 63]($38) | 0) == -1) {
     HEAP32[$__e >> 2] = 0; //@line 7318
     $$pre$i2$i$i = 0; //@line 7319
    } else {
     $$pre$i2$i$i = $38; //@line 7321
    }
   } else {
    $$pre$i2$i$i = $38; //@line 7324
   }
  }
  $50 = ($$pre$i2$i$i | 0) == 0; //@line 7327
  $53 = HEAP32[$__b >> 2] | 0; //@line 7331
  if (!(($__n_might_match$2 | 0) != 0 & ($36 ^ $50))) {
   $$lcssa = $50; //@line 7333
   $$lcssa59 = $53; //@line 7333
   $$pre$i2$i$i$lcssa = $$pre$i2$i$i; //@line 7333
   break;
  }
  $55 = HEAP32[$53 + 12 >> 2] | 0; //@line 7337
  if (($55 | 0) == (HEAP32[$53 + 16 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$53 >> 2] | 0) + 36 >> 2] & 63]($53) | 0; //@line 7346
  } else {
   $$0$i$i = HEAPU8[$55 >> 0] | 0; //@line 7350
  }
  $65 = $$0$i$i & 255; //@line 7352
  if ($__case_sensitive) {
   $__c$0 = $65; //@line 7354
  } else {
   $__c$0 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 15]($__ct, $65) | 0; //@line 7360
  }
  $70 = $__indx$0 + 1 | 0; //@line 7362
  if ($8) {
   $__consume$0$off0$lcssa = 0; //@line 7364
   $__n_does_match$3$lcssa = $__n_does_match$2; //@line 7364
   $__n_might_match$3$lcssa = $__n_might_match$2; //@line 7364
  } else {
   $__consume$0$off038 = 0; //@line 7366
   $__ky1$039 = $__kb; //@line 7366
   $__n_does_match$335 = $__n_does_match$2; //@line 7366
   $__n_might_match$334 = $__n_might_match$2; //@line 7366
   $__st$136 = $__status$0; //@line 7366
   while (1) {
    do {
     if ((HEAP8[$__st$136 >> 0] | 0) == 1) {
      if (!(HEAP8[$__ky1$039 >> 0] & 1)) {
       $80 = $__ky1$039 + 1 | 0; //@line 7377
      } else {
       $80 = HEAP32[$__ky1$039 + 8 >> 2] | 0; //@line 7381
      }
      $81 = HEAP8[$80 + $__indx$0 >> 0] | 0; //@line 7384
      if ($__case_sensitive) {
       $__kc$0 = $81; //@line 7386
      } else {
       $__kc$0 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 15]($__ct, $81) | 0; //@line 7392
      }
      if ($__c$0 << 24 >> 24 != $__kc$0 << 24 >> 24) {
       HEAP8[$__st$136 >> 0] = 0; //@line 7396
       $__consume$1$off0 = $__consume$0$off038; //@line 7398
       $__n_does_match$4 = $__n_does_match$335; //@line 7398
       $__n_might_match$4 = $__n_might_match$334 + -1 | 0; //@line 7398
       break;
      }
      $87 = HEAP8[$__ky1$039 >> 0] | 0; //@line 7401
      if (!($87 & 1)) {
       $95 = ($87 & 255) >>> 1; //@line 7407
      } else {
       $95 = HEAP32[$__ky1$039 + 4 >> 2] | 0; //@line 7411
      }
      if (($95 | 0) == ($70 | 0)) {
       HEAP8[$__st$136 >> 0] = 2; //@line 7415
       $__consume$1$off0 = 1; //@line 7418
       $__n_does_match$4 = $__n_does_match$335 + 1 | 0; //@line 7418
       $__n_might_match$4 = $__n_might_match$334 + -1 | 0; //@line 7418
      } else {
       $__consume$1$off0 = 1; //@line 7420
       $__n_does_match$4 = $__n_does_match$335; //@line 7420
       $__n_might_match$4 = $__n_might_match$334; //@line 7420
      }
     } else {
      $__consume$1$off0 = $__consume$0$off038; //@line 7423
      $__n_does_match$4 = $__n_does_match$335; //@line 7423
      $__n_might_match$4 = $__n_might_match$334; //@line 7423
     }
    } while (0);
    $__ky1$039 = $__ky1$039 + 12 | 0; //@line 7426
    if (($__ky1$039 | 0) == ($__ke | 0)) {
     $__consume$0$off0$lcssa = $__consume$1$off0; //@line 7430
     $__n_does_match$3$lcssa = $__n_does_match$4; //@line 7430
     $__n_might_match$3$lcssa = $__n_might_match$4; //@line 7430
     break;
    } else {
     $__consume$0$off038 = $__consume$1$off0; //@line 7433
     $__n_does_match$335 = $__n_does_match$4; //@line 7433
     $__n_might_match$334 = $__n_might_match$4; //@line 7433
     $__st$136 = $__st$136 + 1 | 0; //@line 7433
    }
   }
  }
  if (!$__consume$0$off0$lcssa) {
   $__indx$0 = $70; //@line 7438
   $__n_does_match$2 = $__n_does_match$3$lcssa; //@line 7438
   $__n_might_match$2 = $__n_might_match$3$lcssa; //@line 7438
   continue;
  }
  $102 = HEAP32[$__b >> 2] | 0; //@line 7441
  $103 = $102 + 12 | 0; //@line 7442
  $104 = HEAP32[$103 >> 2] | 0; //@line 7443
  if (($104 | 0) == (HEAP32[$102 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$102 >> 2] | 0) + 40 >> 2] & 63]($102) | 0; //@line 7451
  } else {
   HEAP32[$103 >> 2] = $104 + 1; //@line 7454
  }
  if (($__n_does_match$3$lcssa + $__n_might_match$3$lcssa | 0) >>> 0 < 2 | $9) {
   $__indx$0 = $70; //@line 7460
   $__n_does_match$2 = $__n_does_match$3$lcssa; //@line 7460
   $__n_might_match$2 = $__n_might_match$3$lcssa; //@line 7460
   continue;
  } else {
   $__ky2$046 = $__kb; //@line 7463
   $__n_does_match$544 = $__n_does_match$3$lcssa; //@line 7463
   $__st$245 = $__status$0; //@line 7463
  }
  while (1) {
   if ((HEAP8[$__st$245 >> 0] | 0) == 2) {
    $116 = HEAP8[$__ky2$046 >> 0] | 0; //@line 7469
    if (!($116 & 1)) {
     $124 = ($116 & 255) >>> 1; //@line 7475
    } else {
     $124 = HEAP32[$__ky2$046 + 4 >> 2] | 0; //@line 7479
    }
    if (($124 | 0) == ($70 | 0)) {
     $__n_does_match$6 = $__n_does_match$544; //@line 7483
    } else {
     HEAP8[$__st$245 >> 0] = 0; //@line 7485
     $__n_does_match$6 = $__n_does_match$544 + -1 | 0; //@line 7487
    }
   } else {
    $__n_does_match$6 = $__n_does_match$544; //@line 7490
   }
   $126 = $__ky2$046 + 12 | 0; //@line 7492
   if (($126 | 0) == ($__ke | 0)) {
    $__indx$0 = $70; //@line 7496
    $__n_does_match$2 = $__n_does_match$6; //@line 7496
    $__n_might_match$2 = $__n_might_match$3$lcssa; //@line 7496
    continue L17;
   } else {
    $__ky2$046 = $126; //@line 7499
    $__n_does_match$544 = $__n_does_match$6; //@line 7499
    $__st$245 = $__st$245 + 1 | 0; //@line 7499
   }
  }
 }
 do {
  if (!$$lcssa59) {
   $141 = 0; //@line 7506
  } else {
   if ((HEAP32[$$lcssa59 + 12 >> 2] | 0) == (HEAP32[$$lcssa59 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa59 >> 2] | 0) + 36 >> 2] & 63]($$lcssa59) | 0) == -1) {
     HEAP32[$__b >> 2] = 0; //@line 7520
     $141 = 0; //@line 7521
     break;
    } else {
     $141 = HEAP32[$__b >> 2] | 0; //@line 7525
     break;
    }
   } else {
    $141 = $$lcssa59; //@line 7529
   }
  }
 } while (0);
 $140 = ($141 | 0) == 0; //@line 7533
 do {
  if ($$lcssa) {
   label = 65; //@line 7536
  } else {
   if ((HEAP32[$$pre$i2$i$i$lcssa + 12 >> 2] | 0) == (HEAP32[$$pre$i2$i$i$lcssa + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i$lcssa) | 0) == -1) {
     HEAP32[$__e >> 2] = 0; //@line 7550
     label = 65; //@line 7551
     break;
    }
   }
   if (!$140) {
    label = 66; //@line 7556
   }
  }
 } while (0);
 if ((label | 0) == 65) {
  if ($140) {
   label = 66; //@line 7562
  }
 }
 if ((label | 0) == 66) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 7568
 }
 L95 : do {
  if (($__kb | 0) == ($__ke | 0)) {
   label = 70; //@line 7573
  } else {
   $$033 = $__kb; //@line 7575
   $__st$332 = $__status$0; //@line 7575
   while (1) {
    if ((HEAP8[$__st$332 >> 0] | 0) == 2) {
     $$021 = $$033; //@line 7580
     break L95;
    }
    $$033 = $$033 + 12 | 0; //@line 7583
    if (($$033 | 0) == ($__ke | 0)) {
     label = 70; //@line 7587
     break;
    } else {
     $__st$332 = $__st$332 + 1 | 0; //@line 7590
    }
   }
  }
 } while (0);
 if ((label | 0) == 70) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 7598
  $$021 = $__ke; //@line 7599
 }
 _free($162); //@line 7601
 STACKTOP = sp; //@line 7602
 return $$021 | 0; //@line 7602
}
function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb, $__mi, $__me, $__flags, $__db, $__de, $__ct, $__neg, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__mb = $__mb | 0;
 $__mi = $__mi | 0;
 $__me = $__me | 0;
 $__flags = $__flags | 0;
 $__db = $__db | 0;
 $__de = $__de | 0;
 $__ct = $__ct | 0;
 $__neg = $__neg | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $$$0 = 0, $$$027 = 0, $$0$i$i$lcssa = 0, $$0$i$i35 = 0, $$0$i$i9$lcssa = 0, $$0$i$i958 = 0, $$01$i$i56 = 0, $$062 = 0, $$2 = 0, $$lcssa = 0, $$lcssa34 = 0, $0 = 0, $1 = 0, $10 = 0, $101 = 0, $107 = 0, $108 = 0, $11 = 0, $110 = 0, $112 = 0, $12 = 0, $124 = 0, $126 = 0, $127 = 0, $129 = 0, $13 = 0, $138 = 0, $142 = 0, $143 = 0, $147 = 0, $149 = 0, $151 = 0, $153 = 0, $158 = 0, $160 = 0, $164 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $173 = 0, $174 = 0, $18 = 0, $2 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $32 = 0, $40 = 0, $41 = 0, $43 = 0, $45 = 0, $49 = 0, $5 = 0, $52 = 0, $53 = 0, $54 = 0, $57 = 0, $59 = 0, $6 = 0, $61 = 0, $63 = 0, $65 = 0, $7 = 0, $71 = 0, $77 = 0, $8 = 0, $82 = 0, $83 = 0, $87 = 0, $89 = 0, $9 = 0, $95 = 0, $97 = 0, $98 = 0, $__d$0$lcssa = 0, $__d$0$lcssa26 = 0, $__d$036 = 0, $__d$142 = 0, $__d$2 = 0, $__d$351 = 0, $__f$043 = 0, $__f$146 = 0, $__gl$0$ph = 0, $__gl$054 = 0, $__gl$1 = 0, $__ig$053 = 0, $__ig$1 = 0, $__ng$052 = 0, $__ng$1 = 0, $__p$061 = 0, $scevgep29 = 0, $umax28 = 0;
 HEAP32[$__me >> 2] = $__mb; //@line 2670
 $0 = $__sn + 4 | 0; //@line 2671
 $1 = $__sn + 8 | 0; //@line 2672
 $2 = $__sn + 1 | 0; //@line 2673
 $3 = $__sym + 4 | 0; //@line 2674
 $5 = ($__flags & 512 | 0) == 0; //@line 2676
 $6 = $__sym + 8 | 0; //@line 2677
 $7 = $__sym + 1 | 0; //@line 2678
 $8 = $__ct + 8 | 0; //@line 2679
 $9 = ($__fd | 0) > 0; //@line 2680
 $10 = $__grp + 4 | 0; //@line 2681
 $11 = $__grp + 8 | 0; //@line 2682
 $12 = $__grp + 1 | 0; //@line 2683
 $13 = $__fd + 1 | 0; //@line 2684
 $17 = -2 - $__fd - (($__fd | 0) < 0 ? ~$__fd : -1) | 0; //@line 2689
 $18 = ($__fd | 0) > 0; //@line 2690
 $$062 = $__db; //@line 2691
 $__p$061 = 0; //@line 2691
 while (1) {
  switch (HEAP8[$__pat + $__p$061 >> 0] | 0) {
  case 0:
   {
    HEAP32[$__mi >> 2] = HEAP32[$__me >> 2]; //@line 2699
    $$2 = $$062; //@line 2700
    break;
   }
  case 1:
   {
    HEAP32[$__mi >> 2] = HEAP32[$__me >> 2]; //@line 2705
    $27 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 15]($__ct, 32) | 0; //@line 2709
    $28 = HEAP32[$__me >> 2] | 0; //@line 2710
    HEAP32[$__me >> 2] = $28 + 1; //@line 2712
    HEAP8[$28 >> 0] = $27; //@line 2713
    $$2 = $$062; //@line 2714
    break;
   }
  case 3:
   {
    $30 = HEAP8[$__sn >> 0] | 0; //@line 2718
    $32 = ($30 & 1) == 0; //@line 2720
    if (!(($32 ? ($30 & 255) >>> 1 : HEAP32[$0 >> 2] | 0) | 0)) {
     $$2 = $$062; //@line 2727
    } else {
     $40 = HEAP8[($32 ? $2 : HEAP32[$1 >> 2] | 0) >> 0] | 0; //@line 2731
     $41 = HEAP32[$__me >> 2] | 0; //@line 2732
     HEAP32[$__me >> 2] = $41 + 1; //@line 2734
     HEAP8[$41 >> 0] = $40; //@line 2735
     $$2 = $$062; //@line 2736
    }
    break;
   }
  case 2:
   {
    $43 = HEAP8[$__sym >> 0] | 0; //@line 2741
    $45 = ($43 & 1) == 0; //@line 2743
    $49 = $45 ? ($43 & 255) >>> 1 : HEAP32[$3 >> 2] | 0; //@line 2747
    if ($5 | ($49 | 0) == 0) {
     $$2 = $$062; //@line 2751
    } else {
     $52 = $45 ? $7 : HEAP32[$6 >> 2] | 0; //@line 2754
     $53 = $52 + $49 | 0; //@line 2755
     $54 = HEAP32[$__me >> 2] | 0; //@line 2756
     if (!$49) {
      $$0$i$i9$lcssa = $54; //@line 2759
     } else {
      $$0$i$i958 = $54; //@line 2761
      $57 = $52; //@line 2761
      while (1) {
       HEAP8[$$0$i$i958 >> 0] = HEAP8[$57 >> 0] | 0; //@line 2764
       $57 = $57 + 1 | 0; //@line 2765
       $59 = $$0$i$i958 + 1 | 0; //@line 2766
       if (($57 | 0) == ($53 | 0)) {
        $$0$i$i9$lcssa = $59; //@line 2769
        break;
       } else {
        $$0$i$i958 = $59; //@line 2772
       }
      }
     }
     HEAP32[$__me >> 2] = $$0$i$i9$lcssa; //@line 2776
     $$2 = $$062; //@line 2777
    }
    break;
   }
  case 4:
   {
    $61 = HEAP32[$__me >> 2] | 0; //@line 2782
    $$$0 = $__neg ? $$062 + 1 | 0 : $$062; //@line 2784
    $$$027 = $$$0; //@line 2785
    $63 = HEAP32[$8 >> 2] | 0; //@line 2786
    L15 : do {
     if ($$$0 >>> 0 < $__de >>> 0) {
      $__d$036 = $$$0; //@line 2790
      while (1) {
       $65 = HEAP8[$__d$036 >> 0] | 0; //@line 2792
       if ($65 << 24 >> 24 <= -1) {
        $__d$0$lcssa = $__d$036; //@line 2795
        break L15;
       }
       if (!(HEAP16[$63 + ($65 << 24 >> 24 << 1) >> 1] & 2048)) {
        $__d$0$lcssa = $__d$036; //@line 2804
        break L15;
       }
       $71 = $__d$036 + 1 | 0; //@line 2807
       if ($71 >>> 0 < $__de >>> 0) {
        $__d$036 = $71; //@line 2810
       } else {
        $__d$0$lcssa = $71; //@line 2812
        break;
       }
      }
     } else {
      $__d$0$lcssa = $$$0; //@line 2817
     }
    } while (0);
    $__d$0$lcssa26 = $__d$0$lcssa; //@line 2820
    if ($9) {
     $77 = -2 - $__d$0$lcssa26 - ~($__d$0$lcssa26 >>> 0 > $$$027 >>> 0 ? $$$027 : $__d$0$lcssa26) | 0; //@line 2826
     $umax28 = $17 >>> 0 > $77 >>> 0 ? $17 : $77; //@line 2828
     if ($__d$0$lcssa >>> 0 > $$$0 >>> 0 & $18) {
      $__d$142 = $__d$0$lcssa; //@line 2832
      $__f$043 = $__fd; //@line 2832
      while (1) {
       $__d$142 = $__d$142 + -1 | 0; //@line 2834
       $82 = HEAP8[$__d$142 >> 0] | 0; //@line 2835
       $83 = HEAP32[$__me >> 2] | 0; //@line 2836
       HEAP32[$__me >> 2] = $83 + 1; //@line 2838
       HEAP8[$83 >> 0] = $82; //@line 2839
       $87 = ($__f$043 | 0) > 1; //@line 2842
       if (!($__d$142 >>> 0 > $$$0 >>> 0 & $87)) {
        $$lcssa = $87; //@line 2847
        break;
       } else {
        $__f$043 = $__f$043 + -1 | 0; //@line 2845
       }
      }
     } else {
      $$lcssa = $18; //@line 2852
     }
     $89 = $13 + $umax28 | 0; //@line 2854
     $scevgep29 = $__d$0$lcssa + ($umax28 + 1) | 0; //@line 2856
     if ($$lcssa) {
      $97 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 15]($__ct, 48) | 0; //@line 2862
     } else {
      $97 = 0; //@line 2864
     }
     $95 = HEAP32[$__me >> 2] | 0; //@line 2867
     HEAP32[$__me >> 2] = $95 + 1; //@line 2869
     if (($89 | 0) > 0) {
      $98 = $95; //@line 2871
      $__f$146 = $89; //@line 2871
      while (1) {
       HEAP8[$98 >> 0] = $97; //@line 2873
       $101 = HEAP32[$__me >> 2] | 0; //@line 2876
       HEAP32[$__me >> 2] = $101 + 1; //@line 2878
       if (($__f$146 | 0) > 1) {
        $98 = $101; //@line 2880
        $__f$146 = $__f$146 + -1 | 0; //@line 2880
       } else {
        $$lcssa34 = $101; //@line 2882
        break;
       }
      }
     } else {
      $$lcssa34 = $95; //@line 2887
     }
     HEAP8[$$lcssa34 >> 0] = $__dp; //@line 2889
     $__d$2 = $scevgep29; //@line 2890
    } else {
     $__d$2 = $__d$0$lcssa; //@line 2892
    }
    if (($__d$2 | 0) == ($$$0 | 0)) {
     $107 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 15]($__ct, 48) | 0; //@line 2899
     $108 = HEAP32[$__me >> 2] | 0; //@line 2900
     HEAP32[$__me >> 2] = $108 + 1; //@line 2902
     HEAP8[$108 >> 0] = $107; //@line 2903
    } else {
     $110 = HEAP8[$__grp >> 0] | 0; //@line 2905
     $112 = ($110 & 1) == 0; //@line 2907
     if (!(($112 ? ($110 & 255) >>> 1 : HEAP32[$10 >> 2] | 0) | 0)) {
      $__gl$0$ph = -1; //@line 2914
     } else {
      $__gl$0$ph = HEAP8[($112 ? $12 : HEAP32[$11 >> 2] | 0) >> 0] | 0; //@line 2920
     }
     if (($__d$2 | 0) != ($$$0 | 0)) {
      $__d$351 = $__d$2; //@line 2924
      $__gl$054 = $__gl$0$ph; //@line 2924
      $__ig$053 = 0; //@line 2924
      $__ng$052 = 0; //@line 2924
      while (1) {
       if (($__ng$052 | 0) == ($__gl$054 | 0)) {
        $124 = HEAP32[$__me >> 2] | 0; //@line 2928
        HEAP32[$__me >> 2] = $124 + 1; //@line 2930
        HEAP8[$124 >> 0] = $__ts; //@line 2931
        $126 = $__ig$053 + 1 | 0; //@line 2932
        $127 = HEAP8[$__grp >> 0] | 0; //@line 2933
        $129 = ($127 & 1) == 0; //@line 2935
        if ($126 >>> 0 < ($129 ? ($127 & 255) >>> 1 : HEAP32[$10 >> 2] | 0) >>> 0) {
         $138 = HEAP8[($129 ? $12 : HEAP32[$11 >> 2] | 0) + $126 >> 0] | 0; //@line 2945
         $__gl$1 = $138 << 24 >> 24 == 127 ? -1 : $138 << 24 >> 24; //@line 2949
         $__ig$1 = $126; //@line 2949
         $__ng$1 = 0; //@line 2949
        } else {
         $__gl$1 = $__ng$052; //@line 2951
         $__ig$1 = $126; //@line 2951
         $__ng$1 = 0; //@line 2951
        }
       } else {
        $__gl$1 = $__gl$054; //@line 2954
        $__ig$1 = $__ig$053; //@line 2954
        $__ng$1 = $__ng$052; //@line 2954
       }
       $__d$351 = $__d$351 + -1 | 0; //@line 2956
       $142 = HEAP8[$__d$351 >> 0] | 0; //@line 2957
       $143 = HEAP32[$__me >> 2] | 0; //@line 2958
       HEAP32[$__me >> 2] = $143 + 1; //@line 2960
       HEAP8[$143 >> 0] = $142; //@line 2961
       if (($__d$351 | 0) == ($$$0 | 0)) {
        break;
       } else {
        $__gl$054 = $__gl$1; //@line 2967
        $__ig$053 = $__ig$1; //@line 2967
        $__ng$052 = $__ng$1 + 1 | 0; //@line 2967
       }
      }
     }
    }
    $147 = HEAP32[$__me >> 2] | 0; //@line 2972
    if (($61 | 0) == ($147 | 0)) {
     $$2 = $$$0; //@line 2975
    } else {
     $149 = $147 + -1 | 0; //@line 2977
     if ($61 >>> 0 < $149 >>> 0) {
      $$01$i$i56 = $61; //@line 2980
      $153 = $149; //@line 2980
      do {
       $151 = HEAP8[$$01$i$i56 >> 0] | 0; //@line 2982
       HEAP8[$$01$i$i56 >> 0] = HEAP8[$153 >> 0] | 0; //@line 2984
       HEAP8[$153 >> 0] = $151; //@line 2985
       $$01$i$i56 = $$01$i$i56 + 1 | 0; //@line 2986
       $153 = $153 + -1 | 0; //@line 2987
      } while ($$01$i$i56 >>> 0 < $153 >>> 0);
      $$2 = $$$0; //@line 2992
     } else {
      $$2 = $$$0; //@line 2997
     }
    }
    break;
   }
  default:
   {
    $$2 = $$062; //@line 3003
   }
  }
  $__p$061 = $__p$061 + 1 | 0; //@line 3006
  if (($__p$061 | 0) == 4) {
   break;
  } else {
   $$062 = $$2; //@line 3011
  }
 }
 $158 = HEAP8[$__sn >> 0] | 0; //@line 3014
 $160 = ($158 & 1) == 0; //@line 3016
 $164 = $160 ? ($158 & 255) >>> 1 : HEAP32[$0 >> 2] | 0; //@line 3020
 if ($164 >>> 0 > 1) {
  $167 = $160 ? $2 : HEAP32[$1 >> 2] | 0; //@line 3024
  $168 = $167 + $164 | 0; //@line 3025
  $169 = HEAP32[$__me >> 2] | 0; //@line 3026
  if (($164 | 0) == 1) {
   $$0$i$i$lcssa = $169; //@line 3029
  } else {
   $$0$i$i35 = $169; //@line 3032
   $173 = $167 + 1 | 0; //@line 3032
   while (1) {
    HEAP8[$$0$i$i35 >> 0] = HEAP8[$173 >> 0] | 0; //@line 3035
    $174 = $$0$i$i35 + 1 | 0; //@line 3036
    $173 = $173 + 1 | 0; //@line 3037
    if (($173 | 0) == ($168 | 0)) {
     $$0$i$i$lcssa = $174; //@line 3040
     break;
    } else {
     $$0$i$i35 = $174; //@line 3043
    }
   }
  }
  HEAP32[$__me >> 2] = $$0$i$i$lcssa; //@line 3047
 }
 switch ($__flags & 176 | 0) {
 case 32:
  {
   HEAP32[$__mi >> 2] = HEAP32[$__me >> 2]; //@line 3053
   break;
  }
 case 16:
  {
   break;
  }
 default:
  {
   HEAP32[$__mi >> 2] = $__mb; //@line 3060
  }
 }
 return;
}
function _mbsrtowcs($ws, $src, $wn, $st) {
 $ws = $ws | 0;
 $src = $src | 0;
 $wn = $wn | 0;
 $st = $st | 0;
 var $$0 = 0, $$02$ph = 0, $$0219 = 0, $$03 = 0, $$1 = 0, $$1$lcssa = 0, $$14$lcssa = 0, $$1415 = 0, $$2 = 0, $$2$lcssa = 0, $$25 = 0, $$25$lcssa = 0, $$3 = 0, $$36 = 0, $$4 = 0, $$434 = 0, $$47$ph = 0, $$4718 = 0, $$48 = 0, $$5 = 0, $$5$lcssa = 0, $$6 = 0, $$6$lcssa = 0, $$7 = 0, $$8 = 0, $$833 = 0, $$in = 0, $$lcssa102 = 0, $$lcssa90 = 0, $$lcssa94 = 0, $$lcssa96 = 0, $$lcssa97 = 0, $$lcssa98 = 0, $0 = 0, $101 = 0, $107 = 0, $108 = 0, $116 = 0, $118 = 0, $121 = 0, $126 = 0, $128 = 0, $131 = 0, $14 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $27 = 0, $28 = 0, $33 = 0, $40 = 0, $47 = 0, $54 = 0, $63 = 0, $7 = 0, $71 = 0, $87 = 0, $90 = 0, $91 = 0, $93 = 0, $94 = 0, $97 = 0, $c$2 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $s$0 = 0, $s$1$lcssa = 0, $s$10 = 0, $s$1035 = 0, $s$109 = 0, $s$116 = 0, $s$2 = 0, $s$2$lcssa = 0, $s$3 = 0, $s$4 = 0, $s$5$lcssa = 0, $s$5$ph = 0, $s$520 = 0, $s$6 = 0, $s$6$lcssa = 0, $s$7 = 0, $s$7$lcssa = 0, $s$8 = 0, $s$9 = 0, label = 0;
 $0 = HEAP32[$src >> 2] | 0; //@line 5396
 if (!$st) {
  label = 5; //@line 5399
 } else {
  $2 = HEAP32[$st >> 2] | 0; //@line 5401
  if (!$2) {
   label = 5; //@line 5404
  } else {
   if (!$ws) {
    $$36 = $wn; //@line 5408
    $c$2 = $2; //@line 5408
    $s$3 = $0; //@line 5408
    label = 16; //@line 5409
   } else {
    HEAP32[$st >> 2] = 0; //@line 5411
    $$3 = $ws; //@line 5412
    $$7 = $wn; //@line 5412
    $c$4 = $2; //@line 5412
    $s$8 = $0; //@line 5412
    label = 37; //@line 5413
   }
  }
 }
 if ((label | 0) == 5) {
  if (!$ws) {
   $$03 = $wn; //@line 5420
   $s$0 = $0; //@line 5420
   label = 7; //@line 5421
  } else {
   $$02$ph = $ws; //@line 5423
   $$47$ph = $wn; //@line 5423
   $s$5$ph = $0; //@line 5423
   label = 6; //@line 5424
  }
 }
 L7 : while (1) {
  if ((label | 0) == 6) {
   label = 0; //@line 5429
   if (!$$47$ph) {
    $s$5$lcssa = $s$5$ph; //@line 5432
    label = 26; //@line 5433
    break;
   } else {
    $$0219 = $$02$ph; //@line 5436
    $$4718 = $$47$ph; //@line 5436
    $s$520 = $s$5$ph; //@line 5436
   }
   while (1) {
    $63 = HEAP8[$s$520 >> 0] | 0; //@line 5439
    do {
     if ((($63 & 255) + -1 | 0) >>> 0 < 127) {
      if ($$4718 >>> 0 > 4 & ($s$520 & 3 | 0) == 0) {
       $$1 = $$0219; //@line 5451
       $$5 = $$4718; //@line 5451
       $s$6 = $s$520; //@line 5451
       while (1) {
        $71 = HEAP32[$s$6 >> 2] | 0; //@line 5453
        if (($71 + -16843009 | $71) & -2139062144) {
         $$1$lcssa = $$1; //@line 5459
         $$5$lcssa = $$5; //@line 5459
         $$lcssa94 = $71; //@line 5459
         $s$6$lcssa = $s$6; //@line 5459
         label = 32; //@line 5460
         break;
        }
        HEAP32[$$1 >> 2] = $71 & 255; //@line 5466
        HEAP32[$$1 + 4 >> 2] = HEAPU8[$s$6 + 1 >> 0]; //@line 5471
        HEAP32[$$1 + 8 >> 2] = HEAPU8[$s$6 + 2 >> 0]; //@line 5476
        $87 = $s$6 + 4 | 0; //@line 5477
        $90 = $$1 + 16 | 0; //@line 5480
        HEAP32[$$1 + 12 >> 2] = HEAPU8[$s$6 + 3 >> 0]; //@line 5481
        $91 = $$5 + -4 | 0; //@line 5482
        if ($91 >>> 0 > 4) {
         $$1 = $90; //@line 5485
         $$5 = $91; //@line 5485
         $s$6 = $87; //@line 5485
        } else {
         $$lcssa96 = $87; //@line 5487
         $$lcssa97 = $90; //@line 5487
         $$lcssa98 = $91; //@line 5487
         label = 31; //@line 5488
         break;
        }
       }
       if ((label | 0) == 31) {
        label = 0; //@line 5493
        $$2 = $$lcssa97; //@line 5495
        $$6 = $$lcssa98; //@line 5495
        $94 = HEAP8[$$lcssa96 >> 0] | 0; //@line 5495
        $s$7 = $$lcssa96; //@line 5495
        break;
       } else if ((label | 0) == 32) {
        label = 0; //@line 5499
        $$2 = $$1$lcssa; //@line 5501
        $$6 = $$5$lcssa; //@line 5501
        $94 = $$lcssa94 & 255; //@line 5501
        $s$7 = $s$6$lcssa; //@line 5501
        break;
       }
      } else {
       $$2 = $$0219; //@line 5505
       $$6 = $$4718; //@line 5505
       $94 = $63; //@line 5505
       $s$7 = $s$520; //@line 5505
      }
     } else {
      $$2 = $$0219; //@line 5508
      $$6 = $$4718; //@line 5508
      $94 = $63; //@line 5508
      $s$7 = $s$520; //@line 5508
     }
    } while (0);
    $93 = $94 & 255; //@line 5511
    if (($93 + -1 | 0) >>> 0 >= 127) {
     $$2$lcssa = $$2; //@line 5515
     $$6$lcssa = $$6; //@line 5515
     $$lcssa102 = $93; //@line 5515
     $s$7$lcssa = $s$7; //@line 5515
     break;
    }
    $97 = $s$7 + 1 | 0; //@line 5518
    HEAP32[$$2 >> 2] = $93; //@line 5520
    $$4718 = $$6 + -1 | 0; //@line 5521
    if (!$$4718) {
     $s$5$lcssa = $97; //@line 5524
     label = 26; //@line 5525
     break L7;
    } else {
     $$0219 = $$2 + 4 | 0; //@line 5528
     $s$520 = $97; //@line 5528
    }
   }
   $101 = $$lcssa102 + -194 | 0; //@line 5531
   if ($101 >>> 0 > 50) {
    $$434 = $$2$lcssa; //@line 5534
    $$833 = $$6$lcssa; //@line 5534
    $s$1035 = $s$7$lcssa; //@line 5534
    label = 48; //@line 5535
    break;
   }
   $$3 = $$2$lcssa; //@line 5541
   $$7 = $$6$lcssa; //@line 5541
   $c$4 = HEAP32[2340 + ($101 << 2) >> 2] | 0; //@line 5541
   $s$8 = $s$7$lcssa + 1 | 0; //@line 5541
   label = 37; //@line 5542
   continue;
  } else if ((label | 0) == 7) {
   label = 0; //@line 5546
   $7 = HEAP8[$s$0 >> 0] | 0; //@line 5547
   if ((($7 & 255) + -1 | 0) >>> 0 < 127) {
    if (!($s$0 & 3)) {
     $14 = HEAP32[$s$0 >> 2] | 0; //@line 5556
     if (!(($14 + -16843009 | $14) & -2139062144)) {
      $$1415 = $$03; //@line 5562
      $s$116 = $s$0; //@line 5562
      while (1) {
       $19 = $s$116 + 4 | 0; //@line 5564
       $20 = $$1415 + -4 | 0; //@line 5565
       $21 = HEAP32[$19 >> 2] | 0; //@line 5566
       if (!(($21 + -16843009 | $21) & -2139062144)) {
        $$1415 = $20; //@line 5572
        $s$116 = $19; //@line 5572
       } else {
        $$14$lcssa = $20; //@line 5574
        $$in = $21; //@line 5574
        $s$1$lcssa = $19; //@line 5574
        break;
       }
      }
     } else {
      $$14$lcssa = $$03; //@line 5579
      $$in = $14; //@line 5579
      $s$1$lcssa = $s$0; //@line 5579
     }
     $$25 = $$14$lcssa; //@line 5582
     $28 = $$in & 255; //@line 5582
     $s$2 = $s$1$lcssa; //@line 5582
    } else {
     $$25 = $$03; //@line 5584
     $28 = $7; //@line 5584
     $s$2 = $s$0; //@line 5584
    }
   } else {
    $$25 = $$03; //@line 5587
    $28 = $7; //@line 5587
    $s$2 = $s$0; //@line 5587
   }
   $27 = $28 & 255; //@line 5589
   if (($27 + -1 | 0) >>> 0 < 127) {
    $$03 = $$25 + -1 | 0; //@line 5595
    $s$0 = $s$2 + 1 | 0; //@line 5595
    label = 7; //@line 5596
    continue;
   } else {
    $$25$lcssa = $$25; //@line 5599
    $$lcssa90 = $27; //@line 5599
    $s$2$lcssa = $s$2; //@line 5599
   }
   $33 = $$lcssa90 + -194 | 0; //@line 5601
   if ($33 >>> 0 > 50) {
    $$434 = $ws; //@line 5604
    $$833 = $$25$lcssa; //@line 5604
    $s$1035 = $s$2$lcssa; //@line 5604
    label = 48; //@line 5605
    break;
   }
   $$36 = $$25$lcssa; //@line 5611
   $c$2 = HEAP32[2340 + ($33 << 2) >> 2] | 0; //@line 5611
   $s$3 = $s$2$lcssa + 1 | 0; //@line 5611
   label = 16; //@line 5612
   continue;
  } else if ((label | 0) == 16) {
   label = 0; //@line 5616
   $40 = (HEAPU8[$s$3 >> 0] | 0) >>> 3; //@line 5619
   if (($40 + -16 | $40 + ($c$2 >> 26)) >>> 0 > 7) {
    label = 17; //@line 5626
    break;
   }
   $47 = $s$3 + 1 | 0; //@line 5629
   if (!($c$2 & 33554432)) {
    $s$4 = $47; //@line 5633
   } else {
    if ((HEAP8[$47 >> 0] & -64) << 24 >> 24 != -128) {
     label = 20; //@line 5639
     break;
    }
    $54 = $s$3 + 2 | 0; //@line 5642
    if (!($c$2 & 524288)) {
     $s$4 = $54; //@line 5646
    } else {
     if ((HEAP8[$54 >> 0] & -64) << 24 >> 24 != -128) {
      label = 23; //@line 5652
      break;
     }
     $s$4 = $s$3 + 3 | 0; //@line 5656
    }
   }
   $$03 = $$36 + -1 | 0; //@line 5660
   $s$0 = $s$4; //@line 5660
   label = 7; //@line 5661
   continue;
  } else if ((label | 0) == 37) {
   label = 0; //@line 5665
   $107 = HEAPU8[$s$8 >> 0] | 0; //@line 5667
   $108 = $107 >>> 3; //@line 5668
   if (($108 + -16 | $108 + ($c$4 >> 26)) >>> 0 > 7) {
    label = 38; //@line 5675
    break;
   }
   $116 = $s$8 + 1 | 0; //@line 5679
   $118 = $107 + -128 | $c$4 << 6; //@line 5681
   if (($118 | 0) < 0) {
    $121 = HEAPU8[$116 >> 0] | 0; //@line 5685
    if (($121 & 192 | 0) != 128) {
     label = 41; //@line 5689
     break;
    }
    $126 = $s$8 + 2 | 0; //@line 5693
    $128 = $121 + -128 | $118 << 6; //@line 5695
    if (($128 | 0) < 0) {
     $131 = HEAPU8[$126 >> 0] | 0; //@line 5699
     if (($131 & 192 | 0) != 128) {
      label = 44; //@line 5703
      break;
     }
     $c$5 = $131 + -128 | $128 << 6; //@line 5710
     $s$9 = $s$8 + 3 | 0; //@line 5710
    } else {
     $c$5 = $128; //@line 5712
     $s$9 = $126; //@line 5712
    }
   } else {
    $c$5 = $118; //@line 5715
    $s$9 = $116; //@line 5715
   }
   HEAP32[$$3 >> 2] = $c$5; //@line 5718
   $$02$ph = $$3 + 4 | 0; //@line 5720
   $$47$ph = $$7 + -1 | 0; //@line 5720
   $s$5$ph = $s$9; //@line 5720
   label = 6; //@line 5721
   continue;
  }
 }
 if ((label | 0) == 17) {
  $$4 = $ws; //@line 5727
  $$8 = $$36; //@line 5727
  $c$6 = $c$2; //@line 5727
  $s$10 = $s$3 + -1 | 0; //@line 5727
  label = 47; //@line 5728
 } else if ((label | 0) == 20) {
  $$4 = $ws; //@line 5732
  $$8 = $$36; //@line 5732
  $c$6 = $c$2; //@line 5732
  $s$10 = $s$3 + -1 | 0; //@line 5732
  label = 47; //@line 5733
 } else if ((label | 0) == 23) {
  $$4 = $ws; //@line 5737
  $$8 = $$36; //@line 5737
  $c$6 = $c$2; //@line 5737
  $s$10 = $s$3 + -1 | 0; //@line 5737
  label = 47; //@line 5738
 } else if ((label | 0) == 26) {
  HEAP32[$src >> 2] = $s$5$lcssa; //@line 5741
  $$0 = $wn; //@line 5742
 } else if ((label | 0) == 38) {
  $$4 = $$3; //@line 5746
  $$8 = $$7; //@line 5746
  $c$6 = $c$4; //@line 5746
  $s$10 = $s$8 + -1 | 0; //@line 5746
  label = 47; //@line 5747
 } else if ((label | 0) == 41) {
  $$48 = $$3; //@line 5751
  $s$109 = $s$8 + -1 | 0; //@line 5751
  label = 52; //@line 5752
 } else if ((label | 0) == 44) {
  $$48 = $$3; //@line 5756
  $s$109 = $s$8 + -1 | 0; //@line 5756
  label = 52; //@line 5757
 }
 if ((label | 0) == 47) {
  if (!$c$6) {
   $$434 = $$4; //@line 5762
   $$833 = $$8; //@line 5762
   $s$1035 = $s$10; //@line 5762
   label = 48; //@line 5763
  } else {
   $$48 = $$4; //@line 5765
   $s$109 = $s$10; //@line 5765
   label = 52; //@line 5766
  }
 }
 if ((label | 0) == 48) {
  if (!(HEAP8[$s$1035 >> 0] | 0)) {
   if ($$434) {
    HEAP32[$$434 >> 2] = 0; //@line 5775
    HEAP32[$src >> 2] = 0; //@line 5776
   }
   $$0 = $wn - $$833 | 0; //@line 5779
  } else {
   $$48 = $$434; //@line 5781
   $s$109 = $s$1035; //@line 5781
   label = 52; //@line 5782
  }
 }
 if ((label | 0) == 52) {
  HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 5787
  if (!$$48) {
   $$0 = -1; //@line 5790
  } else {
   HEAP32[$src >> 2] = $s$109; //@line 5792
   $$0 = -1; //@line 5793
  }
 }
 return $$0 | 0; //@line 5796
}
function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb, $__mi, $__me, $__flags, $__db, $__de, $__ct, $__neg, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__mb = $__mb | 0;
 $__mi = $__mi | 0;
 $__me = $__me | 0;
 $__flags = $__flags | 0;
 $__db = $__db | 0;
 $__de = $__de | 0;
 $__ct = $__ct | 0;
 $__neg = $__neg | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $$$0 = 0, $$0$i$i30 = 0, $$0$i$i954 = 0, $$01$i$i52 = 0, $$057 = 0, $$2 = 0, $$lcssa = 0, $$lcssa63 = 0, $$lcssa64 = 0, $$lcssa65 = 0, $$lcssa67 = 0, $0 = 0, $1 = 0, $10 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $112 = 0, $120 = 0, $124 = 0, $126 = 0, $130 = 0, $131 = 0, $133 = 0, $135 = 0, $140 = 0, $142 = 0, $146 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $155 = 0, $158 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $32 = 0, $33 = 0, $35 = 0, $37 = 0, $4 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $49 = 0, $5 = 0, $53 = 0, $6 = 0, $61 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $71 = 0, $79 = 0, $8 = 0, $82 = 0, $83 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $95 = 0, $96 = 0, $__d$0$lcssa = 0, $__d$031 = 0, $__d$1$lcssa = 0, $__d$137 = 0, $__d$2 = 0, $__d$347 = 0, $__f$0$lcssa = 0, $__f$038 = 0, $__f$143 = 0, $__gl$0$ph = 0, $__gl$050 = 0, $__gl$1 = 0, $__ig$049 = 0, $__ig$1 = 0, $__me$promoted = 0, $__ng$048 = 0, $__ng$1 = 0, $__p$056 = 0;
 HEAP32[$__me >> 2] = $__mb; //@line 3772
 $0 = $__sn + 4 | 0; //@line 3773
 $1 = $__sn + 8 | 0; //@line 3774
 $2 = $__sym + 4 | 0; //@line 3775
 $4 = ($__flags & 512 | 0) == 0; //@line 3777
 $5 = $__sym + 8 | 0; //@line 3778
 $6 = ($__fd | 0) > 0; //@line 3779
 $7 = $__grp + 4 | 0; //@line 3780
 $8 = $__grp + 8 | 0; //@line 3781
 $9 = $__grp + 1 | 0; //@line 3782
 $10 = ($__fd | 0) > 0; //@line 3783
 $$057 = $__db; //@line 3784
 $__p$056 = 0; //@line 3784
 while (1) {
  switch (HEAP8[$__pat + $__p$056 >> 0] | 0) {
  case 0:
   {
    HEAP32[$__mi >> 2] = HEAP32[$__me >> 2]; //@line 3792
    $$2 = $$057; //@line 3793
    break;
   }
  case 1:
   {
    HEAP32[$__mi >> 2] = HEAP32[$__me >> 2]; //@line 3798
    $19 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 44 >> 2] & 15]($__ct, 32) | 0; //@line 3802
    $20 = HEAP32[$__me >> 2] | 0; //@line 3803
    HEAP32[$__me >> 2] = $20 + 4; //@line 3805
    HEAP32[$20 >> 2] = $19; //@line 3806
    $$2 = $$057; //@line 3807
    break;
   }
  case 3:
   {
    $22 = HEAP8[$__sn >> 0] | 0; //@line 3811
    $24 = ($22 & 1) == 0; //@line 3813
    if (!(($24 ? ($22 & 255) >>> 1 : HEAP32[$0 >> 2] | 0) | 0)) {
     $$2 = $$057; //@line 3820
    } else {
     $32 = HEAP32[($24 ? $0 : HEAP32[$1 >> 2] | 0) >> 2] | 0; //@line 3824
     $33 = HEAP32[$__me >> 2] | 0; //@line 3825
     HEAP32[$__me >> 2] = $33 + 4; //@line 3827
     HEAP32[$33 >> 2] = $32; //@line 3828
     $$2 = $$057; //@line 3829
    }
    break;
   }
  case 2:
   {
    $35 = HEAP8[$__sym >> 0] | 0; //@line 3834
    $37 = ($35 & 1) == 0; //@line 3836
    $41 = $37 ? ($35 & 255) >>> 1 : HEAP32[$2 >> 2] | 0; //@line 3840
    if ($4 | ($41 | 0) == 0) {
     $$2 = $$057; //@line 3844
    } else {
     $44 = $37 ? $2 : HEAP32[$5 >> 2] | 0; //@line 3847
     $45 = $44 + ($41 << 2) | 0; //@line 3848
     $46 = HEAP32[$__me >> 2] | 0; //@line 3849
     if ($41) {
      $$0$i$i954 = $46; //@line 3852
      $49 = $44; //@line 3852
      while (1) {
       HEAP32[$$0$i$i954 >> 2] = HEAP32[$49 >> 2]; //@line 3855
       $49 = $49 + 4 | 0; //@line 3856
       if (($49 | 0) == ($45 | 0)) {
        break;
       } else {
        $$0$i$i954 = $$0$i$i954 + 4 | 0; //@line 3862
       }
      }
     }
     HEAP32[$__me >> 2] = $46 + ($41 << 2); //@line 3867
     $$2 = $$057; //@line 3868
    }
    break;
   }
  case 4:
   {
    $53 = HEAP32[$__me >> 2] | 0; //@line 3873
    $$$0 = $__neg ? $$057 + 4 | 0 : $$057; //@line 3875
    L15 : do {
     if ($$$0 >>> 0 < $__de >>> 0) {
      $__d$031 = $$$0; //@line 3879
      while (1) {
       if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 2048, HEAP32[$__d$031 >> 2] | 0) | 0)) {
        $__d$0$lcssa = $__d$031; //@line 3887
        break L15;
       }
       $61 = $__d$031 + 4 | 0; //@line 3890
       if ($61 >>> 0 < $__de >>> 0) {
        $__d$031 = $61; //@line 3893
       } else {
        $__d$0$lcssa = $61; //@line 3895
        break;
       }
      }
     } else {
      $__d$0$lcssa = $$$0; //@line 3900
     }
    } while (0);
    if ($6) {
     if ($__d$0$lcssa >>> 0 > $$$0 >>> 0 & $10) {
      $68 = HEAP32[$__me >> 2] | 0; //@line 3908
      $__d$137 = $__d$0$lcssa; //@line 3908
      $__f$038 = $__fd; //@line 3908
      while (1) {
       $65 = $__d$137 + -4 | 0; //@line 3910
       $67 = $68 + 4 | 0; //@line 3912
       HEAP32[$68 >> 2] = HEAP32[$65 >> 2]; //@line 3913
       $69 = $__f$038 + -1 | 0; //@line 3914
       $71 = ($__f$038 | 0) > 1; //@line 3916
       if ($65 >>> 0 > $$$0 >>> 0 & $71) {
        $68 = $67; //@line 3919
        $__d$137 = $65; //@line 3919
        $__f$038 = $69; //@line 3919
       } else {
        $$lcssa63 = $65; //@line 3921
        $$lcssa64 = $69; //@line 3921
        $$lcssa65 = $71; //@line 3921
        $$lcssa67 = $67; //@line 3921
        break;
       }
      }
      HEAP32[$__me >> 2] = $$lcssa67; //@line 3925
      $$lcssa = $$lcssa65; //@line 3926
      $__d$1$lcssa = $$lcssa63; //@line 3926
      $__f$0$lcssa = $$lcssa64; //@line 3926
     } else {
      $$lcssa = $10; //@line 3928
      $__d$1$lcssa = $__d$0$lcssa; //@line 3928
      $__f$0$lcssa = $__fd; //@line 3928
     }
     if ($$lcssa) {
      $83 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 44 >> 2] & 15]($__ct, 48) | 0; //@line 3935
     } else {
      $83 = 0; //@line 3937
     }
     $__me$promoted = HEAP32[$__me >> 2] | 0; //@line 3939
     $79 = $__f$0$lcssa + (($__f$0$lcssa | 0) < 0 ? ~$__f$0$lcssa : -1) | 0; //@line 3943
     if (($__f$0$lcssa | 0) > 0) {
      $82 = $__me$promoted; //@line 3946
      $__f$143 = $__f$0$lcssa; //@line 3946
      while (1) {
       HEAP32[$82 >> 2] = $83; //@line 3949
       if (($__f$143 | 0) > 1) {
        $82 = $82 + 4 | 0; //@line 3953
        $__f$143 = $__f$143 + -1 | 0; //@line 3953
       } else {
        break;
       }
      }
     }
     HEAP32[$__me >> 2] = $__me$promoted + ($79 + 2 << 2); //@line 3963
     HEAP32[$__me$promoted + ($79 + 1 << 2) >> 2] = $__dp; //@line 3964
     $__d$2 = $__d$1$lcssa; //@line 3965
    } else {
     $__d$2 = $__d$0$lcssa; //@line 3967
    }
    if (($__d$2 | 0) == ($$$0 | 0)) {
     $90 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 44 >> 2] & 15]($__ct, 48) | 0; //@line 3974
     $91 = HEAP32[$__me >> 2] | 0; //@line 3975
     $92 = $91 + 4 | 0; //@line 3976
     HEAP32[$__me >> 2] = $92; //@line 3977
     HEAP32[$91 >> 2] = $90; //@line 3978
     $130 = $92; //@line 3979
    } else {
     $93 = HEAP8[$__grp >> 0] | 0; //@line 3981
     $95 = ($93 & 1) == 0; //@line 3983
     $96 = HEAP32[$7 >> 2] | 0; //@line 3984
     if (!(($95 ? ($93 & 255) >>> 1 : $96) | 0)) {
      $__gl$0$ph = -1; //@line 3990
     } else {
      $__gl$0$ph = HEAP8[($95 ? $9 : HEAP32[$8 >> 2] | 0) >> 0] | 0; //@line 3996
     }
     if (($__d$2 | 0) != ($$$0 | 0)) {
      $__d$347 = $__d$2; //@line 4000
      $__gl$050 = $__gl$0$ph; //@line 4000
      $__ig$049 = 0; //@line 4000
      $__ng$048 = 0; //@line 4000
      while (1) {
       $107 = HEAP32[$__me >> 2] | 0; //@line 4003
       if (($__ng$048 | 0) == ($__gl$050 | 0)) {
        $108 = $107 + 4 | 0; //@line 4005
        HEAP32[$__me >> 2] = $108; //@line 4006
        HEAP32[$107 >> 2] = $__ts; //@line 4007
        $109 = $__ig$049 + 1 | 0; //@line 4008
        $110 = HEAP8[$__grp >> 0] | 0; //@line 4009
        $112 = ($110 & 1) == 0; //@line 4011
        if ($109 >>> 0 < ($112 ? ($110 & 255) >>> 1 : $96) >>> 0) {
         $120 = HEAP8[($112 ? $9 : HEAP32[$8 >> 2] | 0) + $109 >> 0] | 0; //@line 4020
         $126 = $108; //@line 4024
         $__gl$1 = $120 << 24 >> 24 == 127 ? -1 : $120 << 24 >> 24; //@line 4024
         $__ig$1 = $109; //@line 4024
         $__ng$1 = 0; //@line 4024
        } else {
         $126 = $108; //@line 4026
         $__gl$1 = $__ng$048; //@line 4026
         $__ig$1 = $109; //@line 4026
         $__ng$1 = 0; //@line 4026
        }
       } else {
        $126 = $107; //@line 4029
        $__gl$1 = $__gl$050; //@line 4029
        $__ig$1 = $__ig$049; //@line 4029
        $__ng$1 = $__ng$048; //@line 4029
       }
       $__d$347 = $__d$347 + -4 | 0; //@line 4031
       $124 = HEAP32[$__d$347 >> 2] | 0; //@line 4032
       HEAP32[$__me >> 2] = $126 + 4; //@line 4034
       HEAP32[$126 >> 2] = $124; //@line 4035
       if (($__d$347 | 0) == ($$$0 | 0)) {
        break;
       } else {
        $__gl$050 = $__gl$1; //@line 4041
        $__ig$049 = $__ig$1; //@line 4041
        $__ng$048 = $__ng$1 + 1 | 0; //@line 4041
       }
      }
     }
     $130 = HEAP32[$__me >> 2] | 0; //@line 4046
    }
    if (($53 | 0) == ($130 | 0)) {
     $$2 = $$$0; //@line 4050
    } else {
     $131 = $130 + -4 | 0; //@line 4052
     if ($53 >>> 0 < $131 >>> 0) {
      $$01$i$i52 = $53; //@line 4055
      $135 = $131; //@line 4055
      do {
       $133 = HEAP32[$$01$i$i52 >> 2] | 0; //@line 4057
       HEAP32[$$01$i$i52 >> 2] = HEAP32[$135 >> 2]; //@line 4059
       HEAP32[$135 >> 2] = $133; //@line 4060
       $$01$i$i52 = $$01$i$i52 + 4 | 0; //@line 4061
       $135 = $135 + -4 | 0; //@line 4062
      } while ($$01$i$i52 >>> 0 < $135 >>> 0);
      $$2 = $$$0; //@line 4067
     } else {
      $$2 = $$$0; //@line 4072
     }
    }
    break;
   }
  default:
   {
    $$2 = $$057; //@line 4078
   }
  }
  $__p$056 = $__p$056 + 1 | 0; //@line 4081
  if (($__p$056 | 0) == 4) {
   break;
  } else {
   $$057 = $$2; //@line 4086
  }
 }
 $140 = HEAP8[$__sn >> 0] | 0; //@line 4089
 $142 = ($140 & 1) == 0; //@line 4091
 $146 = $142 ? ($140 & 255) >>> 1 : HEAP32[$0 >> 2] | 0; //@line 4095
 if ($146 >>> 0 > 1) {
  $149 = $142 ? $0 : HEAP32[$1 >> 2] | 0; //@line 4099
  $150 = $149 + 4 | 0; //@line 4100
  $151 = $149 + ($146 << 2) | 0; //@line 4101
  $152 = HEAP32[$__me >> 2] | 0; //@line 4102
  $155 = $151 - $150 | 0; //@line 4105
  if (($146 | 0) != 1) {
   $$0$i$i30 = $152; //@line 4108
   $158 = $150; //@line 4108
   while (1) {
    HEAP32[$$0$i$i30 >> 2] = HEAP32[$158 >> 2]; //@line 4111
    $158 = $158 + 4 | 0; //@line 4112
    if (($158 | 0) == ($151 | 0)) {
     break;
    } else {
     $$0$i$i30 = $$0$i$i30 + 4 | 0; //@line 4118
    }
   }
  }
  HEAP32[$__me >> 2] = $152 + ($155 >>> 2 << 2); //@line 4124
 }
 switch ($__flags & 176 | 0) {
 case 32:
  {
   HEAP32[$__mi >> 2] = HEAP32[$__me >> 2]; //@line 4130
   break;
  }
 case 16:
  {
   break;
  }
 default:
  {
   HEAP32[$__mi >> 2] = $__mb; //@line 4137
  }
 }
 return;
}
function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl, $__neg, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__intl = $__intl | 0;
 $__neg = $__neg | 0;
 $__loc = $__loc | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $$pre$phi32Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $2 = 0, $3 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $80 = 0, $81 = 0, $84 = 0, $9 = 0, $99 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP; //@line 2350
 STACKTOP = STACKTOP + 112 | 0; //@line 2351
 $0 = sp + 108 | 0; //@line 2352
 $1 = sp + 96 | 0; //@line 2353
 $2 = sp + 92 | 0; //@line 2354
 $3 = sp + 80 | 0; //@line 2355
 $4 = sp + 68 | 0; //@line 2356
 $5 = sp + 56 | 0; //@line 2357
 $6 = sp + 52 | 0; //@line 2358
 $7 = sp + 40 | 0; //@line 2359
 $8 = sp + 36 | 0; //@line 2360
 $9 = sp + 24 | 0; //@line 2361
 $10 = sp + 12 | 0; //@line 2362
 $11 = sp; //@line 2363
 if ($__intl) {
  $12 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 8936) | 0; //@line 2365
  $13 = HEAP32[$12 >> 2] | 0; //@line 2366
  if ($__neg) {
   FUNCTION_TABLE_vii[HEAP32[$13 + 44 >> 2] & 63]($0, $12); //@line 2370
   $16 = HEAP32[$0 >> 2] | 0; //@line 2371
   HEAP8[$__pat >> 0] = $16; //@line 2372
   HEAP8[$__pat + 1 >> 0] = $16 >> 8; //@line 2372
   HEAP8[$__pat + 2 >> 0] = $16 >> 16; //@line 2372
   HEAP8[$__pat + 3 >> 0] = $16 >> 24; //@line 2372
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 32 >> 2] & 63]($1, $12); //@line 2376
   if (!(HEAP8[$__sn >> 0] & 1)) {
    HEAP8[$__sn + 1 >> 0] = 0; //@line 2382
    HEAP8[$__sn >> 0] = 0; //@line 2383
   } else {
    HEAP8[HEAP32[$__sn + 8 >> 2] >> 0] = 0; //@line 2387
    HEAP32[$__sn + 4 >> 2] = 0; //@line 2389
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn, 0); //@line 2391
   HEAP32[$__sn >> 2] = HEAP32[$1 >> 2]; //@line 2392
   HEAP32[$__sn + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 2392
   HEAP32[$__sn + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 2392
   HEAP32[$1 >> 2] = 0; //@line 2393
   HEAP32[$1 + 4 >> 2] = 0; //@line 2395
   HEAP32[$1 + 8 >> 2] = 0; //@line 2397
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1); //@line 2398
   $$pre$phiZ2D = $12; //@line 2399
  } else {
   FUNCTION_TABLE_vii[HEAP32[$13 + 40 >> 2] & 63]($2, $12); //@line 2403
   $31 = HEAP32[$2 >> 2] | 0; //@line 2404
   HEAP8[$__pat >> 0] = $31; //@line 2405
   HEAP8[$__pat + 1 >> 0] = $31 >> 8; //@line 2405
   HEAP8[$__pat + 2 >> 0] = $31 >> 16; //@line 2405
   HEAP8[$__pat + 3 >> 0] = $31 >> 24; //@line 2405
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] & 63]($3, $12); //@line 2409
   if (!(HEAP8[$__sn >> 0] & 1)) {
    HEAP8[$__sn + 1 >> 0] = 0; //@line 2415
    HEAP8[$__sn >> 0] = 0; //@line 2416
   } else {
    HEAP8[HEAP32[$__sn + 8 >> 2] >> 0] = 0; //@line 2420
    HEAP32[$__sn + 4 >> 2] = 0; //@line 2422
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn, 0); //@line 2424
   HEAP32[$__sn >> 2] = HEAP32[$3 >> 2]; //@line 2425
   HEAP32[$__sn + 4 >> 2] = HEAP32[$3 + 4 >> 2]; //@line 2425
   HEAP32[$__sn + 8 >> 2] = HEAP32[$3 + 8 >> 2]; //@line 2425
   HEAP32[$3 >> 2] = 0; //@line 2426
   HEAP32[$3 + 4 >> 2] = 0; //@line 2428
   HEAP32[$3 + 8 >> 2] = 0; //@line 2430
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3); //@line 2431
   $$pre$phiZ2D = $12; //@line 2432
  }
  HEAP8[$__dp >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 12 >> 2] & 63]($12) | 0; //@line 2438
  HEAP8[$__ts >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 16 >> 2] & 63]($12) | 0; //@line 2443
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + 20 >> 2] & 63]($4, $12); //@line 2447
  if (!(HEAP8[$__grp >> 0] & 1)) {
   HEAP8[$__grp + 1 >> 0] = 0; //@line 2453
   HEAP8[$__grp >> 0] = 0; //@line 2454
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0; //@line 2458
   HEAP32[$__grp + 4 >> 2] = 0; //@line 2460
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0); //@line 2462
  HEAP32[$__grp >> 2] = HEAP32[$4 >> 2]; //@line 2463
  HEAP32[$__grp + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 2463
  HEAP32[$__grp + 8 >> 2] = HEAP32[$4 + 8 >> 2]; //@line 2463
  HEAP32[$4 >> 2] = 0; //@line 2464
  HEAP32[$4 + 4 >> 2] = 0; //@line 2466
  HEAP32[$4 + 8 >> 2] = 0; //@line 2468
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4); //@line 2469
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + 24 >> 2] & 63]($5, $12); //@line 2473
  if (!(HEAP8[$__sym >> 0] & 1)) {
   HEAP8[$__sym + 1 >> 0] = 0; //@line 2479
   HEAP8[$__sym >> 0] = 0; //@line 2480
  } else {
   HEAP8[HEAP32[$__sym + 8 >> 2] >> 0] = 0; //@line 2484
   HEAP32[$__sym + 4 >> 2] = 0; //@line 2486
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym, 0); //@line 2488
  HEAP32[$__sym >> 2] = HEAP32[$5 >> 2]; //@line 2489
  HEAP32[$__sym + 4 >> 2] = HEAP32[$5 + 4 >> 2]; //@line 2489
  HEAP32[$__sym + 8 >> 2] = HEAP32[$5 + 8 >> 2]; //@line 2489
  HEAP32[$5 >> 2] = 0; //@line 2490
  HEAP32[$5 + 4 >> 2] = 0; //@line 2492
  HEAP32[$5 + 8 >> 2] = 0; //@line 2494
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5); //@line 2495
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 36 >> 2] & 63]($12) | 0; //@line 2500
 } else {
  $80 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 8872) | 0; //@line 2502
  $81 = HEAP32[$80 >> 2] | 0; //@line 2503
  if ($__neg) {
   FUNCTION_TABLE_vii[HEAP32[$81 + 44 >> 2] & 63]($6, $80); //@line 2507
   $84 = HEAP32[$6 >> 2] | 0; //@line 2508
   HEAP8[$__pat >> 0] = $84; //@line 2509
   HEAP8[$__pat + 1 >> 0] = $84 >> 8; //@line 2509
   HEAP8[$__pat + 2 >> 0] = $84 >> 16; //@line 2509
   HEAP8[$__pat + 3 >> 0] = $84 >> 24; //@line 2509
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$80 >> 2] | 0) + 32 >> 2] & 63]($7, $80); //@line 2513
   if (!(HEAP8[$__sn >> 0] & 1)) {
    HEAP8[$__sn + 1 >> 0] = 0; //@line 2519
    HEAP8[$__sn >> 0] = 0; //@line 2520
   } else {
    HEAP8[HEAP32[$__sn + 8 >> 2] >> 0] = 0; //@line 2524
    HEAP32[$__sn + 4 >> 2] = 0; //@line 2526
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn, 0); //@line 2528
   HEAP32[$__sn >> 2] = HEAP32[$7 >> 2]; //@line 2529
   HEAP32[$__sn + 4 >> 2] = HEAP32[$7 + 4 >> 2]; //@line 2529
   HEAP32[$__sn + 8 >> 2] = HEAP32[$7 + 8 >> 2]; //@line 2529
   HEAP32[$7 >> 2] = 0; //@line 2530
   HEAP32[$7 + 4 >> 2] = 0; //@line 2532
   HEAP32[$7 + 8 >> 2] = 0; //@line 2534
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7); //@line 2535
   $$pre$phi32Z2D = $80; //@line 2536
  } else {
   FUNCTION_TABLE_vii[HEAP32[$81 + 40 >> 2] & 63]($8, $80); //@line 2540
   $99 = HEAP32[$8 >> 2] | 0; //@line 2541
   HEAP8[$__pat >> 0] = $99; //@line 2542
   HEAP8[$__pat + 1 >> 0] = $99 >> 8; //@line 2542
   HEAP8[$__pat + 2 >> 0] = $99 >> 16; //@line 2542
   HEAP8[$__pat + 3 >> 0] = $99 >> 24; //@line 2542
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$80 >> 2] | 0) + 28 >> 2] & 63]($9, $80); //@line 2546
   if (!(HEAP8[$__sn >> 0] & 1)) {
    HEAP8[$__sn + 1 >> 0] = 0; //@line 2552
    HEAP8[$__sn >> 0] = 0; //@line 2553
   } else {
    HEAP8[HEAP32[$__sn + 8 >> 2] >> 0] = 0; //@line 2557
    HEAP32[$__sn + 4 >> 2] = 0; //@line 2559
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn, 0); //@line 2561
   HEAP32[$__sn >> 2] = HEAP32[$9 >> 2]; //@line 2562
   HEAP32[$__sn + 4 >> 2] = HEAP32[$9 + 4 >> 2]; //@line 2562
   HEAP32[$__sn + 8 >> 2] = HEAP32[$9 + 8 >> 2]; //@line 2562
   HEAP32[$9 >> 2] = 0; //@line 2563
   HEAP32[$9 + 4 >> 2] = 0; //@line 2565
   HEAP32[$9 + 8 >> 2] = 0; //@line 2567
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9); //@line 2568
   $$pre$phi32Z2D = $80; //@line 2569
  }
  HEAP8[$__dp >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$80 >> 2] | 0) + 12 >> 2] & 63]($80) | 0; //@line 2575
  HEAP8[$__ts >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$80 >> 2] | 0) + 16 >> 2] & 63]($80) | 0; //@line 2580
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$$pre$phi32Z2D >> 2] | 0) + 20 >> 2] & 63]($10, $80); //@line 2584
  if (!(HEAP8[$__grp >> 0] & 1)) {
   HEAP8[$__grp + 1 >> 0] = 0; //@line 2590
   HEAP8[$__grp >> 0] = 0; //@line 2591
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0; //@line 2595
   HEAP32[$__grp + 4 >> 2] = 0; //@line 2597
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0); //@line 2599
  HEAP32[$__grp >> 2] = HEAP32[$10 >> 2]; //@line 2600
  HEAP32[$__grp + 4 >> 2] = HEAP32[$10 + 4 >> 2]; //@line 2600
  HEAP32[$__grp + 8 >> 2] = HEAP32[$10 + 8 >> 2]; //@line 2600
  HEAP32[$10 >> 2] = 0; //@line 2601
  HEAP32[$10 + 4 >> 2] = 0; //@line 2603
  HEAP32[$10 + 8 >> 2] = 0; //@line 2605
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10); //@line 2606
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$$pre$phi32Z2D >> 2] | 0) + 24 >> 2] & 63]($11, $80); //@line 2610
  if (!(HEAP8[$__sym >> 0] & 1)) {
   HEAP8[$__sym + 1 >> 0] = 0; //@line 2616
   HEAP8[$__sym >> 0] = 0; //@line 2617
  } else {
   HEAP8[HEAP32[$__sym + 8 >> 2] >> 0] = 0; //@line 2621
   HEAP32[$__sym + 4 >> 2] = 0; //@line 2623
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym, 0); //@line 2625
  HEAP32[$__sym >> 2] = HEAP32[$11 >> 2]; //@line 2626
  HEAP32[$__sym + 4 >> 2] = HEAP32[$11 + 4 >> 2]; //@line 2626
  HEAP32[$__sym + 8 >> 2] = HEAP32[$11 + 8 >> 2]; //@line 2626
  HEAP32[$11 >> 2] = 0; //@line 2627
  HEAP32[$11 + 4 >> 2] = 0; //@line 2629
  HEAP32[$11 + 8 >> 2] = 0; //@line 2631
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11); //@line 2632
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$80 >> 2] | 0) + 36 >> 2] & 63]($80) | 0; //@line 2637
 }
 HEAP32[$__fd >> 2] = $storemerge; //@line 2639
 STACKTOP = sp; //@line 2640
 return;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0; //@line 869
 $n_sroa_1_4_extract_shift$0 = $a$1; //@line 870
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0; //@line 871
 $d_sroa_0_0_extract_trunc = $b$0; //@line 872
 $d_sroa_1_4_extract_shift$0 = $b$1; //@line 873
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0; //@line 874
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0; //@line 876
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 879
    HEAP32[$rem + 4 >> 2] = 0; //@line 880
   }
   $_0$1 = 0; //@line 882
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 883
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 884
  } else {
   if (!$4) {
    $_0$1 = 0; //@line 887
    $_0$0 = 0; //@line 888
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 889
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 891
   HEAP32[$rem + 4 >> 2] = $a$1 & 0; //@line 892
   $_0$1 = 0; //@line 893
   $_0$0 = 0; //@line 894
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 895
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0; //@line 898
 do {
  if (!$d_sroa_0_0_extract_trunc) {
   if ($17) {
    if ($rem) {
     HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 903
     HEAP32[$rem + 4 >> 2] = 0; //@line 904
    }
    $_0$1 = 0; //@line 906
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 907
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 908
   }
   if (!$n_sroa_0_0_extract_trunc) {
    if ($rem) {
     HEAP32[$rem >> 2] = 0; //@line 912
     HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0); //@line 913
    }
    $_0$1 = 0; //@line 915
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0; //@line 916
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 917
   }
   $37 = $d_sroa_1_4_extract_trunc - 1 | 0; //@line 919
   if (!($37 & $d_sroa_1_4_extract_trunc)) {
    if ($rem) {
     HEAP32[$rem >> 2] = $a$0 | 0; //@line 922
     HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0; //@line 923
    }
    $_0$1 = 0; //@line 925
    $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0); //@line 926
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 927
   }
   $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 930
   if ($51 >>> 0 <= 30) {
    $57 = $51 + 1 | 0; //@line 932
    $58 = 31 - $51 | 0; //@line 933
    $sr_1_ph = $57; //@line 934
    $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0); //@line 935
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0); //@line 936
    $q_sroa_0_1_ph = 0; //@line 937
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58; //@line 938
    break;
   }
   if (!$rem) {
    $_0$1 = 0; //@line 942
    $_0$0 = 0; //@line 943
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 944
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 946
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 947
   $_0$1 = 0; //@line 948
   $_0$0 = 0; //@line 949
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 950
  } else {
   if (!$17) {
    $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 954
    if ($119 >>> 0 <= 31) {
     $125 = $119 + 1 | 0; //@line 956
     $126 = 31 - $119 | 0; //@line 957
     $130 = $119 - 31 >> 31; //@line 958
     $sr_1_ph = $125; //@line 959
     $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126; //@line 960
     $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130; //@line 961
     $q_sroa_0_1_ph = 0; //@line 962
     $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126; //@line 963
     break;
    }
    if (!$rem) {
     $_0$1 = 0; //@line 967
     $_0$0 = 0; //@line 968
     return (tempRet0 = $_0$1, $_0$0) | 0; //@line 969
    }
    HEAP32[$rem >> 2] = $a$0 | 0; //@line 971
    HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 972
    $_0$1 = 0; //@line 973
    $_0$0 = 0; //@line 974
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 975
   }
   $66 = $d_sroa_0_0_extract_trunc - 1 | 0; //@line 977
   if ($66 & $d_sroa_0_0_extract_trunc) {
    $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 980
    $89 = 64 - $88 | 0; //@line 981
    $91 = 32 - $88 | 0; //@line 982
    $92 = $91 >> 31; //@line 983
    $95 = $88 - 32 | 0; //@line 984
    $105 = $95 >> 31; //@line 985
    $sr_1_ph = $88; //@line 986
    $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105; //@line 987
    $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0); //@line 988
    $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92; //@line 989
    $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31; //@line 990
    break;
   }
   if ($rem) {
    HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc; //@line 994
    HEAP32[$rem + 4 >> 2] = 0; //@line 995
   }
   if (($d_sroa_0_0_extract_trunc | 0) == 1) {
    $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 998
    $_0$0 = $a$0 | 0 | 0; //@line 999
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 1000
   } else {
    $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0; //@line 1002
    $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0; //@line 1003
    $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0; //@line 1004
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 1005
   }
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph; //@line 1010
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph; //@line 1011
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph; //@line 1012
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph; //@line 1013
  $carry_0_lcssa$1 = 0; //@line 1014
  $carry_0_lcssa$0 = 0; //@line 1015
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0; //@line 1017
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0; //@line 1018
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0; //@line 1019
  $137$1 = tempRet0; //@line 1020
  $q_sroa_1_1198 = $q_sroa_1_1_ph; //@line 1021
  $q_sroa_0_1199 = $q_sroa_0_1_ph; //@line 1022
  $r_sroa_1_1200 = $r_sroa_1_1_ph; //@line 1023
  $r_sroa_0_1201 = $r_sroa_0_1_ph; //@line 1024
  $sr_1202 = $sr_1_ph; //@line 1025
  $carry_0203 = 0; //@line 1026
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1; //@line 1028
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1; //@line 1029
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0; //@line 1030
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0; //@line 1031
   _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0; //@line 1032
   $150$1 = tempRet0; //@line 1033
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1; //@line 1034
   $carry_0203 = $151$0 & 1; //@line 1035
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0; //@line 1037
   $r_sroa_1_1200 = tempRet0; //@line 1038
   $sr_1202 = $sr_1202 - 1 | 0; //@line 1039
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198; //@line 1051
  $q_sroa_0_1_lcssa = $q_sroa_0_1199; //@line 1052
  $r_sroa_1_1_lcssa = $r_sroa_1_1200; //@line 1053
  $r_sroa_0_1_lcssa = $r_sroa_0_1201; //@line 1054
  $carry_0_lcssa$1 = 0; //@line 1055
  $carry_0_lcssa$0 = $carry_0203; //@line 1056
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa; //@line 1058
 $q_sroa_0_0_insert_ext75$1 = 0; //@line 1059
 if ($rem) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa; //@line 1062
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa; //@line 1063
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1; //@line 1065
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0; //@line 1066
 return (tempRet0 = $_0$1, $_0$0) | 0; //@line 1067
}
function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl, $__neg, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__intl = $__intl | 0;
 $__neg = $__neg | 0;
 $__loc = $__loc | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $2 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $77 = 0, $78 = 0, $8 = 0, $81 = 0, $9 = 0, $95 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP; //@line 3468
 STACKTOP = STACKTOP + 112 | 0; //@line 3469
 $0 = sp + 108 | 0; //@line 3470
 $1 = sp + 96 | 0; //@line 3471
 $2 = sp + 92 | 0; //@line 3472
 $3 = sp + 80 | 0; //@line 3473
 $4 = sp + 68 | 0; //@line 3474
 $5 = sp + 56 | 0; //@line 3475
 $6 = sp + 52 | 0; //@line 3476
 $7 = sp + 40 | 0; //@line 3477
 $8 = sp + 36 | 0; //@line 3478
 $9 = sp + 24 | 0; //@line 3479
 $10 = sp + 12 | 0; //@line 3480
 $11 = sp; //@line 3481
 if ($__intl) {
  $12 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 9064) | 0; //@line 3483
  $13 = HEAP32[$12 >> 2] | 0; //@line 3484
  if ($__neg) {
   FUNCTION_TABLE_vii[HEAP32[$13 + 44 >> 2] & 63]($0, $12); //@line 3488
   $16 = HEAP32[$0 >> 2] | 0; //@line 3489
   HEAP8[$__pat >> 0] = $16; //@line 3490
   HEAP8[$__pat + 1 >> 0] = $16 >> 8; //@line 3490
   HEAP8[$__pat + 2 >> 0] = $16 >> 16; //@line 3490
   HEAP8[$__pat + 3 >> 0] = $16 >> 24; //@line 3490
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 32 >> 2] & 63]($1, $12); //@line 3494
   if (!(HEAP8[$__sn >> 0] & 1)) {
    HEAP8[$__sn >> 0] = 0; //@line 3499
   } else {
    HEAP32[HEAP32[$__sn + 8 >> 2] >> 2] = 0; //@line 3503
   }
   HEAP32[$__sn + 4 >> 2] = 0; //@line 3506
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn, 0); //@line 3507
   HEAP32[$__sn >> 2] = HEAP32[$1 >> 2]; //@line 3508
   HEAP32[$__sn + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 3508
   HEAP32[$__sn + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 3508
   HEAP32[$1 >> 2] = 0; //@line 3509
   HEAP32[$1 + 4 >> 2] = 0; //@line 3511
   HEAP32[$1 + 8 >> 2] = 0; //@line 3513
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($1); //@line 3514
  } else {
   FUNCTION_TABLE_vii[HEAP32[$13 + 40 >> 2] & 63]($2, $12); //@line 3518
   $30 = HEAP32[$2 >> 2] | 0; //@line 3519
   HEAP8[$__pat >> 0] = $30; //@line 3520
   HEAP8[$__pat + 1 >> 0] = $30 >> 8; //@line 3520
   HEAP8[$__pat + 2 >> 0] = $30 >> 16; //@line 3520
   HEAP8[$__pat + 3 >> 0] = $30 >> 24; //@line 3520
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] & 63]($3, $12); //@line 3524
   if (!(HEAP8[$__sn >> 0] & 1)) {
    HEAP8[$__sn >> 0] = 0; //@line 3529
   } else {
    HEAP32[HEAP32[$__sn + 8 >> 2] >> 2] = 0; //@line 3533
   }
   HEAP32[$__sn + 4 >> 2] = 0; //@line 3536
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn, 0); //@line 3537
   HEAP32[$__sn >> 2] = HEAP32[$3 >> 2]; //@line 3538
   HEAP32[$__sn + 4 >> 2] = HEAP32[$3 + 4 >> 2]; //@line 3538
   HEAP32[$__sn + 8 >> 2] = HEAP32[$3 + 8 >> 2]; //@line 3538
   HEAP32[$3 >> 2] = 0; //@line 3539
   HEAP32[$3 + 4 >> 2] = 0; //@line 3541
   HEAP32[$3 + 8 >> 2] = 0; //@line 3543
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($3); //@line 3544
  }
  HEAP32[$__dp >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 12 >> 2] & 63]($12) | 0; //@line 3550
  HEAP32[$__ts >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 16 >> 2] & 63]($12) | 0; //@line 3555
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 20 >> 2] & 63]($4, $12); //@line 3559
  if (!(HEAP8[$__grp >> 0] & 1)) {
   HEAP8[$__grp + 1 >> 0] = 0; //@line 3565
   HEAP8[$__grp >> 0] = 0; //@line 3566
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0; //@line 3570
   HEAP32[$__grp + 4 >> 2] = 0; //@line 3572
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0); //@line 3574
  HEAP32[$__grp >> 2] = HEAP32[$4 >> 2]; //@line 3575
  HEAP32[$__grp + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 3575
  HEAP32[$__grp + 8 >> 2] = HEAP32[$4 + 8 >> 2]; //@line 3575
  HEAP32[$4 >> 2] = 0; //@line 3576
  HEAP32[$4 + 4 >> 2] = 0; //@line 3578
  HEAP32[$4 + 8 >> 2] = 0; //@line 3580
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4); //@line 3581
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 24 >> 2] & 63]($5, $12); //@line 3585
  if (!(HEAP8[$__sym >> 0] & 1)) {
   HEAP8[$__sym >> 0] = 0; //@line 3590
  } else {
   HEAP32[HEAP32[$__sym + 8 >> 2] >> 2] = 0; //@line 3594
  }
  HEAP32[$__sym + 4 >> 2] = 0; //@line 3597
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym, 0); //@line 3598
  HEAP32[$__sym >> 2] = HEAP32[$5 >> 2]; //@line 3599
  HEAP32[$__sym + 4 >> 2] = HEAP32[$5 + 4 >> 2]; //@line 3599
  HEAP32[$__sym + 8 >> 2] = HEAP32[$5 + 8 >> 2]; //@line 3599
  HEAP32[$5 >> 2] = 0; //@line 3600
  HEAP32[$5 + 4 >> 2] = 0; //@line 3602
  HEAP32[$5 + 8 >> 2] = 0; //@line 3604
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($5); //@line 3605
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 36 >> 2] & 63]($12) | 0; //@line 3610
 } else {
  $77 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 9e3) | 0; //@line 3612
  $78 = HEAP32[$77 >> 2] | 0; //@line 3613
  if ($__neg) {
   FUNCTION_TABLE_vii[HEAP32[$78 + 44 >> 2] & 63]($6, $77); //@line 3617
   $81 = HEAP32[$6 >> 2] | 0; //@line 3618
   HEAP8[$__pat >> 0] = $81; //@line 3619
   HEAP8[$__pat + 1 >> 0] = $81 >> 8; //@line 3619
   HEAP8[$__pat + 2 >> 0] = $81 >> 16; //@line 3619
   HEAP8[$__pat + 3 >> 0] = $81 >> 24; //@line 3619
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$77 >> 2] | 0) + 32 >> 2] & 63]($7, $77); //@line 3623
   if (!(HEAP8[$__sn >> 0] & 1)) {
    HEAP8[$__sn >> 0] = 0; //@line 3628
   } else {
    HEAP32[HEAP32[$__sn + 8 >> 2] >> 2] = 0; //@line 3632
   }
   HEAP32[$__sn + 4 >> 2] = 0; //@line 3635
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn, 0); //@line 3636
   HEAP32[$__sn >> 2] = HEAP32[$7 >> 2]; //@line 3637
   HEAP32[$__sn + 4 >> 2] = HEAP32[$7 + 4 >> 2]; //@line 3637
   HEAP32[$__sn + 8 >> 2] = HEAP32[$7 + 8 >> 2]; //@line 3637
   HEAP32[$7 >> 2] = 0; //@line 3638
   HEAP32[$7 + 4 >> 2] = 0; //@line 3640
   HEAP32[$7 + 8 >> 2] = 0; //@line 3642
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($7); //@line 3643
  } else {
   FUNCTION_TABLE_vii[HEAP32[$78 + 40 >> 2] & 63]($8, $77); //@line 3647
   $95 = HEAP32[$8 >> 2] | 0; //@line 3648
   HEAP8[$__pat >> 0] = $95; //@line 3649
   HEAP8[$__pat + 1 >> 0] = $95 >> 8; //@line 3649
   HEAP8[$__pat + 2 >> 0] = $95 >> 16; //@line 3649
   HEAP8[$__pat + 3 >> 0] = $95 >> 24; //@line 3649
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$77 >> 2] | 0) + 28 >> 2] & 63]($9, $77); //@line 3653
   if (!(HEAP8[$__sn >> 0] & 1)) {
    HEAP8[$__sn >> 0] = 0; //@line 3658
   } else {
    HEAP32[HEAP32[$__sn + 8 >> 2] >> 2] = 0; //@line 3662
   }
   HEAP32[$__sn + 4 >> 2] = 0; //@line 3665
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn, 0); //@line 3666
   HEAP32[$__sn >> 2] = HEAP32[$9 >> 2]; //@line 3667
   HEAP32[$__sn + 4 >> 2] = HEAP32[$9 + 4 >> 2]; //@line 3667
   HEAP32[$__sn + 8 >> 2] = HEAP32[$9 + 8 >> 2]; //@line 3667
   HEAP32[$9 >> 2] = 0; //@line 3668
   HEAP32[$9 + 4 >> 2] = 0; //@line 3670
   HEAP32[$9 + 8 >> 2] = 0; //@line 3672
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($9); //@line 3673
  }
  HEAP32[$__dp >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$77 >> 2] | 0) + 12 >> 2] & 63]($77) | 0; //@line 3679
  HEAP32[$__ts >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$77 >> 2] | 0) + 16 >> 2] & 63]($77) | 0; //@line 3684
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$77 >> 2] | 0) + 20 >> 2] & 63]($10, $77); //@line 3688
  if (!(HEAP8[$__grp >> 0] & 1)) {
   HEAP8[$__grp + 1 >> 0] = 0; //@line 3694
   HEAP8[$__grp >> 0] = 0; //@line 3695
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0; //@line 3699
   HEAP32[$__grp + 4 >> 2] = 0; //@line 3701
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0); //@line 3703
  HEAP32[$__grp >> 2] = HEAP32[$10 >> 2]; //@line 3704
  HEAP32[$__grp + 4 >> 2] = HEAP32[$10 + 4 >> 2]; //@line 3704
  HEAP32[$__grp + 8 >> 2] = HEAP32[$10 + 8 >> 2]; //@line 3704
  HEAP32[$10 >> 2] = 0; //@line 3705
  HEAP32[$10 + 4 >> 2] = 0; //@line 3707
  HEAP32[$10 + 8 >> 2] = 0; //@line 3709
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10); //@line 3710
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$77 >> 2] | 0) + 24 >> 2] & 63]($11, $77); //@line 3714
  if (!(HEAP8[$__sym >> 0] & 1)) {
   HEAP8[$__sym >> 0] = 0; //@line 3719
  } else {
   HEAP32[HEAP32[$__sym + 8 >> 2] >> 2] = 0; //@line 3723
  }
  HEAP32[$__sym + 4 >> 2] = 0; //@line 3726
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym, 0); //@line 3727
  HEAP32[$__sym >> 2] = HEAP32[$11 >> 2]; //@line 3728
  HEAP32[$__sym + 4 >> 2] = HEAP32[$11 + 4 >> 2]; //@line 3728
  HEAP32[$__sym + 8 >> 2] = HEAP32[$11 + 8 >> 2]; //@line 3728
  HEAP32[$11 >> 2] = 0; //@line 3729
  HEAP32[$11 + 4 >> 2] = 0; //@line 3731
  HEAP32[$11 + 8 >> 2] = 0; //@line 3733
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11); //@line 3734
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$77 >> 2] | 0) + 36 >> 2] & 63]($77) | 0; //@line 3739
 }
 HEAP32[$__fd >> 2] = $storemerge; //@line 3741
 STACKTOP = sp; //@line 3742
 return;
}
function __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd) {
 $__intl = $__intl | 0;
 $__loc = $__loc | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__psn = $__psn | 0;
 $__nsn = $__nsn | 0;
 $__fd = $__fd | 0;
 var $0 = 0, $1 = 0, $10 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $75 = 0, $79 = 0, $8 = 0, $9 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP; //@line 15995
 STACKTOP = STACKTOP + 112 | 0; //@line 15996
 $0 = sp + 100 | 0; //@line 15997
 $1 = sp + 88 | 0; //@line 15998
 $2 = sp + 76 | 0; //@line 15999
 $3 = sp + 64 | 0; //@line 16000
 $4 = sp + 52 | 0; //@line 16001
 $5 = sp + 48 | 0; //@line 16002
 $6 = sp + 36 | 0; //@line 16003
 $7 = sp + 24 | 0; //@line 16004
 $8 = sp + 12 | 0; //@line 16005
 $9 = sp; //@line 16006
 if ($__intl) {
  $10 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 8936) | 0; //@line 16008
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 44 >> 2] & 63]($0, $10); //@line 16012
  $14 = HEAP32[$0 >> 2] | 0; //@line 16013
  HEAP8[$__pat >> 0] = $14; //@line 16014
  HEAP8[$__pat + 1 >> 0] = $14 >> 8; //@line 16014
  HEAP8[$__pat + 2 >> 0] = $14 >> 16; //@line 16014
  HEAP8[$__pat + 3 >> 0] = $14 >> 24; //@line 16014
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 32 >> 2] & 63]($1, $10); //@line 16018
  if (!(HEAP8[$__nsn >> 0] & 1)) {
   HEAP8[$__nsn + 1 >> 0] = 0; //@line 16024
   HEAP8[$__nsn >> 0] = 0; //@line 16025
  } else {
   HEAP8[HEAP32[$__nsn + 8 >> 2] >> 0] = 0; //@line 16029
   HEAP32[$__nsn + 4 >> 2] = 0; //@line 16031
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn, 0); //@line 16033
  HEAP32[$__nsn >> 2] = HEAP32[$1 >> 2]; //@line 16034
  HEAP32[$__nsn + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 16034
  HEAP32[$__nsn + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 16034
  HEAP32[$1 >> 2] = 0; //@line 16035
  HEAP32[$1 + 4 >> 2] = 0; //@line 16037
  HEAP32[$1 + 8 >> 2] = 0; //@line 16039
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1); //@line 16040
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 28 >> 2] & 63]($2, $10); //@line 16044
  if (!(HEAP8[$__psn >> 0] & 1)) {
   HEAP8[$__psn + 1 >> 0] = 0; //@line 16050
   HEAP8[$__psn >> 0] = 0; //@line 16051
  } else {
   HEAP8[HEAP32[$__psn + 8 >> 2] >> 0] = 0; //@line 16055
   HEAP32[$__psn + 4 >> 2] = 0; //@line 16057
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn, 0); //@line 16059
  HEAP32[$__psn >> 2] = HEAP32[$2 >> 2]; //@line 16060
  HEAP32[$__psn + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 16060
  HEAP32[$__psn + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 16060
  HEAP32[$2 >> 2] = 0; //@line 16061
  HEAP32[$2 + 4 >> 2] = 0; //@line 16063
  HEAP32[$2 + 8 >> 2] = 0; //@line 16065
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2); //@line 16066
  HEAP8[$__dp >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 12 >> 2] & 63]($10) | 0; //@line 16071
  HEAP8[$__ts >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 16 >> 2] & 63]($10) | 0; //@line 16076
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] & 63]($3, $10); //@line 16080
  if (!(HEAP8[$__grp >> 0] & 1)) {
   HEAP8[$__grp + 1 >> 0] = 0; //@line 16086
   HEAP8[$__grp >> 0] = 0; //@line 16087
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0; //@line 16091
   HEAP32[$__grp + 4 >> 2] = 0; //@line 16093
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0); //@line 16095
  HEAP32[$__grp >> 2] = HEAP32[$3 >> 2]; //@line 16096
  HEAP32[$__grp + 4 >> 2] = HEAP32[$3 + 4 >> 2]; //@line 16096
  HEAP32[$__grp + 8 >> 2] = HEAP32[$3 + 8 >> 2]; //@line 16096
  HEAP32[$3 >> 2] = 0; //@line 16097
  HEAP32[$3 + 4 >> 2] = 0; //@line 16099
  HEAP32[$3 + 8 >> 2] = 0; //@line 16101
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3); //@line 16102
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] & 63]($4, $10); //@line 16106
  if (!(HEAP8[$__sym >> 0] & 1)) {
   HEAP8[$__sym + 1 >> 0] = 0; //@line 16112
   HEAP8[$__sym >> 0] = 0; //@line 16113
  } else {
   HEAP8[HEAP32[$__sym + 8 >> 2] >> 0] = 0; //@line 16117
   HEAP32[$__sym + 4 >> 2] = 0; //@line 16119
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym, 0); //@line 16121
  HEAP32[$__sym >> 2] = HEAP32[$4 >> 2]; //@line 16122
  HEAP32[$__sym + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 16122
  HEAP32[$__sym + 8 >> 2] = HEAP32[$4 + 8 >> 2]; //@line 16122
  HEAP32[$4 >> 2] = 0; //@line 16123
  HEAP32[$4 + 4 >> 2] = 0; //@line 16125
  HEAP32[$4 + 8 >> 2] = 0; //@line 16127
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4); //@line 16128
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 36 >> 2] & 63]($10) | 0; //@line 16133
 } else {
  $75 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 8872) | 0; //@line 16135
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$75 >> 2] | 0) + 44 >> 2] & 63]($5, $75); //@line 16139
  $79 = HEAP32[$5 >> 2] | 0; //@line 16140
  HEAP8[$__pat >> 0] = $79; //@line 16141
  HEAP8[$__pat + 1 >> 0] = $79 >> 8; //@line 16141
  HEAP8[$__pat + 2 >> 0] = $79 >> 16; //@line 16141
  HEAP8[$__pat + 3 >> 0] = $79 >> 24; //@line 16141
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$75 >> 2] | 0) + 32 >> 2] & 63]($6, $75); //@line 16145
  if (!(HEAP8[$__nsn >> 0] & 1)) {
   HEAP8[$__nsn + 1 >> 0] = 0; //@line 16151
   HEAP8[$__nsn >> 0] = 0; //@line 16152
  } else {
   HEAP8[HEAP32[$__nsn + 8 >> 2] >> 0] = 0; //@line 16156
   HEAP32[$__nsn + 4 >> 2] = 0; //@line 16158
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn, 0); //@line 16160
  HEAP32[$__nsn >> 2] = HEAP32[$6 >> 2]; //@line 16161
  HEAP32[$__nsn + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 16161
  HEAP32[$__nsn + 8 >> 2] = HEAP32[$6 + 8 >> 2]; //@line 16161
  HEAP32[$6 >> 2] = 0; //@line 16162
  HEAP32[$6 + 4 >> 2] = 0; //@line 16164
  HEAP32[$6 + 8 >> 2] = 0; //@line 16166
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6); //@line 16167
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$75 >> 2] | 0) + 28 >> 2] & 63]($7, $75); //@line 16171
  if (!(HEAP8[$__psn >> 0] & 1)) {
   HEAP8[$__psn + 1 >> 0] = 0; //@line 16177
   HEAP8[$__psn >> 0] = 0; //@line 16178
  } else {
   HEAP8[HEAP32[$__psn + 8 >> 2] >> 0] = 0; //@line 16182
   HEAP32[$__psn + 4 >> 2] = 0; //@line 16184
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn, 0); //@line 16186
  HEAP32[$__psn >> 2] = HEAP32[$7 >> 2]; //@line 16187
  HEAP32[$__psn + 4 >> 2] = HEAP32[$7 + 4 >> 2]; //@line 16187
  HEAP32[$__psn + 8 >> 2] = HEAP32[$7 + 8 >> 2]; //@line 16187
  HEAP32[$7 >> 2] = 0; //@line 16188
  HEAP32[$7 + 4 >> 2] = 0; //@line 16190
  HEAP32[$7 + 8 >> 2] = 0; //@line 16192
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7); //@line 16193
  HEAP8[$__dp >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$75 >> 2] | 0) + 12 >> 2] & 63]($75) | 0; //@line 16198
  HEAP8[$__ts >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$75 >> 2] | 0) + 16 >> 2] & 63]($75) | 0; //@line 16203
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$75 >> 2] | 0) + 20 >> 2] & 63]($8, $75); //@line 16207
  if (!(HEAP8[$__grp >> 0] & 1)) {
   HEAP8[$__grp + 1 >> 0] = 0; //@line 16213
   HEAP8[$__grp >> 0] = 0; //@line 16214
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0; //@line 16218
   HEAP32[$__grp + 4 >> 2] = 0; //@line 16220
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0); //@line 16222
  HEAP32[$__grp >> 2] = HEAP32[$8 >> 2]; //@line 16223
  HEAP32[$__grp + 4 >> 2] = HEAP32[$8 + 4 >> 2]; //@line 16223
  HEAP32[$__grp + 8 >> 2] = HEAP32[$8 + 8 >> 2]; //@line 16223
  HEAP32[$8 >> 2] = 0; //@line 16224
  HEAP32[$8 + 4 >> 2] = 0; //@line 16226
  HEAP32[$8 + 8 >> 2] = 0; //@line 16228
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8); //@line 16229
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$75 >> 2] | 0) + 24 >> 2] & 63]($9, $75); //@line 16233
  if (!(HEAP8[$__sym >> 0] & 1)) {
   HEAP8[$__sym + 1 >> 0] = 0; //@line 16239
   HEAP8[$__sym >> 0] = 0; //@line 16240
  } else {
   HEAP8[HEAP32[$__sym + 8 >> 2] >> 0] = 0; //@line 16244
   HEAP32[$__sym + 4 >> 2] = 0; //@line 16246
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym, 0); //@line 16248
  HEAP32[$__sym >> 2] = HEAP32[$9 >> 2]; //@line 16249
  HEAP32[$__sym + 4 >> 2] = HEAP32[$9 + 4 >> 2]; //@line 16249
  HEAP32[$__sym + 8 >> 2] = HEAP32[$9 + 8 >> 2]; //@line 16249
  HEAP32[$9 >> 2] = 0; //@line 16250
  HEAP32[$9 + 4 >> 2] = 0; //@line 16252
  HEAP32[$9 + 8 >> 2] = 0; //@line 16254
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9); //@line 16255
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$75 >> 2] | 0) + 36 >> 2] & 63]($75) | 0; //@line 16260
 }
 HEAP32[$__fd >> 2] = $storemerge; //@line 16262
 STACKTOP = sp; //@line 16263
 return;
}
function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $$01$i$i217 = 0, $$01$i$i22 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $111 = 0, $112 = 0, $120 = 0, $121 = 0, $123 = 0, $126 = 0, $128 = 0, $13 = 0, $132 = 0, $137 = 0, $138 = 0, $139 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $152 = 0, $156 = 0, $162 = 0, $20 = 0, $25 = 0, $26 = 0, $28 = 0, $33 = 0, $34 = 0, $38 = 0, $42 = 0, $45 = 0, $49 = 0, $5 = 0, $51 = 0, $54 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $81 = 0, $82 = 0, $83 = 0, $91 = 0, $95 = 0, $97 = 0, $__dc$019 = 0, $__dc$1 = 0, $__dg$020 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$215 = 0, $__nf$215$lcssa = 0, $__nf$3 = 0, $__ns$028 = 0, $__ns$124 = 0, $__ns$2 = 0, $__p$021 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9004
 STACKTOP = STACKTOP + 16 | 0; //@line 9005
 $__grouping = sp; //@line 9006
 $0 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 9320) | 0; //@line 9007
 $1 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 9476) | 0; //@line 9008
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$1 >> 2] | 0) + 20 >> 2] & 63]($__grouping, $1); //@line 9012
 HEAP32[$__oe >> 2] = $__ob; //@line 9013
 $5 = HEAP8[$__nb >> 0] | 0; //@line 9014
 switch ($5 << 24 >> 24) {
 case 43:
 case 45:
  {
   $10 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 44 >> 2] & 15]($0, $5) | 0; //@line 9021
   $11 = HEAP32[$__oe >> 2] | 0; //@line 9022
   HEAP32[$__oe >> 2] = $11 + 4; //@line 9024
   HEAP32[$11 >> 2] = $10; //@line 9025
   $__nf$0 = $__nb + 1 | 0; //@line 9026
   break;
  }
 default:
  {
   $__nf$0 = $__nb; //@line 9030
  }
 }
 $13 = $__ne; //@line 9033
 L4 : do {
  if (($13 - $__nf$0 | 0) > 1) {
   if ((HEAP8[$__nf$0 >> 0] | 0) == 48) {
    $20 = $__nf$0 + 1 | 0; //@line 9042
    switch (HEAP8[$20 >> 0] | 0) {
    case 88:
    case 120:
     {
      break;
     }
    default:
     {
      label = 4; //@line 9049
      break L4;
     }
    }
    $25 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 44 >> 2] & 15]($0, 48) | 0; //@line 9056
    $26 = HEAP32[$__oe >> 2] | 0; //@line 9057
    HEAP32[$__oe >> 2] = $26 + 4; //@line 9059
    HEAP32[$26 >> 2] = $25; //@line 9060
    $28 = $__nf$0 + 2 | 0; //@line 9061
    $33 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 44 >> 2] & 15]($0, HEAP8[$20 >> 0] | 0) | 0; //@line 9066
    $34 = HEAP32[$__oe >> 2] | 0; //@line 9067
    HEAP32[$__oe >> 2] = $34 + 4; //@line 9069
    HEAP32[$34 >> 2] = $33; //@line 9070
    if ($28 >>> 0 < $__ne >>> 0) {
     $__ns$028 = $28; //@line 9073
     while (1) {
      $38 = HEAP8[$__ns$028 >> 0] | 0; //@line 9076
      if (!(_isxdigit_l($38, __ZNSt3__16__clocEv() | 0) | 0)) {
       $__nf$1 = $28; //@line 9081
       $__ns$2 = $__ns$028; //@line 9081
       break L4;
      }
      $42 = $__ns$028 + 1 | 0; //@line 9084
      if ($42 >>> 0 < $__ne >>> 0) {
       $__ns$028 = $42; //@line 9087
      } else {
       $__nf$1 = $28; //@line 9089
       $__ns$2 = $42; //@line 9089
       break;
      }
     }
    } else {
     $__nf$1 = $28; //@line 9094
     $__ns$2 = $28; //@line 9094
    }
   } else {
    label = 4; //@line 9097
   }
  } else {
   label = 4; //@line 9100
  }
 } while (0);
 L11 : do {
  if ((label | 0) == 4) {
   if ($__nf$0 >>> 0 < $__ne >>> 0) {
    $__ns$124 = $__nf$0; //@line 9107
    while (1) {
     $45 = HEAP8[$__ns$124 >> 0] | 0; //@line 9110
     if (!(_isdigit_l($45, __ZNSt3__16__clocEv() | 0) | 0)) {
      $__nf$1 = $__nf$0; //@line 9115
      $__ns$2 = $__ns$124; //@line 9115
      break L11;
     }
     $49 = $__ns$124 + 1 | 0; //@line 9118
     if ($49 >>> 0 < $__ne >>> 0) {
      $__ns$124 = $49; //@line 9121
     } else {
      $__nf$1 = $__nf$0; //@line 9123
      $__ns$2 = $49; //@line 9123
      break;
     }
    }
   } else {
    $__nf$1 = $__nf$0; //@line 9128
    $__ns$2 = $__nf$0; //@line 9128
   }
  }
 } while (0);
 $51 = HEAP8[$__grouping >> 0] | 0; //@line 9132
 $54 = $__grouping + 4 | 0; //@line 9135
 if (!((($51 & 1) == 0 ? ($51 & 255) >>> 1 : HEAP32[$54 >> 2] | 0) | 0)) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 7]($0, $__nf$1, $__ns$2, HEAP32[$__oe >> 2] | 0) | 0; //@line 9146
  $68 = (HEAP32[$__oe >> 2] | 0) + ($__ns$2 - $__nf$1 << 2) | 0; //@line 9151
  HEAP32[$__oe >> 2] = $68; //@line 9152
  $$pre$phiZ2D = $0; //@line 9153
  $162 = $68; //@line 9153
 } else {
  if (($__nf$1 | 0) != ($__ns$2 | 0)) {
   $70 = $__ns$2 + -1 | 0; //@line 9157
   if ($__nf$1 >>> 0 < $70 >>> 0) {
    $$01$i$i22 = $__nf$1; //@line 9160
    $74 = $70; //@line 9160
    do {
     $72 = HEAP8[$$01$i$i22 >> 0] | 0; //@line 9162
     HEAP8[$$01$i$i22 >> 0] = HEAP8[$74 >> 0] | 0; //@line 9164
     HEAP8[$74 >> 0] = $72; //@line 9165
     $$01$i$i22 = $$01$i$i22 + 1 | 0; //@line 9166
     $74 = $74 + -1 | 0; //@line 9167
    } while ($$01$i$i22 >>> 0 < $74 >>> 0);
   }
  }
  $81 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] & 63]($1) | 0; //@line 9180
  $82 = $__grouping + 8 | 0; //@line 9181
  $83 = $__grouping + 1 | 0; //@line 9182
  if ($__nf$1 >>> 0 < $__ns$2 >>> 0) {
   $__dc$019 = 0; //@line 9185
   $__dg$020 = 0; //@line 9185
   $__p$021 = $__nf$1; //@line 9185
   while (1) {
    $91 = HEAP8[((HEAP8[$__grouping >> 0] & 1) == 0 ? $83 : HEAP32[$82 >> 2] | 0) + $__dg$020 >> 0] | 0; //@line 9193
    if ($91 << 24 >> 24 > 0 & ($__dc$019 | 0) == ($91 << 24 >> 24 | 0)) {
     $95 = HEAP32[$__oe >> 2] | 0; //@line 9199
     HEAP32[$__oe >> 2] = $95 + 4; //@line 9201
     HEAP32[$95 >> 2] = $81; //@line 9202
     $97 = HEAP8[$__grouping >> 0] | 0; //@line 9203
     $__dc$1 = 0; //@line 9214
     $__dg$1 = ($__dg$020 >>> 0 < ((($97 & 1) == 0 ? ($97 & 255) >>> 1 : HEAP32[$54 >> 2] | 0) + -1 | 0) >>> 0 & 1) + $__dg$020 | 0; //@line 9214
    } else {
     $__dc$1 = $__dc$019; //@line 9216
     $__dg$1 = $__dg$020; //@line 9216
    }
    $111 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 44 >> 2] & 15]($0, HEAP8[$__p$021 >> 0] | 0) | 0; //@line 9222
    $112 = HEAP32[$__oe >> 2] | 0; //@line 9223
    HEAP32[$__oe >> 2] = $112 + 4; //@line 9225
    HEAP32[$112 >> 2] = $111; //@line 9226
    $__p$021 = $__p$021 + 1 | 0; //@line 9228
    if ($__p$021 >>> 0 >= $__ns$2 >>> 0) {
     break;
    } else {
     $__dc$019 = $__dc$1 + 1 | 0; //@line 9231
     $__dg$020 = $__dg$1; //@line 9231
    }
   }
  }
  $120 = $__ob + ($__nf$1 - $__nb << 2) | 0; //@line 9240
  $121 = HEAP32[$__oe >> 2] | 0; //@line 9241
  if (($120 | 0) == ($121 | 0)) {
   $$pre$phiZ2D = $0; //@line 9244
   $162 = $120; //@line 9244
  } else {
   $123 = $121 + -4 | 0; //@line 9246
   if ($120 >>> 0 < $123 >>> 0) {
    $$01$i$i217 = $120; //@line 9249
    $128 = $123; //@line 9249
    do {
     $126 = HEAP32[$$01$i$i217 >> 2] | 0; //@line 9251
     HEAP32[$$01$i$i217 >> 2] = HEAP32[$128 >> 2]; //@line 9253
     HEAP32[$128 >> 2] = $126; //@line 9254
     $$01$i$i217 = $$01$i$i217 + 4 | 0; //@line 9255
     $128 = $128 + -4 | 0; //@line 9256
    } while ($$01$i$i217 >>> 0 < $128 >>> 0);
    $$pre$phiZ2D = $0; //@line 9261
    $162 = $121; //@line 9261
   } else {
    $$pre$phiZ2D = $0; //@line 9266
    $162 = $121; //@line 9266
   }
  }
 }
 L36 : do {
  if ($__ns$2 >>> 0 < $__ne >>> 0) {
   $__nf$215 = $__ns$2; //@line 9273
   while (1) {
    $132 = HEAP8[$__nf$215 >> 0] | 0; //@line 9275
    if ($132 << 24 >> 24 == 46) {
     $__nf$215$lcssa = $__nf$215; //@line 9278
     break;
    }
    $144 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + 44 >> 2] & 15]($0, $132) | 0; //@line 9284
    $145 = HEAP32[$__oe >> 2] | 0; //@line 9285
    $146 = $145 + 4 | 0; //@line 9286
    HEAP32[$__oe >> 2] = $146; //@line 9287
    HEAP32[$145 >> 2] = $144; //@line 9288
    $147 = $__nf$215 + 1 | 0; //@line 9289
    if ($147 >>> 0 < $__ne >>> 0) {
     $__nf$215 = $147; //@line 9292
    } else {
     $152 = $146; //@line 9294
     $__nf$3 = $147; //@line 9294
     break L36;
    }
   }
   $137 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] & 63]($1) | 0; //@line 9301
   $138 = HEAP32[$__oe >> 2] | 0; //@line 9302
   $139 = $138 + 4 | 0; //@line 9303
   HEAP32[$__oe >> 2] = $139; //@line 9304
   HEAP32[$138 >> 2] = $137; //@line 9305
   $152 = $139; //@line 9307
   $__nf$3 = $__nf$215$lcssa + 1 | 0; //@line 9307
  } else {
   $152 = $162; //@line 9309
   $__nf$3 = $__ns$2; //@line 9309
  }
 } while (0);
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 7]($0, $__nf$3, $__ne, $152) | 0; //@line 9315
 $156 = (HEAP32[$__oe >> 2] | 0) + ($13 - $__nf$3 << 2) | 0; //@line 9319
 HEAP32[$__oe >> 2] = $156; //@line 9320
 HEAP32[$__op >> 2] = ($__np | 0) == ($__ne | 0) ? $156 : $__ob + ($__np - $__nb << 2) | 0; //@line 9327
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping); //@line 9328
 STACKTOP = sp; //@line 9329
 return;
}
function __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd) {
 $__intl = $__intl | 0;
 $__loc = $__loc | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__psn = $__psn | 0;
 $__nsn = $__nsn | 0;
 $__fd = $__fd | 0;
 var $0 = 0, $1 = 0, $10 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $72 = 0, $76 = 0, $8 = 0, $9 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP; //@line 1868
 STACKTOP = STACKTOP + 112 | 0; //@line 1869
 $0 = sp + 100 | 0; //@line 1870
 $1 = sp + 88 | 0; //@line 1871
 $2 = sp + 76 | 0; //@line 1872
 $3 = sp + 64 | 0; //@line 1873
 $4 = sp + 52 | 0; //@line 1874
 $5 = sp + 48 | 0; //@line 1875
 $6 = sp + 36 | 0; //@line 1876
 $7 = sp + 24 | 0; //@line 1877
 $8 = sp + 12 | 0; //@line 1878
 $9 = sp; //@line 1879
 if ($__intl) {
  $10 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 9064) | 0; //@line 1881
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 44 >> 2] & 63]($0, $10); //@line 1885
  $14 = HEAP32[$0 >> 2] | 0; //@line 1886
  HEAP8[$__pat >> 0] = $14; //@line 1887
  HEAP8[$__pat + 1 >> 0] = $14 >> 8; //@line 1887
  HEAP8[$__pat + 2 >> 0] = $14 >> 16; //@line 1887
  HEAP8[$__pat + 3 >> 0] = $14 >> 24; //@line 1887
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 32 >> 2] & 63]($1, $10); //@line 1891
  if (!(HEAP8[$__nsn >> 0] & 1)) {
   HEAP8[$__nsn >> 0] = 0; //@line 1896
  } else {
   HEAP32[HEAP32[$__nsn + 8 >> 2] >> 2] = 0; //@line 1900
  }
  HEAP32[$__nsn + 4 >> 2] = 0; //@line 1903
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__nsn, 0); //@line 1904
  HEAP32[$__nsn >> 2] = HEAP32[$1 >> 2]; //@line 1905
  HEAP32[$__nsn + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 1905
  HEAP32[$__nsn + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 1905
  HEAP32[$1 >> 2] = 0; //@line 1906
  HEAP32[$1 + 4 >> 2] = 0; //@line 1908
  HEAP32[$1 + 8 >> 2] = 0; //@line 1910
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($1); //@line 1911
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 28 >> 2] & 63]($2, $10); //@line 1915
  if (!(HEAP8[$__psn >> 0] & 1)) {
   HEAP8[$__psn >> 0] = 0; //@line 1920
  } else {
   HEAP32[HEAP32[$__psn + 8 >> 2] >> 2] = 0; //@line 1924
  }
  HEAP32[$__psn + 4 >> 2] = 0; //@line 1927
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__psn, 0); //@line 1928
  HEAP32[$__psn >> 2] = HEAP32[$2 >> 2]; //@line 1929
  HEAP32[$__psn + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 1929
  HEAP32[$__psn + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 1929
  HEAP32[$2 >> 2] = 0; //@line 1930
  HEAP32[$2 + 4 >> 2] = 0; //@line 1932
  HEAP32[$2 + 8 >> 2] = 0; //@line 1934
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($2); //@line 1935
  HEAP32[$__dp >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 12 >> 2] & 63]($10) | 0; //@line 1940
  HEAP32[$__ts >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 16 >> 2] & 63]($10) | 0; //@line 1945
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] & 63]($3, $10); //@line 1949
  if (!(HEAP8[$__grp >> 0] & 1)) {
   HEAP8[$__grp + 1 >> 0] = 0; //@line 1955
   HEAP8[$__grp >> 0] = 0; //@line 1956
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0; //@line 1960
   HEAP32[$__grp + 4 >> 2] = 0; //@line 1962
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0); //@line 1964
  HEAP32[$__grp >> 2] = HEAP32[$3 >> 2]; //@line 1965
  HEAP32[$__grp + 4 >> 2] = HEAP32[$3 + 4 >> 2]; //@line 1965
  HEAP32[$__grp + 8 >> 2] = HEAP32[$3 + 8 >> 2]; //@line 1965
  HEAP32[$3 >> 2] = 0; //@line 1966
  HEAP32[$3 + 4 >> 2] = 0; //@line 1968
  HEAP32[$3 + 8 >> 2] = 0; //@line 1970
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3); //@line 1971
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] & 63]($4, $10); //@line 1975
  if (!(HEAP8[$__sym >> 0] & 1)) {
   HEAP8[$__sym >> 0] = 0; //@line 1980
  } else {
   HEAP32[HEAP32[$__sym + 8 >> 2] >> 2] = 0; //@line 1984
  }
  HEAP32[$__sym + 4 >> 2] = 0; //@line 1987
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym, 0); //@line 1988
  HEAP32[$__sym >> 2] = HEAP32[$4 >> 2]; //@line 1989
  HEAP32[$__sym + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 1989
  HEAP32[$__sym + 8 >> 2] = HEAP32[$4 + 8 >> 2]; //@line 1989
  HEAP32[$4 >> 2] = 0; //@line 1990
  HEAP32[$4 + 4 >> 2] = 0; //@line 1992
  HEAP32[$4 + 8 >> 2] = 0; //@line 1994
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($4); //@line 1995
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 36 >> 2] & 63]($10) | 0; //@line 2000
 } else {
  $72 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 9e3) | 0; //@line 2002
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$72 >> 2] | 0) + 44 >> 2] & 63]($5, $72); //@line 2006
  $76 = HEAP32[$5 >> 2] | 0; //@line 2007
  HEAP8[$__pat >> 0] = $76; //@line 2008
  HEAP8[$__pat + 1 >> 0] = $76 >> 8; //@line 2008
  HEAP8[$__pat + 2 >> 0] = $76 >> 16; //@line 2008
  HEAP8[$__pat + 3 >> 0] = $76 >> 24; //@line 2008
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$72 >> 2] | 0) + 32 >> 2] & 63]($6, $72); //@line 2012
  if (!(HEAP8[$__nsn >> 0] & 1)) {
   HEAP8[$__nsn >> 0] = 0; //@line 2017
  } else {
   HEAP32[HEAP32[$__nsn + 8 >> 2] >> 2] = 0; //@line 2021
  }
  HEAP32[$__nsn + 4 >> 2] = 0; //@line 2024
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__nsn, 0); //@line 2025
  HEAP32[$__nsn >> 2] = HEAP32[$6 >> 2]; //@line 2026
  HEAP32[$__nsn + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 2026
  HEAP32[$__nsn + 8 >> 2] = HEAP32[$6 + 8 >> 2]; //@line 2026
  HEAP32[$6 >> 2] = 0; //@line 2027
  HEAP32[$6 + 4 >> 2] = 0; //@line 2029
  HEAP32[$6 + 8 >> 2] = 0; //@line 2031
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($6); //@line 2032
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$72 >> 2] | 0) + 28 >> 2] & 63]($7, $72); //@line 2036
  if (!(HEAP8[$__psn >> 0] & 1)) {
   HEAP8[$__psn >> 0] = 0; //@line 2041
  } else {
   HEAP32[HEAP32[$__psn + 8 >> 2] >> 2] = 0; //@line 2045
  }
  HEAP32[$__psn + 4 >> 2] = 0; //@line 2048
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__psn, 0); //@line 2049
  HEAP32[$__psn >> 2] = HEAP32[$7 >> 2]; //@line 2050
  HEAP32[$__psn + 4 >> 2] = HEAP32[$7 + 4 >> 2]; //@line 2050
  HEAP32[$__psn + 8 >> 2] = HEAP32[$7 + 8 >> 2]; //@line 2050
  HEAP32[$7 >> 2] = 0; //@line 2051
  HEAP32[$7 + 4 >> 2] = 0; //@line 2053
  HEAP32[$7 + 8 >> 2] = 0; //@line 2055
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($7); //@line 2056
  HEAP32[$__dp >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$72 >> 2] | 0) + 12 >> 2] & 63]($72) | 0; //@line 2061
  HEAP32[$__ts >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$72 >> 2] | 0) + 16 >> 2] & 63]($72) | 0; //@line 2066
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$72 >> 2] | 0) + 20 >> 2] & 63]($8, $72); //@line 2070
  if (!(HEAP8[$__grp >> 0] & 1)) {
   HEAP8[$__grp + 1 >> 0] = 0; //@line 2076
   HEAP8[$__grp >> 0] = 0; //@line 2077
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0; //@line 2081
   HEAP32[$__grp + 4 >> 2] = 0; //@line 2083
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0); //@line 2085
  HEAP32[$__grp >> 2] = HEAP32[$8 >> 2]; //@line 2086
  HEAP32[$__grp + 4 >> 2] = HEAP32[$8 + 4 >> 2]; //@line 2086
  HEAP32[$__grp + 8 >> 2] = HEAP32[$8 + 8 >> 2]; //@line 2086
  HEAP32[$8 >> 2] = 0; //@line 2087
  HEAP32[$8 + 4 >> 2] = 0; //@line 2089
  HEAP32[$8 + 8 >> 2] = 0; //@line 2091
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8); //@line 2092
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$72 >> 2] | 0) + 24 >> 2] & 63]($9, $72); //@line 2096
  if (!(HEAP8[$__sym >> 0] & 1)) {
   HEAP8[$__sym >> 0] = 0; //@line 2101
  } else {
   HEAP32[HEAP32[$__sym + 8 >> 2] >> 2] = 0; //@line 2105
  }
  HEAP32[$__sym + 4 >> 2] = 0; //@line 2108
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym, 0); //@line 2109
  HEAP32[$__sym >> 2] = HEAP32[$9 >> 2]; //@line 2110
  HEAP32[$__sym + 4 >> 2] = HEAP32[$9 + 4 >> 2]; //@line 2110
  HEAP32[$__sym + 8 >> 2] = HEAP32[$9 + 8 >> 2]; //@line 2110
  HEAP32[$9 >> 2] = 0; //@line 2111
  HEAP32[$9 + 4 >> 2] = 0; //@line 2113
  HEAP32[$9 + 8 >> 2] = 0; //@line 2115
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($9); //@line 2116
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$72 >> 2] | 0) + 36 >> 2] & 63]($72) | 0; //@line 2121
 }
 HEAP32[$__fd >> 2] = $storemerge; //@line 2123
 STACKTOP = sp; //@line 2124
 return;
}
function _main() {
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $17 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $29 = 0, $3 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $41 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $53 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $65 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $77 = 0, $8 = 0, $81 = 0, $82 = 0, $88 = 0, $9 = 0, $92 = 0, sp = 0;
 sp = STACKTOP; //@line 64
 STACKTOP = STACKTOP + 112 | 0; //@line 65
 $0 = sp + 108 | 0; //@line 66
 $1 = sp + 96 | 0; //@line 67
 $2 = sp + 84 | 0; //@line 68
 $3 = sp + 72 | 0; //@line 69
 $4 = sp + 60 | 0; //@line 70
 $5 = sp + 48 | 0; //@line 71
 $6 = sp + 36 | 0; //@line 72
 $7 = sp + 24 | 0; //@line 73
 $8 = sp + 12 | 0; //@line 74
 $9 = sp; //@line 75
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($1, 13688, 5); //@line 76
 __ZN12_GLOBAL__N_15touchERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj($1, 439); //@line 77
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1); //@line 78
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($2, 13688, 5); //@line 79
 $10 = __ZN12_GLOBAL__N_16existsERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($2) | 0; //@line 80
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2); //@line 81
 if (!$10) {
  $11 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(6720, 13694, 28) | 0; //@line 83
  HEAP32[$0 >> 2] = __ZNKSt3__18ios_base6getlocEv($11 + (HEAP32[(HEAP32[$11 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0; //@line 89
  $17 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 9328) | 0; //@line 90
  $21 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$17 >> 2] | 0) + 28 >> 2] & 15]($17, 10) | 0; //@line 94
  __ZNSt3__16localeD2Ev($0); //@line 95
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($11, $21) | 0; //@line 96
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($11) | 0; //@line 97
  $$02 = 1; //@line 98
  STACKTOP = sp; //@line 99
  return $$02 | 0; //@line 99
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($3, 13723, 9); //@line 101
 $22 = __ZN12_GLOBAL__N_16existsERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($3) | 0; //@line 102
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3); //@line 103
 if ($22) {
  $23 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(6720, 13733, 33) | 0; //@line 105
  HEAP32[$0 >> 2] = __ZNKSt3__18ios_base6getlocEv($23 + (HEAP32[(HEAP32[$23 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0; //@line 111
  $29 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 9328) | 0; //@line 112
  $33 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$29 >> 2] | 0) + 28 >> 2] & 15]($29, 10) | 0; //@line 116
  __ZNSt3__16localeD2Ev($0); //@line 117
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($23, $33) | 0; //@line 118
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($23) | 0; //@line 119
  $$02 = 1; //@line 120
  STACKTOP = sp; //@line 121
  return $$02 | 0; //@line 121
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($4, 13767, 5); //@line 123
 __ZN12_GLOBAL__N_15touchERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj($4, 446); //@line 124
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4); //@line 125
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($5, 13767, 5); //@line 126
 $34 = __ZN12_GLOBAL__N_16existsERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($5) | 0; //@line 127
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5); //@line 128
 if (!$34) {
  $35 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(6720, 13773, 28) | 0; //@line 130
  HEAP32[$0 >> 2] = __ZNKSt3__18ios_base6getlocEv($35 + (HEAP32[(HEAP32[$35 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0; //@line 136
  $41 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 9328) | 0; //@line 137
  $45 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$41 >> 2] | 0) + 28 >> 2] & 15]($41, 10) | 0; //@line 141
  __ZNSt3__16localeD2Ev($0); //@line 142
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($35, $45) | 0; //@line 143
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($35) | 0; //@line 144
  $$02 = 1; //@line 145
  STACKTOP = sp; //@line 146
  return $$02 | 0; //@line 146
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($6, 13802, 9); //@line 148
 $46 = __ZN12_GLOBAL__N_16existsERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($6) | 0; //@line 149
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6); //@line 150
 if ($46) {
  $47 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(6720, 13812, 33) | 0; //@line 152
  HEAP32[$0 >> 2] = __ZNKSt3__18ios_base6getlocEv($47 + (HEAP32[(HEAP32[$47 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0; //@line 158
  $53 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 9328) | 0; //@line 159
  $57 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$53 >> 2] | 0) + 28 >> 2] & 15]($53, 10) | 0; //@line 163
  __ZNSt3__16localeD2Ev($0); //@line 164
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($47, $57) | 0; //@line 165
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($47) | 0; //@line 166
  $$02 = 1; //@line 167
  STACKTOP = sp; //@line 168
  return $$02 | 0; //@line 168
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($7, 13846, 5); //@line 170
 __ZN12_GLOBAL__N_15touchERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj($7, 502); //@line 171
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7); //@line 172
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($8, 13846, 5); //@line 173
 $58 = __ZN12_GLOBAL__N_16existsERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($8) | 0; //@line 174
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8); //@line 175
 if (!$58) {
  $59 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(6720, 13852, 28) | 0; //@line 177
  HEAP32[$0 >> 2] = __ZNKSt3__18ios_base6getlocEv($59 + (HEAP32[(HEAP32[$59 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0; //@line 183
  $65 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 9328) | 0; //@line 184
  $69 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$65 >> 2] | 0) + 28 >> 2] & 15]($65, 10) | 0; //@line 188
  __ZNSt3__16localeD2Ev($0); //@line 189
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($59, $69) | 0; //@line 190
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($59) | 0; //@line 191
  $$02 = 1; //@line 192
  STACKTOP = sp; //@line 193
  return $$02 | 0; //@line 193
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($9, 13881, 9); //@line 195
 $70 = __ZN12_GLOBAL__N_16existsERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($9) | 0; //@line 196
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9); //@line 197
 if ($70) {
  $71 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(6720, 13891, 33) | 0; //@line 199
  HEAP32[$0 >> 2] = __ZNKSt3__18ios_base6getlocEv($71 + (HEAP32[(HEAP32[$71 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0; //@line 205
  $77 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 9328) | 0; //@line 206
  $81 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$77 >> 2] | 0) + 28 >> 2] & 15]($77, 10) | 0; //@line 210
  __ZNSt3__16localeD2Ev($0); //@line 211
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($71, $81) | 0; //@line 212
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($71) | 0; //@line 213
  $$02 = 1; //@line 214
  STACKTOP = sp; //@line 215
  return $$02 | 0; //@line 215
 } else {
  $82 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(6720, 13925, 3) | 0; //@line 217
  HEAP32[$0 >> 2] = __ZNKSt3__18ios_base6getlocEv($82 + (HEAP32[(HEAP32[$82 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0; //@line 223
  $88 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 9328) | 0; //@line 224
  $92 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$88 >> 2] | 0) + 28 >> 2] & 15]($88, 10) | 0; //@line 228
  __ZNSt3__16localeD2Ev($0); //@line 229
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($82, $92) | 0; //@line 230
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($82) | 0; //@line 231
  $$02 = 0; //@line 232
  STACKTOP = sp; //@line 233
  return $$02 | 0; //@line 233
 }
 return 0; //@line 235
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i2 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i8 = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i3$i$i = 0, $$pre22 = 0, $100 = 0, $101 = 0, $104 = 0, $107 = 0, $11 = 0, $119 = 0, $13 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $30 = 0, $33 = 0, $44 = 0, $50 = 0, $59 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $78 = 0, $85 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12782
 STACKTOP = STACKTOP + 352 | 0; //@line 12783
 $__atoms = sp + 208 | 0; //@line 12784
 $__decimal_point = sp + 40 | 0; //@line 12785
 $__thousands_sep = sp + 36 | 0; //@line 12786
 $__grouping = sp + 24 | 0; //@line 12787
 $__buf = sp + 12 | 0; //@line 12788
 $__a_end = sp + 8 | 0; //@line 12789
 $__g = sp + 48 | 0; //@line 12790
 $__g_end = sp + 4 | 0; //@line 12791
 $__dc = sp; //@line 12792
 $__in_units = sp + 337 | 0; //@line 12793
 $__exp = sp + 336 | 0; //@line 12794
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep); //@line 12795
 HEAP32[$__buf >> 2] = 0; //@line 12796
 HEAP32[$__buf + 4 >> 2] = 0; //@line 12798
 HEAP32[$__buf + 8 >> 2] = 0; //@line 12800
 if (!(HEAP8[$__buf >> 0] & 1)) {
  $7 = 10; //@line 12805
 } else {
  $7 = (HEAP32[$__buf >> 2] & -2) + -1 | 0; //@line 12810
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $7, 0); //@line 12812
 $11 = $__buf + 8 | 0; //@line 12816
 $13 = $__buf + 1 | 0; //@line 12818
 $14 = (HEAP8[$__buf >> 0] & 1) == 0 ? $13 : HEAP32[$11 >> 2] | 0; //@line 12819
 HEAP32[$__a_end >> 2] = $14; //@line 12820
 HEAP32[$__g_end >> 2] = $__g; //@line 12821
 HEAP32[$__dc >> 2] = 0; //@line 12822
 HEAP8[$__in_units >> 0] = 1; //@line 12823
 HEAP8[$__exp >> 0] = 69; //@line 12824
 $15 = $__buf + 4 | 0; //@line 12825
 $16 = HEAP32[$__decimal_point >> 2] | 0; //@line 12826
 $17 = HEAP32[$__thousands_sep >> 2] | 0; //@line 12827
 $$pre$i$i$i4 = HEAP32[$__b >> 2] | 0; //@line 12829
 $__a$0 = $14; //@line 12829
 L4 : while (1) {
  if (!$$pre$i$i$i4) {
   $$pre$i$i$i = 0; //@line 12833
   $132 = 1; //@line 12833
  } else {
   $20 = HEAP32[$$pre$i$i$i4 + 12 >> 2] | 0; //@line 12836
   if (($20 | 0) == (HEAP32[$$pre$i$i$i4 + 16 >> 2] | 0)) {
    $$0$i$i$i$i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i4 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i4) | 0; //@line 12845
   } else {
    $$0$i$i$i$i2 = HEAP32[$20 >> 2] | 0; //@line 12848
   }
   if (($$0$i$i$i$i2 | 0) == -1) {
    HEAP32[$__b >> 2] = 0; //@line 12852
    $$pre$i$i$i = 0; //@line 12853
    $132 = 1; //@line 12853
   } else {
    $$pre$i$i$i = $$pre$i$i$i4; //@line 12855
    $132 = 0; //@line 12855
   }
  }
  $30 = HEAP32[$__e >> 2] | 0; //@line 12858
  do {
   if (!$30) {
    label = 16; //@line 12862
   } else {
    $33 = HEAP32[$30 + 12 >> 2] | 0; //@line 12865
    if (($33 | 0) == (HEAP32[$30 + 16 >> 2] | 0)) {
     $$0$i$i1$i$i8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 63]($30) | 0; //@line 12874
    } else {
     $$0$i$i1$i$i8 = HEAP32[$33 >> 2] | 0; //@line 12877
    }
    if (($$0$i$i1$i$i8 | 0) == -1) {
     HEAP32[$__e >> 2] = 0; //@line 12881
     label = 16; //@line 12882
     break;
    } else {
     if ($132) {
      $133 = $30; //@line 12886
      break;
     } else {
      $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 12889
      $$pre$i3$i$i = $30; //@line 12889
      $__a$2 = $__a$0; //@line 12889
      break L4;
     }
    }
   }
  } while (0);
  if ((label | 0) == 16) {
   label = 0; //@line 12896
   if ($132) {
    $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 12898
    $$pre$i3$i$i = 0; //@line 12898
    $__a$2 = $__a$0; //@line 12898
    break;
   } else {
    $133 = 0; //@line 12901
   }
  }
  $44 = HEAP8[$__buf >> 0] | 0; //@line 12905
  $50 = ($44 & 1) == 0 ? ($44 & 255) >>> 1 : HEAP32[$15 >> 2] | 0; //@line 12911
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $50 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $50 << 1, 0); //@line 12916
   if (!(HEAP8[$__buf >> 0] & 1)) {
    $59 = 10; //@line 12921
   } else {
    $59 = (HEAP32[$__buf >> 2] & -2) + -1 | 0; //@line 12926
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $59, 0); //@line 12928
   $64 = (HEAP8[$__buf >> 0] & 1) == 0 ? $13 : HEAP32[$11 >> 2] | 0; //@line 12933
   HEAP32[$__a_end >> 2] = $64 + $50; //@line 12935
   $__a$1 = $64; //@line 12936
  } else {
   $__a$1 = $__a$0; //@line 12938
  }
  $66 = $$pre$i$i$i + 12 | 0; //@line 12940
  $67 = HEAP32[$66 >> 2] | 0; //@line 12941
  $68 = $$pre$i$i$i + 16 | 0; //@line 12942
  if (($67 | 0) == (HEAP32[$68 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i) | 0; //@line 12950
  } else {
   $$0$i$i = HEAP32[$67 >> 2] | 0; //@line 12953
  }
  if (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i, $__in_units, $__exp, $__a$1, $__a_end, $16, $17, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) {
   $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 12958
   $$pre$i3$i$i = $133; //@line 12958
   $__a$2 = $__a$1; //@line 12958
   break;
  }
  $78 = HEAP32[$66 >> 2] | 0; //@line 12961
  if (($78 | 0) == (HEAP32[$68 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 63]($$pre$i$i$i) | 0; //@line 12968
   $$pre$i$i$i4 = $$pre$i$i$i; //@line 12969
   $__a$0 = $__a$1; //@line 12969
   continue;
  } else {
   HEAP32[$66 >> 2] = $78 + 4; //@line 12973
   $$pre$i$i$i4 = $$pre$i$i$i; //@line 12974
   $__a$0 = $__a$1; //@line 12974
   continue;
  }
 }
 $85 = HEAP8[$__grouping >> 0] | 0; //@line 12978
 $$pre22 = HEAP32[$__g_end >> 2] | 0; //@line 12990
 if ((HEAP8[$__in_units >> 0] | 0) == 0 ? 1 : ((($85 & 1) == 0 ? ($85 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0) == 0) {
  $104 = $$pre22; //@line 12992
 } else {
  if (($$pre22 - $__g | 0) < 160) {
   $100 = HEAP32[$__dc >> 2] | 0; //@line 12999
   $101 = $$pre22 + 4 | 0; //@line 13000
   HEAP32[$__g_end >> 2] = $101; //@line 13001
   HEAP32[$$pre22 >> 2] = $100; //@line 13002
   $104 = $101; //@line 13003
  } else {
   $104 = $$pre22; //@line 13005
  }
 }
 HEAPF32[$__v >> 2] = +__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err); //@line 13010
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $104, $__err); //@line 13011
 if (!$$pre$i$i$i$lcssa) {
  $134 = 1; //@line 13014
 } else {
  $107 = HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0; //@line 13017
  if (($107 | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) {
   $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i$lcssa) | 0; //@line 13026
  } else {
   $$0$i$i$i$i = HEAP32[$107 >> 2] | 0; //@line 13029
  }
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0; //@line 13033
   $134 = 1; //@line 13034
  } else {
   $134 = 0; //@line 13036
  }
 }
 do {
  if (!$$pre$i3$i$i) {
   label = 44; //@line 13042
  } else {
   $119 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0; //@line 13045
   if (($119 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i) | 0; //@line 13054
   } else {
    $$0$i$i1$i$i = HEAP32[$119 >> 2] | 0; //@line 13057
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$__e >> 2] = 0; //@line 13061
    label = 44; //@line 13062
    break;
   } else {
    if ($134) {
     break;
    } else {
     label = 46; //@line 13068
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 44) {
  if ($134) {
   label = 46; //@line 13076
  }
 }
 if ((label | 0) == 46) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 13082
 }
 $131 = HEAP32[$__b >> 2] | 0; //@line 13084
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf); //@line 13085
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping); //@line 13086
 STACKTOP = sp; //@line 13087
 return $131 | 0; //@line 13087
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i2 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i8 = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i3$i$i = 0, $$pre22 = 0, $100 = 0, $101 = 0, $104 = 0, $107 = 0, $11 = 0, $119 = 0, $13 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $30 = 0, $33 = 0, $44 = 0, $50 = 0, $59 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $78 = 0, $85 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13428
 STACKTOP = STACKTOP + 352 | 0; //@line 13429
 $__atoms = sp + 208 | 0; //@line 13430
 $__decimal_point = sp + 40 | 0; //@line 13431
 $__thousands_sep = sp + 36 | 0; //@line 13432
 $__grouping = sp + 24 | 0; //@line 13433
 $__buf = sp + 12 | 0; //@line 13434
 $__a_end = sp + 8 | 0; //@line 13435
 $__g = sp + 48 | 0; //@line 13436
 $__g_end = sp + 4 | 0; //@line 13437
 $__dc = sp; //@line 13438
 $__in_units = sp + 337 | 0; //@line 13439
 $__exp = sp + 336 | 0; //@line 13440
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep); //@line 13441
 HEAP32[$__buf >> 2] = 0; //@line 13442
 HEAP32[$__buf + 4 >> 2] = 0; //@line 13444
 HEAP32[$__buf + 8 >> 2] = 0; //@line 13446
 if (!(HEAP8[$__buf >> 0] & 1)) {
  $7 = 10; //@line 13451
 } else {
  $7 = (HEAP32[$__buf >> 2] & -2) + -1 | 0; //@line 13456
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $7, 0); //@line 13458
 $11 = $__buf + 8 | 0; //@line 13462
 $13 = $__buf + 1 | 0; //@line 13464
 $14 = (HEAP8[$__buf >> 0] & 1) == 0 ? $13 : HEAP32[$11 >> 2] | 0; //@line 13465
 HEAP32[$__a_end >> 2] = $14; //@line 13466
 HEAP32[$__g_end >> 2] = $__g; //@line 13467
 HEAP32[$__dc >> 2] = 0; //@line 13468
 HEAP8[$__in_units >> 0] = 1; //@line 13469
 HEAP8[$__exp >> 0] = 69; //@line 13470
 $15 = $__buf + 4 | 0; //@line 13471
 $16 = HEAP32[$__decimal_point >> 2] | 0; //@line 13472
 $17 = HEAP32[$__thousands_sep >> 2] | 0; //@line 13473
 $$pre$i$i$i4 = HEAP32[$__b >> 2] | 0; //@line 13475
 $__a$0 = $14; //@line 13475
 L4 : while (1) {
  if (!$$pre$i$i$i4) {
   $$pre$i$i$i = 0; //@line 13479
   $132 = 1; //@line 13479
  } else {
   $20 = HEAP32[$$pre$i$i$i4 + 12 >> 2] | 0; //@line 13482
   if (($20 | 0) == (HEAP32[$$pre$i$i$i4 + 16 >> 2] | 0)) {
    $$0$i$i$i$i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i4 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i4) | 0; //@line 13491
   } else {
    $$0$i$i$i$i2 = HEAP32[$20 >> 2] | 0; //@line 13494
   }
   if (($$0$i$i$i$i2 | 0) == -1) {
    HEAP32[$__b >> 2] = 0; //@line 13498
    $$pre$i$i$i = 0; //@line 13499
    $132 = 1; //@line 13499
   } else {
    $$pre$i$i$i = $$pre$i$i$i4; //@line 13501
    $132 = 0; //@line 13501
   }
  }
  $30 = HEAP32[$__e >> 2] | 0; //@line 13504
  do {
   if (!$30) {
    label = 16; //@line 13508
   } else {
    $33 = HEAP32[$30 + 12 >> 2] | 0; //@line 13511
    if (($33 | 0) == (HEAP32[$30 + 16 >> 2] | 0)) {
     $$0$i$i1$i$i8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 63]($30) | 0; //@line 13520
    } else {
     $$0$i$i1$i$i8 = HEAP32[$33 >> 2] | 0; //@line 13523
    }
    if (($$0$i$i1$i$i8 | 0) == -1) {
     HEAP32[$__e >> 2] = 0; //@line 13527
     label = 16; //@line 13528
     break;
    } else {
     if ($132) {
      $133 = $30; //@line 13532
      break;
     } else {
      $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 13535
      $$pre$i3$i$i = $30; //@line 13535
      $__a$2 = $__a$0; //@line 13535
      break L4;
     }
    }
   }
  } while (0);
  if ((label | 0) == 16) {
   label = 0; //@line 13542
   if ($132) {
    $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 13544
    $$pre$i3$i$i = 0; //@line 13544
    $__a$2 = $__a$0; //@line 13544
    break;
   } else {
    $133 = 0; //@line 13547
   }
  }
  $44 = HEAP8[$__buf >> 0] | 0; //@line 13551
  $50 = ($44 & 1) == 0 ? ($44 & 255) >>> 1 : HEAP32[$15 >> 2] | 0; //@line 13557
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $50 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $50 << 1, 0); //@line 13562
   if (!(HEAP8[$__buf >> 0] & 1)) {
    $59 = 10; //@line 13567
   } else {
    $59 = (HEAP32[$__buf >> 2] & -2) + -1 | 0; //@line 13572
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $59, 0); //@line 13574
   $64 = (HEAP8[$__buf >> 0] & 1) == 0 ? $13 : HEAP32[$11 >> 2] | 0; //@line 13579
   HEAP32[$__a_end >> 2] = $64 + $50; //@line 13581
   $__a$1 = $64; //@line 13582
  } else {
   $__a$1 = $__a$0; //@line 13584
  }
  $66 = $$pre$i$i$i + 12 | 0; //@line 13586
  $67 = HEAP32[$66 >> 2] | 0; //@line 13587
  $68 = $$pre$i$i$i + 16 | 0; //@line 13588
  if (($67 | 0) == (HEAP32[$68 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i) | 0; //@line 13596
  } else {
   $$0$i$i = HEAP32[$67 >> 2] | 0; //@line 13599
  }
  if (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i, $__in_units, $__exp, $__a$1, $__a_end, $16, $17, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) {
   $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 13604
   $$pre$i3$i$i = $133; //@line 13604
   $__a$2 = $__a$1; //@line 13604
   break;
  }
  $78 = HEAP32[$66 >> 2] | 0; //@line 13607
  if (($78 | 0) == (HEAP32[$68 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 63]($$pre$i$i$i) | 0; //@line 13614
   $$pre$i$i$i4 = $$pre$i$i$i; //@line 13615
   $__a$0 = $__a$1; //@line 13615
   continue;
  } else {
   HEAP32[$66 >> 2] = $78 + 4; //@line 13619
   $$pre$i$i$i4 = $$pre$i$i$i; //@line 13620
   $__a$0 = $__a$1; //@line 13620
   continue;
  }
 }
 $85 = HEAP8[$__grouping >> 0] | 0; //@line 13624
 $$pre22 = HEAP32[$__g_end >> 2] | 0; //@line 13636
 if ((HEAP8[$__in_units >> 0] | 0) == 0 ? 1 : ((($85 & 1) == 0 ? ($85 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0) == 0) {
  $104 = $$pre22; //@line 13638
 } else {
  if (($$pre22 - $__g | 0) < 160) {
   $100 = HEAP32[$__dc >> 2] | 0; //@line 13645
   $101 = $$pre22 + 4 | 0; //@line 13646
   HEAP32[$__g_end >> 2] = $101; //@line 13647
   HEAP32[$$pre22 >> 2] = $100; //@line 13648
   $104 = $101; //@line 13649
  } else {
   $104 = $$pre22; //@line 13651
  }
 }
 HEAPF64[$__v >> 3] = +__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err); //@line 13656
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $104, $__err); //@line 13657
 if (!$$pre$i$i$i$lcssa) {
  $134 = 1; //@line 13660
 } else {
  $107 = HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0; //@line 13663
  if (($107 | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) {
   $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i$lcssa) | 0; //@line 13672
  } else {
   $$0$i$i$i$i = HEAP32[$107 >> 2] | 0; //@line 13675
  }
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0; //@line 13679
   $134 = 1; //@line 13680
  } else {
   $134 = 0; //@line 13682
  }
 }
 do {
  if (!$$pre$i3$i$i) {
   label = 44; //@line 13688
  } else {
   $119 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0; //@line 13691
   if (($119 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i) | 0; //@line 13700
   } else {
    $$0$i$i1$i$i = HEAP32[$119 >> 2] | 0; //@line 13703
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$__e >> 2] = 0; //@line 13707
    label = 44; //@line 13708
    break;
   } else {
    if ($134) {
     break;
    } else {
     label = 46; //@line 13714
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 44) {
  if ($134) {
   label = 46; //@line 13722
  }
 }
 if ((label | 0) == 46) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 13728
 }
 $131 = HEAP32[$__b >> 2] | 0; //@line 13730
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf); //@line 13731
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping); //@line 13732
 STACKTOP = sp; //@line 13733
 return $131 | 0; //@line 13733
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i2 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i8 = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i3$i$i = 0, $$pre22 = 0, $100 = 0, $101 = 0, $104 = 0, $107 = 0, $11 = 0, $119 = 0, $13 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $30 = 0, $33 = 0, $44 = 0, $50 = 0, $59 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $78 = 0, $85 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13105
 STACKTOP = STACKTOP + 352 | 0; //@line 13106
 $__atoms = sp + 208 | 0; //@line 13107
 $__decimal_point = sp + 40 | 0; //@line 13108
 $__thousands_sep = sp + 36 | 0; //@line 13109
 $__grouping = sp + 24 | 0; //@line 13110
 $__buf = sp + 12 | 0; //@line 13111
 $__a_end = sp + 8 | 0; //@line 13112
 $__g = sp + 48 | 0; //@line 13113
 $__g_end = sp + 4 | 0; //@line 13114
 $__dc = sp; //@line 13115
 $__in_units = sp + 337 | 0; //@line 13116
 $__exp = sp + 336 | 0; //@line 13117
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep); //@line 13118
 HEAP32[$__buf >> 2] = 0; //@line 13119
 HEAP32[$__buf + 4 >> 2] = 0; //@line 13121
 HEAP32[$__buf + 8 >> 2] = 0; //@line 13123
 if (!(HEAP8[$__buf >> 0] & 1)) {
  $7 = 10; //@line 13128
 } else {
  $7 = (HEAP32[$__buf >> 2] & -2) + -1 | 0; //@line 13133
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $7, 0); //@line 13135
 $11 = $__buf + 8 | 0; //@line 13139
 $13 = $__buf + 1 | 0; //@line 13141
 $14 = (HEAP8[$__buf >> 0] & 1) == 0 ? $13 : HEAP32[$11 >> 2] | 0; //@line 13142
 HEAP32[$__a_end >> 2] = $14; //@line 13143
 HEAP32[$__g_end >> 2] = $__g; //@line 13144
 HEAP32[$__dc >> 2] = 0; //@line 13145
 HEAP8[$__in_units >> 0] = 1; //@line 13146
 HEAP8[$__exp >> 0] = 69; //@line 13147
 $15 = $__buf + 4 | 0; //@line 13148
 $16 = HEAP32[$__decimal_point >> 2] | 0; //@line 13149
 $17 = HEAP32[$__thousands_sep >> 2] | 0; //@line 13150
 $$pre$i$i$i4 = HEAP32[$__b >> 2] | 0; //@line 13152
 $__a$0 = $14; //@line 13152
 L4 : while (1) {
  if (!$$pre$i$i$i4) {
   $$pre$i$i$i = 0; //@line 13156
   $132 = 1; //@line 13156
  } else {
   $20 = HEAP32[$$pre$i$i$i4 + 12 >> 2] | 0; //@line 13159
   if (($20 | 0) == (HEAP32[$$pre$i$i$i4 + 16 >> 2] | 0)) {
    $$0$i$i$i$i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i4 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i4) | 0; //@line 13168
   } else {
    $$0$i$i$i$i2 = HEAP32[$20 >> 2] | 0; //@line 13171
   }
   if (($$0$i$i$i$i2 | 0) == -1) {
    HEAP32[$__b >> 2] = 0; //@line 13175
    $$pre$i$i$i = 0; //@line 13176
    $132 = 1; //@line 13176
   } else {
    $$pre$i$i$i = $$pre$i$i$i4; //@line 13178
    $132 = 0; //@line 13178
   }
  }
  $30 = HEAP32[$__e >> 2] | 0; //@line 13181
  do {
   if (!$30) {
    label = 16; //@line 13185
   } else {
    $33 = HEAP32[$30 + 12 >> 2] | 0; //@line 13188
    if (($33 | 0) == (HEAP32[$30 + 16 >> 2] | 0)) {
     $$0$i$i1$i$i8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 63]($30) | 0; //@line 13197
    } else {
     $$0$i$i1$i$i8 = HEAP32[$33 >> 2] | 0; //@line 13200
    }
    if (($$0$i$i1$i$i8 | 0) == -1) {
     HEAP32[$__e >> 2] = 0; //@line 13204
     label = 16; //@line 13205
     break;
    } else {
     if ($132) {
      $133 = $30; //@line 13209
      break;
     } else {
      $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 13212
      $$pre$i3$i$i = $30; //@line 13212
      $__a$2 = $__a$0; //@line 13212
      break L4;
     }
    }
   }
  } while (0);
  if ((label | 0) == 16) {
   label = 0; //@line 13219
   if ($132) {
    $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 13221
    $$pre$i3$i$i = 0; //@line 13221
    $__a$2 = $__a$0; //@line 13221
    break;
   } else {
    $133 = 0; //@line 13224
   }
  }
  $44 = HEAP8[$__buf >> 0] | 0; //@line 13228
  $50 = ($44 & 1) == 0 ? ($44 & 255) >>> 1 : HEAP32[$15 >> 2] | 0; //@line 13234
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $50 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $50 << 1, 0); //@line 13239
   if (!(HEAP8[$__buf >> 0] & 1)) {
    $59 = 10; //@line 13244
   } else {
    $59 = (HEAP32[$__buf >> 2] & -2) + -1 | 0; //@line 13249
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $59, 0); //@line 13251
   $64 = (HEAP8[$__buf >> 0] & 1) == 0 ? $13 : HEAP32[$11 >> 2] | 0; //@line 13256
   HEAP32[$__a_end >> 2] = $64 + $50; //@line 13258
   $__a$1 = $64; //@line 13259
  } else {
   $__a$1 = $__a$0; //@line 13261
  }
  $66 = $$pre$i$i$i + 12 | 0; //@line 13263
  $67 = HEAP32[$66 >> 2] | 0; //@line 13264
  $68 = $$pre$i$i$i + 16 | 0; //@line 13265
  if (($67 | 0) == (HEAP32[$68 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i) | 0; //@line 13273
  } else {
   $$0$i$i = HEAP32[$67 >> 2] | 0; //@line 13276
  }
  if (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i, $__in_units, $__exp, $__a$1, $__a_end, $16, $17, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) {
   $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 13281
   $$pre$i3$i$i = $133; //@line 13281
   $__a$2 = $__a$1; //@line 13281
   break;
  }
  $78 = HEAP32[$66 >> 2] | 0; //@line 13284
  if (($78 | 0) == (HEAP32[$68 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 63]($$pre$i$i$i) | 0; //@line 13291
   $$pre$i$i$i4 = $$pre$i$i$i; //@line 13292
   $__a$0 = $__a$1; //@line 13292
   continue;
  } else {
   HEAP32[$66 >> 2] = $78 + 4; //@line 13296
   $$pre$i$i$i4 = $$pre$i$i$i; //@line 13297
   $__a$0 = $__a$1; //@line 13297
   continue;
  }
 }
 $85 = HEAP8[$__grouping >> 0] | 0; //@line 13301
 $$pre22 = HEAP32[$__g_end >> 2] | 0; //@line 13313
 if ((HEAP8[$__in_units >> 0] | 0) == 0 ? 1 : ((($85 & 1) == 0 ? ($85 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0) == 0) {
  $104 = $$pre22; //@line 13315
 } else {
  if (($$pre22 - $__g | 0) < 160) {
   $100 = HEAP32[$__dc >> 2] | 0; //@line 13322
   $101 = $$pre22 + 4 | 0; //@line 13323
   HEAP32[$__g_end >> 2] = $101; //@line 13324
   HEAP32[$$pre22 >> 2] = $100; //@line 13325
   $104 = $101; //@line 13326
  } else {
   $104 = $$pre22; //@line 13328
  }
 }
 HEAPF64[$__v >> 3] = +__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err); //@line 13333
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $104, $__err); //@line 13334
 if (!$$pre$i$i$i$lcssa) {
  $134 = 1; //@line 13337
 } else {
  $107 = HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0; //@line 13340
  if (($107 | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) {
   $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i$lcssa) | 0; //@line 13349
  } else {
   $$0$i$i$i$i = HEAP32[$107 >> 2] | 0; //@line 13352
  }
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0; //@line 13356
   $134 = 1; //@line 13357
  } else {
   $134 = 0; //@line 13359
  }
 }
 do {
  if (!$$pre$i3$i$i) {
   label = 44; //@line 13365
  } else {
   $119 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0; //@line 13368
   if (($119 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i) | 0; //@line 13377
   } else {
    $$0$i$i1$i$i = HEAP32[$119 >> 2] | 0; //@line 13380
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$__e >> 2] = 0; //@line 13384
    label = 44; //@line 13385
    break;
   } else {
    if ($134) {
     break;
    } else {
     label = 46; //@line 13391
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 44) {
  if ($134) {
   label = 46; //@line 13399
  }
 }
 if ((label | 0) == 46) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 13405
 }
 $131 = HEAP32[$__b >> 2] | 0; //@line 13407
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf); //@line 13408
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping); //@line 13409
 STACKTOP = sp; //@line 13410
 return $131 | 0; //@line 13410
}
function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $$01$i$i20 = 0, $$01$i$i215 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $111 = 0, $112 = 0, $120 = 0, $121 = 0, $123 = 0, $126 = 0, $128 = 0, $13 = 0, $132 = 0, $137 = 0, $138 = 0, $144 = 0, $145 = 0, $147 = 0, $156 = 0, $20 = 0, $25 = 0, $26 = 0, $28 = 0, $33 = 0, $34 = 0, $38 = 0, $42 = 0, $45 = 0, $49 = 0, $5 = 0, $51 = 0, $54 = 0, $70 = 0, $72 = 0, $74 = 0, $81 = 0, $82 = 0, $83 = 0, $91 = 0, $95 = 0, $97 = 0, $__dc$017 = 0, $__dc$1 = 0, $__dg$018 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$214 = 0, $__nf$214$lcssa = 0, $__nf$3 = 0, $__ns$026 = 0, $__ns$122 = 0, $__ns$2 = 0, $__p$019 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7856
 STACKTOP = STACKTOP + 16 | 0; //@line 7857
 $__grouping = sp; //@line 7858
 $0 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 9328) | 0; //@line 7859
 $1 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 9468) | 0; //@line 7860
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$1 >> 2] | 0) + 20 >> 2] & 63]($__grouping, $1); //@line 7864
 HEAP32[$__oe >> 2] = $__ob; //@line 7865
 $5 = HEAP8[$__nb >> 0] | 0; //@line 7866
 switch ($5 << 24 >> 24) {
 case 43:
 case 45:
  {
   $10 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] & 15]($0, $5) | 0; //@line 7873
   $11 = HEAP32[$__oe >> 2] | 0; //@line 7874
   HEAP32[$__oe >> 2] = $11 + 1; //@line 7876
   HEAP8[$11 >> 0] = $10; //@line 7877
   $__nf$0 = $__nb + 1 | 0; //@line 7878
   break;
  }
 default:
  {
   $__nf$0 = $__nb; //@line 7882
  }
 }
 $13 = $__ne; //@line 7885
 L4 : do {
  if (($13 - $__nf$0 | 0) > 1) {
   if ((HEAP8[$__nf$0 >> 0] | 0) == 48) {
    $20 = $__nf$0 + 1 | 0; //@line 7894
    switch (HEAP8[$20 >> 0] | 0) {
    case 88:
    case 120:
     {
      break;
     }
    default:
     {
      label = 4; //@line 7901
      break L4;
     }
    }
    $25 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] & 15]($0, 48) | 0; //@line 7908
    $26 = HEAP32[$__oe >> 2] | 0; //@line 7909
    HEAP32[$__oe >> 2] = $26 + 1; //@line 7911
    HEAP8[$26 >> 0] = $25; //@line 7912
    $28 = $__nf$0 + 2 | 0; //@line 7913
    $33 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] & 15]($0, HEAP8[$20 >> 0] | 0) | 0; //@line 7918
    $34 = HEAP32[$__oe >> 2] | 0; //@line 7919
    HEAP32[$__oe >> 2] = $34 + 1; //@line 7921
    HEAP8[$34 >> 0] = $33; //@line 7922
    if ($28 >>> 0 < $__ne >>> 0) {
     $__ns$026 = $28; //@line 7925
     while (1) {
      $38 = HEAP8[$__ns$026 >> 0] | 0; //@line 7928
      if (!(_isxdigit_l($38, __ZNSt3__16__clocEv() | 0) | 0)) {
       $__nf$1 = $28; //@line 7933
       $__ns$2 = $__ns$026; //@line 7933
       break L4;
      }
      $42 = $__ns$026 + 1 | 0; //@line 7936
      if ($42 >>> 0 < $__ne >>> 0) {
       $__ns$026 = $42; //@line 7939
      } else {
       $__nf$1 = $28; //@line 7941
       $__ns$2 = $42; //@line 7941
       break;
      }
     }
    } else {
     $__nf$1 = $28; //@line 7946
     $__ns$2 = $28; //@line 7946
    }
   } else {
    label = 4; //@line 7949
   }
  } else {
   label = 4; //@line 7952
  }
 } while (0);
 L11 : do {
  if ((label | 0) == 4) {
   if ($__nf$0 >>> 0 < $__ne >>> 0) {
    $__ns$122 = $__nf$0; //@line 7959
    while (1) {
     $45 = HEAP8[$__ns$122 >> 0] | 0; //@line 7962
     if (!(_isdigit_l($45, __ZNSt3__16__clocEv() | 0) | 0)) {
      $__nf$1 = $__nf$0; //@line 7967
      $__ns$2 = $__ns$122; //@line 7967
      break L11;
     }
     $49 = $__ns$122 + 1 | 0; //@line 7970
     if ($49 >>> 0 < $__ne >>> 0) {
      $__ns$122 = $49; //@line 7973
     } else {
      $__nf$1 = $__nf$0; //@line 7975
      $__ns$2 = $49; //@line 7975
      break;
     }
    }
   } else {
    $__nf$1 = $__nf$0; //@line 7980
    $__ns$2 = $__nf$0; //@line 7980
   }
  }
 } while (0);
 $51 = HEAP8[$__grouping >> 0] | 0; //@line 7984
 $54 = $__grouping + 4 | 0; //@line 7987
 if (!((($51 & 1) == 0 ? ($51 & 255) >>> 1 : HEAP32[$54 >> 2] | 0) | 0)) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] & 7]($0, $__nf$1, $__ns$2, HEAP32[$__oe >> 2] | 0) | 0; //@line 7998
  HEAP32[$__oe >> 2] = (HEAP32[$__oe >> 2] | 0) + ($__ns$2 - $__nf$1); //@line 8004
  $$pre$phiZ2D = $0; //@line 8005
 } else {
  if (($__nf$1 | 0) != ($__ns$2 | 0)) {
   $70 = $__ns$2 + -1 | 0; //@line 8009
   if ($__nf$1 >>> 0 < $70 >>> 0) {
    $$01$i$i20 = $__nf$1; //@line 8012
    $74 = $70; //@line 8012
    do {
     $72 = HEAP8[$$01$i$i20 >> 0] | 0; //@line 8014
     HEAP8[$$01$i$i20 >> 0] = HEAP8[$74 >> 0] | 0; //@line 8016
     HEAP8[$74 >> 0] = $72; //@line 8017
     $$01$i$i20 = $$01$i$i20 + 1 | 0; //@line 8018
     $74 = $74 + -1 | 0; //@line 8019
    } while ($$01$i$i20 >>> 0 < $74 >>> 0);
   }
  }
  $81 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] & 63]($1) | 0; //@line 8032
  $82 = $__grouping + 8 | 0; //@line 8033
  $83 = $__grouping + 1 | 0; //@line 8034
  if ($__nf$1 >>> 0 < $__ns$2 >>> 0) {
   $__dc$017 = 0; //@line 8037
   $__dg$018 = 0; //@line 8037
   $__p$019 = $__nf$1; //@line 8037
   while (1) {
    $91 = HEAP8[((HEAP8[$__grouping >> 0] & 1) == 0 ? $83 : HEAP32[$82 >> 2] | 0) + $__dg$018 >> 0] | 0; //@line 8045
    if ($91 << 24 >> 24 > 0 & ($__dc$017 | 0) == ($91 << 24 >> 24 | 0)) {
     $95 = HEAP32[$__oe >> 2] | 0; //@line 8051
     HEAP32[$__oe >> 2] = $95 + 1; //@line 8053
     HEAP8[$95 >> 0] = $81; //@line 8054
     $97 = HEAP8[$__grouping >> 0] | 0; //@line 8055
     $__dc$1 = 0; //@line 8066
     $__dg$1 = ($__dg$018 >>> 0 < ((($97 & 1) == 0 ? ($97 & 255) >>> 1 : HEAP32[$54 >> 2] | 0) + -1 | 0) >>> 0 & 1) + $__dg$018 | 0; //@line 8066
    } else {
     $__dc$1 = $__dc$017; //@line 8068
     $__dg$1 = $__dg$018; //@line 8068
    }
    $111 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] & 15]($0, HEAP8[$__p$019 >> 0] | 0) | 0; //@line 8074
    $112 = HEAP32[$__oe >> 2] | 0; //@line 8075
    HEAP32[$__oe >> 2] = $112 + 1; //@line 8077
    HEAP8[$112 >> 0] = $111; //@line 8078
    $__p$019 = $__p$019 + 1 | 0; //@line 8080
    if ($__p$019 >>> 0 >= $__ns$2 >>> 0) {
     break;
    } else {
     $__dc$017 = $__dc$1 + 1 | 0; //@line 8083
     $__dg$018 = $__dg$1; //@line 8083
    }
   }
  }
  $120 = $__ob + ($__nf$1 - $__nb) | 0; //@line 8092
  $121 = HEAP32[$__oe >> 2] | 0; //@line 8093
  if (($120 | 0) == ($121 | 0)) {
   $$pre$phiZ2D = $0; //@line 8096
  } else {
   $123 = $121 + -1 | 0; //@line 8098
   if ($120 >>> 0 < $123 >>> 0) {
    $$01$i$i215 = $120; //@line 8101
    $128 = $123; //@line 8101
    do {
     $126 = HEAP8[$$01$i$i215 >> 0] | 0; //@line 8103
     HEAP8[$$01$i$i215 >> 0] = HEAP8[$128 >> 0] | 0; //@line 8105
     HEAP8[$128 >> 0] = $126; //@line 8106
     $$01$i$i215 = $$01$i$i215 + 1 | 0; //@line 8107
     $128 = $128 + -1 | 0; //@line 8108
    } while ($$01$i$i215 >>> 0 < $128 >>> 0);
    $$pre$phiZ2D = $0; //@line 8113
   } else {
    $$pre$phiZ2D = $0; //@line 8118
   }
  }
 }
 L36 : do {
  if ($__ns$2 >>> 0 < $__ne >>> 0) {
   $__nf$214 = $__ns$2; //@line 8125
   while (1) {
    $132 = HEAP8[$__nf$214 >> 0] | 0; //@line 8127
    if ($132 << 24 >> 24 == 46) {
     $__nf$214$lcssa = $__nf$214; //@line 8130
     break;
    }
    $144 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + 28 >> 2] & 15]($0, $132) | 0; //@line 8136
    $145 = HEAP32[$__oe >> 2] | 0; //@line 8137
    HEAP32[$__oe >> 2] = $145 + 1; //@line 8139
    HEAP8[$145 >> 0] = $144; //@line 8140
    $147 = $__nf$214 + 1 | 0; //@line 8141
    if ($147 >>> 0 < $__ne >>> 0) {
     $__nf$214 = $147; //@line 8144
    } else {
     $__nf$3 = $147; //@line 8146
     break L36;
    }
   }
   $137 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] & 63]($1) | 0; //@line 8153
   $138 = HEAP32[$__oe >> 2] | 0; //@line 8154
   HEAP32[$__oe >> 2] = $138 + 1; //@line 8156
   HEAP8[$138 >> 0] = $137; //@line 8157
   $__nf$3 = $__nf$214$lcssa + 1 | 0; //@line 8159
  } else {
   $__nf$3 = $__ns$2; //@line 8161
  }
 } while (0);
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] & 7]($0, $__nf$3, $__ne, HEAP32[$__oe >> 2] | 0) | 0; //@line 8168
 $156 = (HEAP32[$__oe >> 2] | 0) + ($13 - $__nf$3) | 0; //@line 8172
 HEAP32[$__oe >> 2] = $156; //@line 8173
 HEAP32[$__op >> 2] = ($__np | 0) == ($__ne | 0) ? $156 : $__ob + ($__np - $__nb) | 0; //@line 8180
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping); //@line 8181
 STACKTOP = sp; //@line 8182
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i = 0, $$pre21 = 0, $0 = 0, $101 = 0, $103 = 0, $107 = 0, $110 = 0, $12 = 0, $122 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $30 = 0, $33 = 0, $44 = 0, $50 = 0, $59 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $78 = 0, $8 = 0, $85 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12461
 STACKTOP = STACKTOP + 320 | 0; //@line 12462
 $__atoms = sp + 208 | 0; //@line 12463
 $__thousands_sep = sp + 200 | 0; //@line 12464
 $__grouping = sp + 24 | 0; //@line 12465
 $__buf = sp + 12 | 0; //@line 12466
 $__a_end = sp + 8 | 0; //@line 12467
 $__g = sp + 40 | 0; //@line 12468
 $__g_end = sp + 4 | 0; //@line 12469
 $__dc = sp; //@line 12470
 $0 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0; //@line 12471
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $__atoms, $__thousands_sep); //@line 12472
 HEAP32[$__buf >> 2] = 0; //@line 12473
 HEAP32[$__buf + 4 >> 2] = 0; //@line 12475
 HEAP32[$__buf + 8 >> 2] = 0; //@line 12477
 if (!(HEAP8[$__buf >> 0] & 1)) {
  $8 = 10; //@line 12482
 } else {
  $8 = (HEAP32[$__buf >> 2] & -2) + -1 | 0; //@line 12487
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $8, 0); //@line 12489
 $12 = $__buf + 8 | 0; //@line 12493
 $14 = $__buf + 1 | 0; //@line 12495
 $15 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0; //@line 12496
 HEAP32[$__a_end >> 2] = $15; //@line 12497
 HEAP32[$__g_end >> 2] = $__g; //@line 12498
 HEAP32[$__dc >> 2] = 0; //@line 12499
 $16 = $__buf + 4 | 0; //@line 12500
 $17 = HEAP32[$__thousands_sep >> 2] | 0; //@line 12501
 $$pre$i$i$i3 = HEAP32[$__b >> 2] | 0; //@line 12503
 $__a$0 = $15; //@line 12503
 L4 : while (1) {
  if (!$$pre$i$i$i3) {
   $$pre$i$i$i = 0; //@line 12507
   $135 = 1; //@line 12507
  } else {
   $20 = HEAP32[$$pre$i$i$i3 + 12 >> 2] | 0; //@line 12510
   if (($20 | 0) == (HEAP32[$$pre$i$i$i3 + 16 >> 2] | 0)) {
    $$0$i$i$i$i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i3 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i3) | 0; //@line 12519
   } else {
    $$0$i$i$i$i1 = HEAP32[$20 >> 2] | 0; //@line 12522
   }
   if (($$0$i$i$i$i1 | 0) == -1) {
    HEAP32[$__b >> 2] = 0; //@line 12526
    $$pre$i$i$i = 0; //@line 12527
    $135 = 1; //@line 12527
   } else {
    $$pre$i$i$i = $$pre$i$i$i3; //@line 12529
    $135 = 0; //@line 12529
   }
  }
  $30 = HEAP32[$__e >> 2] | 0; //@line 12532
  do {
   if (!$30) {
    label = 16; //@line 12536
   } else {
    $33 = HEAP32[$30 + 12 >> 2] | 0; //@line 12539
    if (($33 | 0) == (HEAP32[$30 + 16 >> 2] | 0)) {
     $$0$i$i1$i$i7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 63]($30) | 0; //@line 12548
    } else {
     $$0$i$i1$i$i7 = HEAP32[$33 >> 2] | 0; //@line 12551
    }
    if (($$0$i$i1$i$i7 | 0) == -1) {
     HEAP32[$__e >> 2] = 0; //@line 12555
     label = 16; //@line 12556
     break;
    } else {
     if ($135) {
      $136 = $30; //@line 12560
      break;
     } else {
      $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 12563
      $$pre$i3$i$i = $30; //@line 12563
      $__a$2 = $__a$0; //@line 12563
      break L4;
     }
    }
   }
  } while (0);
  if ((label | 0) == 16) {
   label = 0; //@line 12570
   if ($135) {
    $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 12572
    $$pre$i3$i$i = 0; //@line 12572
    $__a$2 = $__a$0; //@line 12572
    break;
   } else {
    $136 = 0; //@line 12575
   }
  }
  $44 = HEAP8[$__buf >> 0] | 0; //@line 12579
  $50 = ($44 & 1) == 0 ? ($44 & 255) >>> 1 : HEAP32[$16 >> 2] | 0; //@line 12585
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $50 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $50 << 1, 0); //@line 12590
   if (!(HEAP8[$__buf >> 0] & 1)) {
    $59 = 10; //@line 12595
   } else {
    $59 = (HEAP32[$__buf >> 2] & -2) + -1 | 0; //@line 12600
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $59, 0); //@line 12602
   $64 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0; //@line 12607
   HEAP32[$__a_end >> 2] = $64 + $50; //@line 12609
   $__a$1 = $64; //@line 12610
  } else {
   $__a$1 = $__a$0; //@line 12612
  }
  $66 = $$pre$i$i$i + 12 | 0; //@line 12614
  $67 = HEAP32[$66 >> 2] | 0; //@line 12615
  $68 = $$pre$i$i$i + 16 | 0; //@line 12616
  if (($67 | 0) == (HEAP32[$68 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i) | 0; //@line 12624
  } else {
   $$0$i$i = HEAP32[$67 >> 2] | 0; //@line 12627
  }
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, $0, $__a$1, $__a_end, $__dc, $17, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 12632
   $$pre$i3$i$i = $136; //@line 12632
   $__a$2 = $__a$1; //@line 12632
   break;
  }
  $78 = HEAP32[$66 >> 2] | 0; //@line 12635
  if (($78 | 0) == (HEAP32[$68 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 63]($$pre$i$i$i) | 0; //@line 12642
   $$pre$i$i$i3 = $$pre$i$i$i; //@line 12643
   $__a$0 = $__a$1; //@line 12643
   continue;
  } else {
   HEAP32[$66 >> 2] = $78 + 4; //@line 12647
   $$pre$i$i$i3 = $$pre$i$i$i; //@line 12648
   $__a$0 = $__a$1; //@line 12648
   continue;
  }
 }
 $85 = HEAP8[$__grouping >> 0] | 0; //@line 12652
 $$pre21 = HEAP32[$__g_end >> 2] | 0; //@line 12661
 if (!((($85 & 1) == 0 ? ($85 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0)) {
  $107 = $$pre21; //@line 12663
 } else {
  if (($$pre21 - $__g | 0) < 160) {
   $98 = HEAP32[$__dc >> 2] | 0; //@line 12670
   $99 = $$pre21 + 4 | 0; //@line 12671
   HEAP32[$__g_end >> 2] = $99; //@line 12672
   HEAP32[$$pre21 >> 2] = $98; //@line 12673
   $107 = $99; //@line 12674
  } else {
   $107 = $$pre21; //@line 12676
  }
 }
 $101 = __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $0) | 0; //@line 12680
 $103 = $__v; //@line 12682
 HEAP32[$103 >> 2] = $101; //@line 12684
 HEAP32[$103 + 4 >> 2] = tempRet0; //@line 12687
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $107, $__err); //@line 12688
 if (!$$pre$i$i$i$lcssa) {
  $137 = 1; //@line 12691
 } else {
  $110 = HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0; //@line 12694
  if (($110 | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) {
   $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i$lcssa) | 0; //@line 12703
  } else {
   $$0$i$i$i$i = HEAP32[$110 >> 2] | 0; //@line 12706
  }
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0; //@line 12710
   $137 = 1; //@line 12711
  } else {
   $137 = 0; //@line 12713
  }
 }
 do {
  if (!$$pre$i3$i$i) {
   label = 44; //@line 12719
  } else {
   $122 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0; //@line 12722
   if (($122 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i) | 0; //@line 12731
   } else {
    $$0$i$i1$i$i = HEAP32[$122 >> 2] | 0; //@line 12734
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$__e >> 2] = 0; //@line 12738
    label = 44; //@line 12739
    break;
   } else {
    if ($137) {
     break;
    } else {
     label = 46; //@line 12745
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 44) {
  if ($137) {
   label = 46; //@line 12753
  }
 }
 if ((label | 0) == 46) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 12759
 }
 $134 = HEAP32[$__b >> 2] | 0; //@line 12761
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf); //@line 12762
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping); //@line 12763
 STACKTOP = sp; //@line 12764
 return $134 | 0; //@line 12764
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i = 0, $$pre21 = 0, $0 = 0, $101 = 0, $103 = 0, $107 = 0, $110 = 0, $12 = 0, $122 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $30 = 0, $33 = 0, $44 = 0, $50 = 0, $59 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $78 = 0, $8 = 0, $85 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11198
 STACKTOP = STACKTOP + 320 | 0; //@line 11199
 $__atoms = sp + 208 | 0; //@line 11200
 $__thousands_sep = sp + 200 | 0; //@line 11201
 $__grouping = sp + 24 | 0; //@line 11202
 $__buf = sp + 12 | 0; //@line 11203
 $__a_end = sp + 8 | 0; //@line 11204
 $__g = sp + 40 | 0; //@line 11205
 $__g_end = sp + 4 | 0; //@line 11206
 $__dc = sp; //@line 11207
 $0 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0; //@line 11208
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $__atoms, $__thousands_sep); //@line 11209
 HEAP32[$__buf >> 2] = 0; //@line 11210
 HEAP32[$__buf + 4 >> 2] = 0; //@line 11212
 HEAP32[$__buf + 8 >> 2] = 0; //@line 11214
 if (!(HEAP8[$__buf >> 0] & 1)) {
  $8 = 10; //@line 11219
 } else {
  $8 = (HEAP32[$__buf >> 2] & -2) + -1 | 0; //@line 11224
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $8, 0); //@line 11226
 $12 = $__buf + 8 | 0; //@line 11230
 $14 = $__buf + 1 | 0; //@line 11232
 $15 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0; //@line 11233
 HEAP32[$__a_end >> 2] = $15; //@line 11234
 HEAP32[$__g_end >> 2] = $__g; //@line 11235
 HEAP32[$__dc >> 2] = 0; //@line 11236
 $16 = $__buf + 4 | 0; //@line 11237
 $17 = HEAP32[$__thousands_sep >> 2] | 0; //@line 11238
 $$pre$i$i$i3 = HEAP32[$__b >> 2] | 0; //@line 11240
 $__a$0 = $15; //@line 11240
 L4 : while (1) {
  if (!$$pre$i$i$i3) {
   $$pre$i$i$i = 0; //@line 11244
   $135 = 1; //@line 11244
  } else {
   $20 = HEAP32[$$pre$i$i$i3 + 12 >> 2] | 0; //@line 11247
   if (($20 | 0) == (HEAP32[$$pre$i$i$i3 + 16 >> 2] | 0)) {
    $$0$i$i$i$i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i3 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i3) | 0; //@line 11256
   } else {
    $$0$i$i$i$i1 = HEAP32[$20 >> 2] | 0; //@line 11259
   }
   if (($$0$i$i$i$i1 | 0) == -1) {
    HEAP32[$__b >> 2] = 0; //@line 11263
    $$pre$i$i$i = 0; //@line 11264
    $135 = 1; //@line 11264
   } else {
    $$pre$i$i$i = $$pre$i$i$i3; //@line 11266
    $135 = 0; //@line 11266
   }
  }
  $30 = HEAP32[$__e >> 2] | 0; //@line 11269
  do {
   if (!$30) {
    label = 16; //@line 11273
   } else {
    $33 = HEAP32[$30 + 12 >> 2] | 0; //@line 11276
    if (($33 | 0) == (HEAP32[$30 + 16 >> 2] | 0)) {
     $$0$i$i1$i$i7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 63]($30) | 0; //@line 11285
    } else {
     $$0$i$i1$i$i7 = HEAP32[$33 >> 2] | 0; //@line 11288
    }
    if (($$0$i$i1$i$i7 | 0) == -1) {
     HEAP32[$__e >> 2] = 0; //@line 11292
     label = 16; //@line 11293
     break;
    } else {
     if ($135) {
      $136 = $30; //@line 11297
      break;
     } else {
      $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 11300
      $$pre$i3$i$i = $30; //@line 11300
      $__a$2 = $__a$0; //@line 11300
      break L4;
     }
    }
   }
  } while (0);
  if ((label | 0) == 16) {
   label = 0; //@line 11307
   if ($135) {
    $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 11309
    $$pre$i3$i$i = 0; //@line 11309
    $__a$2 = $__a$0; //@line 11309
    break;
   } else {
    $136 = 0; //@line 11312
   }
  }
  $44 = HEAP8[$__buf >> 0] | 0; //@line 11316
  $50 = ($44 & 1) == 0 ? ($44 & 255) >>> 1 : HEAP32[$16 >> 2] | 0; //@line 11322
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $50 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $50 << 1, 0); //@line 11327
   if (!(HEAP8[$__buf >> 0] & 1)) {
    $59 = 10; //@line 11332
   } else {
    $59 = (HEAP32[$__buf >> 2] & -2) + -1 | 0; //@line 11337
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $59, 0); //@line 11339
   $64 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0; //@line 11344
   HEAP32[$__a_end >> 2] = $64 + $50; //@line 11346
   $__a$1 = $64; //@line 11347
  } else {
   $__a$1 = $__a$0; //@line 11349
  }
  $66 = $$pre$i$i$i + 12 | 0; //@line 11351
  $67 = HEAP32[$66 >> 2] | 0; //@line 11352
  $68 = $$pre$i$i$i + 16 | 0; //@line 11353
  if (($67 | 0) == (HEAP32[$68 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i) | 0; //@line 11361
  } else {
   $$0$i$i = HEAP32[$67 >> 2] | 0; //@line 11364
  }
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, $0, $__a$1, $__a_end, $__dc, $17, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 11369
   $$pre$i3$i$i = $136; //@line 11369
   $__a$2 = $__a$1; //@line 11369
   break;
  }
  $78 = HEAP32[$66 >> 2] | 0; //@line 11372
  if (($78 | 0) == (HEAP32[$68 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 63]($$pre$i$i$i) | 0; //@line 11379
   $$pre$i$i$i3 = $$pre$i$i$i; //@line 11380
   $__a$0 = $__a$1; //@line 11380
   continue;
  } else {
   HEAP32[$66 >> 2] = $78 + 4; //@line 11384
   $$pre$i$i$i3 = $$pre$i$i$i; //@line 11385
   $__a$0 = $__a$1; //@line 11385
   continue;
  }
 }
 $85 = HEAP8[$__grouping >> 0] | 0; //@line 11389
 $$pre21 = HEAP32[$__g_end >> 2] | 0; //@line 11398
 if (!((($85 & 1) == 0 ? ($85 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0)) {
  $107 = $$pre21; //@line 11400
 } else {
  if (($$pre21 - $__g | 0) < 160) {
   $98 = HEAP32[$__dc >> 2] | 0; //@line 11407
   $99 = $$pre21 + 4 | 0; //@line 11408
   HEAP32[$__g_end >> 2] = $99; //@line 11409
   HEAP32[$$pre21 >> 2] = $98; //@line 11410
   $107 = $99; //@line 11411
  } else {
   $107 = $$pre21; //@line 11413
  }
 }
 $101 = __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $0) | 0; //@line 11417
 $103 = $__v; //@line 11419
 HEAP32[$103 >> 2] = $101; //@line 11421
 HEAP32[$103 + 4 >> 2] = tempRet0; //@line 11424
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $107, $__err); //@line 11425
 if (!$$pre$i$i$i$lcssa) {
  $137 = 1; //@line 11428
 } else {
  $110 = HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0; //@line 11431
  if (($110 | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) {
   $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i$lcssa) | 0; //@line 11440
  } else {
   $$0$i$i$i$i = HEAP32[$110 >> 2] | 0; //@line 11443
  }
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0; //@line 11447
   $137 = 1; //@line 11448
  } else {
   $137 = 0; //@line 11450
  }
 }
 do {
  if (!$$pre$i3$i$i) {
   label = 44; //@line 11456
  } else {
   $122 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0; //@line 11459
   if (($122 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i) | 0; //@line 11468
   } else {
    $$0$i$i1$i$i = HEAP32[$122 >> 2] | 0; //@line 11471
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$__e >> 2] = 0; //@line 11475
    label = 44; //@line 11476
    break;
   } else {
    if ($137) {
     break;
    } else {
     label = 46; //@line 11482
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 44) {
  if ($137) {
   label = 46; //@line 11490
  }
 }
 if ((label | 0) == 46) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 11496
 }
 $134 = HEAP32[$__b >> 2] | 0; //@line 11498
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf); //@line 11499
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping); //@line 11500
 STACKTOP = sp; //@line 11501
 return $134 | 0; //@line 11501
}
function _try_realloc_chunk($p, $nb) {
 $p = $p | 0;
 $nb = $nb | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $101 = 0, $103 = 0, $106 = 0, $109 = 0, $110 = 0, $112 = 0, $113 = 0, $115 = 0, $116 = 0, $118 = 0, $119 = 0, $124 = 0, $125 = 0, $134 = 0, $139 = 0, $143 = 0, $149 = 0, $159 = 0, $168 = 0, $2 = 0, $20 = 0, $3 = 0, $33 = 0, $35 = 0, $4 = 0, $45 = 0, $47 = 0, $5 = 0, $56 = 0, $62 = 0, $68 = 0, $7 = 0, $70 = 0, $71 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $91 = 0, $96 = 0, $98 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $newp$0 = 0, $storemerge = 0, $storemerge21 = 0;
 $0 = $p + 4 | 0; //@line 15130
 $1 = HEAP32[$0 >> 2] | 0; //@line 15131
 $2 = $1 & -8; //@line 15132
 $3 = $p + $2 | 0; //@line 15133
 $4 = HEAP32[1538] | 0; //@line 15134
 $5 = $1 & 3; //@line 15135
 if (!(($5 | 0) != 1 & $p >>> 0 >= $4 >>> 0 & $p >>> 0 < $3 >>> 0)) {
  _abort(); //@line 15142
 }
 $7 = $p + ($2 | 4) | 0; //@line 15146
 $8 = HEAP32[$7 >> 2] | 0; //@line 15147
 if (!($8 & 1)) {
  _abort(); //@line 15151
 }
 if (!$5) {
  if ($nb >>> 0 < 256) {
   $newp$0 = 0; //@line 15158
   return $newp$0 | 0; //@line 15159
  }
  if ($2 >>> 0 >= ($nb + 4 | 0) >>> 0) {
   if (($2 - $nb | 0) >>> 0 <= HEAP32[1654] << 1 >>> 0) {
    $newp$0 = $p; //@line 15169
    return $newp$0 | 0; //@line 15170
   }
  }
  $newp$0 = 0; //@line 15173
  return $newp$0 | 0; //@line 15174
 }
 if ($2 >>> 0 >= $nb >>> 0) {
  $20 = $2 - $nb | 0; //@line 15178
  if ($20 >>> 0 <= 15) {
   $newp$0 = $p; //@line 15181
   return $newp$0 | 0; //@line 15182
  }
  HEAP32[$0 >> 2] = $1 & 1 | $nb | 2; //@line 15188
  HEAP32[$p + ($nb + 4) >> 2] = $20 | 3; //@line 15192
  HEAP32[$7 >> 2] = HEAP32[$7 >> 2] | 1; //@line 15195
  _dispose_chunk($p + $nb | 0, $20); //@line 15196
  $newp$0 = $p; //@line 15197
  return $newp$0 | 0; //@line 15198
 }
 if (($3 | 0) == (HEAP32[1540] | 0)) {
  $33 = (HEAP32[1537] | 0) + $2 | 0; //@line 15204
  if ($33 >>> 0 <= $nb >>> 0) {
   $newp$0 = 0; //@line 15207
   return $newp$0 | 0; //@line 15208
  }
  $35 = $33 - $nb | 0; //@line 15210
  HEAP32[$0 >> 2] = $1 & 1 | $nb | 2; //@line 15215
  HEAP32[$p + ($nb + 4) >> 2] = $35 | 1; //@line 15219
  HEAP32[1540] = $p + $nb; //@line 15220
  HEAP32[1537] = $35; //@line 15221
  $newp$0 = $p; //@line 15222
  return $newp$0 | 0; //@line 15223
 }
 if (($3 | 0) == (HEAP32[1539] | 0)) {
  $45 = (HEAP32[1536] | 0) + $2 | 0; //@line 15229
  if ($45 >>> 0 < $nb >>> 0) {
   $newp$0 = 0; //@line 15232
   return $newp$0 | 0; //@line 15233
  }
  $47 = $45 - $nb | 0; //@line 15235
  if ($47 >>> 0 > 15) {
   HEAP32[$0 >> 2] = $1 & 1 | $nb | 2; //@line 15243
   HEAP32[$p + ($nb + 4) >> 2] = $47 | 1; //@line 15247
   HEAP32[$p + $45 >> 2] = $47; //@line 15248
   $56 = $p + ($45 + 4) | 0; //@line 15250
   HEAP32[$56 >> 2] = HEAP32[$56 >> 2] & -2; //@line 15253
   $storemerge = $p + $nb | 0; //@line 15254
   $storemerge21 = $47; //@line 15254
  } else {
   HEAP32[$0 >> 2] = $1 & 1 | $45 | 2; //@line 15259
   $62 = $p + ($45 + 4) | 0; //@line 15261
   HEAP32[$62 >> 2] = HEAP32[$62 >> 2] | 1; //@line 15264
   $storemerge = 0; //@line 15265
   $storemerge21 = 0; //@line 15265
  }
  HEAP32[1536] = $storemerge21; //@line 15267
  HEAP32[1539] = $storemerge; //@line 15268
  $newp$0 = $p; //@line 15269
  return $newp$0 | 0; //@line 15270
 }
 if ($8 & 2) {
  $newp$0 = 0; //@line 15275
  return $newp$0 | 0; //@line 15276
 }
 $68 = ($8 & -8) + $2 | 0; //@line 15279
 if ($68 >>> 0 < $nb >>> 0) {
  $newp$0 = 0; //@line 15282
  return $newp$0 | 0; //@line 15283
 }
 $70 = $68 - $nb | 0; //@line 15285
 $71 = $8 >>> 3; //@line 15286
 do {
  if ($8 >>> 0 < 256) {
   $74 = HEAP32[$p + ($2 + 8) >> 2] | 0; //@line 15292
   $76 = HEAP32[$p + ($2 + 12) >> 2] | 0; //@line 15295
   $78 = 6176 + ($71 << 1 << 2) | 0; //@line 15297
   if (($74 | 0) != ($78 | 0)) {
    if ($74 >>> 0 < $4 >>> 0) {
     _abort(); //@line 15302
    }
    if ((HEAP32[$74 + 12 >> 2] | 0) != ($3 | 0)) {
     _abort(); //@line 15309
    }
   }
   if (($76 | 0) == ($74 | 0)) {
    HEAP32[1534] = HEAP32[1534] & ~(1 << $71); //@line 15319
    break;
   }
   if (($76 | 0) == ($78 | 0)) {
    $$pre$phiZ2D = $76 + 8 | 0; //@line 15325
   } else {
    if ($76 >>> 0 < $4 >>> 0) {
     _abort(); //@line 15329
    }
    $91 = $76 + 8 | 0; //@line 15332
    if ((HEAP32[$91 >> 2] | 0) == ($3 | 0)) {
     $$pre$phiZ2D = $91; //@line 15336
    } else {
     _abort(); //@line 15338
    }
   }
   HEAP32[$74 + 12 >> 2] = $76; //@line 15343
   HEAP32[$$pre$phiZ2D >> 2] = $74; //@line 15344
  } else {
   $96 = HEAP32[$p + ($2 + 24) >> 2] | 0; //@line 15348
   $98 = HEAP32[$p + ($2 + 12) >> 2] | 0; //@line 15351
   do {
    if (($98 | 0) == ($3 | 0)) {
     $109 = $p + ($2 + 20) | 0; //@line 15356
     $110 = HEAP32[$109 >> 2] | 0; //@line 15357
     if (!$110) {
      $112 = $p + ($2 + 16) | 0; //@line 15361
      $113 = HEAP32[$112 >> 2] | 0; //@line 15362
      if (!$113) {
       $R$1 = 0; //@line 15365
       break;
      } else {
       $R$0 = $113; //@line 15368
       $RP$0 = $112; //@line 15368
      }
     } else {
      $R$0 = $110; //@line 15371
      $RP$0 = $109; //@line 15371
     }
     while (1) {
      $115 = $R$0 + 20 | 0; //@line 15374
      $116 = HEAP32[$115 >> 2] | 0; //@line 15375
      if ($116) {
       $R$0 = $116; //@line 15378
       $RP$0 = $115; //@line 15378
       continue;
      }
      $118 = $R$0 + 16 | 0; //@line 15381
      $119 = HEAP32[$118 >> 2] | 0; //@line 15382
      if (!$119) {
       $R$0$lcssa = $R$0; //@line 15385
       $RP$0$lcssa = $RP$0; //@line 15385
       break;
      } else {
       $R$0 = $119; //@line 15388
       $RP$0 = $118; //@line 15388
      }
     }
     if ($RP$0$lcssa >>> 0 < $4 >>> 0) {
      _abort(); //@line 15393
     } else {
      HEAP32[$RP$0$lcssa >> 2] = 0; //@line 15396
      $R$1 = $R$0$lcssa; //@line 15397
      break;
     }
    } else {
     $101 = HEAP32[$p + ($2 + 8) >> 2] | 0; //@line 15403
     if ($101 >>> 0 < $4 >>> 0) {
      _abort(); //@line 15406
     }
     $103 = $101 + 12 | 0; //@line 15409
     if ((HEAP32[$103 >> 2] | 0) != ($3 | 0)) {
      _abort(); //@line 15413
     }
     $106 = $98 + 8 | 0; //@line 15416
     if ((HEAP32[$106 >> 2] | 0) == ($3 | 0)) {
      HEAP32[$103 >> 2] = $98; //@line 15420
      HEAP32[$106 >> 2] = $101; //@line 15421
      $R$1 = $98; //@line 15422
      break;
     } else {
      _abort(); //@line 15425
     }
    }
   } while (0);
   if ($96) {
    $124 = HEAP32[$p + ($2 + 28) >> 2] | 0; //@line 15434
    $125 = 6440 + ($124 << 2) | 0; //@line 15435
    if (($3 | 0) == (HEAP32[$125 >> 2] | 0)) {
     HEAP32[$125 >> 2] = $R$1; //@line 15439
     if (!$R$1) {
      HEAP32[1535] = HEAP32[1535] & ~(1 << $124); //@line 15446
      break;
     }
    } else {
     if ($96 >>> 0 < (HEAP32[1538] | 0) >>> 0) {
      _abort(); //@line 15453
     }
     $134 = $96 + 16 | 0; //@line 15456
     if ((HEAP32[$134 >> 2] | 0) == ($3 | 0)) {
      HEAP32[$134 >> 2] = $R$1; //@line 15460
     } else {
      HEAP32[$96 + 20 >> 2] = $R$1; //@line 15463
     }
     if (!$R$1) {
      break;
     }
    }
    $139 = HEAP32[1538] | 0; //@line 15470
    if ($R$1 >>> 0 < $139 >>> 0) {
     _abort(); //@line 15473
    }
    HEAP32[$R$1 + 24 >> 2] = $96; //@line 15477
    $143 = HEAP32[$p + ($2 + 16) >> 2] | 0; //@line 15480
    do {
     if ($143) {
      if ($143 >>> 0 < $139 >>> 0) {
       _abort(); //@line 15486
      } else {
       HEAP32[$R$1 + 16 >> 2] = $143; //@line 15490
       HEAP32[$143 + 24 >> 2] = $R$1; //@line 15492
       break;
      }
     }
    } while (0);
    $149 = HEAP32[$p + ($2 + 20) >> 2] | 0; //@line 15499
    if ($149) {
     if ($149 >>> 0 < (HEAP32[1538] | 0) >>> 0) {
      _abort(); //@line 15505
     } else {
      HEAP32[$R$1 + 20 >> 2] = $149; //@line 15509
      HEAP32[$149 + 24 >> 2] = $R$1; //@line 15511
      break;
     }
    }
   }
  }
 } while (0);
 if ($70 >>> 0 < 16) {
  HEAP32[$0 >> 2] = $68 | $1 & 1 | 2; //@line 15523
  $159 = $p + ($68 | 4) | 0; //@line 15525
  HEAP32[$159 >> 2] = HEAP32[$159 >> 2] | 1; //@line 15528
  $newp$0 = $p; //@line 15529
  return $newp$0 | 0; //@line 15530
 } else {
  HEAP32[$0 >> 2] = $1 & 1 | $nb | 2; //@line 15536
  HEAP32[$p + ($nb + 4) >> 2] = $70 | 3; //@line 15540
  $168 = $p + ($68 | 4) | 0; //@line 15542
  HEAP32[$168 >> 2] = HEAP32[$168 >> 2] | 1; //@line 15545
  _dispose_chunk($p + $nb | 0, $70); //@line 15546
  $newp$0 = $p; //@line 15547
  return $newp$0 | 0; //@line 15548
 }
 return 0; //@line 15550
}
function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e, $__err, $__ct, $__n) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 $__n = $__n | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i17 = 0, $$0$i$i$i$i2 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i23 = 0, $$0$i$i1$i$i8 = 0, $$0$i$i14 = 0, $$0$in = 0, $$01 = 0, $$lcssa = 0, $$pre$i3$i$i10 = 0, $$pre$i3$i$i25 = 0, $$pre$i3$i$i25$lcssa = 0, $0 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $124 = 0, $13 = 0, $136 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $16 = 0, $28 = 0, $3 = 0, $30 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $60 = 0, $63 = 0, $74 = 0, $76 = 0, $86 = 0, $87 = 0, $90 = 0, $92 = 0, $__r$0 = 0, $__r$0$in = 0, $__r$0$lcssa = 0, label = 0;
 $0 = HEAP32[$__b >> 2] | 0; //@line 14235
 do {
  if (!$0) {
   $148 = 1; //@line 14239
  } else {
   $3 = HEAP32[$0 + 12 >> 2] | 0; //@line 14242
   if (($3 | 0) == (HEAP32[$0 + 16 >> 2] | 0)) {
    $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 63]($0) | 0; //@line 14251
   } else {
    $$0$i$i$i$i = HEAP32[$3 >> 2] | 0; //@line 14254
   }
   if (($$0$i$i$i$i | 0) == -1) {
    HEAP32[$__b >> 2] = 0; //@line 14258
    $148 = 1; //@line 14259
    break;
   } else {
    $148 = (HEAP32[$__b >> 2] | 0) == 0; //@line 14264
    break;
   }
  }
 } while (0);
 $13 = HEAP32[$__e >> 2] | 0; //@line 14269
 do {
  if (!$13) {
   label = 14; //@line 14273
  } else {
   $16 = HEAP32[$13 + 12 >> 2] | 0; //@line 14276
   if (($16 | 0) == (HEAP32[$13 + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$13 >> 2] | 0) + 36 >> 2] & 63]($13) | 0; //@line 14285
   } else {
    $$0$i$i1$i$i = HEAP32[$16 >> 2] | 0; //@line 14288
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$__e >> 2] = 0; //@line 14292
    label = 14; //@line 14293
    break;
   } else {
    if ($148) {
     $149 = $13; //@line 14297
     label = 17; //@line 14298
     break;
    } else {
     label = 16; //@line 14301
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 14) {
  if ($148) {
   label = 16; //@line 14309
  } else {
   $149 = 0; //@line 14311
   label = 17; //@line 14312
  }
 }
 L22 : do {
  if ((label | 0) == 16) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6; //@line 14319
   $$01 = 0; //@line 14320
  } else if ((label | 0) == 17) {
   $28 = HEAP32[$__b >> 2] | 0; //@line 14323
   $30 = HEAP32[$28 + 12 >> 2] | 0; //@line 14325
   if (($30 | 0) == (HEAP32[$28 + 16 >> 2] | 0)) {
    $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$28 >> 2] | 0) + 36 >> 2] & 63]($28) | 0; //@line 14334
   } else {
    $$0$i$i = HEAP32[$30 >> 2] | 0; //@line 14337
   }
   if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 2048, $$0$i$i) | 0)) {
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 14346
    $$01 = 0; //@line 14347
    break;
   }
   $49 = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 52 >> 2] & 31]($__ct, $$0$i$i, 0) | 0) << 24 >> 24; //@line 14354
   $50 = HEAP32[$__b >> 2] | 0; //@line 14355
   $51 = $50 + 12 | 0; //@line 14356
   $52 = HEAP32[$51 >> 2] | 0; //@line 14357
   if (($52 | 0) == (HEAP32[$50 + 16 >> 2] | 0)) {
    FUNCTION_TABLE_ii[HEAP32[(HEAP32[$50 >> 2] | 0) + 40 >> 2] & 63]($50) | 0; //@line 14365
    $$0$in = $__n; //@line 14366
    $$pre$i3$i$i10 = $149; //@line 14366
    $74 = $149; //@line 14366
    $__r$0$in = $49; //@line 14366
   } else {
    HEAP32[$51 >> 2] = $52 + 4; //@line 14369
    $$0$in = $__n; //@line 14370
    $$pre$i3$i$i10 = $149; //@line 14370
    $74 = $149; //@line 14370
    $__r$0$in = $49; //@line 14370
   }
   while (1) {
    $__r$0 = $__r$0$in + -48 | 0; //@line 14373
    $$0 = $$0$in + -1 | 0; //@line 14374
    $60 = HEAP32[$__b >> 2] | 0; //@line 14375
    do {
     if (!$60) {
      $86 = 1; //@line 14379
     } else {
      $63 = HEAP32[$60 + 12 >> 2] | 0; //@line 14382
      if (($63 | 0) == (HEAP32[$60 + 16 >> 2] | 0)) {
       $$0$i$i$i$i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$60 >> 2] | 0) + 36 >> 2] & 63]($60) | 0; //@line 14391
      } else {
       $$0$i$i$i$i2 = HEAP32[$63 >> 2] | 0; //@line 14394
      }
      if (($$0$i$i$i$i2 | 0) == -1) {
       HEAP32[$__b >> 2] = 0; //@line 14398
       $86 = 1; //@line 14399
       break;
      } else {
       $86 = (HEAP32[$__b >> 2] | 0) == 0; //@line 14404
       break;
      }
     }
    } while (0);
    do {
     if (!$74) {
      $$pre$i3$i$i25 = $$pre$i3$i$i10; //@line 14412
      $150 = 0; //@line 14412
      $87 = 1; //@line 14412
     } else {
      $76 = HEAP32[$74 + 12 >> 2] | 0; //@line 14415
      if (($76 | 0) == (HEAP32[$74 + 16 >> 2] | 0)) {
       $$0$i$i1$i$i8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$74 >> 2] | 0) + 36 >> 2] & 63]($74) | 0; //@line 14424
      } else {
       $$0$i$i1$i$i8 = HEAP32[$76 >> 2] | 0; //@line 14427
      }
      if (($$0$i$i1$i$i8 | 0) == -1) {
       HEAP32[$__e >> 2] = 0; //@line 14431
       $$pre$i3$i$i25 = 0; //@line 14432
       $150 = 0; //@line 14432
       $87 = 1; //@line 14432
       break;
      } else {
       $$pre$i3$i$i25 = $$pre$i3$i$i10; //@line 14436
       $150 = $$pre$i3$i$i10; //@line 14436
       $87 = ($$pre$i3$i$i10 | 0) == 0; //@line 14436
       break;
      }
     }
    } while (0);
    $90 = HEAP32[$__b >> 2] | 0; //@line 14444
    if (!(($$0$in | 0) > 1 & ($86 ^ $87))) {
     $$lcssa = $90; //@line 14446
     $$pre$i3$i$i25$lcssa = $$pre$i3$i$i25; //@line 14446
     $__r$0$lcssa = $__r$0; //@line 14446
     break;
    }
    $92 = HEAP32[$90 + 12 >> 2] | 0; //@line 14450
    if (($92 | 0) == (HEAP32[$90 + 16 >> 2] | 0)) {
     $$0$i$i14 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$90 >> 2] | 0) + 36 >> 2] & 63]($90) | 0; //@line 14459
    } else {
     $$0$i$i14 = HEAP32[$92 >> 2] | 0; //@line 14462
    }
    if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 2048, $$0$i$i14) | 0)) {
     $$01 = $__r$0; //@line 14469
     break L22;
    }
    $111 = ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 52 >> 2] & 31]($__ct, $$0$i$i14, 0) | 0) << 24 >> 24) + ($__r$0 * 10 | 0) | 0; //@line 14478
    $112 = HEAP32[$__b >> 2] | 0; //@line 14479
    $113 = $112 + 12 | 0; //@line 14480
    $114 = HEAP32[$113 >> 2] | 0; //@line 14481
    if (($114 | 0) == (HEAP32[$112 + 16 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[$112 >> 2] | 0) + 40 >> 2] & 63]($112) | 0; //@line 14489
     $$0$in = $$0; //@line 14490
     $$pre$i3$i$i10 = $$pre$i3$i$i25; //@line 14490
     $74 = $150; //@line 14490
     $__r$0$in = $111; //@line 14490
     continue;
    } else {
     HEAP32[$113 >> 2] = $114 + 4; //@line 14494
     $$0$in = $$0; //@line 14495
     $$pre$i3$i$i10 = $$pre$i3$i$i25; //@line 14495
     $74 = $150; //@line 14495
     $__r$0$in = $111; //@line 14495
     continue;
    }
   }
   do {
    if (!$$lcssa) {
     $151 = 1; //@line 14502
    } else {
     $124 = HEAP32[$$lcssa + 12 >> 2] | 0; //@line 14505
     if (($124 | 0) == (HEAP32[$$lcssa + 16 >> 2] | 0)) {
      $$0$i$i$i$i17 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 36 >> 2] & 63]($$lcssa) | 0; //@line 14514
     } else {
      $$0$i$i$i$i17 = HEAP32[$124 >> 2] | 0; //@line 14517
     }
     if (($$0$i$i$i$i17 | 0) == -1) {
      HEAP32[$__b >> 2] = 0; //@line 14521
      $151 = 1; //@line 14522
      break;
     } else {
      $151 = (HEAP32[$__b >> 2] | 0) == 0; //@line 14527
      break;
     }
    }
   } while (0);
   do {
    if (!$$pre$i3$i$i25$lcssa) {
     label = 60; //@line 14535
    } else {
     $136 = HEAP32[$$pre$i3$i$i25$lcssa + 12 >> 2] | 0; //@line 14538
     if (($136 | 0) == (HEAP32[$$pre$i3$i$i25$lcssa + 16 >> 2] | 0)) {
      $$0$i$i1$i$i23 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i25$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i25$lcssa) | 0; //@line 14547
     } else {
      $$0$i$i1$i$i23 = HEAP32[$136 >> 2] | 0; //@line 14550
     }
     if (($$0$i$i1$i$i23 | 0) == -1) {
      HEAP32[$__e >> 2] = 0; //@line 14554
      label = 60; //@line 14555
      break;
     } else {
      if ($151) {
       $$01 = $__r$0$lcssa; //@line 14559
       break L22;
      } else {
       break;
      }
     }
    }
   } while (0);
   if ((label | 0) == 60) {
    if (!$151) {
     $$01 = $__r$0$lcssa; //@line 14569
     break;
    }
   }
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 14575
   $$01 = $__r$0$lcssa; //@line 14576
  }
 } while (0);
 return $$01 | 0; //@line 14579
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i = 0, $$pre21 = 0, $0 = 0, $102 = 0, $105 = 0, $117 = 0, $12 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $30 = 0, $33 = 0, $44 = 0, $50 = 0, $59 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $78 = 0, $8 = 0, $85 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11518
 STACKTOP = STACKTOP + 320 | 0; //@line 11519
 $__atoms = sp + 208 | 0; //@line 11520
 $__thousands_sep = sp + 200 | 0; //@line 11521
 $__grouping = sp + 24 | 0; //@line 11522
 $__buf = sp + 12 | 0; //@line 11523
 $__a_end = sp + 8 | 0; //@line 11524
 $__g = sp + 40 | 0; //@line 11525
 $__g_end = sp + 4 | 0; //@line 11526
 $__dc = sp; //@line 11527
 $0 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0; //@line 11528
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $__atoms, $__thousands_sep); //@line 11529
 HEAP32[$__buf >> 2] = 0; //@line 11530
 HEAP32[$__buf + 4 >> 2] = 0; //@line 11532
 HEAP32[$__buf + 8 >> 2] = 0; //@line 11534
 if (!(HEAP8[$__buf >> 0] & 1)) {
  $8 = 10; //@line 11539
 } else {
  $8 = (HEAP32[$__buf >> 2] & -2) + -1 | 0; //@line 11544
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $8, 0); //@line 11546
 $12 = $__buf + 8 | 0; //@line 11550
 $14 = $__buf + 1 | 0; //@line 11552
 $15 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0; //@line 11553
 HEAP32[$__a_end >> 2] = $15; //@line 11554
 HEAP32[$__g_end >> 2] = $__g; //@line 11555
 HEAP32[$__dc >> 2] = 0; //@line 11556
 $16 = $__buf + 4 | 0; //@line 11557
 $17 = HEAP32[$__thousands_sep >> 2] | 0; //@line 11558
 $$pre$i$i$i3 = HEAP32[$__b >> 2] | 0; //@line 11560
 $__a$0 = $15; //@line 11560
 L4 : while (1) {
  if (!$$pre$i$i$i3) {
   $$pre$i$i$i = 0; //@line 11564
   $130 = 1; //@line 11564
  } else {
   $20 = HEAP32[$$pre$i$i$i3 + 12 >> 2] | 0; //@line 11567
   if (($20 | 0) == (HEAP32[$$pre$i$i$i3 + 16 >> 2] | 0)) {
    $$0$i$i$i$i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i3 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i3) | 0; //@line 11576
   } else {
    $$0$i$i$i$i1 = HEAP32[$20 >> 2] | 0; //@line 11579
   }
   if (($$0$i$i$i$i1 | 0) == -1) {
    HEAP32[$__b >> 2] = 0; //@line 11583
    $$pre$i$i$i = 0; //@line 11584
    $130 = 1; //@line 11584
   } else {
    $$pre$i$i$i = $$pre$i$i$i3; //@line 11586
    $130 = 0; //@line 11586
   }
  }
  $30 = HEAP32[$__e >> 2] | 0; //@line 11589
  do {
   if (!$30) {
    label = 16; //@line 11593
   } else {
    $33 = HEAP32[$30 + 12 >> 2] | 0; //@line 11596
    if (($33 | 0) == (HEAP32[$30 + 16 >> 2] | 0)) {
     $$0$i$i1$i$i7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 63]($30) | 0; //@line 11605
    } else {
     $$0$i$i1$i$i7 = HEAP32[$33 >> 2] | 0; //@line 11608
    }
    if (($$0$i$i1$i$i7 | 0) == -1) {
     HEAP32[$__e >> 2] = 0; //@line 11612
     label = 16; //@line 11613
     break;
    } else {
     if ($130) {
      $131 = $30; //@line 11617
      break;
     } else {
      $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 11620
      $$pre$i3$i$i = $30; //@line 11620
      $__a$2 = $__a$0; //@line 11620
      break L4;
     }
    }
   }
  } while (0);
  if ((label | 0) == 16) {
   label = 0; //@line 11627
   if ($130) {
    $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 11629
    $$pre$i3$i$i = 0; //@line 11629
    $__a$2 = $__a$0; //@line 11629
    break;
   } else {
    $131 = 0; //@line 11632
   }
  }
  $44 = HEAP8[$__buf >> 0] | 0; //@line 11636
  $50 = ($44 & 1) == 0 ? ($44 & 255) >>> 1 : HEAP32[$16 >> 2] | 0; //@line 11642
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $50 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $50 << 1, 0); //@line 11647
   if (!(HEAP8[$__buf >> 0] & 1)) {
    $59 = 10; //@line 11652
   } else {
    $59 = (HEAP32[$__buf >> 2] & -2) + -1 | 0; //@line 11657
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $59, 0); //@line 11659
   $64 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0; //@line 11664
   HEAP32[$__a_end >> 2] = $64 + $50; //@line 11666
   $__a$1 = $64; //@line 11667
  } else {
   $__a$1 = $__a$0; //@line 11669
  }
  $66 = $$pre$i$i$i + 12 | 0; //@line 11671
  $67 = HEAP32[$66 >> 2] | 0; //@line 11672
  $68 = $$pre$i$i$i + 16 | 0; //@line 11673
  if (($67 | 0) == (HEAP32[$68 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i) | 0; //@line 11681
  } else {
   $$0$i$i = HEAP32[$67 >> 2] | 0; //@line 11684
  }
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, $0, $__a$1, $__a_end, $__dc, $17, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 11689
   $$pre$i3$i$i = $131; //@line 11689
   $__a$2 = $__a$1; //@line 11689
   break;
  }
  $78 = HEAP32[$66 >> 2] | 0; //@line 11692
  if (($78 | 0) == (HEAP32[$68 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 63]($$pre$i$i$i) | 0; //@line 11699
   $$pre$i$i$i3 = $$pre$i$i$i; //@line 11700
   $__a$0 = $__a$1; //@line 11700
   continue;
  } else {
   HEAP32[$66 >> 2] = $78 + 4; //@line 11704
   $$pre$i$i$i3 = $$pre$i$i$i; //@line 11705
   $__a$0 = $__a$1; //@line 11705
   continue;
  }
 }
 $85 = HEAP8[$__grouping >> 0] | 0; //@line 11709
 $$pre21 = HEAP32[$__g_end >> 2] | 0; //@line 11718
 if (!((($85 & 1) == 0 ? ($85 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0)) {
  $102 = $$pre21; //@line 11720
 } else {
  if (($$pre21 - $__g | 0) < 160) {
   $98 = HEAP32[$__dc >> 2] | 0; //@line 11727
   $99 = $$pre21 + 4 | 0; //@line 11728
   HEAP32[$__g_end >> 2] = $99; //@line 11729
   HEAP32[$$pre21 >> 2] = $98; //@line 11730
   $102 = $99; //@line 11731
  } else {
   $102 = $$pre21; //@line 11733
  }
 }
 HEAP16[$__v >> 1] = __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $0) | 0; //@line 11738
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $102, $__err); //@line 11739
 if (!$$pre$i$i$i$lcssa) {
  $132 = 1; //@line 11742
 } else {
  $105 = HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0; //@line 11745
  if (($105 | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) {
   $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i$lcssa) | 0; //@line 11754
  } else {
   $$0$i$i$i$i = HEAP32[$105 >> 2] | 0; //@line 11757
  }
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0; //@line 11761
   $132 = 1; //@line 11762
  } else {
   $132 = 0; //@line 11764
  }
 }
 do {
  if (!$$pre$i3$i$i) {
   label = 44; //@line 11770
  } else {
   $117 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0; //@line 11773
   if (($117 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i) | 0; //@line 11782
   } else {
    $$0$i$i1$i$i = HEAP32[$117 >> 2] | 0; //@line 11785
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$__e >> 2] = 0; //@line 11789
    label = 44; //@line 11790
    break;
   } else {
    if ($132) {
     break;
    } else {
     label = 46; //@line 11796
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 44) {
  if ($132) {
   label = 46; //@line 11804
  }
 }
 if ((label | 0) == 46) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 11810
 }
 $129 = HEAP32[$__b >> 2] | 0; //@line 11812
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf); //@line 11813
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping); //@line 11814
 STACKTOP = sp; //@line 11815
 return $129 | 0; //@line 11815
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i = 0, $$pre21 = 0, $0 = 0, $102 = 0, $105 = 0, $117 = 0, $12 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $30 = 0, $33 = 0, $44 = 0, $50 = 0, $59 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $78 = 0, $8 = 0, $85 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12146
 STACKTOP = STACKTOP + 320 | 0; //@line 12147
 $__atoms = sp + 208 | 0; //@line 12148
 $__thousands_sep = sp + 200 | 0; //@line 12149
 $__grouping = sp + 24 | 0; //@line 12150
 $__buf = sp + 12 | 0; //@line 12151
 $__a_end = sp + 8 | 0; //@line 12152
 $__g = sp + 40 | 0; //@line 12153
 $__g_end = sp + 4 | 0; //@line 12154
 $__dc = sp; //@line 12155
 $0 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0; //@line 12156
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $__atoms, $__thousands_sep); //@line 12157
 HEAP32[$__buf >> 2] = 0; //@line 12158
 HEAP32[$__buf + 4 >> 2] = 0; //@line 12160
 HEAP32[$__buf + 8 >> 2] = 0; //@line 12162
 if (!(HEAP8[$__buf >> 0] & 1)) {
  $8 = 10; //@line 12167
 } else {
  $8 = (HEAP32[$__buf >> 2] & -2) + -1 | 0; //@line 12172
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $8, 0); //@line 12174
 $12 = $__buf + 8 | 0; //@line 12178
 $14 = $__buf + 1 | 0; //@line 12180
 $15 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0; //@line 12181
 HEAP32[$__a_end >> 2] = $15; //@line 12182
 HEAP32[$__g_end >> 2] = $__g; //@line 12183
 HEAP32[$__dc >> 2] = 0; //@line 12184
 $16 = $__buf + 4 | 0; //@line 12185
 $17 = HEAP32[$__thousands_sep >> 2] | 0; //@line 12186
 $$pre$i$i$i3 = HEAP32[$__b >> 2] | 0; //@line 12188
 $__a$0 = $15; //@line 12188
 L4 : while (1) {
  if (!$$pre$i$i$i3) {
   $$pre$i$i$i = 0; //@line 12192
   $130 = 1; //@line 12192
  } else {
   $20 = HEAP32[$$pre$i$i$i3 + 12 >> 2] | 0; //@line 12195
   if (($20 | 0) == (HEAP32[$$pre$i$i$i3 + 16 >> 2] | 0)) {
    $$0$i$i$i$i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i3 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i3) | 0; //@line 12204
   } else {
    $$0$i$i$i$i1 = HEAP32[$20 >> 2] | 0; //@line 12207
   }
   if (($$0$i$i$i$i1 | 0) == -1) {
    HEAP32[$__b >> 2] = 0; //@line 12211
    $$pre$i$i$i = 0; //@line 12212
    $130 = 1; //@line 12212
   } else {
    $$pre$i$i$i = $$pre$i$i$i3; //@line 12214
    $130 = 0; //@line 12214
   }
  }
  $30 = HEAP32[$__e >> 2] | 0; //@line 12217
  do {
   if (!$30) {
    label = 16; //@line 12221
   } else {
    $33 = HEAP32[$30 + 12 >> 2] | 0; //@line 12224
    if (($33 | 0) == (HEAP32[$30 + 16 >> 2] | 0)) {
     $$0$i$i1$i$i7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 63]($30) | 0; //@line 12233
    } else {
     $$0$i$i1$i$i7 = HEAP32[$33 >> 2] | 0; //@line 12236
    }
    if (($$0$i$i1$i$i7 | 0) == -1) {
     HEAP32[$__e >> 2] = 0; //@line 12240
     label = 16; //@line 12241
     break;
    } else {
     if ($130) {
      $131 = $30; //@line 12245
      break;
     } else {
      $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 12248
      $$pre$i3$i$i = $30; //@line 12248
      $__a$2 = $__a$0; //@line 12248
      break L4;
     }
    }
   }
  } while (0);
  if ((label | 0) == 16) {
   label = 0; //@line 12255
   if ($130) {
    $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 12257
    $$pre$i3$i$i = 0; //@line 12257
    $__a$2 = $__a$0; //@line 12257
    break;
   } else {
    $131 = 0; //@line 12260
   }
  }
  $44 = HEAP8[$__buf >> 0] | 0; //@line 12264
  $50 = ($44 & 1) == 0 ? ($44 & 255) >>> 1 : HEAP32[$16 >> 2] | 0; //@line 12270
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $50 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $50 << 1, 0); //@line 12275
   if (!(HEAP8[$__buf >> 0] & 1)) {
    $59 = 10; //@line 12280
   } else {
    $59 = (HEAP32[$__buf >> 2] & -2) + -1 | 0; //@line 12285
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $59, 0); //@line 12287
   $64 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0; //@line 12292
   HEAP32[$__a_end >> 2] = $64 + $50; //@line 12294
   $__a$1 = $64; //@line 12295
  } else {
   $__a$1 = $__a$0; //@line 12297
  }
  $66 = $$pre$i$i$i + 12 | 0; //@line 12299
  $67 = HEAP32[$66 >> 2] | 0; //@line 12300
  $68 = $$pre$i$i$i + 16 | 0; //@line 12301
  if (($67 | 0) == (HEAP32[$68 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i) | 0; //@line 12309
  } else {
   $$0$i$i = HEAP32[$67 >> 2] | 0; //@line 12312
  }
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, $0, $__a$1, $__a_end, $__dc, $17, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 12317
   $$pre$i3$i$i = $131; //@line 12317
   $__a$2 = $__a$1; //@line 12317
   break;
  }
  $78 = HEAP32[$66 >> 2] | 0; //@line 12320
  if (($78 | 0) == (HEAP32[$68 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 63]($$pre$i$i$i) | 0; //@line 12327
   $$pre$i$i$i3 = $$pre$i$i$i; //@line 12328
   $__a$0 = $__a$1; //@line 12328
   continue;
  } else {
   HEAP32[$66 >> 2] = $78 + 4; //@line 12332
   $$pre$i$i$i3 = $$pre$i$i$i; //@line 12333
   $__a$0 = $__a$1; //@line 12333
   continue;
  }
 }
 $85 = HEAP8[$__grouping >> 0] | 0; //@line 12337
 $$pre21 = HEAP32[$__g_end >> 2] | 0; //@line 12346
 if (!((($85 & 1) == 0 ? ($85 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0)) {
  $102 = $$pre21; //@line 12348
 } else {
  if (($$pre21 - $__g | 0) < 160) {
   $98 = HEAP32[$__dc >> 2] | 0; //@line 12355
   $99 = $$pre21 + 4 | 0; //@line 12356
   HEAP32[$__g_end >> 2] = $99; //@line 12357
   HEAP32[$$pre21 >> 2] = $98; //@line 12358
   $102 = $99; //@line 12359
  } else {
   $102 = $$pre21; //@line 12361
  }
 }
 HEAP32[$__v >> 2] = __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $0) | 0; //@line 12366
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $102, $__err); //@line 12367
 if (!$$pre$i$i$i$lcssa) {
  $132 = 1; //@line 12370
 } else {
  $105 = HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0; //@line 12373
  if (($105 | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) {
   $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i$lcssa) | 0; //@line 12382
  } else {
   $$0$i$i$i$i = HEAP32[$105 >> 2] | 0; //@line 12385
  }
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0; //@line 12389
   $132 = 1; //@line 12390
  } else {
   $132 = 0; //@line 12392
  }
 }
 do {
  if (!$$pre$i3$i$i) {
   label = 44; //@line 12398
  } else {
   $117 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0; //@line 12401
   if (($117 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i) | 0; //@line 12410
   } else {
    $$0$i$i1$i$i = HEAP32[$117 >> 2] | 0; //@line 12413
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$__e >> 2] = 0; //@line 12417
    label = 44; //@line 12418
    break;
   } else {
    if ($132) {
     break;
    } else {
     label = 46; //@line 12424
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 44) {
  if ($132) {
   label = 46; //@line 12432
  }
 }
 if ((label | 0) == 46) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 12438
 }
 $129 = HEAP32[$__b >> 2] | 0; //@line 12440
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf); //@line 12441
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping); //@line 12442
 STACKTOP = sp; //@line 12443
 return $129 | 0; //@line 12443
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i = 0, $$pre21 = 0, $0 = 0, $102 = 0, $105 = 0, $117 = 0, $12 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $30 = 0, $33 = 0, $44 = 0, $50 = 0, $59 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $78 = 0, $8 = 0, $85 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11832
 STACKTOP = STACKTOP + 320 | 0; //@line 11833
 $__atoms = sp + 208 | 0; //@line 11834
 $__thousands_sep = sp + 200 | 0; //@line 11835
 $__grouping = sp + 24 | 0; //@line 11836
 $__buf = sp + 12 | 0; //@line 11837
 $__a_end = sp + 8 | 0; //@line 11838
 $__g = sp + 40 | 0; //@line 11839
 $__g_end = sp + 4 | 0; //@line 11840
 $__dc = sp; //@line 11841
 $0 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0; //@line 11842
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $__atoms, $__thousands_sep); //@line 11843
 HEAP32[$__buf >> 2] = 0; //@line 11844
 HEAP32[$__buf + 4 >> 2] = 0; //@line 11846
 HEAP32[$__buf + 8 >> 2] = 0; //@line 11848
 if (!(HEAP8[$__buf >> 0] & 1)) {
  $8 = 10; //@line 11853
 } else {
  $8 = (HEAP32[$__buf >> 2] & -2) + -1 | 0; //@line 11858
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $8, 0); //@line 11860
 $12 = $__buf + 8 | 0; //@line 11864
 $14 = $__buf + 1 | 0; //@line 11866
 $15 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0; //@line 11867
 HEAP32[$__a_end >> 2] = $15; //@line 11868
 HEAP32[$__g_end >> 2] = $__g; //@line 11869
 HEAP32[$__dc >> 2] = 0; //@line 11870
 $16 = $__buf + 4 | 0; //@line 11871
 $17 = HEAP32[$__thousands_sep >> 2] | 0; //@line 11872
 $$pre$i$i$i3 = HEAP32[$__b >> 2] | 0; //@line 11874
 $__a$0 = $15; //@line 11874
 L4 : while (1) {
  if (!$$pre$i$i$i3) {
   $$pre$i$i$i = 0; //@line 11878
   $130 = 1; //@line 11878
  } else {
   $20 = HEAP32[$$pre$i$i$i3 + 12 >> 2] | 0; //@line 11881
   if (($20 | 0) == (HEAP32[$$pre$i$i$i3 + 16 >> 2] | 0)) {
    $$0$i$i$i$i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i3 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i3) | 0; //@line 11890
   } else {
    $$0$i$i$i$i1 = HEAP32[$20 >> 2] | 0; //@line 11893
   }
   if (($$0$i$i$i$i1 | 0) == -1) {
    HEAP32[$__b >> 2] = 0; //@line 11897
    $$pre$i$i$i = 0; //@line 11898
    $130 = 1; //@line 11898
   } else {
    $$pre$i$i$i = $$pre$i$i$i3; //@line 11900
    $130 = 0; //@line 11900
   }
  }
  $30 = HEAP32[$__e >> 2] | 0; //@line 11903
  do {
   if (!$30) {
    label = 16; //@line 11907
   } else {
    $33 = HEAP32[$30 + 12 >> 2] | 0; //@line 11910
    if (($33 | 0) == (HEAP32[$30 + 16 >> 2] | 0)) {
     $$0$i$i1$i$i7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 63]($30) | 0; //@line 11919
    } else {
     $$0$i$i1$i$i7 = HEAP32[$33 >> 2] | 0; //@line 11922
    }
    if (($$0$i$i1$i$i7 | 0) == -1) {
     HEAP32[$__e >> 2] = 0; //@line 11926
     label = 16; //@line 11927
     break;
    } else {
     if ($130) {
      $131 = $30; //@line 11931
      break;
     } else {
      $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 11934
      $$pre$i3$i$i = $30; //@line 11934
      $__a$2 = $__a$0; //@line 11934
      break L4;
     }
    }
   }
  } while (0);
  if ((label | 0) == 16) {
   label = 0; //@line 11941
   if ($130) {
    $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 11943
    $$pre$i3$i$i = 0; //@line 11943
    $__a$2 = $__a$0; //@line 11943
    break;
   } else {
    $131 = 0; //@line 11946
   }
  }
  $44 = HEAP8[$__buf >> 0] | 0; //@line 11950
  $50 = ($44 & 1) == 0 ? ($44 & 255) >>> 1 : HEAP32[$16 >> 2] | 0; //@line 11956
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $50 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $50 << 1, 0); //@line 11961
   if (!(HEAP8[$__buf >> 0] & 1)) {
    $59 = 10; //@line 11966
   } else {
    $59 = (HEAP32[$__buf >> 2] & -2) + -1 | 0; //@line 11971
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $59, 0); //@line 11973
   $64 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0; //@line 11978
   HEAP32[$__a_end >> 2] = $64 + $50; //@line 11980
   $__a$1 = $64; //@line 11981
  } else {
   $__a$1 = $__a$0; //@line 11983
  }
  $66 = $$pre$i$i$i + 12 | 0; //@line 11985
  $67 = HEAP32[$66 >> 2] | 0; //@line 11986
  $68 = $$pre$i$i$i + 16 | 0; //@line 11987
  if (($67 | 0) == (HEAP32[$68 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i) | 0; //@line 11995
  } else {
   $$0$i$i = HEAP32[$67 >> 2] | 0; //@line 11998
  }
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, $0, $__a$1, $__a_end, $__dc, $17, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 12003
   $$pre$i3$i$i = $131; //@line 12003
   $__a$2 = $__a$1; //@line 12003
   break;
  }
  $78 = HEAP32[$66 >> 2] | 0; //@line 12006
  if (($78 | 0) == (HEAP32[$68 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 63]($$pre$i$i$i) | 0; //@line 12013
   $$pre$i$i$i3 = $$pre$i$i$i; //@line 12014
   $__a$0 = $__a$1; //@line 12014
   continue;
  } else {
   HEAP32[$66 >> 2] = $78 + 4; //@line 12018
   $$pre$i$i$i3 = $$pre$i$i$i; //@line 12019
   $__a$0 = $__a$1; //@line 12019
   continue;
  }
 }
 $85 = HEAP8[$__grouping >> 0] | 0; //@line 12023
 $$pre21 = HEAP32[$__g_end >> 2] | 0; //@line 12032
 if (!((($85 & 1) == 0 ? ($85 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0)) {
  $102 = $$pre21; //@line 12034
 } else {
  if (($$pre21 - $__g | 0) < 160) {
   $98 = HEAP32[$__dc >> 2] | 0; //@line 12041
   $99 = $$pre21 + 4 | 0; //@line 12042
   HEAP32[$__g_end >> 2] = $99; //@line 12043
   HEAP32[$$pre21 >> 2] = $98; //@line 12044
   $102 = $99; //@line 12045
  } else {
   $102 = $$pre21; //@line 12047
  }
 }
 HEAP32[$__v >> 2] = __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $0) | 0; //@line 12052
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $102, $__err); //@line 12053
 if (!$$pre$i$i$i$lcssa) {
  $132 = 1; //@line 12056
 } else {
  $105 = HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0; //@line 12059
  if (($105 | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) {
   $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i$lcssa) | 0; //@line 12068
  } else {
   $$0$i$i$i$i = HEAP32[$105 >> 2] | 0; //@line 12071
  }
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0; //@line 12075
   $132 = 1; //@line 12076
  } else {
   $132 = 0; //@line 12078
  }
 }
 do {
  if (!$$pre$i3$i$i) {
   label = 44; //@line 12084
  } else {
   $117 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0; //@line 12087
   if (($117 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i) | 0; //@line 12096
   } else {
    $$0$i$i1$i$i = HEAP32[$117 >> 2] | 0; //@line 12099
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$__e >> 2] = 0; //@line 12103
    label = 44; //@line 12104
    break;
   } else {
    if ($132) {
     break;
    } else {
     label = 46; //@line 12110
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 44) {
  if ($132) {
   label = 46; //@line 12118
  }
 }
 if ((label | 0) == 46) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 12124
 }
 $129 = HEAP32[$__b >> 2] | 0; //@line 12126
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf); //@line 12127
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping); //@line 12128
 STACKTOP = sp; //@line 12129
 return $129 | 0; //@line 12129
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i = 0, $$pre21 = 0, $0 = 0, $102 = 0, $105 = 0, $117 = 0, $12 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $30 = 0, $33 = 0, $44 = 0, $50 = 0, $59 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $78 = 0, $8 = 0, $85 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10883
 STACKTOP = STACKTOP + 320 | 0; //@line 10884
 $__atoms = sp + 208 | 0; //@line 10885
 $__thousands_sep = sp + 200 | 0; //@line 10886
 $__grouping = sp + 24 | 0; //@line 10887
 $__buf = sp + 12 | 0; //@line 10888
 $__a_end = sp + 8 | 0; //@line 10889
 $__g = sp + 40 | 0; //@line 10890
 $__g_end = sp + 4 | 0; //@line 10891
 $__dc = sp; //@line 10892
 $0 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0; //@line 10893
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $__atoms, $__thousands_sep); //@line 10894
 HEAP32[$__buf >> 2] = 0; //@line 10895
 HEAP32[$__buf + 4 >> 2] = 0; //@line 10897
 HEAP32[$__buf + 8 >> 2] = 0; //@line 10899
 if (!(HEAP8[$__buf >> 0] & 1)) {
  $8 = 10; //@line 10904
 } else {
  $8 = (HEAP32[$__buf >> 2] & -2) + -1 | 0; //@line 10909
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $8, 0); //@line 10911
 $12 = $__buf + 8 | 0; //@line 10915
 $14 = $__buf + 1 | 0; //@line 10917
 $15 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0; //@line 10918
 HEAP32[$__a_end >> 2] = $15; //@line 10919
 HEAP32[$__g_end >> 2] = $__g; //@line 10920
 HEAP32[$__dc >> 2] = 0; //@line 10921
 $16 = $__buf + 4 | 0; //@line 10922
 $17 = HEAP32[$__thousands_sep >> 2] | 0; //@line 10923
 $$pre$i$i$i3 = HEAP32[$__b >> 2] | 0; //@line 10925
 $__a$0 = $15; //@line 10925
 L4 : while (1) {
  if (!$$pre$i$i$i3) {
   $$pre$i$i$i = 0; //@line 10929
   $130 = 1; //@line 10929
  } else {
   $20 = HEAP32[$$pre$i$i$i3 + 12 >> 2] | 0; //@line 10932
   if (($20 | 0) == (HEAP32[$$pre$i$i$i3 + 16 >> 2] | 0)) {
    $$0$i$i$i$i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i3 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i3) | 0; //@line 10941
   } else {
    $$0$i$i$i$i1 = HEAP32[$20 >> 2] | 0; //@line 10944
   }
   if (($$0$i$i$i$i1 | 0) == -1) {
    HEAP32[$__b >> 2] = 0; //@line 10948
    $$pre$i$i$i = 0; //@line 10949
    $130 = 1; //@line 10949
   } else {
    $$pre$i$i$i = $$pre$i$i$i3; //@line 10951
    $130 = 0; //@line 10951
   }
  }
  $30 = HEAP32[$__e >> 2] | 0; //@line 10954
  do {
   if (!$30) {
    label = 16; //@line 10958
   } else {
    $33 = HEAP32[$30 + 12 >> 2] | 0; //@line 10961
    if (($33 | 0) == (HEAP32[$30 + 16 >> 2] | 0)) {
     $$0$i$i1$i$i7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 63]($30) | 0; //@line 10970
    } else {
     $$0$i$i1$i$i7 = HEAP32[$33 >> 2] | 0; //@line 10973
    }
    if (($$0$i$i1$i$i7 | 0) == -1) {
     HEAP32[$__e >> 2] = 0; //@line 10977
     label = 16; //@line 10978
     break;
    } else {
     if ($130) {
      $131 = $30; //@line 10982
      break;
     } else {
      $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 10985
      $$pre$i3$i$i = $30; //@line 10985
      $__a$2 = $__a$0; //@line 10985
      break L4;
     }
    }
   }
  } while (0);
  if ((label | 0) == 16) {
   label = 0; //@line 10992
   if ($130) {
    $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 10994
    $$pre$i3$i$i = 0; //@line 10994
    $__a$2 = $__a$0; //@line 10994
    break;
   } else {
    $131 = 0; //@line 10997
   }
  }
  $44 = HEAP8[$__buf >> 0] | 0; //@line 11001
  $50 = ($44 & 1) == 0 ? ($44 & 255) >>> 1 : HEAP32[$16 >> 2] | 0; //@line 11007
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $50 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $50 << 1, 0); //@line 11012
   if (!(HEAP8[$__buf >> 0] & 1)) {
    $59 = 10; //@line 11017
   } else {
    $59 = (HEAP32[$__buf >> 2] & -2) + -1 | 0; //@line 11022
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $59, 0); //@line 11024
   $64 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0; //@line 11029
   HEAP32[$__a_end >> 2] = $64 + $50; //@line 11031
   $__a$1 = $64; //@line 11032
  } else {
   $__a$1 = $__a$0; //@line 11034
  }
  $66 = $$pre$i$i$i + 12 | 0; //@line 11036
  $67 = HEAP32[$66 >> 2] | 0; //@line 11037
  $68 = $$pre$i$i$i + 16 | 0; //@line 11038
  if (($67 | 0) == (HEAP32[$68 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i) | 0; //@line 11046
  } else {
   $$0$i$i = HEAP32[$67 >> 2] | 0; //@line 11049
  }
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, $0, $__a$1, $__a_end, $__dc, $17, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 11054
   $$pre$i3$i$i = $131; //@line 11054
   $__a$2 = $__a$1; //@line 11054
   break;
  }
  $78 = HEAP32[$66 >> 2] | 0; //@line 11057
  if (($78 | 0) == (HEAP32[$68 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 63]($$pre$i$i$i) | 0; //@line 11064
   $$pre$i$i$i3 = $$pre$i$i$i; //@line 11065
   $__a$0 = $__a$1; //@line 11065
   continue;
  } else {
   HEAP32[$66 >> 2] = $78 + 4; //@line 11069
   $$pre$i$i$i3 = $$pre$i$i$i; //@line 11070
   $__a$0 = $__a$1; //@line 11070
   continue;
  }
 }
 $85 = HEAP8[$__grouping >> 0] | 0; //@line 11074
 $$pre21 = HEAP32[$__g_end >> 2] | 0; //@line 11083
 if (!((($85 & 1) == 0 ? ($85 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0)) {
  $102 = $$pre21; //@line 11085
 } else {
  if (($$pre21 - $__g | 0) < 160) {
   $98 = HEAP32[$__dc >> 2] | 0; //@line 11092
   $99 = $$pre21 + 4 | 0; //@line 11093
   HEAP32[$__g_end >> 2] = $99; //@line 11094
   HEAP32[$$pre21 >> 2] = $98; //@line 11095
   $102 = $99; //@line 11096
  } else {
   $102 = $$pre21; //@line 11098
  }
 }
 HEAP32[$__v >> 2] = __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $0) | 0; //@line 11103
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $102, $__err); //@line 11104
 if (!$$pre$i$i$i$lcssa) {
  $132 = 1; //@line 11107
 } else {
  $105 = HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0; //@line 11110
  if (($105 | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) {
   $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i$lcssa) | 0; //@line 11119
  } else {
   $$0$i$i$i$i = HEAP32[$105 >> 2] | 0; //@line 11122
  }
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0; //@line 11126
   $132 = 1; //@line 11127
  } else {
   $132 = 0; //@line 11129
  }
 }
 do {
  if (!$$pre$i3$i$i) {
   label = 44; //@line 11135
  } else {
   $117 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0; //@line 11138
   if (($117 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i) | 0; //@line 11147
   } else {
    $$0$i$i1$i$i = HEAP32[$117 >> 2] | 0; //@line 11150
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$__e >> 2] = 0; //@line 11154
    label = 44; //@line 11155
    break;
   } else {
    if ($132) {
     break;
    } else {
     label = 46; //@line 11161
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 44) {
  if ($132) {
   label = 46; //@line 11169
  }
 }
 if ((label | 0) == 46) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 11175
 }
 $129 = HEAP32[$__b >> 2] | 0; //@line 11177
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf); //@line 11178
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping); //@line 11179
 STACKTOP = sp; //@line 11180
 return $129 | 0; //@line 11180
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i3 = 0, $$pre$i2$i$i = 0, $$pre19 = 0, $101 = 0, $102 = 0, $105 = 0, $11 = 0, $117 = 0, $118 = 0, $13 = 0, $132 = 0, $133 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $29 = 0, $30 = 0, $43 = 0, $49 = 0, $58 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $79 = 0, $86 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10119
 STACKTOP = STACKTOP + 240 | 0; //@line 10120
 $__atoms = sp + 208 | 0; //@line 10121
 $__decimal_point = sp + 203 | 0; //@line 10122
 $__thousands_sep = sp + 202 | 0; //@line 10123
 $__grouping = sp + 24 | 0; //@line 10124
 $__buf = sp + 12 | 0; //@line 10125
 $__a_end = sp + 8 | 0; //@line 10126
 $__g = sp + 40 | 0; //@line 10127
 $__g_end = sp + 4 | 0; //@line 10128
 $__dc = sp; //@line 10129
 $__in_units = sp + 201 | 0; //@line 10130
 $__exp = sp + 200 | 0; //@line 10131
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep); //@line 10132
 HEAP32[$__buf >> 2] = 0; //@line 10133
 HEAP32[$__buf + 4 >> 2] = 0; //@line 10135
 HEAP32[$__buf + 8 >> 2] = 0; //@line 10137
 if (!(HEAP8[$__buf >> 0] & 1)) {
  $7 = 10; //@line 10142
 } else {
  $7 = (HEAP32[$__buf >> 2] & -2) + -1 | 0; //@line 10147
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $7, 0); //@line 10149
 $11 = $__buf + 8 | 0; //@line 10153
 $13 = $__buf + 1 | 0; //@line 10155
 $14 = (HEAP8[$__buf >> 0] & 1) == 0 ? $13 : HEAP32[$11 >> 2] | 0; //@line 10156
 HEAP32[$__a_end >> 2] = $14; //@line 10157
 HEAP32[$__g_end >> 2] = $__g; //@line 10158
 HEAP32[$__dc >> 2] = 0; //@line 10159
 HEAP8[$__in_units >> 0] = 1; //@line 10160
 HEAP8[$__exp >> 0] = 69; //@line 10161
 $15 = $__buf + 4 | 0; //@line 10162
 $16 = HEAP8[$__decimal_point >> 0] | 0; //@line 10163
 $17 = HEAP8[$__thousands_sep >> 0] | 0; //@line 10164
 $$pre$i$i$i3 = HEAP32[$__b >> 2] | 0; //@line 10166
 $__a$0 = $14; //@line 10166
 L4 : while (1) {
  if (!$$pre$i$i$i3) {
   $$pre$i$i$i = 0; //@line 10170
  } else {
   if ((HEAP32[$$pre$i$i$i3 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i3 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i3 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i3) | 0) == -1) {
     HEAP32[$__b >> 2] = 0; //@line 10184
     $$pre$i$i$i = 0; //@line 10185
    } else {
     $$pre$i$i$i = $$pre$i$i$i3; //@line 10187
    }
   } else {
    $$pre$i$i$i = $$pre$i$i$i3; //@line 10190
   }
  }
  $29 = ($$pre$i$i$i | 0) == 0; //@line 10193
  $30 = HEAP32[$__e >> 2] | 0; //@line 10194
  do {
   if (!$30) {
    label = 13; //@line 10198
   } else {
    if ((HEAP32[$30 + 12 >> 2] | 0) != (HEAP32[$30 + 16 >> 2] | 0)) {
     if ($29) {
      $133 = $30; //@line 10207
      break;
     } else {
      $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 10210
      $$pre$i2$i$i = $30; //@line 10210
      $__a$2 = $__a$0; //@line 10210
      break L4;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 63]($30) | 0) == -1) {
     HEAP32[$__e >> 2] = 0; //@line 10220
     label = 13; //@line 10221
     break;
    } else {
     if ($29) {
      $133 = $30; //@line 10225
      break;
     } else {
      $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 10228
      $$pre$i2$i$i = $30; //@line 10228
      $__a$2 = $__a$0; //@line 10228
      break L4;
     }
    }
   }
  } while (0);
  if ((label | 0) == 13) {
   label = 0; //@line 10235
   if ($29) {
    $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 10237
    $$pre$i2$i$i = 0; //@line 10237
    $__a$2 = $__a$0; //@line 10237
    break;
   } else {
    $133 = 0; //@line 10240
   }
  }
  $43 = HEAP8[$__buf >> 0] | 0; //@line 10244
  $49 = ($43 & 1) == 0 ? ($43 & 255) >>> 1 : HEAP32[$15 >> 2] | 0; //@line 10250
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $49 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $49 << 1, 0); //@line 10255
   if (!(HEAP8[$__buf >> 0] & 1)) {
    $58 = 10; //@line 10260
   } else {
    $58 = (HEAP32[$__buf >> 2] & -2) + -1 | 0; //@line 10265
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $58, 0); //@line 10267
   $63 = (HEAP8[$__buf >> 0] & 1) == 0 ? $13 : HEAP32[$11 >> 2] | 0; //@line 10272
   HEAP32[$__a_end >> 2] = $63 + $49; //@line 10274
   $__a$1 = $63; //@line 10275
  } else {
   $__a$1 = $__a$0; //@line 10277
  }
  $65 = $$pre$i$i$i + 12 | 0; //@line 10279
  $66 = HEAP32[$65 >> 2] | 0; //@line 10280
  $67 = $$pre$i$i$i + 16 | 0; //@line 10281
  if (($66 | 0) == (HEAP32[$67 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i) | 0; //@line 10289
  } else {
   $$0$i$i = HEAPU8[$66 >> 0] | 0; //@line 10293
  }
  if (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($$0$i$i & 255, $__in_units, $__exp, $__a$1, $__a_end, $16, $17, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) {
   $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 10299
   $$pre$i2$i$i = $133; //@line 10299
   $__a$2 = $__a$1; //@line 10299
   break;
  }
  $79 = HEAP32[$65 >> 2] | 0; //@line 10302
  if (($79 | 0) == (HEAP32[$67 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 63]($$pre$i$i$i) | 0; //@line 10309
   $$pre$i$i$i3 = $$pre$i$i$i; //@line 10310
   $__a$0 = $__a$1; //@line 10310
   continue;
  } else {
   HEAP32[$65 >> 2] = $79 + 1; //@line 10314
   $$pre$i$i$i3 = $$pre$i$i$i; //@line 10315
   $__a$0 = $__a$1; //@line 10315
   continue;
  }
 }
 $86 = HEAP8[$__grouping >> 0] | 0; //@line 10319
 $$pre19 = HEAP32[$__g_end >> 2] | 0; //@line 10331
 if ((HEAP8[$__in_units >> 0] | 0) == 0 ? 1 : ((($86 & 1) == 0 ? ($86 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0) == 0) {
  $105 = $$pre19; //@line 10333
 } else {
  if (($$pre19 - $__g | 0) < 160) {
   $101 = HEAP32[$__dc >> 2] | 0; //@line 10340
   $102 = $$pre19 + 4 | 0; //@line 10341
   HEAP32[$__g_end >> 2] = $102; //@line 10342
   HEAP32[$$pre19 >> 2] = $101; //@line 10343
   $105 = $102; //@line 10344
  } else {
   $105 = $$pre19; //@line 10346
  }
 }
 HEAPF64[$__v >> 3] = +__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err); //@line 10351
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $105, $__err); //@line 10352
 if (!$$pre$i$i$i$lcssa) {
  $118 = 0; //@line 10355
 } else {
  if ((HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) {
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i$lcssa) | 0) == -1) {
    HEAP32[$__b >> 2] = 0; //@line 10369
    $118 = 0; //@line 10370
   } else {
    $118 = $$pre$i$i$i$lcssa; //@line 10372
   }
  } else {
   $118 = $$pre$i$i$i$lcssa; //@line 10375
  }
 }
 $117 = ($118 | 0) == 0; //@line 10378
 do {
  if (!$$pre$i2$i$i) {
   label = 38; //@line 10382
  } else {
   if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) == (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i) | 0) == -1) {
     HEAP32[$__e >> 2] = 0; //@line 10396
     label = 38; //@line 10397
     break;
    }
   }
   if (!$117) {
    label = 39; //@line 10402
   }
  }
 } while (0);
 if ((label | 0) == 38) {
  if ($117) {
   label = 39; //@line 10408
  }
 }
 if ((label | 0) == 39) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 10414
 }
 $132 = HEAP32[$__b >> 2] | 0; //@line 10416
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf); //@line 10417
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping); //@line 10418
 STACKTOP = sp; //@line 10419
 return $132 | 0; //@line 10419
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i3 = 0, $$pre$i2$i$i = 0, $$pre19 = 0, $101 = 0, $102 = 0, $105 = 0, $11 = 0, $117 = 0, $118 = 0, $13 = 0, $132 = 0, $133 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $29 = 0, $30 = 0, $43 = 0, $49 = 0, $58 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $79 = 0, $86 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9802
 STACKTOP = STACKTOP + 240 | 0; //@line 9803
 $__atoms = sp + 208 | 0; //@line 9804
 $__decimal_point = sp + 203 | 0; //@line 9805
 $__thousands_sep = sp + 202 | 0; //@line 9806
 $__grouping = sp + 24 | 0; //@line 9807
 $__buf = sp + 12 | 0; //@line 9808
 $__a_end = sp + 8 | 0; //@line 9809
 $__g = sp + 40 | 0; //@line 9810
 $__g_end = sp + 4 | 0; //@line 9811
 $__dc = sp; //@line 9812
 $__in_units = sp + 201 | 0; //@line 9813
 $__exp = sp + 200 | 0; //@line 9814
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep); //@line 9815
 HEAP32[$__buf >> 2] = 0; //@line 9816
 HEAP32[$__buf + 4 >> 2] = 0; //@line 9818
 HEAP32[$__buf + 8 >> 2] = 0; //@line 9820
 if (!(HEAP8[$__buf >> 0] & 1)) {
  $7 = 10; //@line 9825
 } else {
  $7 = (HEAP32[$__buf >> 2] & -2) + -1 | 0; //@line 9830
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $7, 0); //@line 9832
 $11 = $__buf + 8 | 0; //@line 9836
 $13 = $__buf + 1 | 0; //@line 9838
 $14 = (HEAP8[$__buf >> 0] & 1) == 0 ? $13 : HEAP32[$11 >> 2] | 0; //@line 9839
 HEAP32[$__a_end >> 2] = $14; //@line 9840
 HEAP32[$__g_end >> 2] = $__g; //@line 9841
 HEAP32[$__dc >> 2] = 0; //@line 9842
 HEAP8[$__in_units >> 0] = 1; //@line 9843
 HEAP8[$__exp >> 0] = 69; //@line 9844
 $15 = $__buf + 4 | 0; //@line 9845
 $16 = HEAP8[$__decimal_point >> 0] | 0; //@line 9846
 $17 = HEAP8[$__thousands_sep >> 0] | 0; //@line 9847
 $$pre$i$i$i3 = HEAP32[$__b >> 2] | 0; //@line 9849
 $__a$0 = $14; //@line 9849
 L4 : while (1) {
  if (!$$pre$i$i$i3) {
   $$pre$i$i$i = 0; //@line 9853
  } else {
   if ((HEAP32[$$pre$i$i$i3 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i3 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i3 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i3) | 0) == -1) {
     HEAP32[$__b >> 2] = 0; //@line 9867
     $$pre$i$i$i = 0; //@line 9868
    } else {
     $$pre$i$i$i = $$pre$i$i$i3; //@line 9870
    }
   } else {
    $$pre$i$i$i = $$pre$i$i$i3; //@line 9873
   }
  }
  $29 = ($$pre$i$i$i | 0) == 0; //@line 9876
  $30 = HEAP32[$__e >> 2] | 0; //@line 9877
  do {
   if (!$30) {
    label = 13; //@line 9881
   } else {
    if ((HEAP32[$30 + 12 >> 2] | 0) != (HEAP32[$30 + 16 >> 2] | 0)) {
     if ($29) {
      $133 = $30; //@line 9890
      break;
     } else {
      $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 9893
      $$pre$i2$i$i = $30; //@line 9893
      $__a$2 = $__a$0; //@line 9893
      break L4;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 63]($30) | 0) == -1) {
     HEAP32[$__e >> 2] = 0; //@line 9903
     label = 13; //@line 9904
     break;
    } else {
     if ($29) {
      $133 = $30; //@line 9908
      break;
     } else {
      $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 9911
      $$pre$i2$i$i = $30; //@line 9911
      $__a$2 = $__a$0; //@line 9911
      break L4;
     }
    }
   }
  } while (0);
  if ((label | 0) == 13) {
   label = 0; //@line 9918
   if ($29) {
    $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 9920
    $$pre$i2$i$i = 0; //@line 9920
    $__a$2 = $__a$0; //@line 9920
    break;
   } else {
    $133 = 0; //@line 9923
   }
  }
  $43 = HEAP8[$__buf >> 0] | 0; //@line 9927
  $49 = ($43 & 1) == 0 ? ($43 & 255) >>> 1 : HEAP32[$15 >> 2] | 0; //@line 9933
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $49 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $49 << 1, 0); //@line 9938
   if (!(HEAP8[$__buf >> 0] & 1)) {
    $58 = 10; //@line 9943
   } else {
    $58 = (HEAP32[$__buf >> 2] & -2) + -1 | 0; //@line 9948
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $58, 0); //@line 9950
   $63 = (HEAP8[$__buf >> 0] & 1) == 0 ? $13 : HEAP32[$11 >> 2] | 0; //@line 9955
   HEAP32[$__a_end >> 2] = $63 + $49; //@line 9957
   $__a$1 = $63; //@line 9958
  } else {
   $__a$1 = $__a$0; //@line 9960
  }
  $65 = $$pre$i$i$i + 12 | 0; //@line 9962
  $66 = HEAP32[$65 >> 2] | 0; //@line 9963
  $67 = $$pre$i$i$i + 16 | 0; //@line 9964
  if (($66 | 0) == (HEAP32[$67 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i) | 0; //@line 9972
  } else {
   $$0$i$i = HEAPU8[$66 >> 0] | 0; //@line 9976
  }
  if (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($$0$i$i & 255, $__in_units, $__exp, $__a$1, $__a_end, $16, $17, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) {
   $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 9982
   $$pre$i2$i$i = $133; //@line 9982
   $__a$2 = $__a$1; //@line 9982
   break;
  }
  $79 = HEAP32[$65 >> 2] | 0; //@line 9985
  if (($79 | 0) == (HEAP32[$67 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 63]($$pre$i$i$i) | 0; //@line 9992
   $$pre$i$i$i3 = $$pre$i$i$i; //@line 9993
   $__a$0 = $__a$1; //@line 9993
   continue;
  } else {
   HEAP32[$65 >> 2] = $79 + 1; //@line 9997
   $$pre$i$i$i3 = $$pre$i$i$i; //@line 9998
   $__a$0 = $__a$1; //@line 9998
   continue;
  }
 }
 $86 = HEAP8[$__grouping >> 0] | 0; //@line 10002
 $$pre19 = HEAP32[$__g_end >> 2] | 0; //@line 10014
 if ((HEAP8[$__in_units >> 0] | 0) == 0 ? 1 : ((($86 & 1) == 0 ? ($86 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0) == 0) {
  $105 = $$pre19; //@line 10016
 } else {
  if (($$pre19 - $__g | 0) < 160) {
   $101 = HEAP32[$__dc >> 2] | 0; //@line 10023
   $102 = $$pre19 + 4 | 0; //@line 10024
   HEAP32[$__g_end >> 2] = $102; //@line 10025
   HEAP32[$$pre19 >> 2] = $101; //@line 10026
   $105 = $102; //@line 10027
  } else {
   $105 = $$pre19; //@line 10029
  }
 }
 HEAPF64[$__v >> 3] = +__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err); //@line 10034
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $105, $__err); //@line 10035
 if (!$$pre$i$i$i$lcssa) {
  $118 = 0; //@line 10038
 } else {
  if ((HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) {
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i$lcssa) | 0) == -1) {
    HEAP32[$__b >> 2] = 0; //@line 10052
    $118 = 0; //@line 10053
   } else {
    $118 = $$pre$i$i$i$lcssa; //@line 10055
   }
  } else {
   $118 = $$pre$i$i$i$lcssa; //@line 10058
  }
 }
 $117 = ($118 | 0) == 0; //@line 10061
 do {
  if (!$$pre$i2$i$i) {
   label = 38; //@line 10065
  } else {
   if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) == (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i) | 0) == -1) {
     HEAP32[$__e >> 2] = 0; //@line 10079
     label = 38; //@line 10080
     break;
    }
   }
   if (!$117) {
    label = 39; //@line 10085
   }
  }
 } while (0);
 if ((label | 0) == 38) {
  if ($117) {
   label = 39; //@line 10091
  }
 }
 if ((label | 0) == 39) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 10097
 }
 $132 = HEAP32[$__b >> 2] | 0; //@line 10099
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf); //@line 10100
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping); //@line 10101
 STACKTOP = sp; //@line 10102
 return $132 | 0; //@line 10102
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i3 = 0, $$pre$i2$i$i = 0, $$pre19 = 0, $101 = 0, $102 = 0, $105 = 0, $11 = 0, $117 = 0, $118 = 0, $13 = 0, $132 = 0, $133 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $29 = 0, $30 = 0, $43 = 0, $49 = 0, $58 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $79 = 0, $86 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9485
 STACKTOP = STACKTOP + 240 | 0; //@line 9486
 $__atoms = sp + 208 | 0; //@line 9487
 $__decimal_point = sp + 203 | 0; //@line 9488
 $__thousands_sep = sp + 202 | 0; //@line 9489
 $__grouping = sp + 24 | 0; //@line 9490
 $__buf = sp + 12 | 0; //@line 9491
 $__a_end = sp + 8 | 0; //@line 9492
 $__g = sp + 40 | 0; //@line 9493
 $__g_end = sp + 4 | 0; //@line 9494
 $__dc = sp; //@line 9495
 $__in_units = sp + 201 | 0; //@line 9496
 $__exp = sp + 200 | 0; //@line 9497
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep); //@line 9498
 HEAP32[$__buf >> 2] = 0; //@line 9499
 HEAP32[$__buf + 4 >> 2] = 0; //@line 9501
 HEAP32[$__buf + 8 >> 2] = 0; //@line 9503
 if (!(HEAP8[$__buf >> 0] & 1)) {
  $7 = 10; //@line 9508
 } else {
  $7 = (HEAP32[$__buf >> 2] & -2) + -1 | 0; //@line 9513
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $7, 0); //@line 9515
 $11 = $__buf + 8 | 0; //@line 9519
 $13 = $__buf + 1 | 0; //@line 9521
 $14 = (HEAP8[$__buf >> 0] & 1) == 0 ? $13 : HEAP32[$11 >> 2] | 0; //@line 9522
 HEAP32[$__a_end >> 2] = $14; //@line 9523
 HEAP32[$__g_end >> 2] = $__g; //@line 9524
 HEAP32[$__dc >> 2] = 0; //@line 9525
 HEAP8[$__in_units >> 0] = 1; //@line 9526
 HEAP8[$__exp >> 0] = 69; //@line 9527
 $15 = $__buf + 4 | 0; //@line 9528
 $16 = HEAP8[$__decimal_point >> 0] | 0; //@line 9529
 $17 = HEAP8[$__thousands_sep >> 0] | 0; //@line 9530
 $$pre$i$i$i3 = HEAP32[$__b >> 2] | 0; //@line 9532
 $__a$0 = $14; //@line 9532
 L4 : while (1) {
  if (!$$pre$i$i$i3) {
   $$pre$i$i$i = 0; //@line 9536
  } else {
   if ((HEAP32[$$pre$i$i$i3 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i3 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i3 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i3) | 0) == -1) {
     HEAP32[$__b >> 2] = 0; //@line 9550
     $$pre$i$i$i = 0; //@line 9551
    } else {
     $$pre$i$i$i = $$pre$i$i$i3; //@line 9553
    }
   } else {
    $$pre$i$i$i = $$pre$i$i$i3; //@line 9556
   }
  }
  $29 = ($$pre$i$i$i | 0) == 0; //@line 9559
  $30 = HEAP32[$__e >> 2] | 0; //@line 9560
  do {
   if (!$30) {
    label = 13; //@line 9564
   } else {
    if ((HEAP32[$30 + 12 >> 2] | 0) != (HEAP32[$30 + 16 >> 2] | 0)) {
     if ($29) {
      $133 = $30; //@line 9573
      break;
     } else {
      $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 9576
      $$pre$i2$i$i = $30; //@line 9576
      $__a$2 = $__a$0; //@line 9576
      break L4;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 63]($30) | 0) == -1) {
     HEAP32[$__e >> 2] = 0; //@line 9586
     label = 13; //@line 9587
     break;
    } else {
     if ($29) {
      $133 = $30; //@line 9591
      break;
     } else {
      $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 9594
      $$pre$i2$i$i = $30; //@line 9594
      $__a$2 = $__a$0; //@line 9594
      break L4;
     }
    }
   }
  } while (0);
  if ((label | 0) == 13) {
   label = 0; //@line 9601
   if ($29) {
    $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 9603
    $$pre$i2$i$i = 0; //@line 9603
    $__a$2 = $__a$0; //@line 9603
    break;
   } else {
    $133 = 0; //@line 9606
   }
  }
  $43 = HEAP8[$__buf >> 0] | 0; //@line 9610
  $49 = ($43 & 1) == 0 ? ($43 & 255) >>> 1 : HEAP32[$15 >> 2] | 0; //@line 9616
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $49 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $49 << 1, 0); //@line 9621
   if (!(HEAP8[$__buf >> 0] & 1)) {
    $58 = 10; //@line 9626
   } else {
    $58 = (HEAP32[$__buf >> 2] & -2) + -1 | 0; //@line 9631
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $58, 0); //@line 9633
   $63 = (HEAP8[$__buf >> 0] & 1) == 0 ? $13 : HEAP32[$11 >> 2] | 0; //@line 9638
   HEAP32[$__a_end >> 2] = $63 + $49; //@line 9640
   $__a$1 = $63; //@line 9641
  } else {
   $__a$1 = $__a$0; //@line 9643
  }
  $65 = $$pre$i$i$i + 12 | 0; //@line 9645
  $66 = HEAP32[$65 >> 2] | 0; //@line 9646
  $67 = $$pre$i$i$i + 16 | 0; //@line 9647
  if (($66 | 0) == (HEAP32[$67 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i) | 0; //@line 9655
  } else {
   $$0$i$i = HEAPU8[$66 >> 0] | 0; //@line 9659
  }
  if (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($$0$i$i & 255, $__in_units, $__exp, $__a$1, $__a_end, $16, $17, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) {
   $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 9665
   $$pre$i2$i$i = $133; //@line 9665
   $__a$2 = $__a$1; //@line 9665
   break;
  }
  $79 = HEAP32[$65 >> 2] | 0; //@line 9668
  if (($79 | 0) == (HEAP32[$67 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 63]($$pre$i$i$i) | 0; //@line 9675
   $$pre$i$i$i3 = $$pre$i$i$i; //@line 9676
   $__a$0 = $__a$1; //@line 9676
   continue;
  } else {
   HEAP32[$65 >> 2] = $79 + 1; //@line 9680
   $$pre$i$i$i3 = $$pre$i$i$i; //@line 9681
   $__a$0 = $__a$1; //@line 9681
   continue;
  }
 }
 $86 = HEAP8[$__grouping >> 0] | 0; //@line 9685
 $$pre19 = HEAP32[$__g_end >> 2] | 0; //@line 9697
 if ((HEAP8[$__in_units >> 0] | 0) == 0 ? 1 : ((($86 & 1) == 0 ? ($86 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0) == 0) {
  $105 = $$pre19; //@line 9699
 } else {
  if (($$pre19 - $__g | 0) < 160) {
   $101 = HEAP32[$__dc >> 2] | 0; //@line 9706
   $102 = $$pre19 + 4 | 0; //@line 9707
   HEAP32[$__g_end >> 2] = $102; //@line 9708
   HEAP32[$$pre19 >> 2] = $101; //@line 9709
   $105 = $102; //@line 9710
  } else {
   $105 = $$pre19; //@line 9712
  }
 }
 HEAPF32[$__v >> 2] = +__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err); //@line 9717
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $105, $__err); //@line 9718
 if (!$$pre$i$i$i$lcssa) {
  $118 = 0; //@line 9721
 } else {
  if ((HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) {
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i$lcssa) | 0) == -1) {
    HEAP32[$__b >> 2] = 0; //@line 9735
    $118 = 0; //@line 9736
   } else {
    $118 = $$pre$i$i$i$lcssa; //@line 9738
   }
  } else {
   $118 = $$pre$i$i$i$lcssa; //@line 9741
  }
 }
 $117 = ($118 | 0) == 0; //@line 9744
 do {
  if (!$$pre$i2$i$i) {
   label = 38; //@line 9748
  } else {
   if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) == (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i) | 0) == -1) {
     HEAP32[$__e >> 2] = 0; //@line 9762
     label = 38; //@line 9763
     break;
    }
   }
   if (!$117) {
    label = 39; //@line 9768
   }
  }
 } while (0);
 if ((label | 0) == 38) {
  if ($117) {
   label = 39; //@line 9774
  }
 }
 if ((label | 0) == 39) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 9780
 }
 $132 = HEAP32[$__b >> 2] | 0; //@line 9782
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf); //@line 9783
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping); //@line 9784
 STACKTOP = sp; //@line 9785
 return $132 | 0; //@line 9785
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i = 0, $0 = 0, $100 = 0, $105 = 0, $117 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $15 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $26 = 0, $3 = 0, $36 = 0, $39 = 0, $4 = 0, $50 = 0, $56 = 0, $65 = 0, $70 = 0, $72 = 0, $73 = 0, $74 = 0, $84 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5930
 STACKTOP = STACKTOP + 320 | 0; //@line 5931
 $vararg_buffer = sp; //@line 5932
 $__atoms = sp + 208 | 0; //@line 5933
 $__grouping = sp + 32 | 0; //@line 5934
 $0 = sp + 28 | 0; //@line 5935
 $__buf = sp + 16 | 0; //@line 5936
 $__a_end = sp + 12 | 0; //@line 5937
 $__g = sp + 48 | 0; //@line 5938
 $__g_end = sp + 8 | 0; //@line 5939
 $__dc = sp + 4 | 0; //@line 5940
 HEAP32[$__grouping >> 2] = 0; //@line 5941
 HEAP32[$__grouping + 4 >> 2] = 0; //@line 5943
 HEAP32[$__grouping + 8 >> 2] = 0; //@line 5945
 $3 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 5946
 HEAP32[$0 >> 2] = $3; //@line 5947
 $4 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 9320) | 0; //@line 5948
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 48 >> 2] & 7]($4, 20196, 20222, $__atoms) | 0; //@line 5952
 __ZNSt3__114__shared_count16__release_sharedEv($3) | 0; //@line 5953
 HEAP32[$__buf >> 2] = 0; //@line 5954
 HEAP32[$__buf + 4 >> 2] = 0; //@line 5956
 HEAP32[$__buf + 8 >> 2] = 0; //@line 5958
 if (!(HEAP8[$__buf >> 0] & 1)) {
  $15 = 10; //@line 5963
 } else {
  $15 = (HEAP32[$__buf >> 2] & -2) + -1 | 0; //@line 5968
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $15, 0); //@line 5970
 $19 = $__buf + 8 | 0; //@line 5974
 $21 = $__buf + 1 | 0; //@line 5976
 $22 = (HEAP8[$__buf >> 0] & 1) == 0 ? $21 : HEAP32[$19 >> 2] | 0; //@line 5977
 HEAP32[$__a_end >> 2] = $22; //@line 5978
 HEAP32[$__g_end >> 2] = $__g; //@line 5979
 HEAP32[$__dc >> 2] = 0; //@line 5980
 $23 = $__buf + 4 | 0; //@line 5981
 $$pre$i$i$i6 = HEAP32[$__b >> 2] | 0; //@line 5983
 $__a$0 = $22; //@line 5983
 L4 : while (1) {
  if (!$$pre$i$i$i6) {
   $$pre$i$i$i = 0; //@line 5987
   $130 = 1; //@line 5987
  } else {
   $26 = HEAP32[$$pre$i$i$i6 + 12 >> 2] | 0; //@line 5990
   if (($26 | 0) == (HEAP32[$$pre$i$i$i6 + 16 >> 2] | 0)) {
    $$0$i$i$i$i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i6 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i6) | 0; //@line 5999
   } else {
    $$0$i$i$i$i4 = HEAP32[$26 >> 2] | 0; //@line 6002
   }
   if (($$0$i$i$i$i4 | 0) == -1) {
    HEAP32[$__b >> 2] = 0; //@line 6006
    $$pre$i$i$i = 0; //@line 6007
    $130 = 1; //@line 6007
   } else {
    $$pre$i$i$i = $$pre$i$i$i6; //@line 6009
    $130 = 0; //@line 6009
   }
  }
  $36 = HEAP32[$__e >> 2] | 0; //@line 6012
  do {
   if (!$36) {
    label = 16; //@line 6016
   } else {
    $39 = HEAP32[$36 + 12 >> 2] | 0; //@line 6019
    if (($39 | 0) == (HEAP32[$36 + 16 >> 2] | 0)) {
     $$0$i$i1$i$i10 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$36 >> 2] | 0) + 36 >> 2] & 63]($36) | 0; //@line 6028
    } else {
     $$0$i$i1$i$i10 = HEAP32[$39 >> 2] | 0; //@line 6031
    }
    if (($$0$i$i1$i$i10 | 0) == -1) {
     HEAP32[$__e >> 2] = 0; //@line 6035
     label = 16; //@line 6036
     break;
    } else {
     if ($130) {
      $131 = $36; //@line 6040
      break;
     } else {
      $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 6043
      $$pre$i3$i$i = $36; //@line 6043
      $__a$2 = $__a$0; //@line 6043
      break L4;
     }
    }
   }
  } while (0);
  if ((label | 0) == 16) {
   label = 0; //@line 6050
   if ($130) {
    $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 6052
    $$pre$i3$i$i = 0; //@line 6052
    $__a$2 = $__a$0; //@line 6052
    break;
   } else {
    $131 = 0; //@line 6055
   }
  }
  $50 = HEAP8[$__buf >> 0] | 0; //@line 6059
  $56 = ($50 & 1) == 0 ? ($50 & 255) >>> 1 : HEAP32[$23 >> 2] | 0; //@line 6065
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $56 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $56 << 1, 0); //@line 6070
   if (!(HEAP8[$__buf >> 0] & 1)) {
    $65 = 10; //@line 6075
   } else {
    $65 = (HEAP32[$__buf >> 2] & -2) + -1 | 0; //@line 6080
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $65, 0); //@line 6082
   $70 = (HEAP8[$__buf >> 0] & 1) == 0 ? $21 : HEAP32[$19 >> 2] | 0; //@line 6087
   HEAP32[$__a_end >> 2] = $70 + $56; //@line 6089
   $__a$1 = $70; //@line 6090
  } else {
   $__a$1 = $__a$0; //@line 6092
  }
  $72 = $$pre$i$i$i + 12 | 0; //@line 6094
  $73 = HEAP32[$72 >> 2] | 0; //@line 6095
  $74 = $$pre$i$i$i + 16 | 0; //@line 6096
  if (($73 | 0) == (HEAP32[$74 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i) | 0; //@line 6104
  } else {
   $$0$i$i = HEAP32[$73 >> 2] | 0; //@line 6107
  }
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, 16, $__a$1, $__a_end, $__dc, 0, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 6112
   $$pre$i3$i$i = $131; //@line 6112
   $__a$2 = $__a$1; //@line 6112
   break;
  }
  $84 = HEAP32[$72 >> 2] | 0; //@line 6115
  if (($84 | 0) == (HEAP32[$74 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 63]($$pre$i$i$i) | 0; //@line 6122
   $$pre$i$i$i6 = $$pre$i$i$i; //@line 6123
   $__a$0 = $__a$1; //@line 6123
   continue;
  } else {
   HEAP32[$72 >> 2] = $84 + 4; //@line 6127
   $$pre$i$i$i6 = $$pre$i$i$i; //@line 6128
   $__a$0 = $__a$1; //@line 6128
   continue;
  }
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, (HEAP32[$__a_end >> 2] | 0) - $__a$2 | 0, 0); //@line 6136
 $99 = (HEAP8[$__buf >> 0] & 1) == 0 ? $21 : HEAP32[$19 >> 2] | 0; //@line 6141
 $100 = __ZNSt3__16__clocEv() | 0; //@line 6142
 HEAP32[$vararg_buffer >> 2] = $__v; //@line 6143
 if ((__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($99, $100, 21580, $vararg_buffer) | 0) != 1) {
  HEAP32[$__err >> 2] = 4; //@line 6147
 }
 if (!$$pre$i$i$i$lcssa) {
  $132 = 1; //@line 6151
 } else {
  $105 = HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0; //@line 6154
  if (($105 | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) {
   $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i$lcssa) | 0; //@line 6163
  } else {
   $$0$i$i$i$i = HEAP32[$105 >> 2] | 0; //@line 6166
  }
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0; //@line 6170
   $132 = 1; //@line 6171
  } else {
   $132 = 0; //@line 6173
  }
 }
 do {
  if (!$$pre$i3$i$i) {
   label = 43; //@line 6179
  } else {
   $117 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0; //@line 6182
   if (($117 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i) | 0; //@line 6191
   } else {
    $$0$i$i1$i$i = HEAP32[$117 >> 2] | 0; //@line 6194
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$__e >> 2] = 0; //@line 6198
    label = 43; //@line 6199
    break;
   } else {
    if ($132) {
     break;
    } else {
     label = 45; //@line 6205
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 43) {
  if ($132) {
   label = 45; //@line 6213
  }
 }
 if ((label | 0) == 45) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 6219
 }
 $129 = HEAP32[$__b >> 2] | 0; //@line 6221
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf); //@line 6222
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping); //@line 6223
 STACKTOP = sp; //@line 6224
 return $129 | 0; //@line 6224
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i = 0, $$pre18 = 0, $0 = 0, $100 = 0, $102 = 0, $104 = 0, $108 = 0, $12 = 0, $120 = 0, $121 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $29 = 0, $30 = 0, $43 = 0, $49 = 0, $58 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $79 = 0, $8 = 0, $86 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9170
 STACKTOP = STACKTOP + 240 | 0; //@line 9171
 $__atoms = sp + 202 | 0; //@line 9172
 $__thousands_sep = sp + 200 | 0; //@line 9173
 $__grouping = sp + 24 | 0; //@line 9174
 $__buf = sp + 12 | 0; //@line 9175
 $__a_end = sp + 8 | 0; //@line 9176
 $__g = sp + 40 | 0; //@line 9177
 $__g_end = sp + 4 | 0; //@line 9178
 $__dc = sp; //@line 9179
 $0 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0; //@line 9180
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $__atoms, $__thousands_sep); //@line 9181
 HEAP32[$__buf >> 2] = 0; //@line 9182
 HEAP32[$__buf + 4 >> 2] = 0; //@line 9184
 HEAP32[$__buf + 8 >> 2] = 0; //@line 9186
 if (!(HEAP8[$__buf >> 0] & 1)) {
  $8 = 10; //@line 9191
 } else {
  $8 = (HEAP32[$__buf >> 2] & -2) + -1 | 0; //@line 9196
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $8, 0); //@line 9198
 $12 = $__buf + 8 | 0; //@line 9202
 $14 = $__buf + 1 | 0; //@line 9204
 $15 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0; //@line 9205
 HEAP32[$__a_end >> 2] = $15; //@line 9206
 HEAP32[$__g_end >> 2] = $__g; //@line 9207
 HEAP32[$__dc >> 2] = 0; //@line 9208
 $16 = $__buf + 4 | 0; //@line 9209
 $17 = HEAP8[$__thousands_sep >> 0] | 0; //@line 9210
 $$pre$i$i$i2 = HEAP32[$__b >> 2] | 0; //@line 9212
 $__a$0 = $15; //@line 9212
 L4 : while (1) {
  if (!$$pre$i$i$i2) {
   $$pre$i$i$i = 0; //@line 9216
  } else {
   if ((HEAP32[$$pre$i$i$i2 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i2 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i2 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i2) | 0) == -1) {
     HEAP32[$__b >> 2] = 0; //@line 9230
     $$pre$i$i$i = 0; //@line 9231
    } else {
     $$pre$i$i$i = $$pre$i$i$i2; //@line 9233
    }
   } else {
    $$pre$i$i$i = $$pre$i$i$i2; //@line 9236
   }
  }
  $29 = ($$pre$i$i$i | 0) == 0; //@line 9239
  $30 = HEAP32[$__e >> 2] | 0; //@line 9240
  do {
   if (!$30) {
    label = 13; //@line 9244
   } else {
    if ((HEAP32[$30 + 12 >> 2] | 0) != (HEAP32[$30 + 16 >> 2] | 0)) {
     if ($29) {
      $136 = $30; //@line 9253
      break;
     } else {
      $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 9256
      $$pre$i2$i$i = $30; //@line 9256
      $__a$2 = $__a$0; //@line 9256
      break L4;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 63]($30) | 0) == -1) {
     HEAP32[$__e >> 2] = 0; //@line 9266
     label = 13; //@line 9267
     break;
    } else {
     if ($29) {
      $136 = $30; //@line 9271
      break;
     } else {
      $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 9274
      $$pre$i2$i$i = $30; //@line 9274
      $__a$2 = $__a$0; //@line 9274
      break L4;
     }
    }
   }
  } while (0);
  if ((label | 0) == 13) {
   label = 0; //@line 9281
   if ($29) {
    $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 9283
    $$pre$i2$i$i = 0; //@line 9283
    $__a$2 = $__a$0; //@line 9283
    break;
   } else {
    $136 = 0; //@line 9286
   }
  }
  $43 = HEAP8[$__buf >> 0] | 0; //@line 9290
  $49 = ($43 & 1) == 0 ? ($43 & 255) >>> 1 : HEAP32[$16 >> 2] | 0; //@line 9296
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $49 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $49 << 1, 0); //@line 9301
   if (!(HEAP8[$__buf >> 0] & 1)) {
    $58 = 10; //@line 9306
   } else {
    $58 = (HEAP32[$__buf >> 2] & -2) + -1 | 0; //@line 9311
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $58, 0); //@line 9313
   $63 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0; //@line 9318
   HEAP32[$__a_end >> 2] = $63 + $49; //@line 9320
   $__a$1 = $63; //@line 9321
  } else {
   $__a$1 = $__a$0; //@line 9323
  }
  $65 = $$pre$i$i$i + 12 | 0; //@line 9325
  $66 = HEAP32[$65 >> 2] | 0; //@line 9326
  $67 = $$pre$i$i$i + 16 | 0; //@line 9327
  if (($66 | 0) == (HEAP32[$67 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i) | 0; //@line 9335
  } else {
   $$0$i$i = HEAPU8[$66 >> 0] | 0; //@line 9339
  }
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i & 255, $0, $__a$1, $__a_end, $__dc, $17, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 9345
   $$pre$i2$i$i = $136; //@line 9345
   $__a$2 = $__a$1; //@line 9345
   break;
  }
  $79 = HEAP32[$65 >> 2] | 0; //@line 9348
  if (($79 | 0) == (HEAP32[$67 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 63]($$pre$i$i$i) | 0; //@line 9355
   $$pre$i$i$i2 = $$pre$i$i$i; //@line 9356
   $__a$0 = $__a$1; //@line 9356
   continue;
  } else {
   HEAP32[$65 >> 2] = $79 + 1; //@line 9360
   $$pre$i$i$i2 = $$pre$i$i$i; //@line 9361
   $__a$0 = $__a$1; //@line 9361
   continue;
  }
 }
 $86 = HEAP8[$__grouping >> 0] | 0; //@line 9365
 $$pre18 = HEAP32[$__g_end >> 2] | 0; //@line 9374
 if (!((($86 & 1) == 0 ? ($86 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0)) {
  $108 = $$pre18; //@line 9376
 } else {
  if (($$pre18 - $__g | 0) < 160) {
   $99 = HEAP32[$__dc >> 2] | 0; //@line 9383
   $100 = $$pre18 + 4 | 0; //@line 9384
   HEAP32[$__g_end >> 2] = $100; //@line 9385
   HEAP32[$$pre18 >> 2] = $99; //@line 9386
   $108 = $100; //@line 9387
  } else {
   $108 = $$pre18; //@line 9389
  }
 }
 $102 = __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $0) | 0; //@line 9393
 $104 = $__v; //@line 9395
 HEAP32[$104 >> 2] = $102; //@line 9397
 HEAP32[$104 + 4 >> 2] = tempRet0; //@line 9400
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $108, $__err); //@line 9401
 if (!$$pre$i$i$i$lcssa) {
  $121 = 0; //@line 9404
 } else {
  if ((HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) {
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i$lcssa) | 0) == -1) {
    HEAP32[$__b >> 2] = 0; //@line 9418
    $121 = 0; //@line 9419
   } else {
    $121 = $$pre$i$i$i$lcssa; //@line 9421
   }
  } else {
   $121 = $$pre$i$i$i$lcssa; //@line 9424
  }
 }
 $120 = ($121 | 0) == 0; //@line 9427
 do {
  if (!$$pre$i2$i$i) {
   label = 38; //@line 9431
  } else {
   if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) == (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i) | 0) == -1) {
     HEAP32[$__e >> 2] = 0; //@line 9445
     label = 38; //@line 9446
     break;
    }
   }
   if (!$120) {
    label = 39; //@line 9451
   }
  }
 } while (0);
 if ((label | 0) == 38) {
  if ($120) {
   label = 39; //@line 9457
  }
 }
 if ((label | 0) == 39) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 9463
 }
 $135 = HEAP32[$__b >> 2] | 0; //@line 9465
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf); //@line 9466
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping); //@line 9467
 STACKTOP = sp; //@line 9468
 return $135 | 0; //@line 9468
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i = 0, $$pre18 = 0, $0 = 0, $100 = 0, $102 = 0, $104 = 0, $108 = 0, $12 = 0, $120 = 0, $121 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $29 = 0, $30 = 0, $43 = 0, $49 = 0, $58 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $79 = 0, $8 = 0, $86 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7928
 STACKTOP = STACKTOP + 240 | 0; //@line 7929
 $__atoms = sp + 202 | 0; //@line 7930
 $__thousands_sep = sp + 200 | 0; //@line 7931
 $__grouping = sp + 24 | 0; //@line 7932
 $__buf = sp + 12 | 0; //@line 7933
 $__a_end = sp + 8 | 0; //@line 7934
 $__g = sp + 40 | 0; //@line 7935
 $__g_end = sp + 4 | 0; //@line 7936
 $__dc = sp; //@line 7937
 $0 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0; //@line 7938
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $__atoms, $__thousands_sep); //@line 7939
 HEAP32[$__buf >> 2] = 0; //@line 7940
 HEAP32[$__buf + 4 >> 2] = 0; //@line 7942
 HEAP32[$__buf + 8 >> 2] = 0; //@line 7944
 if (!(HEAP8[$__buf >> 0] & 1)) {
  $8 = 10; //@line 7949
 } else {
  $8 = (HEAP32[$__buf >> 2] & -2) + -1 | 0; //@line 7954
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $8, 0); //@line 7956
 $12 = $__buf + 8 | 0; //@line 7960
 $14 = $__buf + 1 | 0; //@line 7962
 $15 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0; //@line 7963
 HEAP32[$__a_end >> 2] = $15; //@line 7964
 HEAP32[$__g_end >> 2] = $__g; //@line 7965
 HEAP32[$__dc >> 2] = 0; //@line 7966
 $16 = $__buf + 4 | 0; //@line 7967
 $17 = HEAP8[$__thousands_sep >> 0] | 0; //@line 7968
 $$pre$i$i$i2 = HEAP32[$__b >> 2] | 0; //@line 7970
 $__a$0 = $15; //@line 7970
 L4 : while (1) {
  if (!$$pre$i$i$i2) {
   $$pre$i$i$i = 0; //@line 7974
  } else {
   if ((HEAP32[$$pre$i$i$i2 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i2 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i2 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i2) | 0) == -1) {
     HEAP32[$__b >> 2] = 0; //@line 7988
     $$pre$i$i$i = 0; //@line 7989
    } else {
     $$pre$i$i$i = $$pre$i$i$i2; //@line 7991
    }
   } else {
    $$pre$i$i$i = $$pre$i$i$i2; //@line 7994
   }
  }
  $29 = ($$pre$i$i$i | 0) == 0; //@line 7997
  $30 = HEAP32[$__e >> 2] | 0; //@line 7998
  do {
   if (!$30) {
    label = 13; //@line 8002
   } else {
    if ((HEAP32[$30 + 12 >> 2] | 0) != (HEAP32[$30 + 16 >> 2] | 0)) {
     if ($29) {
      $136 = $30; //@line 8011
      break;
     } else {
      $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 8014
      $$pre$i2$i$i = $30; //@line 8014
      $__a$2 = $__a$0; //@line 8014
      break L4;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 63]($30) | 0) == -1) {
     HEAP32[$__e >> 2] = 0; //@line 8024
     label = 13; //@line 8025
     break;
    } else {
     if ($29) {
      $136 = $30; //@line 8029
      break;
     } else {
      $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 8032
      $$pre$i2$i$i = $30; //@line 8032
      $__a$2 = $__a$0; //@line 8032
      break L4;
     }
    }
   }
  } while (0);
  if ((label | 0) == 13) {
   label = 0; //@line 8039
   if ($29) {
    $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 8041
    $$pre$i2$i$i = 0; //@line 8041
    $__a$2 = $__a$0; //@line 8041
    break;
   } else {
    $136 = 0; //@line 8044
   }
  }
  $43 = HEAP8[$__buf >> 0] | 0; //@line 8048
  $49 = ($43 & 1) == 0 ? ($43 & 255) >>> 1 : HEAP32[$16 >> 2] | 0; //@line 8054
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $49 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $49 << 1, 0); //@line 8059
   if (!(HEAP8[$__buf >> 0] & 1)) {
    $58 = 10; //@line 8064
   } else {
    $58 = (HEAP32[$__buf >> 2] & -2) + -1 | 0; //@line 8069
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $58, 0); //@line 8071
   $63 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0; //@line 8076
   HEAP32[$__a_end >> 2] = $63 + $49; //@line 8078
   $__a$1 = $63; //@line 8079
  } else {
   $__a$1 = $__a$0; //@line 8081
  }
  $65 = $$pre$i$i$i + 12 | 0; //@line 8083
  $66 = HEAP32[$65 >> 2] | 0; //@line 8084
  $67 = $$pre$i$i$i + 16 | 0; //@line 8085
  if (($66 | 0) == (HEAP32[$67 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i) | 0; //@line 8093
  } else {
   $$0$i$i = HEAPU8[$66 >> 0] | 0; //@line 8097
  }
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i & 255, $0, $__a$1, $__a_end, $__dc, $17, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 8103
   $$pre$i2$i$i = $136; //@line 8103
   $__a$2 = $__a$1; //@line 8103
   break;
  }
  $79 = HEAP32[$65 >> 2] | 0; //@line 8106
  if (($79 | 0) == (HEAP32[$67 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 63]($$pre$i$i$i) | 0; //@line 8113
   $$pre$i$i$i2 = $$pre$i$i$i; //@line 8114
   $__a$0 = $__a$1; //@line 8114
   continue;
  } else {
   HEAP32[$65 >> 2] = $79 + 1; //@line 8118
   $$pre$i$i$i2 = $$pre$i$i$i; //@line 8119
   $__a$0 = $__a$1; //@line 8119
   continue;
  }
 }
 $86 = HEAP8[$__grouping >> 0] | 0; //@line 8123
 $$pre18 = HEAP32[$__g_end >> 2] | 0; //@line 8132
 if (!((($86 & 1) == 0 ? ($86 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0)) {
  $108 = $$pre18; //@line 8134
 } else {
  if (($$pre18 - $__g | 0) < 160) {
   $99 = HEAP32[$__dc >> 2] | 0; //@line 8141
   $100 = $$pre18 + 4 | 0; //@line 8142
   HEAP32[$__g_end >> 2] = $100; //@line 8143
   HEAP32[$$pre18 >> 2] = $99; //@line 8144
   $108 = $100; //@line 8145
  } else {
   $108 = $$pre18; //@line 8147
  }
 }
 $102 = __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $0) | 0; //@line 8151
 $104 = $__v; //@line 8153
 HEAP32[$104 >> 2] = $102; //@line 8155
 HEAP32[$104 + 4 >> 2] = tempRet0; //@line 8158
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $108, $__err); //@line 8159
 if (!$$pre$i$i$i$lcssa) {
  $121 = 0; //@line 8162
 } else {
  if ((HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) {
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i$lcssa) | 0) == -1) {
    HEAP32[$__b >> 2] = 0; //@line 8176
    $121 = 0; //@line 8177
   } else {
    $121 = $$pre$i$i$i$lcssa; //@line 8179
   }
  } else {
   $121 = $$pre$i$i$i$lcssa; //@line 8182
  }
 }
 $120 = ($121 | 0) == 0; //@line 8185
 do {
  if (!$$pre$i2$i$i) {
   label = 38; //@line 8189
  } else {
   if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) == (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i) | 0) == -1) {
     HEAP32[$__e >> 2] = 0; //@line 8203
     label = 38; //@line 8204
     break;
    }
   }
   if (!$120) {
    label = 39; //@line 8209
   }
  }
 } while (0);
 if ((label | 0) == 38) {
  if ($120) {
   label = 39; //@line 8215
  }
 }
 if ((label | 0) == 39) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 8221
 }
 $135 = HEAP32[$__b >> 2] | 0; //@line 8223
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf); //@line 8224
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping); //@line 8225
 STACKTOP = sp; //@line 8226
 return $135 | 0; //@line 8226
}
function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e, $__err, $__ct, $__n) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 $__n = $__n | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i10 = 0, $$0$in = 0, $$01 = 0, $$lcssa = 0, $$pre$i2$i$i20 = 0, $$pre$i2$i$i20$lcssa = 0, $$pre$i2$i$i7 = 0, $0 = 0, $107 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $142 = 0, $143 = 0, $157 = 0, $28 = 0, $30 = 0, $40 = 0, $42 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $65 = 0, $77 = 0, $78 = 0, $80 = 0, $92 = 0, $95 = 0, $97 = 0, $__r$0 = 0, $__r$0$in = 0, $__r$0$lcssa = 0, label = 0;
 $0 = HEAP32[$__b >> 2] | 0; //@line 13880
 do {
  if (!$0) {
   $13 = 0; //@line 13884
  } else {
   if ((HEAP32[$0 + 12 >> 2] | 0) == (HEAP32[$0 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 63]($0) | 0) == -1) {
     HEAP32[$__b >> 2] = 0; //@line 13898
     $13 = 0; //@line 13899
     break;
    } else {
     $13 = HEAP32[$__b >> 2] | 0; //@line 13903
     break;
    }
   } else {
    $13 = $0; //@line 13907
   }
  }
 } while (0);
 $12 = ($13 | 0) == 0; //@line 13911
 $14 = HEAP32[$__e >> 2] | 0; //@line 13912
 do {
  if (!$14) {
   label = 11; //@line 13916
  } else {
   if ((HEAP32[$14 + 12 >> 2] | 0) == (HEAP32[$14 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$14 >> 2] | 0) + 36 >> 2] & 63]($14) | 0) == -1) {
     HEAP32[$__e >> 2] = 0; //@line 13930
     label = 11; //@line 13931
     break;
    }
   }
   if ($12) {
    $157 = $14; //@line 13936
    label = 13; //@line 13937
   } else {
    label = 12; //@line 13939
   }
  }
 } while (0);
 if ((label | 0) == 11) {
  if ($12) {
   label = 12; //@line 13945
  } else {
   $157 = 0; //@line 13947
   label = 13; //@line 13948
  }
 }
 L16 : do {
  if ((label | 0) == 12) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6; //@line 13955
   $$01 = 0; //@line 13956
  } else if ((label | 0) == 13) {
   $28 = HEAP32[$__b >> 2] | 0; //@line 13959
   $30 = HEAP32[$28 + 12 >> 2] | 0; //@line 13961
   if (($30 | 0) == (HEAP32[$28 + 16 >> 2] | 0)) {
    $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$28 >> 2] | 0) + 36 >> 2] & 63]($28) | 0; //@line 13970
   } else {
    $$0$i$i = HEAPU8[$30 >> 0] | 0; //@line 13974
   }
   $40 = $$0$i$i & 255; //@line 13976
   if ($40 << 24 >> 24 > -1) {
    $42 = $__ct + 8 | 0; //@line 13981
    if (HEAP16[(HEAP32[$42 >> 2] | 0) + ($$0$i$i << 24 >> 24 << 1) >> 1] & 2048) {
     $54 = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 36 >> 2] & 31]($__ct, $40, 0) | 0) << 24 >> 24; //@line 13992
     $55 = HEAP32[$__b >> 2] | 0; //@line 13993
     $56 = $55 + 12 | 0; //@line 13994
     $57 = HEAP32[$56 >> 2] | 0; //@line 13995
     if (($57 | 0) == (HEAP32[$55 + 16 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[$55 >> 2] | 0) + 40 >> 2] & 63]($55) | 0; //@line 14003
      $$0$in = $__n; //@line 14004
      $$pre$i2$i$i7 = $157; //@line 14004
      $80 = $157; //@line 14004
      $__r$0$in = $54; //@line 14004
     } else {
      HEAP32[$56 >> 2] = $57 + 1; //@line 14007
      $$0$in = $__n; //@line 14008
      $$pre$i2$i$i7 = $157; //@line 14008
      $80 = $157; //@line 14008
      $__r$0$in = $54; //@line 14008
     }
     while (1) {
      $__r$0 = $__r$0$in + -48 | 0; //@line 14011
      $$0 = $$0$in + -1 | 0; //@line 14012
      $65 = HEAP32[$__b >> 2] | 0; //@line 14013
      do {
       if (!$65) {
        $78 = 0; //@line 14017
       } else {
        if ((HEAP32[$65 + 12 >> 2] | 0) == (HEAP32[$65 + 16 >> 2] | 0)) {
         if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$65 >> 2] | 0) + 36 >> 2] & 63]($65) | 0) == -1) {
          HEAP32[$__b >> 2] = 0; //@line 14031
          $78 = 0; //@line 14032
          break;
         } else {
          $78 = HEAP32[$__b >> 2] | 0; //@line 14036
          break;
         }
        } else {
         $78 = $65; //@line 14040
        }
       }
      } while (0);
      $77 = ($78 | 0) == 0; //@line 14044
      if (!$80) {
       $$pre$i2$i$i20 = $$pre$i2$i$i7; //@line 14047
       $92 = 0; //@line 14047
      } else {
       if ((HEAP32[$80 + 12 >> 2] | 0) == (HEAP32[$80 + 16 >> 2] | 0)) {
        if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$80 >> 2] | 0) + 36 >> 2] & 63]($80) | 0) == -1) {
         HEAP32[$__e >> 2] = 0; //@line 14061
         $$pre$i2$i$i20 = 0; //@line 14062
         $92 = 0; //@line 14062
        } else {
         $$pre$i2$i$i20 = $$pre$i2$i$i7; //@line 14064
         $92 = $$pre$i2$i$i7; //@line 14064
        }
       } else {
        $$pre$i2$i$i20 = $$pre$i2$i$i7; //@line 14067
        $92 = $80; //@line 14067
       }
      }
      $95 = HEAP32[$__b >> 2] | 0; //@line 14074
      if (!(($$0$in | 0) > 1 & ($77 ^ ($92 | 0) == 0))) {
       $$lcssa = $95; //@line 14076
       $$pre$i2$i$i20$lcssa = $$pre$i2$i$i20; //@line 14076
       $__r$0$lcssa = $__r$0; //@line 14076
       break;
      }
      $97 = HEAP32[$95 + 12 >> 2] | 0; //@line 14080
      if (($97 | 0) == (HEAP32[$95 + 16 >> 2] | 0)) {
       $$0$i$i10 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$95 >> 2] | 0) + 36 >> 2] & 63]($95) | 0; //@line 14089
      } else {
       $$0$i$i10 = HEAPU8[$97 >> 0] | 0; //@line 14093
      }
      $107 = $$0$i$i10 & 255; //@line 14095
      if ($107 << 24 >> 24 <= -1) {
       $$01 = $__r$0; //@line 14098
       break L16;
      }
      if (!(HEAP16[(HEAP32[$42 >> 2] | 0) + ($$0$i$i10 << 24 >> 24 << 1) >> 1] & 2048)) {
       $$01 = $__r$0; //@line 14109
       break L16;
      }
      $120 = ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 36 >> 2] & 31]($__ct, $107, 0) | 0) << 24 >> 24) + ($__r$0 * 10 | 0) | 0; //@line 14118
      $121 = HEAP32[$__b >> 2] | 0; //@line 14119
      $122 = $121 + 12 | 0; //@line 14120
      $123 = HEAP32[$122 >> 2] | 0; //@line 14121
      if (($123 | 0) == (HEAP32[$121 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$121 >> 2] | 0) + 40 >> 2] & 63]($121) | 0; //@line 14129
       $$0$in = $$0; //@line 14130
       $$pre$i2$i$i7 = $$pre$i2$i$i20; //@line 14130
       $80 = $92; //@line 14130
       $__r$0$in = $120; //@line 14130
       continue;
      } else {
       HEAP32[$122 >> 2] = $123 + 1; //@line 14134
       $$0$in = $$0; //@line 14135
       $$pre$i2$i$i7 = $$pre$i2$i$i20; //@line 14135
       $80 = $92; //@line 14135
       $__r$0$in = $120; //@line 14135
       continue;
      }
     }
     do {
      if (!$$lcssa) {
       $143 = 0; //@line 14142
      } else {
       if ((HEAP32[$$lcssa + 12 >> 2] | 0) == (HEAP32[$$lcssa + 16 >> 2] | 0)) {
        if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 36 >> 2] & 63]($$lcssa) | 0) == -1) {
         HEAP32[$__b >> 2] = 0; //@line 14156
         $143 = 0; //@line 14157
         break;
        } else {
         $143 = HEAP32[$__b >> 2] | 0; //@line 14161
         break;
        }
       } else {
        $143 = $$lcssa; //@line 14165
       }
      }
     } while (0);
     $142 = ($143 | 0) == 0; //@line 14169
     do {
      if (!$$pre$i2$i$i20$lcssa) {
       label = 50; //@line 14173
      } else {
       if ((HEAP32[$$pre$i2$i$i20$lcssa + 12 >> 2] | 0) == (HEAP32[$$pre$i2$i$i20$lcssa + 16 >> 2] | 0)) {
        if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i20$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i20$lcssa) | 0) == -1) {
         HEAP32[$__e >> 2] = 0; //@line 14187
         label = 50; //@line 14188
         break;
        }
       }
       if ($142) {
        $$01 = $__r$0$lcssa; //@line 14193
        break L16;
       }
      }
     } while (0);
     if ((label | 0) == 50) {
      if (!$142) {
       $$01 = $__r$0$lcssa; //@line 14200
       break;
      }
     }
     HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 14206
     $$01 = $__r$0$lcssa; //@line 14207
     break;
    }
   }
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 14213
   $$01 = 0; //@line 14214
  }
 } while (0);
 return $$01 | 0; //@line 14217
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $14 = 0, $20 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $49 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $64 = 0, $67 = 0, $70 = 0, $77 = 0, $78 = 0, $79 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$0$off023 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off025 = 0, $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0, $p$024 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0;
 L1 : do {
  if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) {
   if ((HEAP32[$info + 4 >> 2] | 0) == ($current_ptr | 0)) {
    $6 = $info + 28 | 0; //@line 1228
    if ((HEAP32[$6 >> 2] | 0) != 1) {
     HEAP32[$6 >> 2] = $path_below; //@line 1232
    }
   }
  } else {
   if (($this | 0) != (HEAP32[$info >> 2] | 0)) {
    $59 = HEAP32[$this + 12 >> 2] | 0; //@line 1241
    $60 = $this + 16 + ($59 << 3) | 0; //@line 1242
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this + 16 | 0, $info, $current_ptr, $path_below, $use_strcmp); //@line 1243
    $61 = $this + 24 | 0; //@line 1244
    if (($59 | 0) <= 1) {
     break;
    }
    $64 = HEAP32[$this + 8 >> 2] | 0; //@line 1250
    if (!($64 & 2)) {
     $67 = $info + 36 | 0; //@line 1254
     if ((HEAP32[$67 >> 2] | 0) != 1) {
      if (!($64 & 1)) {
       $79 = $info + 54 | 0; //@line 1261
       $p2$2 = $61; //@line 1262
       while (1) {
        if (HEAP8[$79 >> 0] | 0) {
         break L1;
        }
        if ((HEAP32[$67 >> 2] | 0) == 1) {
         break L1;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$2, $info, $current_ptr, $path_below, $use_strcmp); //@line 1274
        $p2$2 = $p2$2 + 8 | 0; //@line 1275
        if ($p2$2 >>> 0 >= $60 >>> 0) {
         break L1;
        }
       }
      }
      $77 = $info + 24 | 0; //@line 1284
      $78 = $info + 54 | 0; //@line 1285
      $p2$1 = $61; //@line 1286
      while (1) {
       if (HEAP8[$78 >> 0] | 0) {
        break L1;
       }
       if ((HEAP32[$67 >> 2] | 0) == 1) {
        if ((HEAP32[$77 >> 2] | 0) == 1) {
         break L1;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$1, $info, $current_ptr, $path_below, $use_strcmp); //@line 1302
       $p2$1 = $p2$1 + 8 | 0; //@line 1303
       if ($p2$1 >>> 0 >= $60 >>> 0) {
        break L1;
       }
      }
     }
    }
    $70 = $info + 54 | 0; //@line 1313
    $p2$0 = $61; //@line 1314
    while (1) {
     if (HEAP8[$70 >> 0] | 0) {
      break L1;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$0, $info, $current_ptr, $path_below, $use_strcmp); //@line 1321
     $p2$0 = $p2$0 + 8 | 0; //@line 1322
     if ($p2$0 >>> 0 >= $60 >>> 0) {
      break L1;
     }
    }
   }
   if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
    $14 = $info + 20 | 0; //@line 1335
    if ((HEAP32[$14 >> 2] | 0) != ($current_ptr | 0)) {
     HEAP32[$info + 32 >> 2] = $path_below; //@line 1340
     $20 = $info + 44 | 0; //@line 1341
     if ((HEAP32[$20 >> 2] | 0) == 4) {
      break;
     }
     $24 = HEAP32[$this + 12 >> 2] | 0; //@line 1348
     $25 = $this + 16 + ($24 << 3) | 0; //@line 1349
     $26 = $info + 52 | 0; //@line 1350
     $27 = $info + 53 | 0; //@line 1351
     $28 = $info + 54 | 0; //@line 1352
     $29 = $this + 8 | 0; //@line 1353
     $30 = $info + 24 | 0; //@line 1354
     L34 : do {
      if (($24 | 0) > 0) {
       $does_dst_type_point_to_our_static_type$0$off023 = 0; //@line 1359
       $is_dst_type_derived_from_static_type$0$off025 = 0; //@line 1359
       $p$024 = $this + 16 | 0; //@line 1359
       while (1) {
        HEAP8[$26 >> 0] = 0; //@line 1361
        HEAP8[$27 >> 0] = 0; //@line 1362
        __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$024, $info, $current_ptr, $current_ptr, 1, $use_strcmp); //@line 1363
        if (HEAP8[$28 >> 0] | 0) {
         $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off023; //@line 1367
         $is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off025; //@line 1367
         label = 20; //@line 1368
         break L34;
        }
        do {
         if (!(HEAP8[$27 >> 0] | 0)) {
          $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off023; //@line 1375
          $is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off025; //@line 1375
         } else {
          if (!(HEAP8[$26 >> 0] | 0)) {
           if (!(HEAP32[$29 >> 2] & 1)) {
            $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off023; //@line 1384
            $is_dst_type_derived_from_static_type$2$off0 = 1; //@line 1384
            label = 20; //@line 1385
            break L34;
           } else {
            $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off023; //@line 1388
            $is_dst_type_derived_from_static_type$1$off0 = 1; //@line 1388
            break;
           }
          }
          if ((HEAP32[$30 >> 2] | 0) == 1) {
           break L34;
          }
          if (!(HEAP32[$29 >> 2] & 2)) {
           break L34;
          } else {
           $does_dst_type_point_to_our_static_type$1$off0 = 1; //@line 1403
           $is_dst_type_derived_from_static_type$1$off0 = 1; //@line 1403
          }
         }
        } while (0);
        $p$024 = $p$024 + 8 | 0; //@line 1407
        if ($p$024 >>> 0 >= $25 >>> 0) {
         $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$1$off0; //@line 1412
         $is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$1$off0; //@line 1412
         label = 20; //@line 1413
         break;
        } else {
         $does_dst_type_point_to_our_static_type$0$off023 = $does_dst_type_point_to_our_static_type$1$off0; //@line 1410
         $is_dst_type_derived_from_static_type$0$off025 = $is_dst_type_derived_from_static_type$1$off0; //@line 1410
        }
       }
      } else {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0; //@line 1418
       $is_dst_type_derived_from_static_type$2$off0 = 0; //@line 1418
       label = 20; //@line 1419
      }
     } while (0);
     do {
      if ((label | 0) == 20) {
       if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) {
        label = 24; //@line 1425
       } else {
        HEAP32[$14 >> 2] = $current_ptr; //@line 1427
        $49 = $info + 40 | 0; //@line 1428
        HEAP32[$49 >> 2] = (HEAP32[$49 >> 2] | 0) + 1; //@line 1431
        if ((HEAP32[$info + 36 >> 2] | 0) == 1) {
         if ((HEAP32[$30 >> 2] | 0) == 2) {
          HEAP8[$28 >> 0] = 1; //@line 1439
          if ($is_dst_type_derived_from_static_type$2$off0) {
           break;
          }
         } else {
          label = 24; //@line 1444
         }
        } else {
         label = 24; //@line 1447
        }
       }
       if ((label | 0) == 24) {
        if ($is_dst_type_derived_from_static_type$2$off0) {
         break;
        }
       }
       HEAP32[$20 >> 2] = 4; //@line 1455
       break L1;
      }
     } while (0);
     HEAP32[$20 >> 2] = 3; //@line 1459
     break;
    }
   }
   if (($path_below | 0) == 1) {
    HEAP32[$info + 32 >> 2] = 1; //@line 1466
   }
  }
 } while (0);
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i = 0, $$pre18 = 0, $0 = 0, $100 = 0, $103 = 0, $115 = 0, $116 = 0, $12 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $29 = 0, $30 = 0, $43 = 0, $49 = 0, $58 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $79 = 0, $8 = 0, $86 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8243
 STACKTOP = STACKTOP + 240 | 0; //@line 8244
 $__atoms = sp + 202 | 0; //@line 8245
 $__thousands_sep = sp + 200 | 0; //@line 8246
 $__grouping = sp + 24 | 0; //@line 8247
 $__buf = sp + 12 | 0; //@line 8248
 $__a_end = sp + 8 | 0; //@line 8249
 $__g = sp + 40 | 0; //@line 8250
 $__g_end = sp + 4 | 0; //@line 8251
 $__dc = sp; //@line 8252
 $0 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0; //@line 8253
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $__atoms, $__thousands_sep); //@line 8254
 HEAP32[$__buf >> 2] = 0; //@line 8255
 HEAP32[$__buf + 4 >> 2] = 0; //@line 8257
 HEAP32[$__buf + 8 >> 2] = 0; //@line 8259
 if (!(HEAP8[$__buf >> 0] & 1)) {
  $8 = 10; //@line 8264
 } else {
  $8 = (HEAP32[$__buf >> 2] & -2) + -1 | 0; //@line 8269
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $8, 0); //@line 8271
 $12 = $__buf + 8 | 0; //@line 8275
 $14 = $__buf + 1 | 0; //@line 8277
 $15 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0; //@line 8278
 HEAP32[$__a_end >> 2] = $15; //@line 8279
 HEAP32[$__g_end >> 2] = $__g; //@line 8280
 HEAP32[$__dc >> 2] = 0; //@line 8281
 $16 = $__buf + 4 | 0; //@line 8282
 $17 = HEAP8[$__thousands_sep >> 0] | 0; //@line 8283
 $$pre$i$i$i2 = HEAP32[$__b >> 2] | 0; //@line 8285
 $__a$0 = $15; //@line 8285
 L4 : while (1) {
  if (!$$pre$i$i$i2) {
   $$pre$i$i$i = 0; //@line 8289
  } else {
   if ((HEAP32[$$pre$i$i$i2 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i2 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i2 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i2) | 0) == -1) {
     HEAP32[$__b >> 2] = 0; //@line 8303
     $$pre$i$i$i = 0; //@line 8304
    } else {
     $$pre$i$i$i = $$pre$i$i$i2; //@line 8306
    }
   } else {
    $$pre$i$i$i = $$pre$i$i$i2; //@line 8309
   }
  }
  $29 = ($$pre$i$i$i | 0) == 0; //@line 8312
  $30 = HEAP32[$__e >> 2] | 0; //@line 8313
  do {
   if (!$30) {
    label = 13; //@line 8317
   } else {
    if ((HEAP32[$30 + 12 >> 2] | 0) != (HEAP32[$30 + 16 >> 2] | 0)) {
     if ($29) {
      $131 = $30; //@line 8326
      break;
     } else {
      $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 8329
      $$pre$i2$i$i = $30; //@line 8329
      $__a$2 = $__a$0; //@line 8329
      break L4;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 63]($30) | 0) == -1) {
     HEAP32[$__e >> 2] = 0; //@line 8339
     label = 13; //@line 8340
     break;
    } else {
     if ($29) {
      $131 = $30; //@line 8344
      break;
     } else {
      $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 8347
      $$pre$i2$i$i = $30; //@line 8347
      $__a$2 = $__a$0; //@line 8347
      break L4;
     }
    }
   }
  } while (0);
  if ((label | 0) == 13) {
   label = 0; //@line 8354
   if ($29) {
    $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 8356
    $$pre$i2$i$i = 0; //@line 8356
    $__a$2 = $__a$0; //@line 8356
    break;
   } else {
    $131 = 0; //@line 8359
   }
  }
  $43 = HEAP8[$__buf >> 0] | 0; //@line 8363
  $49 = ($43 & 1) == 0 ? ($43 & 255) >>> 1 : HEAP32[$16 >> 2] | 0; //@line 8369
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $49 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $49 << 1, 0); //@line 8374
   if (!(HEAP8[$__buf >> 0] & 1)) {
    $58 = 10; //@line 8379
   } else {
    $58 = (HEAP32[$__buf >> 2] & -2) + -1 | 0; //@line 8384
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $58, 0); //@line 8386
   $63 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0; //@line 8391
   HEAP32[$__a_end >> 2] = $63 + $49; //@line 8393
   $__a$1 = $63; //@line 8394
  } else {
   $__a$1 = $__a$0; //@line 8396
  }
  $65 = $$pre$i$i$i + 12 | 0; //@line 8398
  $66 = HEAP32[$65 >> 2] | 0; //@line 8399
  $67 = $$pre$i$i$i + 16 | 0; //@line 8400
  if (($66 | 0) == (HEAP32[$67 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i) | 0; //@line 8408
  } else {
   $$0$i$i = HEAPU8[$66 >> 0] | 0; //@line 8412
  }
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i & 255, $0, $__a$1, $__a_end, $__dc, $17, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 8418
   $$pre$i2$i$i = $131; //@line 8418
   $__a$2 = $__a$1; //@line 8418
   break;
  }
  $79 = HEAP32[$65 >> 2] | 0; //@line 8421
  if (($79 | 0) == (HEAP32[$67 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 63]($$pre$i$i$i) | 0; //@line 8428
   $$pre$i$i$i2 = $$pre$i$i$i; //@line 8429
   $__a$0 = $__a$1; //@line 8429
   continue;
  } else {
   HEAP32[$65 >> 2] = $79 + 1; //@line 8433
   $$pre$i$i$i2 = $$pre$i$i$i; //@line 8434
   $__a$0 = $__a$1; //@line 8434
   continue;
  }
 }
 $86 = HEAP8[$__grouping >> 0] | 0; //@line 8438
 $$pre18 = HEAP32[$__g_end >> 2] | 0; //@line 8447
 if (!((($86 & 1) == 0 ? ($86 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0)) {
  $103 = $$pre18; //@line 8449
 } else {
  if (($$pre18 - $__g | 0) < 160) {
   $99 = HEAP32[$__dc >> 2] | 0; //@line 8456
   $100 = $$pre18 + 4 | 0; //@line 8457
   HEAP32[$__g_end >> 2] = $100; //@line 8458
   HEAP32[$$pre18 >> 2] = $99; //@line 8459
   $103 = $100; //@line 8460
  } else {
   $103 = $$pre18; //@line 8462
  }
 }
 HEAP16[$__v >> 1] = __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $0) | 0; //@line 8467
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $103, $__err); //@line 8468
 if (!$$pre$i$i$i$lcssa) {
  $116 = 0; //@line 8471
 } else {
  if ((HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) {
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i$lcssa) | 0) == -1) {
    HEAP32[$__b >> 2] = 0; //@line 8485
    $116 = 0; //@line 8486
   } else {
    $116 = $$pre$i$i$i$lcssa; //@line 8488
   }
  } else {
   $116 = $$pre$i$i$i$lcssa; //@line 8491
  }
 }
 $115 = ($116 | 0) == 0; //@line 8494
 do {
  if (!$$pre$i2$i$i) {
   label = 38; //@line 8498
  } else {
   if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) == (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i) | 0) == -1) {
     HEAP32[$__e >> 2] = 0; //@line 8512
     label = 38; //@line 8513
     break;
    }
   }
   if (!$115) {
    label = 39; //@line 8518
   }
  }
 } while (0);
 if ((label | 0) == 38) {
  if ($115) {
   label = 39; //@line 8524
  }
 }
 if ((label | 0) == 39) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 8530
 }
 $130 = HEAP32[$__b >> 2] | 0; //@line 8532
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf); //@line 8533
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping); //@line 8534
 STACKTOP = sp; //@line 8535
 return $130 | 0; //@line 8535
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i = 0, $$pre18 = 0, $0 = 0, $100 = 0, $103 = 0, $115 = 0, $116 = 0, $12 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $29 = 0, $30 = 0, $43 = 0, $49 = 0, $58 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $79 = 0, $8 = 0, $86 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8861
 STACKTOP = STACKTOP + 240 | 0; //@line 8862
 $__atoms = sp + 202 | 0; //@line 8863
 $__thousands_sep = sp + 200 | 0; //@line 8864
 $__grouping = sp + 24 | 0; //@line 8865
 $__buf = sp + 12 | 0; //@line 8866
 $__a_end = sp + 8 | 0; //@line 8867
 $__g = sp + 40 | 0; //@line 8868
 $__g_end = sp + 4 | 0; //@line 8869
 $__dc = sp; //@line 8870
 $0 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0; //@line 8871
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $__atoms, $__thousands_sep); //@line 8872
 HEAP32[$__buf >> 2] = 0; //@line 8873
 HEAP32[$__buf + 4 >> 2] = 0; //@line 8875
 HEAP32[$__buf + 8 >> 2] = 0; //@line 8877
 if (!(HEAP8[$__buf >> 0] & 1)) {
  $8 = 10; //@line 8882
 } else {
  $8 = (HEAP32[$__buf >> 2] & -2) + -1 | 0; //@line 8887
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $8, 0); //@line 8889
 $12 = $__buf + 8 | 0; //@line 8893
 $14 = $__buf + 1 | 0; //@line 8895
 $15 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0; //@line 8896
 HEAP32[$__a_end >> 2] = $15; //@line 8897
 HEAP32[$__g_end >> 2] = $__g; //@line 8898
 HEAP32[$__dc >> 2] = 0; //@line 8899
 $16 = $__buf + 4 | 0; //@line 8900
 $17 = HEAP8[$__thousands_sep >> 0] | 0; //@line 8901
 $$pre$i$i$i2 = HEAP32[$__b >> 2] | 0; //@line 8903
 $__a$0 = $15; //@line 8903
 L4 : while (1) {
  if (!$$pre$i$i$i2) {
   $$pre$i$i$i = 0; //@line 8907
  } else {
   if ((HEAP32[$$pre$i$i$i2 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i2 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i2 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i2) | 0) == -1) {
     HEAP32[$__b >> 2] = 0; //@line 8921
     $$pre$i$i$i = 0; //@line 8922
    } else {
     $$pre$i$i$i = $$pre$i$i$i2; //@line 8924
    }
   } else {
    $$pre$i$i$i = $$pre$i$i$i2; //@line 8927
   }
  }
  $29 = ($$pre$i$i$i | 0) == 0; //@line 8930
  $30 = HEAP32[$__e >> 2] | 0; //@line 8931
  do {
   if (!$30) {
    label = 13; //@line 8935
   } else {
    if ((HEAP32[$30 + 12 >> 2] | 0) != (HEAP32[$30 + 16 >> 2] | 0)) {
     if ($29) {
      $131 = $30; //@line 8944
      break;
     } else {
      $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 8947
      $$pre$i2$i$i = $30; //@line 8947
      $__a$2 = $__a$0; //@line 8947
      break L4;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 63]($30) | 0) == -1) {
     HEAP32[$__e >> 2] = 0; //@line 8957
     label = 13; //@line 8958
     break;
    } else {
     if ($29) {
      $131 = $30; //@line 8962
      break;
     } else {
      $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 8965
      $$pre$i2$i$i = $30; //@line 8965
      $__a$2 = $__a$0; //@line 8965
      break L4;
     }
    }
   }
  } while (0);
  if ((label | 0) == 13) {
   label = 0; //@line 8972
   if ($29) {
    $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 8974
    $$pre$i2$i$i = 0; //@line 8974
    $__a$2 = $__a$0; //@line 8974
    break;
   } else {
    $131 = 0; //@line 8977
   }
  }
  $43 = HEAP8[$__buf >> 0] | 0; //@line 8981
  $49 = ($43 & 1) == 0 ? ($43 & 255) >>> 1 : HEAP32[$16 >> 2] | 0; //@line 8987
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $49 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $49 << 1, 0); //@line 8992
   if (!(HEAP8[$__buf >> 0] & 1)) {
    $58 = 10; //@line 8997
   } else {
    $58 = (HEAP32[$__buf >> 2] & -2) + -1 | 0; //@line 9002
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $58, 0); //@line 9004
   $63 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0; //@line 9009
   HEAP32[$__a_end >> 2] = $63 + $49; //@line 9011
   $__a$1 = $63; //@line 9012
  } else {
   $__a$1 = $__a$0; //@line 9014
  }
  $65 = $$pre$i$i$i + 12 | 0; //@line 9016
  $66 = HEAP32[$65 >> 2] | 0; //@line 9017
  $67 = $$pre$i$i$i + 16 | 0; //@line 9018
  if (($66 | 0) == (HEAP32[$67 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i) | 0; //@line 9026
  } else {
   $$0$i$i = HEAPU8[$66 >> 0] | 0; //@line 9030
  }
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i & 255, $0, $__a$1, $__a_end, $__dc, $17, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 9036
   $$pre$i2$i$i = $131; //@line 9036
   $__a$2 = $__a$1; //@line 9036
   break;
  }
  $79 = HEAP32[$65 >> 2] | 0; //@line 9039
  if (($79 | 0) == (HEAP32[$67 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 63]($$pre$i$i$i) | 0; //@line 9046
   $$pre$i$i$i2 = $$pre$i$i$i; //@line 9047
   $__a$0 = $__a$1; //@line 9047
   continue;
  } else {
   HEAP32[$65 >> 2] = $79 + 1; //@line 9051
   $$pre$i$i$i2 = $$pre$i$i$i; //@line 9052
   $__a$0 = $__a$1; //@line 9052
   continue;
  }
 }
 $86 = HEAP8[$__grouping >> 0] | 0; //@line 9056
 $$pre18 = HEAP32[$__g_end >> 2] | 0; //@line 9065
 if (!((($86 & 1) == 0 ? ($86 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0)) {
  $103 = $$pre18; //@line 9067
 } else {
  if (($$pre18 - $__g | 0) < 160) {
   $99 = HEAP32[$__dc >> 2] | 0; //@line 9074
   $100 = $$pre18 + 4 | 0; //@line 9075
   HEAP32[$__g_end >> 2] = $100; //@line 9076
   HEAP32[$$pre18 >> 2] = $99; //@line 9077
   $103 = $100; //@line 9078
  } else {
   $103 = $$pre18; //@line 9080
  }
 }
 HEAP32[$__v >> 2] = __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $0) | 0; //@line 9085
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $103, $__err); //@line 9086
 if (!$$pre$i$i$i$lcssa) {
  $116 = 0; //@line 9089
 } else {
  if ((HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) {
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i$lcssa) | 0) == -1) {
    HEAP32[$__b >> 2] = 0; //@line 9103
    $116 = 0; //@line 9104
   } else {
    $116 = $$pre$i$i$i$lcssa; //@line 9106
   }
  } else {
   $116 = $$pre$i$i$i$lcssa; //@line 9109
  }
 }
 $115 = ($116 | 0) == 0; //@line 9112
 do {
  if (!$$pre$i2$i$i) {
   label = 38; //@line 9116
  } else {
   if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) == (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i) | 0) == -1) {
     HEAP32[$__e >> 2] = 0; //@line 9130
     label = 38; //@line 9131
     break;
    }
   }
   if (!$115) {
    label = 39; //@line 9136
   }
  }
 } while (0);
 if ((label | 0) == 38) {
  if ($115) {
   label = 39; //@line 9142
  }
 }
 if ((label | 0) == 39) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 9148
 }
 $130 = HEAP32[$__b >> 2] | 0; //@line 9150
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf); //@line 9151
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping); //@line 9152
 STACKTOP = sp; //@line 9153
 return $130 | 0; //@line 9153
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i = 0, $$pre18 = 0, $0 = 0, $100 = 0, $103 = 0, $115 = 0, $116 = 0, $12 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $29 = 0, $30 = 0, $43 = 0, $49 = 0, $58 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $79 = 0, $8 = 0, $86 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8552
 STACKTOP = STACKTOP + 240 | 0; //@line 8553
 $__atoms = sp + 202 | 0; //@line 8554
 $__thousands_sep = sp + 200 | 0; //@line 8555
 $__grouping = sp + 24 | 0; //@line 8556
 $__buf = sp + 12 | 0; //@line 8557
 $__a_end = sp + 8 | 0; //@line 8558
 $__g = sp + 40 | 0; //@line 8559
 $__g_end = sp + 4 | 0; //@line 8560
 $__dc = sp; //@line 8561
 $0 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0; //@line 8562
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $__atoms, $__thousands_sep); //@line 8563
 HEAP32[$__buf >> 2] = 0; //@line 8564
 HEAP32[$__buf + 4 >> 2] = 0; //@line 8566
 HEAP32[$__buf + 8 >> 2] = 0; //@line 8568
 if (!(HEAP8[$__buf >> 0] & 1)) {
  $8 = 10; //@line 8573
 } else {
  $8 = (HEAP32[$__buf >> 2] & -2) + -1 | 0; //@line 8578
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $8, 0); //@line 8580
 $12 = $__buf + 8 | 0; //@line 8584
 $14 = $__buf + 1 | 0; //@line 8586
 $15 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0; //@line 8587
 HEAP32[$__a_end >> 2] = $15; //@line 8588
 HEAP32[$__g_end >> 2] = $__g; //@line 8589
 HEAP32[$__dc >> 2] = 0; //@line 8590
 $16 = $__buf + 4 | 0; //@line 8591
 $17 = HEAP8[$__thousands_sep >> 0] | 0; //@line 8592
 $$pre$i$i$i2 = HEAP32[$__b >> 2] | 0; //@line 8594
 $__a$0 = $15; //@line 8594
 L4 : while (1) {
  if (!$$pre$i$i$i2) {
   $$pre$i$i$i = 0; //@line 8598
  } else {
   if ((HEAP32[$$pre$i$i$i2 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i2 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i2 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i2) | 0) == -1) {
     HEAP32[$__b >> 2] = 0; //@line 8612
     $$pre$i$i$i = 0; //@line 8613
    } else {
     $$pre$i$i$i = $$pre$i$i$i2; //@line 8615
    }
   } else {
    $$pre$i$i$i = $$pre$i$i$i2; //@line 8618
   }
  }
  $29 = ($$pre$i$i$i | 0) == 0; //@line 8621
  $30 = HEAP32[$__e >> 2] | 0; //@line 8622
  do {
   if (!$30) {
    label = 13; //@line 8626
   } else {
    if ((HEAP32[$30 + 12 >> 2] | 0) != (HEAP32[$30 + 16 >> 2] | 0)) {
     if ($29) {
      $131 = $30; //@line 8635
      break;
     } else {
      $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 8638
      $$pre$i2$i$i = $30; //@line 8638
      $__a$2 = $__a$0; //@line 8638
      break L4;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 63]($30) | 0) == -1) {
     HEAP32[$__e >> 2] = 0; //@line 8648
     label = 13; //@line 8649
     break;
    } else {
     if ($29) {
      $131 = $30; //@line 8653
      break;
     } else {
      $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 8656
      $$pre$i2$i$i = $30; //@line 8656
      $__a$2 = $__a$0; //@line 8656
      break L4;
     }
    }
   }
  } while (0);
  if ((label | 0) == 13) {
   label = 0; //@line 8663
   if ($29) {
    $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 8665
    $$pre$i2$i$i = 0; //@line 8665
    $__a$2 = $__a$0; //@line 8665
    break;
   } else {
    $131 = 0; //@line 8668
   }
  }
  $43 = HEAP8[$__buf >> 0] | 0; //@line 8672
  $49 = ($43 & 1) == 0 ? ($43 & 255) >>> 1 : HEAP32[$16 >> 2] | 0; //@line 8678
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $49 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $49 << 1, 0); //@line 8683
   if (!(HEAP8[$__buf >> 0] & 1)) {
    $58 = 10; //@line 8688
   } else {
    $58 = (HEAP32[$__buf >> 2] & -2) + -1 | 0; //@line 8693
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $58, 0); //@line 8695
   $63 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0; //@line 8700
   HEAP32[$__a_end >> 2] = $63 + $49; //@line 8702
   $__a$1 = $63; //@line 8703
  } else {
   $__a$1 = $__a$0; //@line 8705
  }
  $65 = $$pre$i$i$i + 12 | 0; //@line 8707
  $66 = HEAP32[$65 >> 2] | 0; //@line 8708
  $67 = $$pre$i$i$i + 16 | 0; //@line 8709
  if (($66 | 0) == (HEAP32[$67 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i) | 0; //@line 8717
  } else {
   $$0$i$i = HEAPU8[$66 >> 0] | 0; //@line 8721
  }
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i & 255, $0, $__a$1, $__a_end, $__dc, $17, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 8727
   $$pre$i2$i$i = $131; //@line 8727
   $__a$2 = $__a$1; //@line 8727
   break;
  }
  $79 = HEAP32[$65 >> 2] | 0; //@line 8730
  if (($79 | 0) == (HEAP32[$67 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 63]($$pre$i$i$i) | 0; //@line 8737
   $$pre$i$i$i2 = $$pre$i$i$i; //@line 8738
   $__a$0 = $__a$1; //@line 8738
   continue;
  } else {
   HEAP32[$65 >> 2] = $79 + 1; //@line 8742
   $$pre$i$i$i2 = $$pre$i$i$i; //@line 8743
   $__a$0 = $__a$1; //@line 8743
   continue;
  }
 }
 $86 = HEAP8[$__grouping >> 0] | 0; //@line 8747
 $$pre18 = HEAP32[$__g_end >> 2] | 0; //@line 8756
 if (!((($86 & 1) == 0 ? ($86 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0)) {
  $103 = $$pre18; //@line 8758
 } else {
  if (($$pre18 - $__g | 0) < 160) {
   $99 = HEAP32[$__dc >> 2] | 0; //@line 8765
   $100 = $$pre18 + 4 | 0; //@line 8766
   HEAP32[$__g_end >> 2] = $100; //@line 8767
   HEAP32[$$pre18 >> 2] = $99; //@line 8768
   $103 = $100; //@line 8769
  } else {
   $103 = $$pre18; //@line 8771
  }
 }
 HEAP32[$__v >> 2] = __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $0) | 0; //@line 8776
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $103, $__err); //@line 8777
 if (!$$pre$i$i$i$lcssa) {
  $116 = 0; //@line 8780
 } else {
  if ((HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) {
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i$lcssa) | 0) == -1) {
    HEAP32[$__b >> 2] = 0; //@line 8794
    $116 = 0; //@line 8795
   } else {
    $116 = $$pre$i$i$i$lcssa; //@line 8797
   }
  } else {
   $116 = $$pre$i$i$i$lcssa; //@line 8800
  }
 }
 $115 = ($116 | 0) == 0; //@line 8803
 do {
  if (!$$pre$i2$i$i) {
   label = 38; //@line 8807
  } else {
   if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) == (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i) | 0) == -1) {
     HEAP32[$__e >> 2] = 0; //@line 8821
     label = 38; //@line 8822
     break;
    }
   }
   if (!$115) {
    label = 39; //@line 8827
   }
  }
 } while (0);
 if ((label | 0) == 38) {
  if ($115) {
   label = 39; //@line 8833
  }
 }
 if ((label | 0) == 39) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 8839
 }
 $130 = HEAP32[$__b >> 2] | 0; //@line 8841
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf); //@line 8842
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping); //@line 8843
 STACKTOP = sp; //@line 8844
 return $130 | 0; //@line 8844
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i = 0, $$pre18 = 0, $0 = 0, $100 = 0, $103 = 0, $115 = 0, $116 = 0, $12 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $29 = 0, $30 = 0, $43 = 0, $49 = 0, $58 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $79 = 0, $8 = 0, $86 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7619
 STACKTOP = STACKTOP + 240 | 0; //@line 7620
 $__atoms = sp + 202 | 0; //@line 7621
 $__thousands_sep = sp + 200 | 0; //@line 7622
 $__grouping = sp + 24 | 0; //@line 7623
 $__buf = sp + 12 | 0; //@line 7624
 $__a_end = sp + 8 | 0; //@line 7625
 $__g = sp + 40 | 0; //@line 7626
 $__g_end = sp + 4 | 0; //@line 7627
 $__dc = sp; //@line 7628
 $0 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0; //@line 7629
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $__atoms, $__thousands_sep); //@line 7630
 HEAP32[$__buf >> 2] = 0; //@line 7631
 HEAP32[$__buf + 4 >> 2] = 0; //@line 7633
 HEAP32[$__buf + 8 >> 2] = 0; //@line 7635
 if (!(HEAP8[$__buf >> 0] & 1)) {
  $8 = 10; //@line 7640
 } else {
  $8 = (HEAP32[$__buf >> 2] & -2) + -1 | 0; //@line 7645
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $8, 0); //@line 7647
 $12 = $__buf + 8 | 0; //@line 7651
 $14 = $__buf + 1 | 0; //@line 7653
 $15 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0; //@line 7654
 HEAP32[$__a_end >> 2] = $15; //@line 7655
 HEAP32[$__g_end >> 2] = $__g; //@line 7656
 HEAP32[$__dc >> 2] = 0; //@line 7657
 $16 = $__buf + 4 | 0; //@line 7658
 $17 = HEAP8[$__thousands_sep >> 0] | 0; //@line 7659
 $$pre$i$i$i2 = HEAP32[$__b >> 2] | 0; //@line 7661
 $__a$0 = $15; //@line 7661
 L4 : while (1) {
  if (!$$pre$i$i$i2) {
   $$pre$i$i$i = 0; //@line 7665
  } else {
   if ((HEAP32[$$pre$i$i$i2 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i2 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i2 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i2) | 0) == -1) {
     HEAP32[$__b >> 2] = 0; //@line 7679
     $$pre$i$i$i = 0; //@line 7680
    } else {
     $$pre$i$i$i = $$pre$i$i$i2; //@line 7682
    }
   } else {
    $$pre$i$i$i = $$pre$i$i$i2; //@line 7685
   }
  }
  $29 = ($$pre$i$i$i | 0) == 0; //@line 7688
  $30 = HEAP32[$__e >> 2] | 0; //@line 7689
  do {
   if (!$30) {
    label = 13; //@line 7693
   } else {
    if ((HEAP32[$30 + 12 >> 2] | 0) != (HEAP32[$30 + 16 >> 2] | 0)) {
     if ($29) {
      $131 = $30; //@line 7702
      break;
     } else {
      $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 7705
      $$pre$i2$i$i = $30; //@line 7705
      $__a$2 = $__a$0; //@line 7705
      break L4;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 63]($30) | 0) == -1) {
     HEAP32[$__e >> 2] = 0; //@line 7715
     label = 13; //@line 7716
     break;
    } else {
     if ($29) {
      $131 = $30; //@line 7720
      break;
     } else {
      $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 7723
      $$pre$i2$i$i = $30; //@line 7723
      $__a$2 = $__a$0; //@line 7723
      break L4;
     }
    }
   }
  } while (0);
  if ((label | 0) == 13) {
   label = 0; //@line 7730
   if ($29) {
    $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 7732
    $$pre$i2$i$i = 0; //@line 7732
    $__a$2 = $__a$0; //@line 7732
    break;
   } else {
    $131 = 0; //@line 7735
   }
  }
  $43 = HEAP8[$__buf >> 0] | 0; //@line 7739
  $49 = ($43 & 1) == 0 ? ($43 & 255) >>> 1 : HEAP32[$16 >> 2] | 0; //@line 7745
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $49 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $49 << 1, 0); //@line 7750
   if (!(HEAP8[$__buf >> 0] & 1)) {
    $58 = 10; //@line 7755
   } else {
    $58 = (HEAP32[$__buf >> 2] & -2) + -1 | 0; //@line 7760
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $58, 0); //@line 7762
   $63 = (HEAP8[$__buf >> 0] & 1) == 0 ? $14 : HEAP32[$12 >> 2] | 0; //@line 7767
   HEAP32[$__a_end >> 2] = $63 + $49; //@line 7769
   $__a$1 = $63; //@line 7770
  } else {
   $__a$1 = $__a$0; //@line 7772
  }
  $65 = $$pre$i$i$i + 12 | 0; //@line 7774
  $66 = HEAP32[$65 >> 2] | 0; //@line 7775
  $67 = $$pre$i$i$i + 16 | 0; //@line 7776
  if (($66 | 0) == (HEAP32[$67 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i) | 0; //@line 7784
  } else {
   $$0$i$i = HEAPU8[$66 >> 0] | 0; //@line 7788
  }
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i & 255, $0, $__a$1, $__a_end, $__dc, $17, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 7794
   $$pre$i2$i$i = $131; //@line 7794
   $__a$2 = $__a$1; //@line 7794
   break;
  }
  $79 = HEAP32[$65 >> 2] | 0; //@line 7797
  if (($79 | 0) == (HEAP32[$67 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 63]($$pre$i$i$i) | 0; //@line 7804
   $$pre$i$i$i2 = $$pre$i$i$i; //@line 7805
   $__a$0 = $__a$1; //@line 7805
   continue;
  } else {
   HEAP32[$65 >> 2] = $79 + 1; //@line 7809
   $$pre$i$i$i2 = $$pre$i$i$i; //@line 7810
   $__a$0 = $__a$1; //@line 7810
   continue;
  }
 }
 $86 = HEAP8[$__grouping >> 0] | 0; //@line 7814
 $$pre18 = HEAP32[$__g_end >> 2] | 0; //@line 7823
 if (!((($86 & 1) == 0 ? ($86 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0)) {
  $103 = $$pre18; //@line 7825
 } else {
  if (($$pre18 - $__g | 0) < 160) {
   $99 = HEAP32[$__dc >> 2] | 0; //@line 7832
   $100 = $$pre18 + 4 | 0; //@line 7833
   HEAP32[$__g_end >> 2] = $100; //@line 7834
   HEAP32[$$pre18 >> 2] = $99; //@line 7835
   $103 = $100; //@line 7836
  } else {
   $103 = $$pre18; //@line 7838
  }
 }
 HEAP32[$__v >> 2] = __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $0) | 0; //@line 7843
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $103, $__err); //@line 7844
 if (!$$pre$i$i$i$lcssa) {
  $116 = 0; //@line 7847
 } else {
  if ((HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) {
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i$lcssa) | 0) == -1) {
    HEAP32[$__b >> 2] = 0; //@line 7861
    $116 = 0; //@line 7862
   } else {
    $116 = $$pre$i$i$i$lcssa; //@line 7864
   }
  } else {
   $116 = $$pre$i$i$i$lcssa; //@line 7867
  }
 }
 $115 = ($116 | 0) == 0; //@line 7870
 do {
  if (!$$pre$i2$i$i) {
   label = 38; //@line 7874
  } else {
   if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) == (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i) | 0) == -1) {
     HEAP32[$__e >> 2] = 0; //@line 7888
     label = 38; //@line 7889
     break;
    }
   }
   if (!$115) {
    label = 39; //@line 7894
   }
  }
 } while (0);
 if ((label | 0) == 38) {
  if ($115) {
   label = 39; //@line 7900
  }
 }
 if ((label | 0) == 39) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 7906
 }
 $130 = HEAP32[$__b >> 2] | 0; //@line 7908
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf); //@line 7909
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping); //@line 7910
 STACKTOP = sp; //@line 7911
 return $130 | 0; //@line 7911
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i2$i$i = 0, $0 = 0, $100 = 0, $101 = 0, $115 = 0, $116 = 0, $130 = 0, $131 = 0, $15 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $35 = 0, $36 = 0, $4 = 0, $49 = 0, $55 = 0, $64 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $85 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5136
 STACKTOP = STACKTOP + 240 | 0; //@line 5137
 $vararg_buffer = sp; //@line 5138
 $__atoms = sp + 208 | 0; //@line 5139
 $__grouping = sp + 32 | 0; //@line 5140
 $0 = sp + 28 | 0; //@line 5141
 $__buf = sp + 16 | 0; //@line 5142
 $__a_end = sp + 12 | 0; //@line 5143
 $__g = sp + 48 | 0; //@line 5144
 $__g_end = sp + 8 | 0; //@line 5145
 $__dc = sp + 4 | 0; //@line 5146
 HEAP32[$__grouping >> 2] = 0; //@line 5147
 HEAP32[$__grouping + 4 >> 2] = 0; //@line 5149
 HEAP32[$__grouping + 8 >> 2] = 0; //@line 5151
 $3 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 5152
 HEAP32[$0 >> 2] = $3; //@line 5153
 $4 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 9328) | 0; //@line 5154
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 32 >> 2] & 7]($4, 20196, 20222, $__atoms) | 0; //@line 5158
 __ZNSt3__114__shared_count16__release_sharedEv($3) | 0; //@line 5159
 HEAP32[$__buf >> 2] = 0; //@line 5160
 HEAP32[$__buf + 4 >> 2] = 0; //@line 5162
 HEAP32[$__buf + 8 >> 2] = 0; //@line 5164
 if (!(HEAP8[$__buf >> 0] & 1)) {
  $15 = 10; //@line 5169
 } else {
  $15 = (HEAP32[$__buf >> 2] & -2) + -1 | 0; //@line 5174
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $15, 0); //@line 5176
 $19 = $__buf + 8 | 0; //@line 5180
 $21 = $__buf + 1 | 0; //@line 5182
 $22 = (HEAP8[$__buf >> 0] & 1) == 0 ? $21 : HEAP32[$19 >> 2] | 0; //@line 5183
 HEAP32[$__a_end >> 2] = $22; //@line 5184
 HEAP32[$__g_end >> 2] = $__g; //@line 5185
 HEAP32[$__dc >> 2] = 0; //@line 5186
 $23 = $__buf + 4 | 0; //@line 5187
 $$pre$i$i$i5 = HEAP32[$__b >> 2] | 0; //@line 5189
 $__a$0 = $22; //@line 5189
 L4 : while (1) {
  if (!$$pre$i$i$i5) {
   $$pre$i$i$i = 0; //@line 5193
  } else {
   if ((HEAP32[$$pre$i$i$i5 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i5 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i5 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i5) | 0) == -1) {
     HEAP32[$__b >> 2] = 0; //@line 5207
     $$pre$i$i$i = 0; //@line 5208
    } else {
     $$pre$i$i$i = $$pre$i$i$i5; //@line 5210
    }
   } else {
    $$pre$i$i$i = $$pre$i$i$i5; //@line 5213
   }
  }
  $35 = ($$pre$i$i$i | 0) == 0; //@line 5216
  $36 = HEAP32[$__e >> 2] | 0; //@line 5217
  do {
   if (!$36) {
    label = 13; //@line 5221
   } else {
    if ((HEAP32[$36 + 12 >> 2] | 0) != (HEAP32[$36 + 16 >> 2] | 0)) {
     if ($35) {
      $131 = $36; //@line 5230
      break;
     } else {
      $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 5233
      $$pre$i2$i$i = $36; //@line 5233
      $__a$2 = $__a$0; //@line 5233
      break L4;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$36 >> 2] | 0) + 36 >> 2] & 63]($36) | 0) == -1) {
     HEAP32[$__e >> 2] = 0; //@line 5243
     label = 13; //@line 5244
     break;
    } else {
     if ($35) {
      $131 = $36; //@line 5248
      break;
     } else {
      $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 5251
      $$pre$i2$i$i = $36; //@line 5251
      $__a$2 = $__a$0; //@line 5251
      break L4;
     }
    }
   }
  } while (0);
  if ((label | 0) == 13) {
   label = 0; //@line 5258
   if ($35) {
    $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 5260
    $$pre$i2$i$i = 0; //@line 5260
    $__a$2 = $__a$0; //@line 5260
    break;
   } else {
    $131 = 0; //@line 5263
   }
  }
  $49 = HEAP8[$__buf >> 0] | 0; //@line 5267
  $55 = ($49 & 1) == 0 ? ($49 & 255) >>> 1 : HEAP32[$23 >> 2] | 0; //@line 5273
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $55 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $55 << 1, 0); //@line 5278
   if (!(HEAP8[$__buf >> 0] & 1)) {
    $64 = 10; //@line 5283
   } else {
    $64 = (HEAP32[$__buf >> 2] & -2) + -1 | 0; //@line 5288
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $64, 0); //@line 5290
   $69 = (HEAP8[$__buf >> 0] & 1) == 0 ? $21 : HEAP32[$19 >> 2] | 0; //@line 5295
   HEAP32[$__a_end >> 2] = $69 + $55; //@line 5297
   $__a$1 = $69; //@line 5298
  } else {
   $__a$1 = $__a$0; //@line 5300
  }
  $71 = $$pre$i$i$i + 12 | 0; //@line 5302
  $72 = HEAP32[$71 >> 2] | 0; //@line 5303
  $73 = $$pre$i$i$i + 16 | 0; //@line 5304
  if (($72 | 0) == (HEAP32[$73 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i) | 0; //@line 5312
  } else {
   $$0$i$i = HEAPU8[$72 >> 0] | 0; //@line 5316
  }
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i & 255, 16, $__a$1, $__a_end, $__dc, 0, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i$i$i$lcssa = $$pre$i$i$i; //@line 5322
   $$pre$i2$i$i = $131; //@line 5322
   $__a$2 = $__a$1; //@line 5322
   break;
  }
  $85 = HEAP32[$71 >> 2] | 0; //@line 5325
  if (($85 | 0) == (HEAP32[$73 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 63]($$pre$i$i$i) | 0; //@line 5332
   $$pre$i$i$i5 = $$pre$i$i$i; //@line 5333
   $__a$0 = $__a$1; //@line 5333
   continue;
  } else {
   HEAP32[$71 >> 2] = $85 + 1; //@line 5337
   $$pre$i$i$i5 = $$pre$i$i$i; //@line 5338
   $__a$0 = $__a$1; //@line 5338
   continue;
  }
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, (HEAP32[$__a_end >> 2] | 0) - $__a$2 | 0, 0); //@line 5346
 $100 = (HEAP8[$__buf >> 0] & 1) == 0 ? $21 : HEAP32[$19 >> 2] | 0; //@line 5351
 $101 = __ZNSt3__16__clocEv() | 0; //@line 5352
 HEAP32[$vararg_buffer >> 2] = $__v; //@line 5353
 if ((__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($100, $101, 21580, $vararg_buffer) | 0) != 1) {
  HEAP32[$__err >> 2] = 4; //@line 5357
 }
 if (!$$pre$i$i$i$lcssa) {
  $116 = 0; //@line 5361
 } else {
  if ((HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) {
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i$lcssa) | 0) == -1) {
    HEAP32[$__b >> 2] = 0; //@line 5375
    $116 = 0; //@line 5376
   } else {
    $116 = $$pre$i$i$i$lcssa; //@line 5378
   }
  } else {
   $116 = $$pre$i$i$i$lcssa; //@line 5381
  }
 }
 $115 = ($116 | 0) == 0; //@line 5384
 do {
  if (!$$pre$i2$i$i) {
   label = 37; //@line 5388
  } else {
   if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) == (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i) | 0) == -1) {
     HEAP32[$__e >> 2] = 0; //@line 5402
     label = 37; //@line 5403
     break;
    }
   }
   if (!$115) {
    label = 38; //@line 5408
   }
  }
 } while (0);
 if ((label | 0) == 37) {
  if ($115) {
   label = 38; //@line 5414
  }
 }
 if ((label | 0) == 38) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 5420
 }
 $130 = HEAP32[$__b >> 2] | 0; //@line 5422
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf); //@line 5423
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping); //@line 5424
 STACKTOP = sp; //@line 5425
 return $130 | 0; //@line 5425
}
function _fmod($x, $y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $106 = 0, $107 = 0, $11 = 0, $112 = 0, $114 = 0, $116 = 0, $119 = 0, $12 = 0, $121 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $146 = 0, $149 = 0, $150 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $2 = 0, $23 = 0.0, $25 = 0, $26 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $45 = 0, $46 = 0, $55 = 0, $6 = 0, $60 = 0, $61 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $78 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $93 = 0, $95 = 0, $97 = 0, $ex$0$lcssa = 0, $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0, label = 0;
 HEAPF64[tempDoublePtr >> 3] = $x; //@line 4745
 $0 = HEAP32[tempDoublePtr >> 2] | 0; //@line 4745
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 4746
 HEAPF64[tempDoublePtr >> 3] = $y; //@line 4747
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 4747
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 4748
 $4 = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0; //@line 4749
 $6 = $4 & 2047; //@line 4751
 $7 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0; //@line 4752
 $9 = $7 & 2047; //@line 4754
 $10 = $1 & -2147483648; //@line 4755
 $11 = _bitshift64Shl($2 | 0, $3 | 0, 1) | 0; //@line 4756
 $12 = tempRet0; //@line 4757
 L1 : do {
  if (($11 | 0) == 0 & ($12 | 0) == 0) {
   label = 3; //@line 4763
  } else {
   $16 = $3 & 2147483647; //@line 4765
   if ($16 >>> 0 > 2146435072 | ($16 | 0) == 2146435072 & $2 >>> 0 > 0 | ($6 | 0) == 2047) {
    label = 3; //@line 4774
   } else {
    $25 = _bitshift64Shl($0 | 0, $1 | 0, 1) | 0; //@line 4776
    $26 = tempRet0; //@line 4777
    if (!($26 >>> 0 > $12 >>> 0 | ($26 | 0) == ($12 | 0) & $25 >>> 0 > $11 >>> 0)) {
     return +(($25 | 0) == ($11 | 0) & ($26 | 0) == ($12 | 0) ? $x * 0.0 : $x);
    }
    if (!$6) {
     $37 = _bitshift64Shl($0 | 0, $1 | 0, 12) | 0; //@line 4793
     $38 = tempRet0; //@line 4794
     if (($38 | 0) > -1 | ($38 | 0) == -1 & $37 >>> 0 > 4294967295) {
      $45 = $37; //@line 4801
      $46 = $38; //@line 4801
      $ex$026 = 0; //@line 4801
      while (1) {
       $44 = $ex$026 + -1 | 0; //@line 4803
       $45 = _bitshift64Shl($45 | 0, $46 | 0, 1) | 0; //@line 4804
       $46 = tempRet0; //@line 4805
       if (!(($46 | 0) > -1 | ($46 | 0) == -1 & $45 >>> 0 > 4294967295)) {
        $ex$0$lcssa = $44; //@line 4814
        break;
       } else {
        $ex$026 = $44; //@line 4812
       }
      }
     } else {
      $ex$0$lcssa = 0; //@line 4819
     }
     $55 = _bitshift64Shl($0 | 0, $1 | 0, 1 - $ex$0$lcssa | 0) | 0; //@line 4822
     $83 = $55; //@line 4824
     $84 = tempRet0; //@line 4824
     $ex$1 = $ex$0$lcssa; //@line 4824
    } else {
     $83 = $0; //@line 4828
     $84 = $1 & 1048575 | 1048576; //@line 4828
     $ex$1 = $6; //@line 4828
    }
    if (!$9) {
     $60 = _bitshift64Shl($2 | 0, $3 | 0, 12) | 0; //@line 4832
     $61 = tempRet0; //@line 4833
     if (($61 | 0) > -1 | ($61 | 0) == -1 & $60 >>> 0 > 4294967295) {
      $68 = $60; //@line 4840
      $69 = $61; //@line 4840
      $ey$020 = 0; //@line 4840
      while (1) {
       $67 = $ey$020 + -1 | 0; //@line 4842
       $68 = _bitshift64Shl($68 | 0, $69 | 0, 1) | 0; //@line 4843
       $69 = tempRet0; //@line 4844
       if (!(($69 | 0) > -1 | ($69 | 0) == -1 & $68 >>> 0 > 4294967295)) {
        $ey$0$lcssa = $67; //@line 4853
        break;
       } else {
        $ey$020 = $67; //@line 4851
       }
      }
     } else {
      $ey$0$lcssa = 0; //@line 4858
     }
     $78 = _bitshift64Shl($2 | 0, $3 | 0, 1 - $ey$0$lcssa | 0) | 0; //@line 4861
     $85 = $78; //@line 4863
     $86 = tempRet0; //@line 4863
     $ey$1$ph = $ey$0$lcssa; //@line 4863
    } else {
     $85 = $2; //@line 4867
     $86 = $3 & 1048575 | 1048576; //@line 4867
     $ey$1$ph = $9; //@line 4867
    }
    $87 = _i64Subtract($83 | 0, $84 | 0, $85 | 0, $86 | 0) | 0; //@line 4870
    $88 = tempRet0; //@line 4871
    $93 = ($88 | 0) > -1 | ($88 | 0) == -1 & $87 >>> 0 > 4294967295; //@line 4876
    L23 : do {
     if (($ex$1 | 0) > ($ey$1$ph | 0)) {
      $152 = $93; //@line 4879
      $153 = $87; //@line 4879
      $154 = $88; //@line 4879
      $95 = $83; //@line 4879
      $97 = $84; //@line 4879
      $ex$212 = $ex$1; //@line 4879
      while (1) {
       if ($152) {
        if (($95 | 0) == ($85 | 0) & ($97 | 0) == ($86 | 0)) {
         break;
        } else {
         $100 = $153; //@line 4888
         $101 = $154; //@line 4888
        }
       } else {
        $100 = $95; //@line 4891
        $101 = $97; //@line 4891
       }
       $102 = _bitshift64Shl($100 | 0, $101 | 0, 1) | 0; //@line 4893
       $103 = tempRet0; //@line 4894
       $104 = $ex$212 + -1 | 0; //@line 4895
       $106 = _i64Subtract($102 | 0, $103 | 0, $85 | 0, $86 | 0) | 0; //@line 4897
       $107 = tempRet0; //@line 4898
       $112 = ($107 | 0) > -1 | ($107 | 0) == -1 & $106 >>> 0 > 4294967295; //@line 4903
       if (($104 | 0) > ($ey$1$ph | 0)) {
        $152 = $112; //@line 4905
        $153 = $106; //@line 4905
        $154 = $107; //@line 4905
        $95 = $102; //@line 4905
        $97 = $103; //@line 4905
        $ex$212 = $104; //@line 4905
       } else {
        $$lcssa7 = $112; //@line 4907
        $114 = $102; //@line 4907
        $116 = $103; //@line 4907
        $155 = $106; //@line 4907
        $156 = $107; //@line 4907
        $ex$2$lcssa = $104; //@line 4907
        break L23;
       }
      }
      $$0 = $x * 0.0; //@line 4912
      break L1;
     } else {
      $$lcssa7 = $93; //@line 4915
      $114 = $83; //@line 4915
      $116 = $84; //@line 4915
      $155 = $87; //@line 4915
      $156 = $88; //@line 4915
      $ex$2$lcssa = $ex$1; //@line 4915
     }
    } while (0);
    if ($$lcssa7) {
     if (($114 | 0) == ($85 | 0) & ($116 | 0) == ($86 | 0)) {
      $$0 = $x * 0.0; //@line 4924
      break;
     } else {
      $119 = $156; //@line 4927
      $121 = $155; //@line 4927
     }
    } else {
     $119 = $116; //@line 4930
     $121 = $114; //@line 4930
    }
    if ($119 >>> 0 < 1048576 | ($119 | 0) == 1048576 & $121 >>> 0 < 0) {
     $126 = $121; //@line 4938
     $127 = $119; //@line 4938
     $ex$39 = $ex$2$lcssa; //@line 4938
     while (1) {
      $128 = _bitshift64Shl($126 | 0, $127 | 0, 1) | 0; //@line 4940
      $129 = tempRet0; //@line 4941
      $130 = $ex$39 + -1 | 0; //@line 4942
      if ($129 >>> 0 < 1048576 | ($129 | 0) == 1048576 & $128 >>> 0 < 0) {
       $126 = $128; //@line 4949
       $127 = $129; //@line 4949
       $ex$39 = $130; //@line 4949
      } else {
       $137 = $128; //@line 4951
       $138 = $129; //@line 4951
       $ex$3$lcssa = $130; //@line 4951
       break;
      }
     }
    } else {
     $137 = $121; //@line 4956
     $138 = $119; //@line 4956
     $ex$3$lcssa = $ex$2$lcssa; //@line 4956
    }
    if (($ex$3$lcssa | 0) > 0) {
     $139 = _i64Add($137 | 0, $138 | 0, 0, -1048576) | 0; //@line 4960
     $140 = tempRet0; //@line 4961
     $141 = _bitshift64Shl($ex$3$lcssa | 0, 0, 52) | 0; //@line 4962
     $149 = $140 | tempRet0; //@line 4966
     $150 = $139 | $141; //@line 4966
    } else {
     $146 = _bitshift64Lshr($137 | 0, $138 | 0, 1 - $ex$3$lcssa | 0) | 0; //@line 4969
     $149 = tempRet0; //@line 4971
     $150 = $146; //@line 4971
    }
    HEAP32[tempDoublePtr >> 2] = $150; //@line 4974
    HEAP32[tempDoublePtr + 4 >> 2] = $149 | $10; //@line 4974
    $$0 = +HEAPF64[tempDoublePtr >> 3]; //@line 4975
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $23 = $x * $y; //@line 4980
  $$0 = $23 / $23; //@line 4982
 }
 return +$$0;
}
function __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm, $frm_end, $mx, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$0 = 0, $$lcssa = 0, $$lcssa82 = 0, $$lcssa83 = 0, $$lcssa84 = 0, $$lcssa85 = 0, $$lcssa86 = 0, $$pre = 0, $16 = 0, $17 = 0, $28 = 0, $38 = 0, $42 = 0, $44 = 0, $57 = 0, $71 = 0, $77 = 0, $79 = 0, $81 = 0, $93 = 0, $96 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$1$ph = 0, $frm_nxt$150 = 0, $frm_nxt$2 = 0, $nchar16_t$049 = 0, $nchar16_t$1 = 0, label = 0;
 $$pre = $frm_end; //@line 15914
 if (!($mode & 4)) {
  $frm_nxt$1$ph = $frm; //@line 15916
 } else {
  if (($$pre - $frm | 0) > 2) {
   if ((HEAP8[$frm >> 0] | 0) == -17) {
    if ((HEAP8[$frm + 1 >> 0] | 0) == -69) {
     $frm_nxt$1$ph = (HEAP8[$frm + 2 >> 0] | 0) == -65 ? $frm + 3 | 0 : $frm; //@line 15934
    } else {
     $frm_nxt$1$ph = $frm; //@line 15936
    }
   } else {
    $frm_nxt$1$ph = $frm; //@line 15939
   }
  } else {
   $frm_nxt$1$ph = $frm; //@line 15942
  }
 }
 L7 : do {
  if (($mx | 0) != 0 & $frm_nxt$1$ph >>> 0 < $frm_end >>> 0) {
   $frm_nxt$150 = $frm_nxt$1$ph; //@line 15950
   $nchar16_t$049 = 0; //@line 15950
   L8 : while (1) {
    $16 = HEAP8[$frm_nxt$150 >> 0] | 0; //@line 15952
    $17 = $16 & 255; //@line 15953
    if ($17 >>> 0 > $Maxcode >>> 0) {
     $frm_nxt$1$lcssa = $frm_nxt$150; //@line 15956
     label = 42; //@line 15957
     break L7;
    }
    do {
     if ($16 << 24 >> 24 > -1) {
      $frm_nxt$2 = $frm_nxt$150 + 1 | 0; //@line 15964
      $nchar16_t$1 = $nchar16_t$049; //@line 15964
     } else {
      if (($16 & 255) < 194) {
       $frm_nxt$1$lcssa = $frm_nxt$150; //@line 15968
       label = 42; //@line 15969
       break L7;
      }
      if (($16 & 255) < 224) {
       if (($$pre - $frm_nxt$150 | 0) < 2) {
        $frm_nxt$1$lcssa = $frm_nxt$150; //@line 15978
        label = 42; //@line 15979
        break L7;
       }
       $28 = HEAPU8[$frm_nxt$150 + 1 >> 0] | 0; //@line 15984
       if (($28 & 192 | 0) != 128) {
        $frm_nxt$1$lcssa = $frm_nxt$150; //@line 15988
        label = 42; //@line 15989
        break L7;
       }
       if (($28 & 63 | $17 << 6 & 1984) >>> 0 > $Maxcode >>> 0) {
        $frm_nxt$1$lcssa = $frm_nxt$150; //@line 15998
        label = 42; //@line 15999
        break L7;
       }
       $frm_nxt$2 = $frm_nxt$150 + 2 | 0; //@line 16003
       $nchar16_t$1 = $nchar16_t$049; //@line 16003
       break;
      }
      if (($16 & 255) < 240) {
       $38 = $frm_nxt$150; //@line 16008
       if (($$pre - $38 | 0) < 3) {
        $frm_nxt$1$lcssa = $frm_nxt$150; //@line 16012
        label = 42; //@line 16013
        break L7;
       }
       $42 = HEAP8[$frm_nxt$150 + 1 >> 0] | 0; //@line 16017
       $44 = HEAP8[$frm_nxt$150 + 2 >> 0] | 0; //@line 16019
       switch ($17 | 0) {
       case 224:
        {
         if (($42 & -32) << 24 >> 24 != -96) {
          $$lcssa85 = $38; //@line 16025
          label = 20; //@line 16026
          break L8;
         }
         break;
        }
       case 237:
        {
         if (($42 & -32) << 24 >> 24 != -128) {
          $$lcssa84 = $38; //@line 16035
          label = 22; //@line 16036
          break L8;
         }
         break;
        }
       default:
        {
         if (($42 & -64) << 24 >> 24 != -128) {
          $$lcssa86 = $38; //@line 16045
          label = 24; //@line 16046
          break L8;
         }
        }
       }
       $57 = $44 & 255; //@line 16051
       if (($57 & 192 | 0) != 128) {
        $frm_nxt$1$lcssa = $frm_nxt$150; //@line 16055
        label = 42; //@line 16056
        break L7;
       }
       if ((($42 & 255) << 6 & 4032 | $17 << 12 & 61440 | $57 & 63) >>> 0 > $Maxcode >>> 0) {
        $frm_nxt$1$lcssa = $frm_nxt$150; //@line 16069
        label = 42; //@line 16070
        break L7;
       }
       $frm_nxt$2 = $frm_nxt$150 + 3 | 0; //@line 16074
       $nchar16_t$1 = $nchar16_t$049; //@line 16074
       break;
      }
      if (($16 & 255) >= 245) {
       $frm_nxt$1$lcssa = $frm_nxt$150; //@line 16079
       label = 42; //@line 16080
       break L7;
      }
      $71 = $frm_nxt$150; //@line 16083
      if (($mx - $nchar16_t$049 | 0) >>> 0 < 2 | ($$pre - $71 | 0) < 4) {
       $frm_nxt$1$lcssa = $frm_nxt$150; //@line 16090
       label = 42; //@line 16091
       break L7;
      }
      $77 = HEAP8[$frm_nxt$150 + 1 >> 0] | 0; //@line 16095
      $79 = HEAP8[$frm_nxt$150 + 2 >> 0] | 0; //@line 16097
      $81 = HEAP8[$frm_nxt$150 + 3 >> 0] | 0; //@line 16099
      switch ($17 | 0) {
      case 240:
       {
        if (($77 + 112 & 255) >= 48) {
         $$lcssa82 = $71; //@line 16105
         label = 32; //@line 16106
         break L8;
        }
        break;
       }
      case 244:
       {
        if (($77 & -16) << 24 >> 24 != -128) {
         $$lcssa = $71; //@line 16115
         label = 34; //@line 16116
         break L8;
        }
        break;
       }
      default:
       {
        if (($77 & -64) << 24 >> 24 != -128) {
         $$lcssa83 = $71; //@line 16125
         label = 36; //@line 16126
         break L8;
        }
       }
      }
      $93 = $79 & 255; //@line 16131
      if (($93 & 192 | 0) != 128) {
       $frm_nxt$1$lcssa = $frm_nxt$150; //@line 16135
       label = 42; //@line 16136
       break L7;
      }
      $96 = $81 & 255; //@line 16139
      if (($96 & 192 | 0) != 128) {
       $frm_nxt$1$lcssa = $frm_nxt$150; //@line 16143
       label = 42; //@line 16144
       break L7;
      }
      if ((($77 & 255) << 12 & 258048 | $17 << 18 & 1835008 | $93 << 6 & 4032 | $96 & 63) >>> 0 > $Maxcode >>> 0) {
       $frm_nxt$1$lcssa = $frm_nxt$150; //@line 16160
       label = 42; //@line 16161
       break L7;
      }
      $frm_nxt$2 = $frm_nxt$150 + 4 | 0; //@line 16166
      $nchar16_t$1 = $nchar16_t$049 + 1 | 0; //@line 16166
     }
    } while (0);
    $nchar16_t$049 = $nchar16_t$1 + 1 | 0; //@line 16169
    if (!($nchar16_t$049 >>> 0 < $mx >>> 0 & $frm_nxt$2 >>> 0 < $frm_end >>> 0)) {
     $frm_nxt$1$lcssa = $frm_nxt$2; //@line 16176
     label = 42; //@line 16177
     break L7;
    } else {
     $frm_nxt$150 = $frm_nxt$2; //@line 16174
    }
   }
   if ((label | 0) == 20) {
    $$0 = $$lcssa85 - $frm | 0; //@line 16184
    break;
   } else if ((label | 0) == 22) {
    $$0 = $$lcssa84 - $frm | 0; //@line 16190
    break;
   } else if ((label | 0) == 24) {
    $$0 = $$lcssa86 - $frm | 0; //@line 16196
    break;
   } else if ((label | 0) == 32) {
    $$0 = $$lcssa82 - $frm | 0; //@line 16202
    break;
   } else if ((label | 0) == 34) {
    $$0 = $$lcssa - $frm | 0; //@line 16208
    break;
   } else if ((label | 0) == 36) {
    $$0 = $$lcssa83 - $frm | 0; //@line 16214
    break;
   }
  } else {
   $frm_nxt$1$lcssa = $frm_nxt$1$ph; //@line 16218
   label = 42; //@line 16219
  }
 } while (0);
 if ((label | 0) == 42) {
  $$0 = $frm_nxt$1$lcssa - $frm | 0; //@line 16226
 }
 return $$0 | 0; //@line 16228
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$0$lcssa$i = 0, $$byval_copy = 0, $0 = 0, $104 = 0, $13 = 0, $14 = 0, $17 = 0, $2 = 0, $21 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $5 = 0, $50 = 0, $53 = 0, $55 = 0, $58 = 0, $68 = 0, $71 = 0, $8 = 0, $83 = 0, $85 = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$24 = 0, $__neg = 0, $__w$03 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16407
 STACKTOP = STACKTOP + 576 | 0; //@line 16408
 $$byval_copy = sp + 424 | 0; //@line 16409
 $vararg_buffer = sp; //@line 16410
 $__wbuf = sp + 24 | 0; //@line 16411
 $__wb = sp + 16 | 0; //@line 16412
 $__wn = sp + 12 | 0; //@line 16413
 $__loc = sp + 8 | 0; //@line 16414
 $__neg = sp + 464 | 0; //@line 16415
 $0 = sp + 4 | 0; //@line 16416
 $__nbuf = sp + 468 | 0; //@line 16417
 HEAP32[$__wb >> 2] = $__wbuf; //@line 16419
 $2 = $__wb + 4 | 0; //@line 16420
 HEAP32[$2 >> 2] = 98; //@line 16421
 $3 = $__wbuf + 400 | 0; //@line 16422
 HEAP32[$__loc >> 2] = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 16424
 $5 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 9320) | 0; //@line 16425
 HEAP8[$__neg >> 0] = 0; //@line 16426
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2]; //@line 16428
 $8 = HEAP32[$__iob + 4 >> 2] | 0; //@line 16430
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 16431
 if (__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b, $$byval_copy, $__intl, $__loc, $8, $__err, $__neg, $5, $__wb, $__wn, $3) | 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$5 >> 2] | 0) + 48 >> 2] & 7]($5, 21668, 21678, $$byval_copy) | 0; //@line 16437
  $13 = HEAP32[$__wn >> 2] | 0; //@line 16438
  $14 = HEAP32[$__wb >> 2] | 0; //@line 16439
  $17 = $13 - $14 | 0; //@line 16442
  if (($17 | 0) > 392) {
   $21 = _malloc(($17 >> 2) + 2 | 0) | 0; //@line 16447
   if (!$21) {
    __ZSt17__throw_bad_allocv(); //@line 16451
   } else {
    $53 = $21; //@line 16454
    $__nc$0 = $21; //@line 16454
   }
  } else {
   $53 = 0; //@line 16457
   $__nc$0 = $__nbuf; //@line 16457
  }
  if (!(HEAP8[$__neg >> 0] | 0)) {
   $__nc$1 = $__nc$0; //@line 16462
  } else {
   HEAP8[$__nc$0 >> 0] = 45; //@line 16465
   $__nc$1 = $__nc$0 + 1 | 0; //@line 16466
  }
  $27 = $$byval_copy + 40 | 0; //@line 16468
  $28 = $$byval_copy; //@line 16469
  if ($14 >>> 0 < $13 >>> 0) {
   $30 = $$byval_copy + 4 | 0; //@line 16472
   $31 = $30 + 4 | 0; //@line 16473
   $32 = $31 + 4 | 0; //@line 16474
   $33 = $32 + 4 | 0; //@line 16475
   $34 = $33 + 4 | 0; //@line 16476
   $35 = $34 + 4 | 0; //@line 16477
   $36 = $35 + 4 | 0; //@line 16478
   $37 = $36 + 4 | 0; //@line 16479
   $38 = $37 + 4 | 0; //@line 16480
   $__nc$24 = $__nc$1; //@line 16481
   $__w$03 = $14; //@line 16481
   while (1) {
    $39 = HEAP32[$__w$03 >> 2] | 0; //@line 16483
    if ((HEAP32[$$byval_copy >> 2] | 0) == ($39 | 0)) {
     $$0$lcssa$i = $$byval_copy; //@line 16487
    } else {
     if ((HEAP32[$30 >> 2] | 0) == ($39 | 0)) {
      $$0$lcssa$i = $30; //@line 16492
     } else {
      if ((HEAP32[$31 >> 2] | 0) == ($39 | 0)) {
       $$0$lcssa$i = $31; //@line 16497
      } else {
       if ((HEAP32[$32 >> 2] | 0) == ($39 | 0)) {
        $$0$lcssa$i = $32; //@line 16502
       } else {
        if ((HEAP32[$33 >> 2] | 0) == ($39 | 0)) {
         $$0$lcssa$i = $33; //@line 16507
        } else {
         if ((HEAP32[$34 >> 2] | 0) == ($39 | 0)) {
          $$0$lcssa$i = $34; //@line 16512
         } else {
          if ((HEAP32[$35 >> 2] | 0) == ($39 | 0)) {
           $$0$lcssa$i = $35; //@line 16517
          } else {
           if ((HEAP32[$36 >> 2] | 0) == ($39 | 0)) {
            $$0$lcssa$i = $36; //@line 16522
           } else {
            if ((HEAP32[$37 >> 2] | 0) == ($39 | 0)) {
             $$0$lcssa$i = $37; //@line 16527
            } else {
             $$0$lcssa$i = (HEAP32[$38 >> 2] | 0) == ($39 | 0) ? $38 : $27; //@line 16532
            }
           }
          }
         }
        }
       }
      }
     }
    }
    HEAP8[$__nc$24 >> 0] = HEAP8[21668 + ($$0$lcssa$i - $28 >> 2) >> 0] | 0; //@line 16547
    $__w$03 = $__w$03 + 4 | 0; //@line 16548
    $50 = $__nc$24 + 1 | 0; //@line 16549
    if ($__w$03 >>> 0 >= (HEAP32[$__wn >> 2] | 0) >>> 0) {
     $__nc$2$lcssa = $50; //@line 16555
     break;
    } else {
     $__nc$24 = $50; //@line 16553
    }
   }
  } else {
   $__nc$2$lcssa = $__nc$1; //@line 16560
  }
  HEAP8[$__nc$2$lcssa >> 0] = 0; //@line 16562
  HEAP32[$vararg_buffer >> 2] = $__v; //@line 16563
  _sscanf($__nbuf, 21664, $vararg_buffer) | 0; //@line 16564
  if ($53) {
   _free($53); //@line 16568
  }
 }
 $55 = HEAP32[$__b >> 2] | 0; //@line 16571
 do {
  if (!$55) {
   $104 = 1; //@line 16575
  } else {
   $58 = HEAP32[$55 + 12 >> 2] | 0; //@line 16578
   if (($58 | 0) == (HEAP32[$55 + 16 >> 2] | 0)) {
    $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$55 >> 2] | 0) + 36 >> 2] & 63]($55) | 0; //@line 16587
   } else {
    $$0$i$i$i$i = HEAP32[$58 >> 2] | 0; //@line 16590
   }
   if (($$0$i$i$i$i | 0) == -1) {
    HEAP32[$__b >> 2] = 0; //@line 16594
    $104 = 1; //@line 16595
    break;
   } else {
    $104 = (HEAP32[$__b >> 2] | 0) == 0; //@line 16600
    break;
   }
  }
 } while (0);
 $68 = HEAP32[$__e >> 2] | 0; //@line 16605
 do {
  if (!$68) {
   label = 28; //@line 16609
  } else {
   $71 = HEAP32[$68 + 12 >> 2] | 0; //@line 16612
   if (($71 | 0) == (HEAP32[$68 + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$68 >> 2] | 0) + 36 >> 2] & 63]($68) | 0; //@line 16621
   } else {
    $$0$i$i1$i$i = HEAP32[$71 >> 2] | 0; //@line 16624
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$__e >> 2] = 0; //@line 16628
    label = 28; //@line 16629
    break;
   } else {
    if ($104) {
     break;
    } else {
     label = 30; //@line 16635
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 28) {
  if ($104) {
   label = 30; //@line 16643
  }
 }
 if ((label | 0) == 30) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 16649
 }
 $83 = HEAP32[$__b >> 2] | 0; //@line 16651
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$__loc >> 2] | 0) | 0; //@line 16653
 $85 = HEAP32[$__wb >> 2] | 0; //@line 16654
 HEAP32[$__wb >> 2] = 0; //@line 16655
 if ($85) {
  FUNCTION_TABLE_vi[HEAP32[$2 >> 2] & 127]($85); //@line 16659
 }
 STACKTOP = sp; //@line 16661
 return $83 | 0; //@line 16661
}
function __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm, $frm_end, $mx, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$0 = 0, $$lcssa = 0, $$lcssa80 = 0, $$lcssa81 = 0, $$lcssa82 = 0, $$lcssa83 = 0, $$lcssa84 = 0, $$pre = 0, $16 = 0, $17 = 0, $28 = 0, $38 = 0, $42 = 0, $44 = 0, $57 = 0, $71 = 0, $75 = 0, $77 = 0, $79 = 0, $91 = 0, $94 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$1$ph = 0, $frm_nxt$148 = 0, $frm_nxt$2 = 0, $nchar32_t$047 = 0, label = 0;
 $$pre = $frm_end; //@line 16725
 if (!($mode & 4)) {
  $frm_nxt$1$ph = $frm; //@line 16727
 } else {
  if (($$pre - $frm | 0) > 2) {
   if ((HEAP8[$frm >> 0] | 0) == -17) {
    if ((HEAP8[$frm + 1 >> 0] | 0) == -69) {
     $frm_nxt$1$ph = (HEAP8[$frm + 2 >> 0] | 0) == -65 ? $frm + 3 | 0 : $frm; //@line 16745
    } else {
     $frm_nxt$1$ph = $frm; //@line 16747
    }
   } else {
    $frm_nxt$1$ph = $frm; //@line 16750
   }
  } else {
   $frm_nxt$1$ph = $frm; //@line 16753
  }
 }
 L7 : do {
  if (($mx | 0) != 0 & $frm_nxt$1$ph >>> 0 < $frm_end >>> 0) {
   $frm_nxt$148 = $frm_nxt$1$ph; //@line 16761
   $nchar32_t$047 = 0; //@line 16761
   L8 : while (1) {
    $16 = HEAP8[$frm_nxt$148 >> 0] | 0; //@line 16763
    $17 = $16 & 255; //@line 16764
    do {
     if ($16 << 24 >> 24 > -1) {
      if ($17 >>> 0 > $Maxcode >>> 0) {
       $frm_nxt$1$lcssa = $frm_nxt$148; //@line 16770
       label = 42; //@line 16771
       break L7;
      }
      $frm_nxt$2 = $frm_nxt$148 + 1 | 0; //@line 16775
     } else {
      if (($16 & 255) < 194) {
       $frm_nxt$1$lcssa = $frm_nxt$148; //@line 16779
       label = 42; //@line 16780
       break L7;
      }
      if (($16 & 255) < 224) {
       if (($$pre - $frm_nxt$148 | 0) < 2) {
        $frm_nxt$1$lcssa = $frm_nxt$148; //@line 16789
        label = 42; //@line 16790
        break L7;
       }
       $28 = HEAPU8[$frm_nxt$148 + 1 >> 0] | 0; //@line 16795
       if (($28 & 192 | 0) != 128) {
        $frm_nxt$1$lcssa = $frm_nxt$148; //@line 16799
        label = 42; //@line 16800
        break L7;
       }
       if (($28 & 63 | $17 << 6 & 1984) >>> 0 > $Maxcode >>> 0) {
        $frm_nxt$1$lcssa = $frm_nxt$148; //@line 16809
        label = 42; //@line 16810
        break L7;
       }
       $frm_nxt$2 = $frm_nxt$148 + 2 | 0; //@line 16814
       break;
      }
      if (($16 & 255) < 240) {
       $38 = $frm_nxt$148; //@line 16819
       if (($$pre - $38 | 0) < 3) {
        $frm_nxt$1$lcssa = $frm_nxt$148; //@line 16823
        label = 42; //@line 16824
        break L7;
       }
       $42 = HEAP8[$frm_nxt$148 + 1 >> 0] | 0; //@line 16828
       $44 = HEAP8[$frm_nxt$148 + 2 >> 0] | 0; //@line 16830
       switch ($17 | 0) {
       case 224:
        {
         if (($42 & -32) << 24 >> 24 != -96) {
          $$lcssa83 = $38; //@line 16836
          label = 20; //@line 16837
          break L8;
         }
         break;
        }
       case 237:
        {
         if (($42 & -32) << 24 >> 24 != -128) {
          $$lcssa82 = $38; //@line 16846
          label = 22; //@line 16847
          break L8;
         }
         break;
        }
       default:
        {
         if (($42 & -64) << 24 >> 24 != -128) {
          $$lcssa84 = $38; //@line 16856
          label = 24; //@line 16857
          break L8;
         }
        }
       }
       $57 = $44 & 255; //@line 16862
       if (($57 & 192 | 0) != 128) {
        $frm_nxt$1$lcssa = $frm_nxt$148; //@line 16866
        label = 42; //@line 16867
        break L7;
       }
       if ((($42 & 255) << 6 & 4032 | $17 << 12 & 61440 | $57 & 63) >>> 0 > $Maxcode >>> 0) {
        $frm_nxt$1$lcssa = $frm_nxt$148; //@line 16880
        label = 42; //@line 16881
        break L7;
       }
       $frm_nxt$2 = $frm_nxt$148 + 3 | 0; //@line 16885
       break;
      }
      if (($16 & 255) >= 245) {
       $frm_nxt$1$lcssa = $frm_nxt$148; //@line 16890
       label = 42; //@line 16891
       break L7;
      }
      $71 = $frm_nxt$148; //@line 16894
      if (($$pre - $71 | 0) < 4) {
       $frm_nxt$1$lcssa = $frm_nxt$148; //@line 16898
       label = 42; //@line 16899
       break L7;
      }
      $75 = HEAP8[$frm_nxt$148 + 1 >> 0] | 0; //@line 16903
      $77 = HEAP8[$frm_nxt$148 + 2 >> 0] | 0; //@line 16905
      $79 = HEAP8[$frm_nxt$148 + 3 >> 0] | 0; //@line 16907
      switch ($17 | 0) {
      case 240:
       {
        if (($75 + 112 & 255) >= 48) {
         $$lcssa80 = $71; //@line 16913
         label = 32; //@line 16914
         break L8;
        }
        break;
       }
      case 244:
       {
        if (($75 & -16) << 24 >> 24 != -128) {
         $$lcssa = $71; //@line 16923
         label = 34; //@line 16924
         break L8;
        }
        break;
       }
      default:
       {
        if (($75 & -64) << 24 >> 24 != -128) {
         $$lcssa81 = $71; //@line 16933
         label = 36; //@line 16934
         break L8;
        }
       }
      }
      $91 = $77 & 255; //@line 16939
      if (($91 & 192 | 0) != 128) {
       $frm_nxt$1$lcssa = $frm_nxt$148; //@line 16943
       label = 42; //@line 16944
       break L7;
      }
      $94 = $79 & 255; //@line 16947
      if (($94 & 192 | 0) != 128) {
       $frm_nxt$1$lcssa = $frm_nxt$148; //@line 16951
       label = 42; //@line 16952
       break L7;
      }
      if ((($75 & 255) << 12 & 258048 | $17 << 18 & 1835008 | $91 << 6 & 4032 | $94 & 63) >>> 0 > $Maxcode >>> 0) {
       $frm_nxt$1$lcssa = $frm_nxt$148; //@line 16968
       label = 42; //@line 16969
       break L7;
      }
      $frm_nxt$2 = $frm_nxt$148 + 4 | 0; //@line 16973
     }
    } while (0);
    $nchar32_t$047 = $nchar32_t$047 + 1 | 0; //@line 16976
    if (!($nchar32_t$047 >>> 0 < $mx >>> 0 & $frm_nxt$2 >>> 0 < $frm_end >>> 0)) {
     $frm_nxt$1$lcssa = $frm_nxt$2; //@line 16983
     label = 42; //@line 16984
     break L7;
    } else {
     $frm_nxt$148 = $frm_nxt$2; //@line 16981
    }
   }
   if ((label | 0) == 20) {
    $$0 = $$lcssa83 - $frm | 0; //@line 16991
    break;
   } else if ((label | 0) == 22) {
    $$0 = $$lcssa82 - $frm | 0; //@line 16997
    break;
   } else if ((label | 0) == 24) {
    $$0 = $$lcssa84 - $frm | 0; //@line 17003
    break;
   } else if ((label | 0) == 32) {
    $$0 = $$lcssa80 - $frm | 0; //@line 17009
    break;
   } else if ((label | 0) == 34) {
    $$0 = $$lcssa - $frm | 0; //@line 17015
    break;
   } else if ((label | 0) == 36) {
    $$0 = $$lcssa81 - $frm | 0; //@line 17021
    break;
   }
  } else {
   $frm_nxt$1$lcssa = $frm_nxt$1$ph; //@line 17025
   label = 42; //@line 17026
  }
 } while (0);
 if ((label | 0) == 42) {
  $$0 = $frm_nxt$1$lcssa - $frm | 0; //@line 17033
 }
 return $$0 | 0; //@line 17035
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$lcssa$i = 0, $$byval_copy = 0, $0 = 0, $13 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $26 = 0, $27 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $48 = 0, $5 = 0, $51 = 0, $53 = 0, $65 = 0, $66 = 0, $67 = 0, $8 = 0, $81 = 0, $83 = 0, $__atoms = 0, $__loc = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$25 = 0, $__neg = 0, $__w$04 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13836
 STACKTOP = STACKTOP + 240 | 0; //@line 13837
 $$byval_copy = sp + 24 | 0; //@line 13838
 $vararg_buffer = sp; //@line 13839
 $__wbuf = sp + 136 | 0; //@line 13840
 $__wb = sp + 16 | 0; //@line 13841
 $__wn = sp + 12 | 0; //@line 13842
 $__loc = sp + 8 | 0; //@line 13843
 $__neg = sp + 134 | 0; //@line 13844
 $0 = sp + 4 | 0; //@line 13845
 $__atoms = sp + 124 | 0; //@line 13846
 HEAP32[$__wb >> 2] = $__wbuf; //@line 13848
 $2 = $__wb + 4 | 0; //@line 13849
 HEAP32[$2 >> 2] = 98; //@line 13850
 $3 = $__wbuf + 100 | 0; //@line 13851
 HEAP32[$__loc >> 2] = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 13853
 $5 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 9328) | 0; //@line 13854
 HEAP8[$__neg >> 0] = 0; //@line 13855
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2]; //@line 13857
 $8 = HEAP32[$__iob + 4 >> 2] | 0; //@line 13859
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 13860
 if (__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b, $$byval_copy, $__intl, $__loc, $8, $__err, $__neg, $5, $__wb, $__wn, $3) | 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$5 >> 2] | 0) + 32 >> 2] & 7]($5, 21653, 21663, $__atoms) | 0; //@line 13866
  $13 = HEAP32[$__wn >> 2] | 0; //@line 13867
  $14 = HEAP32[$__wb >> 2] | 0; //@line 13868
  $17 = $13 - $14 | 0; //@line 13871
  if (($17 | 0) > 98) {
   $20 = _malloc($17 + 2 | 0) | 0; //@line 13875
   if (!$20) {
    __ZSt17__throw_bad_allocv(); //@line 13879
   } else {
    $51 = $20; //@line 13882
    $__nc$0 = $20; //@line 13882
   }
  } else {
   $51 = 0; //@line 13885
   $__nc$0 = $$byval_copy; //@line 13885
  }
  if (!(HEAP8[$__neg >> 0] | 0)) {
   $__nc$1 = $__nc$0; //@line 13890
  } else {
   HEAP8[$__nc$0 >> 0] = 45; //@line 13893
   $__nc$1 = $__nc$0 + 1 | 0; //@line 13894
  }
  $26 = $__atoms + 10 | 0; //@line 13896
  $27 = $__atoms; //@line 13897
  if ($14 >>> 0 < $13 >>> 0) {
   $29 = $__atoms + 1 | 0; //@line 13900
   $30 = $29 + 1 | 0; //@line 13901
   $31 = $30 + 1 | 0; //@line 13902
   $32 = $31 + 1 | 0; //@line 13903
   $33 = $32 + 1 | 0; //@line 13904
   $34 = $33 + 1 | 0; //@line 13905
   $35 = $34 + 1 | 0; //@line 13906
   $36 = $35 + 1 | 0; //@line 13907
   $37 = $36 + 1 | 0; //@line 13908
   $__nc$25 = $__nc$1; //@line 13909
   $__w$04 = $14; //@line 13909
   while (1) {
    $38 = HEAP8[$__w$04 >> 0] | 0; //@line 13911
    if ((HEAP8[$__atoms >> 0] | 0) == $38 << 24 >> 24) {
     $$0$lcssa$i = $__atoms; //@line 13915
    } else {
     if ((HEAP8[$29 >> 0] | 0) == $38 << 24 >> 24) {
      $$0$lcssa$i = $29; //@line 13920
     } else {
      if ((HEAP8[$30 >> 0] | 0) == $38 << 24 >> 24) {
       $$0$lcssa$i = $30; //@line 13925
      } else {
       if ((HEAP8[$31 >> 0] | 0) == $38 << 24 >> 24) {
        $$0$lcssa$i = $31; //@line 13930
       } else {
        if ((HEAP8[$32 >> 0] | 0) == $38 << 24 >> 24) {
         $$0$lcssa$i = $32; //@line 13935
        } else {
         if ((HEAP8[$33 >> 0] | 0) == $38 << 24 >> 24) {
          $$0$lcssa$i = $33; //@line 13940
         } else {
          if ((HEAP8[$34 >> 0] | 0) == $38 << 24 >> 24) {
           $$0$lcssa$i = $34; //@line 13945
          } else {
           if ((HEAP8[$35 >> 0] | 0) == $38 << 24 >> 24) {
            $$0$lcssa$i = $35; //@line 13950
           } else {
            if ((HEAP8[$36 >> 0] | 0) == $38 << 24 >> 24) {
             $$0$lcssa$i = $36; //@line 13955
            } else {
             $$0$lcssa$i = (HEAP8[$37 >> 0] | 0) == $38 << 24 >> 24 ? $37 : $26; //@line 13960
            }
           }
          }
         }
        }
       }
      }
     }
    }
    HEAP8[$__nc$25 >> 0] = HEAP8[21653 + ($$0$lcssa$i - $27) >> 0] | 0; //@line 13974
    $__w$04 = $__w$04 + 1 | 0; //@line 13975
    $48 = $__nc$25 + 1 | 0; //@line 13976
    if ($__w$04 >>> 0 >= (HEAP32[$__wn >> 2] | 0) >>> 0) {
     $__nc$2$lcssa = $48; //@line 13982
     break;
    } else {
     $__nc$25 = $48; //@line 13980
    }
   }
  } else {
   $__nc$2$lcssa = $__nc$1; //@line 13987
  }
  HEAP8[$__nc$2$lcssa >> 0] = 0; //@line 13989
  HEAP32[$vararg_buffer >> 2] = $__v; //@line 13990
  _sscanf($$byval_copy, 21664, $vararg_buffer) | 0; //@line 13991
  if ($51) {
   _free($51); //@line 13995
  }
 }
 $53 = HEAP32[$__b >> 2] | 0; //@line 13998
 do {
  if (!$53) {
   $66 = 0; //@line 14002
  } else {
   if ((HEAP32[$53 + 12 >> 2] | 0) == (HEAP32[$53 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$53 >> 2] | 0) + 36 >> 2] & 63]($53) | 0) == -1) {
     HEAP32[$__b >> 2] = 0; //@line 14016
     $66 = 0; //@line 14017
     break;
    } else {
     $66 = HEAP32[$__b >> 2] | 0; //@line 14021
     break;
    }
   } else {
    $66 = $53; //@line 14025
   }
  }
 } while (0);
 $65 = ($66 | 0) == 0; //@line 14029
 $67 = HEAP32[$__e >> 2] | 0; //@line 14030
 do {
  if (!$67) {
   label = 25; //@line 14034
  } else {
   if ((HEAP32[$67 + 12 >> 2] | 0) == (HEAP32[$67 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$67 >> 2] | 0) + 36 >> 2] & 63]($67) | 0) == -1) {
     HEAP32[$__e >> 2] = 0; //@line 14048
     label = 25; //@line 14049
     break;
    }
   }
   if (!$65) {
    label = 26; //@line 14054
   }
  }
 } while (0);
 if ((label | 0) == 25) {
  if ($65) {
   label = 26; //@line 14060
  }
 }
 if ((label | 0) == 26) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 14066
 }
 $81 = HEAP32[$__b >> 2] | 0; //@line 14068
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$__loc >> 2] | 0) | 0; //@line 14070
 $83 = HEAP32[$__wb >> 2] | 0; //@line 14071
 HEAP32[$__wb >> 2] = 0; //@line 14072
 if ($83) {
  FUNCTION_TABLE_vi[HEAP32[$2 >> 2] & 127]($83); //@line 14076
 }
 STACKTOP = sp; //@line 14078
 return $81 | 0; //@line 14078
}
function __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$0 = 0, $$lcssa = 0, $$pre = 0, $$pre$phiZ2D = 0, $100 = 0, $104 = 0, $107 = 0, $128 = 0, $134 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $27 = 0, $3 = 0, $36 = 0, $42 = 0, $51 = 0, $53 = 0, $60 = 0, $69 = 0, $79 = 0, $81 = 0, $83 = 0, $89 = 0, $92 = 0, $98 = 0, label = 0;
 HEAP32[$frm_nxt >> 2] = $frm; //@line 15591
 HEAP32[$to_nxt >> 2] = $to; //@line 15592
 if (!($mode & 4)) {
  $$pre = $to; //@line 15597
  $$pre$phiZ2D = $frm_end; //@line 15597
 } else {
  $2 = HEAP32[$frm_nxt >> 2] | 0; //@line 15599
  $3 = $frm_end; //@line 15600
  if (($3 - $2 | 0) > 2) {
   if ((HEAP8[$2 >> 0] | 0) == -17) {
    if ((HEAP8[$2 + 1 >> 0] | 0) == -69) {
     if ((HEAP8[$2 + 2 >> 0] | 0) == -65) {
      HEAP32[$frm_nxt >> 2] = $2 + 3; //@line 15617
      $$pre = HEAP32[$to_nxt >> 2] | 0; //@line 15619
      $$pre$phiZ2D = $3; //@line 15619
     } else {
      $$pre = $to; //@line 15621
      $$pre$phiZ2D = $3; //@line 15621
     }
    } else {
     $$pre = $to; //@line 15624
     $$pre$phiZ2D = $3; //@line 15624
    }
   } else {
    $$pre = $to; //@line 15627
    $$pre$phiZ2D = $3; //@line 15627
   }
  } else {
   $$pre = $to; //@line 15630
   $$pre$phiZ2D = $3; //@line 15630
  }
 }
 $16 = $to_end; //@line 15633
 $17 = HEAP32[$frm_nxt >> 2] | 0; //@line 15634
 $18 = $17 >>> 0 < $frm_end >>> 0; //@line 15635
 L9 : do {
  if ($18 & $$pre >>> 0 < $to_end >>> 0) {
   $22 = $17; //@line 15640
   $27 = $$pre; //@line 15640
   while (1) {
    $21 = HEAP8[$22 >> 0] | 0; //@line 15642
    $23 = $21 & 255; //@line 15643
    if ($23 >>> 0 > $Maxcode >>> 0) {
     $$0 = 2; //@line 15646
     break L9;
    }
    do {
     if ($21 << 24 >> 24 > -1) {
      HEAP16[$27 >> 1] = $21 & 255; //@line 15653
      HEAP32[$frm_nxt >> 2] = $22 + 1; //@line 15655
     } else {
      if (($21 & 255) < 194) {
       $$0 = 2; //@line 15659
       break L9;
      }
      if (($21 & 255) < 224) {
       if (($$pre$phiZ2D - $22 | 0) < 2) {
        $$0 = 1; //@line 15668
        break L9;
       }
       $36 = HEAPU8[$22 + 1 >> 0] | 0; //@line 15673
       if (($36 & 192 | 0) != 128) {
        $$0 = 2; //@line 15677
        break L9;
       }
       $42 = $36 & 63 | $23 << 6 & 1984; //@line 15683
       if ($42 >>> 0 > $Maxcode >>> 0) {
        $$0 = 2; //@line 15686
        break L9;
       }
       HEAP16[$27 >> 1] = $42; //@line 15690
       HEAP32[$frm_nxt >> 2] = $22 + 2; //@line 15692
       break;
      }
      if (($21 & 255) < 240) {
       if (($$pre$phiZ2D - $22 | 0) < 3) {
        $$0 = 1; //@line 15701
        break L9;
       }
       $51 = HEAP8[$22 + 1 >> 0] | 0; //@line 15705
       $53 = HEAP8[$22 + 2 >> 0] | 0; //@line 15707
       switch ($23 | 0) {
       case 224:
        {
         if (($51 & -32) << 24 >> 24 != -96) {
          $$0 = 2; //@line 15713
          break L9;
         }
         break;
        }
       case 237:
        {
         if (($51 & -32) << 24 >> 24 != -128) {
          $$0 = 2; //@line 15722
          break L9;
         }
         break;
        }
       default:
        {
         if (($51 & -64) << 24 >> 24 != -128) {
          $$0 = 2; //@line 15731
          break L9;
         }
        }
       }
       $60 = $53 & 255; //@line 15736
       if (($60 & 192 | 0) != 128) {
        $$0 = 2; //@line 15740
        break L9;
       }
       $69 = ($51 & 255) << 6 & 4032 | $23 << 12 | $60 & 63; //@line 15749
       if (($69 & 65535) >>> 0 > $Maxcode >>> 0) {
        $$0 = 2; //@line 15753
        break L9;
       }
       HEAP16[$27 >> 1] = $69; //@line 15757
       HEAP32[$frm_nxt >> 2] = $22 + 3; //@line 15759
       break;
      }
      if (($21 & 255) >= 245) {
       $$0 = 2; //@line 15764
       break L9;
      }
      if (($$pre$phiZ2D - $22 | 0) < 4) {
       $$0 = 1; //@line 15771
       break L9;
      }
      $79 = HEAP8[$22 + 1 >> 0] | 0; //@line 15775
      $81 = HEAP8[$22 + 2 >> 0] | 0; //@line 15777
      $83 = HEAP8[$22 + 3 >> 0] | 0; //@line 15779
      switch ($23 | 0) {
      case 240:
       {
        if (($79 + 112 & 255) >= 48) {
         $$0 = 2; //@line 15785
         break L9;
        }
        break;
       }
      case 244:
       {
        if (($79 & -16) << 24 >> 24 != -128) {
         $$0 = 2; //@line 15794
         break L9;
        }
        break;
       }
      default:
       {
        if (($79 & -64) << 24 >> 24 != -128) {
         $$0 = 2; //@line 15803
         break L9;
        }
       }
      }
      $89 = $81 & 255; //@line 15808
      if (($89 & 192 | 0) != 128) {
       $$0 = 2; //@line 15812
       break L9;
      }
      $92 = $83 & 255; //@line 15815
      if (($92 & 192 | 0) != 128) {
       $$0 = 2; //@line 15819
       break L9;
      }
      if (($16 - $27 | 0) < 4) {
       $$0 = 1; //@line 15826
       break L9;
      }
      $98 = $23 & 7; //@line 15829
      $100 = $79 & 255; //@line 15831
      $104 = $89 << 6; //@line 15835
      $107 = $92 & 63; //@line 15838
      if (($100 << 12 & 258048 | $98 << 18 | $104 & 4032 | $107) >>> 0 > $Maxcode >>> 0) {
       $$0 = 2; //@line 15842
       break L9;
      }
      HEAP16[$27 >> 1] = $100 << 2 & 60 | $89 >>> 4 & 3 | (($100 >>> 4 & 3 | $98 << 2) << 6) + 16320 | 55296; //@line 15859
      $128 = $27 + 2 | 0; //@line 15864
      HEAP32[$to_nxt >> 2] = $128; //@line 15865
      HEAP16[$128 >> 1] = $107 | $104 & 960 | 56320; //@line 15866
      HEAP32[$frm_nxt >> 2] = (HEAP32[$frm_nxt >> 2] | 0) + 4; //@line 15869
     }
    } while (0);
    $27 = (HEAP32[$to_nxt >> 2] | 0) + 2 | 0; //@line 15873
    HEAP32[$to_nxt >> 2] = $27; //@line 15874
    $22 = HEAP32[$frm_nxt >> 2] | 0; //@line 15875
    $134 = $22 >>> 0 < $frm_end >>> 0; //@line 15876
    if (!($134 & $27 >>> 0 < $to_end >>> 0)) {
     $$lcssa = $134; //@line 15882
     label = 39; //@line 15883
     break;
    }
   }
  } else {
   $$lcssa = $18; //@line 15888
   label = 39; //@line 15889
  }
 } while (0);
 if ((label | 0) == 39) {
  $$0 = $$lcssa & 1; //@line 15894
 }
 return $$0 | 0; //@line 15896
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this, $st, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $st = $st | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $$0 = 0, $$01$be = 0, $$0153 = 0, $$0153$lcssa = 0, $$02$be = 0, $$0252 = 0, $$0252$lcssa = 0, $$1$lcssa = 0, $$145 = 0, $$145$lcssa = 0, $$145$lcssa73 = 0, $$2 = 0, $$lcssa = 0, $$pre = 0, $14 = 0, $15 = 0, $19 = 0, $26 = 0, $27 = 0, $34 = 0, $35 = 0, $45 = 0, $5 = 0, $51 = 0, $52 = 0, $58 = 0, $6 = 0, $64 = 0, $9 = 0, $fend$0$lcssa = 0, $fend$057 = 0, $fend$1$be = 0, $fend$154 = 0, $fend$2$lcssa = 0, $fend$246 = 0, $save_state = 0, $storemerge44 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5898
 STACKTOP = STACKTOP + 16 | 0; //@line 5899
 $save_state = sp; //@line 5900
 L1 : do {
  if (($frm | 0) == ($frm_end | 0)) {
   $fend$0$lcssa = $frm_end; //@line 5904
  } else {
   $fend$057 = $frm; //@line 5906
   while (1) {
    if (!(HEAP8[$fend$057 >> 0] | 0)) {
     $fend$0$lcssa = $fend$057; //@line 5911
     break L1;
    }
    $fend$057 = $fend$057 + 1 | 0; //@line 5914
    if (($fend$057 | 0) == ($frm_end | 0)) {
     $fend$0$lcssa = $frm_end; //@line 5917
     break;
    }
   }
  }
 } while (0);
 HEAP32[$to_nxt >> 2] = $to; //@line 5925
 HEAP32[$frm_nxt >> 2] = $frm; //@line 5926
 $5 = $to_end; //@line 5927
 $6 = $this + 8 | 0; //@line 5928
 L6 : do {
  if (($to | 0) == ($to_end | 0) | ($frm | 0) == ($frm_end | 0)) {
   $64 = $frm; //@line 5934
   label = 29; //@line 5935
  } else {
   $$0153 = $frm; //@line 5937
   $$0252 = $to; //@line 5937
   $fend$154 = $fend$0$lcssa; //@line 5937
   L7 : while (1) {
    $9 = $st; //@line 5939
    $14 = HEAP32[$9 + 4 >> 2] | 0; //@line 5944
    $15 = $save_state; //@line 5945
    HEAP32[$15 >> 2] = HEAP32[$9 >> 2]; //@line 5947
    HEAP32[$15 + 4 >> 2] = $14; //@line 5950
    $19 = $fend$154; //@line 5951
    $26 = _uselocale(HEAP32[$6 >> 2] | 0) | 0; //@line 5958
    $27 = _mbsnrtowcs($$0252, $frm_nxt, $19 - $$0153 | 0, $5 - $$0252 >> 2, $st) | 0; //@line 5959
    if ($26) {
     _uselocale($26) | 0; //@line 5962
    }
    switch ($27 | 0) {
    case 0:
     {
      $$0 = 2; //@line 5966
      break L6;
      break;
     }
    case -1:
     {
      $$0153$lcssa = $$0153; //@line 5971
      $$0252$lcssa = $$0252; //@line 5971
      $$lcssa = $19; //@line 5971
      break L7;
      break;
     }
    default:
     {}
    }
    $45 = (HEAP32[$to_nxt >> 2] | 0) + ($27 << 2) | 0; //@line 5979
    HEAP32[$to_nxt >> 2] = $45; //@line 5980
    if (($45 | 0) == ($to_end | 0)) {
     label = 19; //@line 5983
     break;
    }
    $$pre = HEAP32[$frm_nxt >> 2] | 0; //@line 5987
    if (($fend$154 | 0) == ($frm_end | 0)) {
     $$01$be = $$pre; //@line 5989
     $$02$be = $45; //@line 5989
     $fend$1$be = $frm_end; //@line 5989
    } else {
     $51 = _uselocale(HEAP32[$6 >> 2] | 0) | 0; //@line 5992
     $52 = _mbrtowc($45, $$pre, 1, $st) | 0; //@line 5993
     if ($51) {
      _uselocale($51) | 0; //@line 5996
     }
     if ($52) {
      $$0 = 2; //@line 6000
      break L6;
     }
     HEAP32[$to_nxt >> 2] = (HEAP32[$to_nxt >> 2] | 0) + 4; //@line 6005
     $58 = (HEAP32[$frm_nxt >> 2] | 0) + 1 | 0; //@line 6007
     HEAP32[$frm_nxt >> 2] = $58; //@line 6008
     L20 : do {
      if (($58 | 0) == ($frm_end | 0)) {
       $fend$2$lcssa = $frm_end; //@line 6012
      } else {
       $fend$246 = $58; //@line 6014
       while (1) {
        if (!(HEAP8[$fend$246 >> 0] | 0)) {
         $fend$2$lcssa = $fend$246; //@line 6019
         break L20;
        }
        $fend$246 = $fend$246 + 1 | 0; //@line 6022
        if (($fend$246 | 0) == ($frm_end | 0)) {
         $fend$2$lcssa = $frm_end; //@line 6025
         break;
        }
       }
      }
     } while (0);
     $$01$be = $58; //@line 6034
     $$02$be = HEAP32[$to_nxt >> 2] | 0; //@line 6034
     $fend$1$be = $fend$2$lcssa; //@line 6034
    }
    if (($$02$be | 0) == ($to_end | 0) | ($$01$be | 0) == ($frm_end | 0)) {
     $64 = $$01$be; //@line 6040
     label = 29; //@line 6041
     break L6;
    } else {
     $$0153 = $$01$be; //@line 6044
     $$0252 = $$02$be; //@line 6044
     $fend$154 = $fend$1$be; //@line 6044
    }
   }
   if ((label | 0) == 19) {
    $64 = HEAP32[$frm_nxt >> 2] | 0; //@line 6049
    label = 29; //@line 6050
    break;
   }
   HEAP32[$to_nxt >> 2] = $$0252$lcssa; //@line 6053
   L29 : do {
    if (($$0153$lcssa | 0) == (HEAP32[$frm_nxt >> 2] | 0)) {
     $$1$lcssa = $$0153$lcssa; //@line 6058
    } else {
     $$145 = $$0153$lcssa; //@line 6060
     $storemerge44 = $$0252$lcssa; //@line 6060
     L30 : while (1) {
      $34 = _uselocale(HEAP32[$6 >> 2] | 0) | 0; //@line 6065
      $35 = _mbrtowc($storemerge44, $$145, $$lcssa - $$145 | 0, $save_state) | 0; //@line 6066
      if ($34) {
       _uselocale($34) | 0; //@line 6069
      }
      switch ($35 | 0) {
      case -1:
       {
        $$145$lcssa = $$145; //@line 6073
        label = 13; //@line 6074
        break L30;
        break;
       }
      case -2:
       {
        $$145$lcssa73 = $$145; //@line 6079
        label = 14; //@line 6080
        break L30;
        break;
       }
      case 0:
       {
        $$2 = $$145 + 1 | 0; //@line 6086
        break;
       }
      default:
       {
        $$2 = $$145 + $35 | 0; //@line 6091
       }
      }
      $storemerge44 = (HEAP32[$to_nxt >> 2] | 0) + 4 | 0; //@line 6095
      HEAP32[$to_nxt >> 2] = $storemerge44; //@line 6096
      if (($$2 | 0) == (HEAP32[$frm_nxt >> 2] | 0)) {
       $$1$lcssa = $$2; //@line 6100
       break L29;
      } else {
       $$145 = $$2; //@line 6103
      }
     }
     if ((label | 0) == 13) {
      HEAP32[$frm_nxt >> 2] = $$145$lcssa; //@line 6107
      $$0 = 2; //@line 6108
      break L6;
     } else if ((label | 0) == 14) {
      HEAP32[$frm_nxt >> 2] = $$145$lcssa73; //@line 6112
      $$0 = 1; //@line 6113
      break L6;
     }
    }
   } while (0);
   HEAP32[$frm_nxt >> 2] = $$1$lcssa; //@line 6118
   $$0 = ($$1$lcssa | 0) != ($frm_end | 0) & 1; //@line 6121
  }
 } while (0);
 if ((label | 0) == 29) {
  $$0 = ($64 | 0) != ($frm_end | 0) & 1; //@line 6127
 }
 STACKTOP = sp; //@line 6129
 return $$0 | 0; //@line 6129
}
function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $$01$i$i110 = 0, $$01$i$i6 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $100 = 0, $102 = 0, $103 = 0, $105 = 0, $107 = 0, $109 = 0, $117 = 0, $18 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $35 = 0, $40 = 0, $41 = 0, $48 = 0, $49 = 0, $5 = 0, $52 = 0, $54 = 0, $56 = 0, $63 = 0, $64 = 0, $65 = 0, $73 = 0, $77 = 0, $79 = 0, $8 = 0, $93 = 0, $94 = 0, $__dc$07 = 0, $__dc$1 = 0, $__dg$08 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$09 = 0, sp = 0;
 sp = STACKTOP; //@line 8521
 STACKTOP = STACKTOP + 16 | 0; //@line 8522
 $__grouping = sp; //@line 8523
 $0 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 9320) | 0; //@line 8524
 $1 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 9476) | 0; //@line 8525
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$1 >> 2] | 0) + 20 >> 2] & 63]($__grouping, $1); //@line 8529
 $5 = HEAP8[$__grouping >> 0] | 0; //@line 8530
 $8 = $__grouping + 4 | 0; //@line 8533
 if (!((($5 & 1) == 0 ? ($5 & 255) >>> 1 : HEAP32[$8 >> 2] | 0) | 0)) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 7]($0, $__nb, $__ne, $__ob) | 0; //@line 8543
  $18 = $__nb; //@line 8545
  $20 = $__ob + ($__ne - $18 << 2) | 0; //@line 8547
  HEAP32[$__oe >> 2] = $20; //@line 8548
  $$pre$phiZ2D = $18; //@line 8549
  $117 = $20; //@line 8549
 } else {
  HEAP32[$__oe >> 2] = $__ob; //@line 8551
  $21 = HEAP8[$__nb >> 0] | 0; //@line 8552
  switch ($21 << 24 >> 24) {
  case 43:
  case 45:
   {
    $26 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 44 >> 2] & 15]($0, $21) | 0; //@line 8559
    $27 = HEAP32[$__oe >> 2] | 0; //@line 8560
    HEAP32[$__oe >> 2] = $27 + 4; //@line 8562
    HEAP32[$27 >> 2] = $26; //@line 8563
    $__nf$0 = $__nb + 1 | 0; //@line 8564
    break;
   }
  default:
   {
    $__nf$0 = $__nb; //@line 8568
   }
  }
  L7 : do {
   if (($__ne - $__nf$0 | 0) > 1) {
    if ((HEAP8[$__nf$0 >> 0] | 0) == 48) {
     $35 = $__nf$0 + 1 | 0; //@line 8580
     switch (HEAP8[$35 >> 0] | 0) {
     case 88:
     case 120:
      {
       break;
      }
     default:
      {
       $__nf$1 = $__nf$0; //@line 8587
       break L7;
      }
     }
     $40 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 44 >> 2] & 15]($0, 48) | 0; //@line 8594
     $41 = HEAP32[$__oe >> 2] | 0; //@line 8595
     HEAP32[$__oe >> 2] = $41 + 4; //@line 8597
     HEAP32[$41 >> 2] = $40; //@line 8598
     $48 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 44 >> 2] & 15]($0, HEAP8[$35 >> 0] | 0) | 0; //@line 8604
     $49 = HEAP32[$__oe >> 2] | 0; //@line 8605
     HEAP32[$__oe >> 2] = $49 + 4; //@line 8607
     HEAP32[$49 >> 2] = $48; //@line 8608
     $__nf$1 = $__nf$0 + 2 | 0; //@line 8609
    } else {
     $__nf$1 = $__nf$0; //@line 8611
    }
   } else {
    $__nf$1 = $__nf$0; //@line 8614
   }
  } while (0);
  if (($__nf$1 | 0) != ($__ne | 0)) {
   $52 = $__ne + -1 | 0; //@line 8619
   if ($__nf$1 >>> 0 < $52 >>> 0) {
    $$01$i$i110 = $__nf$1; //@line 8622
    $56 = $52; //@line 8622
    do {
     $54 = HEAP8[$$01$i$i110 >> 0] | 0; //@line 8624
     HEAP8[$$01$i$i110 >> 0] = HEAP8[$56 >> 0] | 0; //@line 8626
     HEAP8[$56 >> 0] = $54; //@line 8627
     $$01$i$i110 = $$01$i$i110 + 1 | 0; //@line 8628
     $56 = $56 + -1 | 0; //@line 8629
    } while ($$01$i$i110 >>> 0 < $56 >>> 0);
   }
  }
  $63 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] & 63]($1) | 0; //@line 8642
  $64 = $__grouping + 8 | 0; //@line 8643
  $65 = $__grouping + 1 | 0; //@line 8644
  if ($__nf$1 >>> 0 < $__ne >>> 0) {
   $__dc$07 = 0; //@line 8647
   $__dg$08 = 0; //@line 8647
   $__p$09 = $__nf$1; //@line 8647
   while (1) {
    $73 = HEAP8[((HEAP8[$__grouping >> 0] & 1) == 0 ? $65 : HEAP32[$64 >> 2] | 0) + $__dg$08 >> 0] | 0; //@line 8655
    if ($73 << 24 >> 24 != 0 & ($__dc$07 | 0) == ($73 << 24 >> 24 | 0)) {
     $77 = HEAP32[$__oe >> 2] | 0; //@line 8661
     HEAP32[$__oe >> 2] = $77 + 4; //@line 8663
     HEAP32[$77 >> 2] = $63; //@line 8664
     $79 = HEAP8[$__grouping >> 0] | 0; //@line 8665
     $__dc$1 = 0; //@line 8676
     $__dg$1 = ($__dg$08 >>> 0 < ((($79 & 1) == 0 ? ($79 & 255) >>> 1 : HEAP32[$8 >> 2] | 0) + -1 | 0) >>> 0 & 1) + $__dg$08 | 0; //@line 8676
    } else {
     $__dc$1 = $__dc$07; //@line 8678
     $__dg$1 = $__dg$08; //@line 8678
    }
    $93 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 44 >> 2] & 15]($0, HEAP8[$__p$09 >> 0] | 0) | 0; //@line 8684
    $94 = HEAP32[$__oe >> 2] | 0; //@line 8685
    HEAP32[$__oe >> 2] = $94 + 4; //@line 8687
    HEAP32[$94 >> 2] = $93; //@line 8688
    $__p$09 = $__p$09 + 1 | 0; //@line 8690
    if ($__p$09 >>> 0 >= $__ne >>> 0) {
     break;
    } else {
     $__dc$07 = $__dc$1 + 1 | 0; //@line 8693
     $__dg$08 = $__dg$1; //@line 8693
    }
   }
  }
  $100 = $__nb; //@line 8700
  $102 = $__ob + ($__nf$1 - $100 << 2) | 0; //@line 8702
  $103 = HEAP32[$__oe >> 2] | 0; //@line 8703
  if (($102 | 0) == ($103 | 0)) {
   $$pre$phiZ2D = $100; //@line 8706
   $117 = $102; //@line 8706
  } else {
   $105 = $103 + -4 | 0; //@line 8708
   if ($102 >>> 0 < $105 >>> 0) {
    $$01$i$i6 = $102; //@line 8711
    $109 = $105; //@line 8711
    do {
     $107 = HEAP32[$$01$i$i6 >> 2] | 0; //@line 8713
     HEAP32[$$01$i$i6 >> 2] = HEAP32[$109 >> 2]; //@line 8715
     HEAP32[$109 >> 2] = $107; //@line 8716
     $$01$i$i6 = $$01$i$i6 + 4 | 0; //@line 8717
     $109 = $109 + -4 | 0; //@line 8718
    } while ($$01$i$i6 >>> 0 < $109 >>> 0);
    $$pre$phiZ2D = $100; //@line 8723
    $117 = $103; //@line 8723
   } else {
    $$pre$phiZ2D = $100; //@line 8728
    $117 = $103; //@line 8728
   }
  }
 }
 HEAP32[$__op >> 2] = ($__np | 0) == ($__ne | 0) ? $117 : $__ob + ($__np - $$pre$phiZ2D << 2) | 0; //@line 8737
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping); //@line 8738
 STACKTOP = sp; //@line 8739
 return;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this, $st, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $st = $st | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $$0 = 0, $$01$be = 0, $$0143 = 0, $$0143$lcssa = 0, $$02$be = 0, $$0242 = 0, $$0242$lcssa = 0, $$1$lcssa = 0, $$128 = 0, $14 = 0, $15 = 0, $26 = 0, $27 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $40 = 0, $44 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $60 = 0, $61 = 0, $66 = 0, $72 = 0, $9 = 0, $fend$0$lcssa = 0, $fend$048 = 0, $fend$1$be = 0, $fend$144 = 0, $fend$2$lcssa = 0, $fend$235 = 0, $n$032 = 0, $p$033 = 0, $save_state = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5656
 STACKTOP = STACKTOP + 16 | 0; //@line 5657
 $save_state = sp; //@line 5658
 $tmp = sp + 8 | 0; //@line 5659
 L1 : do {
  if (($frm | 0) == ($frm_end | 0)) {
   $fend$0$lcssa = $frm_end; //@line 5663
  } else {
   $fend$048 = $frm; //@line 5665
   while (1) {
    if (!(HEAP32[$fend$048 >> 2] | 0)) {
     $fend$0$lcssa = $fend$048; //@line 5670
     break L1;
    }
    $fend$048 = $fend$048 + 4 | 0; //@line 5673
    if (($fend$048 | 0) == ($frm_end | 0)) {
     $fend$0$lcssa = $frm_end; //@line 5676
     break;
    }
   }
  }
 } while (0);
 HEAP32[$to_nxt >> 2] = $to; //@line 5684
 HEAP32[$frm_nxt >> 2] = $frm; //@line 5685
 $5 = $to_end; //@line 5686
 $6 = $this + 8 | 0; //@line 5687
 L6 : do {
  if (($to | 0) == ($to_end | 0) | ($frm | 0) == ($frm_end | 0)) {
   $72 = $frm; //@line 5693
   label = 29; //@line 5694
  } else {
   $$0143 = $frm; //@line 5696
   $$0242 = $to; //@line 5696
   $fend$144 = $fend$0$lcssa; //@line 5696
   L7 : while (1) {
    $9 = $st; //@line 5698
    $14 = HEAP32[$9 + 4 >> 2] | 0; //@line 5703
    $15 = $save_state; //@line 5704
    HEAP32[$15 >> 2] = HEAP32[$9 >> 2]; //@line 5706
    HEAP32[$15 + 4 >> 2] = $14; //@line 5709
    $26 = _uselocale(HEAP32[$6 >> 2] | 0) | 0; //@line 5717
    $27 = _wcsnrtombs($$0242, $frm_nxt, $fend$144 - $$0143 >> 2, $5 - $$0242 | 0, $st) | 0; //@line 5718
    if ($26) {
     _uselocale($26) | 0; //@line 5721
    }
    switch ($27 | 0) {
    case 0:
     {
      $$0 = 1; //@line 5725
      break L6;
      break;
     }
    case -1:
     {
      $$0143$lcssa = $$0143; //@line 5730
      $$0242$lcssa = $$0242; //@line 5730
      break L7;
      break;
     }
    default:
     {}
    }
    $44 = (HEAP32[$to_nxt >> 2] | 0) + $27 | 0; //@line 5738
    HEAP32[$to_nxt >> 2] = $44; //@line 5739
    if (($44 | 0) == ($to_end | 0)) {
     label = 15; //@line 5742
     break;
    }
    if (($fend$144 | 0) == ($frm_end | 0)) {
     $$01$be = HEAP32[$frm_nxt >> 2] | 0; //@line 5748
     $$02$be = $44; //@line 5748
     $fend$1$be = $frm_end; //@line 5748
    } else {
     $50 = _uselocale(HEAP32[$6 >> 2] | 0) | 0; //@line 5751
     $51 = _wcrtomb($tmp, 0, $st) | 0; //@line 5752
     if ($50) {
      _uselocale($50) | 0; //@line 5755
     }
     if (($51 | 0) == -1) {
      $$0 = 2; //@line 5759
      break L6;
     }
     if ($51 >>> 0 > ($5 - (HEAP32[$to_nxt >> 2] | 0) | 0) >>> 0) {
      $$0 = 1; //@line 5767
      break L6;
     }
     if ($51) {
      $n$032 = $51; //@line 5772
      $p$033 = $tmp; //@line 5772
      while (1) {
       $60 = HEAP8[$p$033 >> 0] | 0; //@line 5775
       $61 = HEAP32[$to_nxt >> 2] | 0; //@line 5776
       HEAP32[$to_nxt >> 2] = $61 + 1; //@line 5778
       HEAP8[$61 >> 0] = $60; //@line 5779
       $n$032 = $n$032 + -1 | 0; //@line 5780
       if (!$n$032) {
        break;
       } else {
        $p$033 = $p$033 + 1 | 0; //@line 5785
       }
      }
     }
     $66 = (HEAP32[$frm_nxt >> 2] | 0) + 4 | 0; //@line 5790
     HEAP32[$frm_nxt >> 2] = $66; //@line 5791
     L26 : do {
      if (($66 | 0) == ($frm_end | 0)) {
       $fend$2$lcssa = $frm_end; //@line 5795
      } else {
       $fend$235 = $66; //@line 5797
       while (1) {
        if (!(HEAP32[$fend$235 >> 2] | 0)) {
         $fend$2$lcssa = $fend$235; //@line 5802
         break L26;
        }
        $fend$235 = $fend$235 + 4 | 0; //@line 5805
        if (($fend$235 | 0) == ($frm_end | 0)) {
         $fend$2$lcssa = $frm_end; //@line 5808
         break;
        }
       }
      }
     } while (0);
     $$01$be = $66; //@line 5817
     $$02$be = HEAP32[$to_nxt >> 2] | 0; //@line 5817
     $fend$1$be = $fend$2$lcssa; //@line 5817
    }
    if (($$02$be | 0) == ($to_end | 0) | ($$01$be | 0) == ($frm_end | 0)) {
     $72 = $$01$be; //@line 5823
     label = 29; //@line 5824
     break L6;
    } else {
     $$0143 = $$01$be; //@line 5827
     $$0242 = $$02$be; //@line 5827
     $fend$144 = $fend$1$be; //@line 5827
    }
   }
   if ((label | 0) == 15) {
    $72 = HEAP32[$frm_nxt >> 2] | 0; //@line 5832
    label = 29; //@line 5833
    break;
   }
   HEAP32[$to_nxt >> 2] = $$0242$lcssa; //@line 5836
   L35 : do {
    if (($$0143$lcssa | 0) == (HEAP32[$frm_nxt >> 2] | 0)) {
     $$1$lcssa = $$0143$lcssa; //@line 5841
    } else {
     $$128 = $$0143$lcssa; //@line 5843
     $34 = $$0242$lcssa; //@line 5843
     while (1) {
      $31 = HEAP32[$$128 >> 2] | 0; //@line 5845
      $33 = _uselocale(HEAP32[$6 >> 2] | 0) | 0; //@line 5847
      $35 = _wcrtomb($34, $31, $save_state) | 0; //@line 5848
      if ($33) {
       _uselocale($33) | 0; //@line 5851
      }
      if (($35 | 0) == -1) {
       $$1$lcssa = $$128; //@line 5855
       break L35;
      }
      $34 = (HEAP32[$to_nxt >> 2] | 0) + $35 | 0; //@line 5859
      HEAP32[$to_nxt >> 2] = $34; //@line 5860
      $40 = $$128 + 4 | 0; //@line 5861
      if (($40 | 0) == (HEAP32[$frm_nxt >> 2] | 0)) {
       $$1$lcssa = $40; //@line 5865
       break;
      } else {
       $$128 = $40; //@line 5868
      }
     }
    }
   } while (0);
   HEAP32[$frm_nxt >> 2] = $$1$lcssa; //@line 5873
   $$0 = 2; //@line 5874
  }
 } while (0);
 if ((label | 0) == 29) {
  $$0 = ($72 | 0) != ($frm_end | 0) & 1; //@line 5880
 }
 STACKTOP = sp; //@line 5882
 return $$0 | 0; //@line 5882
}
function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $$01$i$i111 = 0, $$01$i$i7 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $100 = 0, $102 = 0, $103 = 0, $105 = 0, $107 = 0, $109 = 0, $117 = 0, $18 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $35 = 0, $40 = 0, $41 = 0, $48 = 0, $49 = 0, $5 = 0, $52 = 0, $54 = 0, $56 = 0, $63 = 0, $64 = 0, $65 = 0, $73 = 0, $77 = 0, $79 = 0, $8 = 0, $93 = 0, $94 = 0, $__dc$08 = 0, $__dc$1 = 0, $__dg$09 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$010 = 0, sp = 0;
 sp = STACKTOP; //@line 7270
 STACKTOP = STACKTOP + 16 | 0; //@line 7271
 $__grouping = sp; //@line 7272
 $0 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 9328) | 0; //@line 7273
 $1 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 9468) | 0; //@line 7274
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$1 >> 2] | 0) + 20 >> 2] & 63]($__grouping, $1); //@line 7278
 $5 = HEAP8[$__grouping >> 0] | 0; //@line 7279
 $8 = $__grouping + 4 | 0; //@line 7282
 if (!((($5 & 1) == 0 ? ($5 & 255) >>> 1 : HEAP32[$8 >> 2] | 0) | 0)) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] & 7]($0, $__nb, $__ne, $__ob) | 0; //@line 7292
  $18 = $__nb; //@line 7294
  $20 = $__ob + ($__ne - $18) | 0; //@line 7296
  HEAP32[$__oe >> 2] = $20; //@line 7297
  $$pre$phiZ2D = $18; //@line 7298
  $117 = $20; //@line 7298
 } else {
  HEAP32[$__oe >> 2] = $__ob; //@line 7300
  $21 = HEAP8[$__nb >> 0] | 0; //@line 7301
  switch ($21 << 24 >> 24) {
  case 43:
  case 45:
   {
    $26 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] & 15]($0, $21) | 0; //@line 7308
    $27 = HEAP32[$__oe >> 2] | 0; //@line 7309
    HEAP32[$__oe >> 2] = $27 + 1; //@line 7311
    HEAP8[$27 >> 0] = $26; //@line 7312
    $__nf$0 = $__nb + 1 | 0; //@line 7313
    break;
   }
  default:
   {
    $__nf$0 = $__nb; //@line 7317
   }
  }
  L7 : do {
   if (($__ne - $__nf$0 | 0) > 1) {
    if ((HEAP8[$__nf$0 >> 0] | 0) == 48) {
     $35 = $__nf$0 + 1 | 0; //@line 7329
     switch (HEAP8[$35 >> 0] | 0) {
     case 88:
     case 120:
      {
       break;
      }
     default:
      {
       $__nf$1 = $__nf$0; //@line 7336
       break L7;
      }
     }
     $40 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] & 15]($0, 48) | 0; //@line 7343
     $41 = HEAP32[$__oe >> 2] | 0; //@line 7344
     HEAP32[$__oe >> 2] = $41 + 1; //@line 7346
     HEAP8[$41 >> 0] = $40; //@line 7347
     $48 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] & 15]($0, HEAP8[$35 >> 0] | 0) | 0; //@line 7353
     $49 = HEAP32[$__oe >> 2] | 0; //@line 7354
     HEAP32[$__oe >> 2] = $49 + 1; //@line 7356
     HEAP8[$49 >> 0] = $48; //@line 7357
     $__nf$1 = $__nf$0 + 2 | 0; //@line 7358
    } else {
     $__nf$1 = $__nf$0; //@line 7360
    }
   } else {
    $__nf$1 = $__nf$0; //@line 7363
   }
  } while (0);
  if (($__nf$1 | 0) != ($__ne | 0)) {
   $52 = $__ne + -1 | 0; //@line 7368
   if ($__nf$1 >>> 0 < $52 >>> 0) {
    $$01$i$i111 = $__nf$1; //@line 7371
    $56 = $52; //@line 7371
    do {
     $54 = HEAP8[$$01$i$i111 >> 0] | 0; //@line 7373
     HEAP8[$$01$i$i111 >> 0] = HEAP8[$56 >> 0] | 0; //@line 7375
     HEAP8[$56 >> 0] = $54; //@line 7376
     $$01$i$i111 = $$01$i$i111 + 1 | 0; //@line 7377
     $56 = $56 + -1 | 0; //@line 7378
    } while ($$01$i$i111 >>> 0 < $56 >>> 0);
   }
  }
  $63 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] & 63]($1) | 0; //@line 7391
  $64 = $__grouping + 8 | 0; //@line 7392
  $65 = $__grouping + 1 | 0; //@line 7393
  if ($__nf$1 >>> 0 < $__ne >>> 0) {
   $__dc$08 = 0; //@line 7396
   $__dg$09 = 0; //@line 7396
   $__p$010 = $__nf$1; //@line 7396
   while (1) {
    $73 = HEAP8[((HEAP8[$__grouping >> 0] & 1) == 0 ? $65 : HEAP32[$64 >> 2] | 0) + $__dg$09 >> 0] | 0; //@line 7404
    if ($73 << 24 >> 24 != 0 & ($__dc$08 | 0) == ($73 << 24 >> 24 | 0)) {
     $77 = HEAP32[$__oe >> 2] | 0; //@line 7410
     HEAP32[$__oe >> 2] = $77 + 1; //@line 7412
     HEAP8[$77 >> 0] = $63; //@line 7413
     $79 = HEAP8[$__grouping >> 0] | 0; //@line 7414
     $__dc$1 = 0; //@line 7425
     $__dg$1 = ($__dg$09 >>> 0 < ((($79 & 1) == 0 ? ($79 & 255) >>> 1 : HEAP32[$8 >> 2] | 0) + -1 | 0) >>> 0 & 1) + $__dg$09 | 0; //@line 7425
    } else {
     $__dc$1 = $__dc$08; //@line 7427
     $__dg$1 = $__dg$09; //@line 7427
    }
    $93 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] & 15]($0, HEAP8[$__p$010 >> 0] | 0) | 0; //@line 7433
    $94 = HEAP32[$__oe >> 2] | 0; //@line 7434
    HEAP32[$__oe >> 2] = $94 + 1; //@line 7436
    HEAP8[$94 >> 0] = $93; //@line 7437
    $__p$010 = $__p$010 + 1 | 0; //@line 7439
    if ($__p$010 >>> 0 >= $__ne >>> 0) {
     break;
    } else {
     $__dc$08 = $__dc$1 + 1 | 0; //@line 7442
     $__dg$09 = $__dg$1; //@line 7442
    }
   }
  }
  $100 = $__nb; //@line 7449
  $102 = $__ob + ($__nf$1 - $100) | 0; //@line 7451
  $103 = HEAP32[$__oe >> 2] | 0; //@line 7452
  if (($102 | 0) == ($103 | 0)) {
   $$pre$phiZ2D = $100; //@line 7455
   $117 = $102; //@line 7455
  } else {
   $105 = $103 + -1 | 0; //@line 7457
   if ($102 >>> 0 < $105 >>> 0) {
    $$01$i$i7 = $102; //@line 7460
    $109 = $105; //@line 7460
    do {
     $107 = HEAP8[$$01$i$i7 >> 0] | 0; //@line 7462
     HEAP8[$$01$i$i7 >> 0] = HEAP8[$109 >> 0] | 0; //@line 7464
     HEAP8[$109 >> 0] = $107; //@line 7465
     $$01$i$i7 = $$01$i$i7 + 1 | 0; //@line 7466
     $109 = $109 + -1 | 0; //@line 7467
    } while ($$01$i$i7 >>> 0 < $109 >>> 0);
   }
   $$pre$phiZ2D = $100; //@line 7477
   $117 = HEAP32[$__oe >> 2] | 0; //@line 7477
  }
 }
 HEAP32[$__op >> 2] = ($__np | 0) == ($__ne | 0) ? $117 : $__ob + ($__np - $$pre$phiZ2D) | 0; //@line 7485
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping); //@line 7486
 STACKTOP = sp; //@line 7487
 return;
}
function __ZNSt3__16locale5__impC2Ej($this, $refs) {
 $this = $this | 0;
 $refs = $refs | 0;
 var $$lcssa = 0, $$pre$i$i$i = 0, $2 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0;
 HEAP32[$this + 4 >> 2] = $refs + -1; //@line 4636
 HEAP32[$this >> 2] = 9304; //@line 4637
 $2 = $this + 8 | 0; //@line 4638
 __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej($2, 28); //@line 4639
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this + 144 | 0, 21583, 1); //@line 4641
 $4 = HEAP32[$2 >> 2] | 0; //@line 4642
 $5 = $this + 12 | 0; //@line 4643
 $$pre$i$i$i = HEAP32[$5 >> 2] | 0; //@line 4644
 if (($$pre$i$i$i | 0) != ($4 | 0)) {
  $8 = $$pre$i$i$i; //@line 4647
  while (1) {
   $7 = $8 + -4 | 0; //@line 4649
   if (($7 | 0) == ($4 | 0)) {
    $$lcssa = $7; //@line 4652
    break;
   } else {
    $8 = $7; //@line 4655
   }
  }
  HEAP32[$5 >> 2] = $$lcssa; //@line 4658
 }
 HEAP32[319] = 0; //@line 4660
 HEAP32[318] = 8232; //@line 4661
 __ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_($this, 1272); //@line 4662
 HEAP32[321] = 0; //@line 4663
 HEAP32[320] = 8272; //@line 4664
 __ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_($this, 1280); //@line 4665
 __ZNSt3__15ctypeIcEC2EPKtbj(1288, 0, 0, 1); //@line 4666
 __ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_($this, 1288); //@line 4667
 HEAP32[327] = 0; //@line 4668
 HEAP32[326] = 9592; //@line 4669
 __ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_($this, 1304); //@line 4670
 HEAP32[329] = 0; //@line 4671
 HEAP32[328] = 9660; //@line 4672
 __ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($this, 1312); //@line 4673
 HEAP32[331] = 0; //@line 4674
 HEAP32[330] = 9412; //@line 4675
 HEAP32[332] = __ZNSt3__16__clocEv() | 0; //@line 4677
 __ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($this, 1320); //@line 4678
 HEAP32[335] = 0; //@line 4679
 HEAP32[334] = 9708; //@line 4680
 __ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($this, 1336); //@line 4681
 HEAP32[337] = 0; //@line 4682
 HEAP32[336] = 9756; //@line 4683
 __ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($this, 1344); //@line 4684
 __ZNSt3__18numpunctIcEC2Ej(1352, 1); //@line 4685
 __ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_($this, 1352); //@line 4686
 __ZNSt3__18numpunctIwEC2Ej(1376, 1); //@line 4687
 __ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_($this, 1376); //@line 4688
 HEAP32[353] = 0; //@line 4689
 HEAP32[352] = 8312; //@line 4690
 __ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, 1408); //@line 4691
 HEAP32[355] = 0; //@line 4692
 HEAP32[354] = 8384; //@line 4693
 __ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, 1416); //@line 4694
 HEAP32[357] = 0; //@line 4695
 HEAP32[356] = 8456; //@line 4696
 __ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, 1424); //@line 4697
 HEAP32[359] = 0; //@line 4698
 HEAP32[358] = 8516; //@line 4699
 __ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, 1432); //@line 4700
 HEAP32[361] = 0; //@line 4701
 HEAP32[360] = 8824; //@line 4702
 __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($this, 1440); //@line 4703
 HEAP32[363] = 0; //@line 4704
 HEAP32[362] = 8888; //@line 4705
 __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($this, 1448); //@line 4706
 HEAP32[365] = 0; //@line 4707
 HEAP32[364] = 8952; //@line 4708
 __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($this, 1456); //@line 4709
 HEAP32[367] = 0; //@line 4710
 HEAP32[366] = 9016; //@line 4711
 __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($this, 1464); //@line 4712
 HEAP32[369] = 0; //@line 4713
 HEAP32[368] = 9080; //@line 4714
 __ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, 1472); //@line 4715
 HEAP32[371] = 0; //@line 4716
 HEAP32[370] = 9116; //@line 4717
 __ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, 1480); //@line 4718
 HEAP32[373] = 0; //@line 4719
 HEAP32[372] = 9152; //@line 4720
 __ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, 1488); //@line 4721
 HEAP32[375] = 0; //@line 4722
 HEAP32[374] = 9188; //@line 4723
 __ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, 1496); //@line 4724
 HEAP32[377] = 0; //@line 4725
 HEAP32[376] = 8576; //@line 4726
 HEAP32[378] = 8624; //@line 4727
 __ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, 1504); //@line 4728
 HEAP32[381] = 0; //@line 4729
 HEAP32[380] = 8668; //@line 4730
 HEAP32[382] = 8716; //@line 4731
 __ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, 1520); //@line 4732
 HEAP32[385] = 0; //@line 4733
 HEAP32[384] = 9572; //@line 4734
 HEAP32[386] = __ZNSt3__16__clocEv() | 0; //@line 4736
 HEAP32[384] = 8760; //@line 4737
 __ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, 1536); //@line 4738
 HEAP32[389] = 0; //@line 4739
 HEAP32[388] = 9572; //@line 4740
 HEAP32[390] = __ZNSt3__16__clocEv() | 0; //@line 4742
 HEAP32[388] = 8792; //@line 4743
 __ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, 1552); //@line 4744
 HEAP32[393] = 0; //@line 4745
 HEAP32[392] = 9224; //@line 4746
 __ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_($this, 1568); //@line 4747
 HEAP32[395] = 0; //@line 4748
 HEAP32[394] = 9264; //@line 4749
 __ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_($this, 1576); //@line 4750
 return;
}
function __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$0 = 0, $$lcssa = 0, $$pre = 0, $$pre$phiZ2D = 0, $101 = 0, $107 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $3 = 0, $34 = 0, $40 = 0, $48 = 0, $50 = 0, $57 = 0, $67 = 0, $75 = 0, $77 = 0, $79 = 0, $85 = 0, $88 = 0, label = 0;
 HEAP32[$frm_nxt >> 2] = $frm; //@line 16435
 HEAP32[$to_nxt >> 2] = $to; //@line 16436
 if (!($mode & 4)) {
  $$pre = $to; //@line 16441
  $$pre$phiZ2D = $frm_end; //@line 16441
 } else {
  $2 = HEAP32[$frm_nxt >> 2] | 0; //@line 16443
  $3 = $frm_end; //@line 16444
  if (($3 - $2 | 0) > 2) {
   if ((HEAP8[$2 >> 0] | 0) == -17) {
    if ((HEAP8[$2 + 1 >> 0] | 0) == -69) {
     if ((HEAP8[$2 + 2 >> 0] | 0) == -65) {
      HEAP32[$frm_nxt >> 2] = $2 + 3; //@line 16461
      $$pre = HEAP32[$to_nxt >> 2] | 0; //@line 16463
      $$pre$phiZ2D = $3; //@line 16463
     } else {
      $$pre = $to; //@line 16465
      $$pre$phiZ2D = $3; //@line 16465
     }
    } else {
     $$pre = $to; //@line 16468
     $$pre$phiZ2D = $3; //@line 16468
    }
   } else {
    $$pre = $to; //@line 16471
    $$pre$phiZ2D = $3; //@line 16471
   }
  } else {
   $$pre = $to; //@line 16474
   $$pre$phiZ2D = $3; //@line 16474
  }
 }
 $16 = HEAP32[$frm_nxt >> 2] | 0; //@line 16477
 $17 = $16 >>> 0 < $frm_end >>> 0; //@line 16478
 L9 : do {
  if ($17 & $$pre >>> 0 < $to_end >>> 0) {
   $21 = $16; //@line 16483
   $25 = $$pre; //@line 16483
   while (1) {
    $20 = HEAP8[$21 >> 0] | 0; //@line 16485
    $22 = $20 & 255; //@line 16486
    do {
     if ($20 << 24 >> 24 > -1) {
      if ($22 >>> 0 > $Maxcode >>> 0) {
       $$0 = 2; //@line 16492
       break L9;
      }
      HEAP32[$25 >> 2] = $22; //@line 16495
      HEAP32[$frm_nxt >> 2] = $21 + 1; //@line 16497
     } else {
      if (($20 & 255) < 194) {
       $$0 = 2; //@line 16501
       break L9;
      }
      if (($20 & 255) < 224) {
       if (($$pre$phiZ2D - $21 | 0) < 2) {
        $$0 = 1; //@line 16510
        break L9;
       }
       $34 = HEAPU8[$21 + 1 >> 0] | 0; //@line 16515
       if (($34 & 192 | 0) != 128) {
        $$0 = 2; //@line 16519
        break L9;
       }
       $40 = $34 & 63 | $22 << 6 & 1984; //@line 16525
       if ($40 >>> 0 > $Maxcode >>> 0) {
        $$0 = 2; //@line 16528
        break L9;
       }
       HEAP32[$25 >> 2] = $40; //@line 16531
       HEAP32[$frm_nxt >> 2] = $21 + 2; //@line 16533
       break;
      }
      if (($20 & 255) < 240) {
       if (($$pre$phiZ2D - $21 | 0) < 3) {
        $$0 = 1; //@line 16542
        break L9;
       }
       $48 = HEAP8[$21 + 1 >> 0] | 0; //@line 16546
       $50 = HEAP8[$21 + 2 >> 0] | 0; //@line 16548
       switch ($22 | 0) {
       case 224:
        {
         if (($48 & -32) << 24 >> 24 != -96) {
          $$0 = 2; //@line 16554
          break L9;
         }
         break;
        }
       case 237:
        {
         if (($48 & -32) << 24 >> 24 != -128) {
          $$0 = 2; //@line 16563
          break L9;
         }
         break;
        }
       default:
        {
         if (($48 & -64) << 24 >> 24 != -128) {
          $$0 = 2; //@line 16572
          break L9;
         }
        }
       }
       $57 = $50 & 255; //@line 16577
       if (($57 & 192 | 0) != 128) {
        $$0 = 2; //@line 16581
        break L9;
       }
       $67 = ($48 & 255) << 6 & 4032 | $22 << 12 & 61440 | $57 & 63; //@line 16591
       if ($67 >>> 0 > $Maxcode >>> 0) {
        $$0 = 2; //@line 16594
        break L9;
       }
       HEAP32[$25 >> 2] = $67; //@line 16597
       HEAP32[$frm_nxt >> 2] = $21 + 3; //@line 16599
       break;
      }
      if (($20 & 255) >= 245) {
       $$0 = 2; //@line 16604
       break L9;
      }
      if (($$pre$phiZ2D - $21 | 0) < 4) {
       $$0 = 1; //@line 16611
       break L9;
      }
      $75 = HEAP8[$21 + 1 >> 0] | 0; //@line 16615
      $77 = HEAP8[$21 + 2 >> 0] | 0; //@line 16617
      $79 = HEAP8[$21 + 3 >> 0] | 0; //@line 16619
      switch ($22 | 0) {
      case 240:
       {
        if (($75 + 112 & 255) >= 48) {
         $$0 = 2; //@line 16625
         break L9;
        }
        break;
       }
      case 244:
       {
        if (($75 & -16) << 24 >> 24 != -128) {
         $$0 = 2; //@line 16634
         break L9;
        }
        break;
       }
      default:
       {
        if (($75 & -64) << 24 >> 24 != -128) {
         $$0 = 2; //@line 16643
         break L9;
        }
       }
      }
      $85 = $77 & 255; //@line 16648
      if (($85 & 192 | 0) != 128) {
       $$0 = 2; //@line 16652
       break L9;
      }
      $88 = $79 & 255; //@line 16655
      if (($88 & 192 | 0) != 128) {
       $$0 = 2; //@line 16659
       break L9;
      }
      $101 = ($75 & 255) << 12 & 258048 | $22 << 18 & 1835008 | $85 << 6 & 4032 | $88 & 63; //@line 16672
      if ($101 >>> 0 > $Maxcode >>> 0) {
       $$0 = 2; //@line 16675
       break L9;
      }
      HEAP32[$25 >> 2] = $101; //@line 16678
      HEAP32[$frm_nxt >> 2] = $21 + 4; //@line 16680
     }
    } while (0);
    $25 = (HEAP32[$to_nxt >> 2] | 0) + 4 | 0; //@line 16684
    HEAP32[$to_nxt >> 2] = $25; //@line 16685
    $21 = HEAP32[$frm_nxt >> 2] | 0; //@line 16686
    $107 = $21 >>> 0 < $frm_end >>> 0; //@line 16687
    if (!($107 & $25 >>> 0 < $to_end >>> 0)) {
     $$lcssa = $107; //@line 16693
     label = 38; //@line 16694
     break;
    }
   }
  } else {
   $$lcssa = $17; //@line 16699
   label = 38; //@line 16700
  }
 } while (0);
 if ((label | 0) == 38) {
  $$0 = $$lcssa & 1; //@line 16705
 }
 return $$0 | 0; //@line 16707
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($this, $__s, $__intl, $__iob, $__fl, $__units) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__units = +$__units;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $12 = 0, $13 = 0, $14 = 0, $29 = 0, $3 = 0, $30 = 0, $34 = 0, $4 = 0, $42 = 0, $5 = 0, $54 = 0, $62 = 0, $74 = 0, $76 = 0, $85 = 0, $86 = 0, $87 = 0, $89 = 0, $9 = 0, $91 = 0, $93 = 0, $96 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 3268
 STACKTOP = STACKTOP + 992 | 0; //@line 3269
 $$byval_copy = sp + 8 | 0; //@line 3270
 $vararg_buffer1 = sp; //@line 3271
 $__buf = sp + 888 | 0; //@line 3272
 $__bb = sp + 880 | 0; //@line 3273
 $__digits = sp + 480 | 0; //@line 3274
 $__loc = sp + 76 | 0; //@line 3275
 $__pat = sp + 884 | 0; //@line 3276
 $__dp = sp + 72 | 0; //@line 3277
 $__ts = sp + 68 | 0; //@line 3278
 $__grp = sp + 56 | 0; //@line 3279
 $__sym = sp + 44 | 0; //@line 3280
 $__sn = sp + 32 | 0; //@line 3281
 $__fd = sp + 28 | 0; //@line 3282
 $__mbuf = sp + 80 | 0; //@line 3283
 $__mi = sp + 24 | 0; //@line 3284
 $__me = sp + 20 | 0; //@line 3285
 $0 = sp + 16 | 0; //@line 3286
 HEAP32[$__bb >> 2] = $__buf; //@line 3287
 HEAPF64[$$byval_copy >> 3] = $__units; //@line 3288
 $1 = _snprintf($__buf, 100, 21679, $$byval_copy) | 0; //@line 3289
 if ($1 >>> 0 > 99) {
  $3 = __ZNSt3__16__clocEv() | 0; //@line 3292
  HEAPF64[$vararg_buffer1 >> 3] = $__units; //@line 3293
  $4 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__bb, $3, 21679, $vararg_buffer1) | 0; //@line 3294
  $5 = HEAP32[$__bb >> 2] | 0; //@line 3295
  if (!$5) {
   __ZSt17__throw_bad_allocv(); //@line 3298
  }
  $9 = _malloc($4 << 2) | 0; //@line 3303
  if (!$9) {
   __ZSt17__throw_bad_allocv(); //@line 3307
  } else {
   $93 = $9; //@line 3310
   $96 = $5; //@line 3310
   $__db$0 = $9; //@line 3310
   $__n$0 = $4; //@line 3310
  }
 } else {
  $93 = 0; //@line 3313
  $96 = 0; //@line 3313
  $__db$0 = $__digits; //@line 3313
  $__n$0 = $1; //@line 3313
 }
 $12 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 3315
 HEAP32[$__loc >> 2] = $12; //@line 3316
 $13 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 9320) | 0; //@line 3317
 $14 = HEAP32[$__bb >> 2] | 0; //@line 3318
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$13 >> 2] | 0) + 48 >> 2] & 7]($13, $14, $14 + $__n$0 | 0, $__db$0) | 0; //@line 3323
 if (!$__n$0) {
  $29 = 0; //@line 3326
 } else {
  $29 = (HEAP8[HEAP32[$__bb >> 2] >> 0] | 0) == 45; //@line 3331
 }
 HEAP32[$__grp >> 2] = 0; //@line 3333
 HEAP32[$__grp + 4 >> 2] = 0; //@line 3335
 HEAP32[$__grp + 8 >> 2] = 0; //@line 3337
 HEAP32[$__sym >> 2] = 0; //@line 3338
 HEAP32[$__sym + 4 >> 2] = 0; //@line 3340
 HEAP32[$__sym + 8 >> 2] = 0; //@line 3342
 HEAP32[$__sn >> 2] = 0; //@line 3343
 HEAP32[$__sn + 4 >> 2] = 0; //@line 3345
 HEAP32[$__sn + 8 >> 2] = 0; //@line 3347
 __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl, $29, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd); //@line 3348
 $30 = HEAP32[$__fd >> 2] | 0; //@line 3349
 if (($__n$0 | 0) > ($30 | 0)) {
  $34 = HEAP8[$__sn >> 0] | 0; //@line 3354
  $42 = HEAP8[$__sym >> 0] | 0; //@line 3362
  $74 = ($__n$0 - $30 << 1 | 1) + $30 + (($34 & 1) == 0 ? ($34 & 255) >>> 1 : HEAP32[$__sn + 4 >> 2] | 0) + (($42 & 1) == 0 ? ($42 & 255) >>> 1 : HEAP32[$__sym + 4 >> 2] | 0) | 0; //@line 3374
 } else {
  $54 = HEAP8[$__sn >> 0] | 0; //@line 3376
  $62 = HEAP8[$__sym >> 0] | 0; //@line 3384
  $74 = $30 + 2 + (($54 & 1) == 0 ? ($54 & 255) >>> 1 : HEAP32[$__sn + 4 >> 2] | 0) + (($62 & 1) == 0 ? ($62 & 255) >>> 1 : HEAP32[$__sym + 4 >> 2] | 0) | 0; //@line 3395
 }
 if ($74 >>> 0 > 100) {
  $76 = _malloc($74 << 2) | 0; //@line 3400
  if (!$76) {
   __ZSt17__throw_bad_allocv(); //@line 3404
  } else {
   $89 = $76; //@line 3407
   $__mb$0 = $76; //@line 3407
  }
 } else {
  $89 = 0; //@line 3410
  $__mb$0 = $__mbuf; //@line 3410
 }
 __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb$0, $__mi, $__me, HEAP32[$__iob + 4 >> 2] | 0, $__db$0, $__db$0 + ($__n$0 << 2) | 0, $13, $29, $__pat, HEAP32[$__dp >> 2] | 0, HEAP32[$__ts >> 2] | 0, $__grp, $__sym, $__sn, $30); //@line 3417
 HEAP32[$0 >> 2] = HEAP32[$__s >> 2]; //@line 3419
 $85 = HEAP32[$__mi >> 2] | 0; //@line 3420
 $86 = HEAP32[$__me >> 2] | 0; //@line 3421
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 3422
 $87 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__mb$0, $85, $86, $__iob, $__fl) | 0; //@line 3423
 if (!$89) {
  $91 = $12; //@line 3426
 } else {
  _free($89); //@line 3429
  $91 = HEAP32[$__loc >> 2] | 0; //@line 3431
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn); //@line 3433
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym); //@line 3434
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp); //@line 3435
 __ZNSt3__114__shared_count16__release_sharedEv($91) | 0; //@line 3436
 if ($93) {
  _free($93); //@line 3440
 }
 if ($96) {
  _free($96); //@line 3445
 }
 STACKTOP = sp; //@line 3447
 return $87 | 0; //@line 3447
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($this, $__s, $__intl, $__iob, $__fl, $__units) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__units = +$__units;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $13 = 0, $28 = 0, $29 = 0, $3 = 0, $33 = 0, $4 = 0, $41 = 0, $5 = 0, $53 = 0, $61 = 0, $73 = 0, $74 = 0, $8 = 0, $83 = 0, $84 = 0, $85 = 0, $87 = 0, $89 = 0, $91 = 0, $94 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 2152
 STACKTOP = STACKTOP + 384 | 0; //@line 2153
 $$byval_copy = sp + 8 | 0; //@line 2154
 $vararg_buffer1 = sp; //@line 2155
 $__buf = sp + 284 | 0; //@line 2156
 $__bb = sp + 72 | 0; //@line 2157
 $__digits = sp + 184 | 0; //@line 2158
 $__loc = sp + 68 | 0; //@line 2159
 $__pat = sp + 80 | 0; //@line 2160
 $__dp = sp + 77 | 0; //@line 2161
 $__ts = sp + 76 | 0; //@line 2162
 $__grp = sp + 56 | 0; //@line 2163
 $__sym = sp + 44 | 0; //@line 2164
 $__sn = sp + 32 | 0; //@line 2165
 $__fd = sp + 28 | 0; //@line 2166
 $__mbuf = sp + 84 | 0; //@line 2167
 $__mi = sp + 24 | 0; //@line 2168
 $__me = sp + 20 | 0; //@line 2169
 $0 = sp + 16 | 0; //@line 2170
 HEAP32[$__bb >> 2] = $__buf; //@line 2171
 HEAPF64[$$byval_copy >> 3] = $__units; //@line 2172
 $1 = _snprintf($__buf, 100, 21679, $$byval_copy) | 0; //@line 2173
 if ($1 >>> 0 > 99) {
  $3 = __ZNSt3__16__clocEv() | 0; //@line 2176
  HEAPF64[$vararg_buffer1 >> 3] = $__units; //@line 2177
  $4 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__bb, $3, 21679, $vararg_buffer1) | 0; //@line 2178
  $5 = HEAP32[$__bb >> 2] | 0; //@line 2179
  if (!$5) {
   __ZSt17__throw_bad_allocv(); //@line 2182
  }
  $8 = _malloc($4) | 0; //@line 2186
  if (!$8) {
   __ZSt17__throw_bad_allocv(); //@line 2190
  } else {
   $91 = $8; //@line 2193
   $94 = $5; //@line 2193
   $__db$0 = $8; //@line 2193
   $__n$0 = $4; //@line 2193
  }
 } else {
  $91 = 0; //@line 2196
  $94 = 0; //@line 2196
  $__db$0 = $__digits; //@line 2196
  $__n$0 = $1; //@line 2196
 }
 $11 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 2198
 HEAP32[$__loc >> 2] = $11; //@line 2199
 $12 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 9328) | 0; //@line 2200
 $13 = HEAP32[$__bb >> 2] | 0; //@line 2201
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$12 >> 2] | 0) + 32 >> 2] & 7]($12, $13, $13 + $__n$0 | 0, $__db$0) | 0; //@line 2206
 if (!$__n$0) {
  $28 = 0; //@line 2209
 } else {
  $28 = (HEAP8[HEAP32[$__bb >> 2] >> 0] | 0) == 45; //@line 2214
 }
 HEAP32[$__grp >> 2] = 0; //@line 2216
 HEAP32[$__grp + 4 >> 2] = 0; //@line 2218
 HEAP32[$__grp + 8 >> 2] = 0; //@line 2220
 HEAP32[$__sym >> 2] = 0; //@line 2221
 HEAP32[$__sym + 4 >> 2] = 0; //@line 2223
 HEAP32[$__sym + 8 >> 2] = 0; //@line 2225
 HEAP32[$__sn >> 2] = 0; //@line 2226
 HEAP32[$__sn + 4 >> 2] = 0; //@line 2228
 HEAP32[$__sn + 8 >> 2] = 0; //@line 2230
 __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl, $28, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd); //@line 2231
 $29 = HEAP32[$__fd >> 2] | 0; //@line 2232
 if (($__n$0 | 0) > ($29 | 0)) {
  $33 = HEAP8[$__sn >> 0] | 0; //@line 2237
  $41 = HEAP8[$__sym >> 0] | 0; //@line 2245
  $73 = ($__n$0 - $29 << 1 | 1) + $29 + (($33 & 1) == 0 ? ($33 & 255) >>> 1 : HEAP32[$__sn + 4 >> 2] | 0) + (($41 & 1) == 0 ? ($41 & 255) >>> 1 : HEAP32[$__sym + 4 >> 2] | 0) | 0; //@line 2257
 } else {
  $53 = HEAP8[$__sn >> 0] | 0; //@line 2259
  $61 = HEAP8[$__sym >> 0] | 0; //@line 2267
  $73 = $29 + 2 + (($53 & 1) == 0 ? ($53 & 255) >>> 1 : HEAP32[$__sn + 4 >> 2] | 0) + (($61 & 1) == 0 ? ($61 & 255) >>> 1 : HEAP32[$__sym + 4 >> 2] | 0) | 0; //@line 2278
 }
 if ($73 >>> 0 > 100) {
  $74 = _malloc($73) | 0; //@line 2282
  if (!$74) {
   __ZSt17__throw_bad_allocv(); //@line 2286
  } else {
   $87 = $74; //@line 2289
   $__mb$0 = $74; //@line 2289
  }
 } else {
  $87 = 0; //@line 2292
  $__mb$0 = $__mbuf; //@line 2292
 }
 __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb$0, $__mi, $__me, HEAP32[$__iob + 4 >> 2] | 0, $__db$0, $__db$0 + $__n$0 | 0, $12, $28, $__pat, HEAP8[$__dp >> 0] | 0, HEAP8[$__ts >> 0] | 0, $__grp, $__sym, $__sn, $29); //@line 2299
 HEAP32[$0 >> 2] = HEAP32[$__s >> 2]; //@line 2301
 $83 = HEAP32[$__mi >> 2] | 0; //@line 2302
 $84 = HEAP32[$__me >> 2] | 0; //@line 2303
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 2304
 $85 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__mb$0, $83, $84, $__iob, $__fl) | 0; //@line 2305
 if (!$87) {
  $89 = $11; //@line 2308
 } else {
  _free($87); //@line 2311
  $89 = HEAP32[$__loc >> 2] | 0; //@line 2313
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn); //@line 2315
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym); //@line 2316
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp); //@line 2317
 __ZNSt3__114__shared_count16__release_sharedEv($89) | 0; //@line 2318
 if ($91) {
  _free($91); //@line 2322
 }
 if ($94) {
  _free($94); //@line 2327
 }
 STACKTOP = sp; //@line 2329
 return $85 | 0; //@line 2329
}
function __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $10 = 0, $102 = 0, $107 = 0, $110 = 0, $12 = 0, $122 = 0, $127 = 0, $13 = 0, $14 = 0, $17 = 0, $24 = 0, $35 = 0, $38 = 0, $50 = 0, $55 = 0, $6 = 0, $61 = 0, $63 = 0, $70 = 0, $8 = 0, $80 = 0, $84 = 0, $93 = 0, label = 0;
 HEAP32[$frm_nxt >> 2] = $frm; //@line 15322
 HEAP32[$to_nxt >> 2] = $to; //@line 15323
 $$pre1 = $to_end; //@line 15326
 if (!($mode & 2)) {
  label = 4; //@line 15328
 } else {
  if (($$pre1 - $to | 0) < 3) {
   $$0 = 1; //@line 15334
  } else {
   HEAP32[$to_nxt >> 2] = $to + 1; //@line 15337
   HEAP8[$to >> 0] = -17; //@line 15338
   $6 = HEAP32[$to_nxt >> 2] | 0; //@line 15339
   HEAP32[$to_nxt >> 2] = $6 + 1; //@line 15341
   HEAP8[$6 >> 0] = -69; //@line 15342
   $8 = HEAP32[$to_nxt >> 2] | 0; //@line 15343
   HEAP32[$to_nxt >> 2] = $8 + 1; //@line 15345
   HEAP8[$8 >> 0] = -65; //@line 15346
   label = 4; //@line 15347
  }
 }
 L4 : do {
  if ((label | 0) == 4) {
   $10 = $frm_end; //@line 15352
   $$pre = HEAP32[$frm_nxt >> 2] | 0; //@line 15353
   if ($$pre >>> 0 < $frm_end >>> 0) {
    $13 = $$pre; //@line 15356
    while (1) {
     $12 = HEAP16[$13 >> 1] | 0; //@line 15358
     $14 = $12 & 65535; //@line 15359
     if ($14 >>> 0 > $Maxcode >>> 0) {
      $$0 = 2; //@line 15362
      break L4;
     }
     do {
      if (($12 & 65535) < 128) {
       $17 = HEAP32[$to_nxt >> 2] | 0; //@line 15368
       if (($$pre1 - $17 | 0) < 1) {
        $$0 = 1; //@line 15373
        break L4;
       }
       HEAP32[$to_nxt >> 2] = $17 + 1; //@line 15378
       HEAP8[$17 >> 0] = $12; //@line 15379
      } else {
       if (($12 & 65535) < 2048) {
        $24 = HEAP32[$to_nxt >> 2] | 0; //@line 15383
        if (($$pre1 - $24 | 0) < 2) {
         $$0 = 1; //@line 15388
         break L4;
        }
        HEAP32[$to_nxt >> 2] = $24 + 1; //@line 15395
        HEAP8[$24 >> 0] = $14 >>> 6 | 192; //@line 15396
        $35 = HEAP32[$to_nxt >> 2] | 0; //@line 15400
        HEAP32[$to_nxt >> 2] = $35 + 1; //@line 15402
        HEAP8[$35 >> 0] = $14 & 63 | 128; //@line 15403
        break;
       }
       if (($12 & 65535) < 55296) {
        $38 = HEAP32[$to_nxt >> 2] | 0; //@line 15408
        if (($$pre1 - $38 | 0) < 3) {
         $$0 = 1; //@line 15413
         break L4;
        }
        HEAP32[$to_nxt >> 2] = $38 + 1; //@line 15420
        HEAP8[$38 >> 0] = $14 >>> 12 | 224; //@line 15421
        $50 = HEAP32[$to_nxt >> 2] | 0; //@line 15426
        HEAP32[$to_nxt >> 2] = $50 + 1; //@line 15428
        HEAP8[$50 >> 0] = $14 >>> 6 & 63 | 128; //@line 15429
        $55 = HEAP32[$to_nxt >> 2] | 0; //@line 15433
        HEAP32[$to_nxt >> 2] = $55 + 1; //@line 15435
        HEAP8[$55 >> 0] = $14 & 63 | 128; //@line 15436
        break;
       }
       if (($12 & 65535) >= 56320) {
        if (($12 & 65535) < 57344) {
         $$0 = 2; //@line 15443
         break L4;
        }
        $110 = HEAP32[$to_nxt >> 2] | 0; //@line 15446
        if (($$pre1 - $110 | 0) < 3) {
         $$0 = 1; //@line 15451
         break L4;
        }
        HEAP32[$to_nxt >> 2] = $110 + 1; //@line 15458
        HEAP8[$110 >> 0] = $14 >>> 12 | 224; //@line 15459
        $122 = HEAP32[$to_nxt >> 2] | 0; //@line 15464
        HEAP32[$to_nxt >> 2] = $122 + 1; //@line 15466
        HEAP8[$122 >> 0] = $14 >>> 6 & 63 | 128; //@line 15467
        $127 = HEAP32[$to_nxt >> 2] | 0; //@line 15471
        HEAP32[$to_nxt >> 2] = $127 + 1; //@line 15473
        HEAP8[$127 >> 0] = $14 & 63 | 128; //@line 15474
        break;
       }
       if (($10 - $13 | 0) < 4) {
        $$0 = 1; //@line 15481
        break L4;
       }
       $61 = $13 + 2 | 0; //@line 15484
       $63 = HEAPU16[$61 >> 1] | 0; //@line 15486
       if (($63 & 64512 | 0) != 56320) {
        $$0 = 2; //@line 15490
        break L4;
       }
       if (($$pre1 - (HEAP32[$to_nxt >> 2] | 0) | 0) < 4) {
        $$0 = 1; //@line 15498
        break L4;
       }
       $70 = $14 & 960; //@line 15501
       if ((($70 << 10) + 65536 | $14 << 10 & 64512 | $63 & 1023) >>> 0 > $Maxcode >>> 0) {
        $$0 = 2; //@line 15511
        break L4;
       }
       HEAP32[$frm_nxt >> 2] = $61; //@line 15514
       $80 = ($70 >>> 6) + 1 | 0; //@line 15516
       $84 = HEAP32[$to_nxt >> 2] | 0; //@line 15520
       HEAP32[$to_nxt >> 2] = $84 + 1; //@line 15522
       HEAP8[$84 >> 0] = $80 >>> 2 | 240; //@line 15523
       $93 = HEAP32[$to_nxt >> 2] | 0; //@line 15531
       HEAP32[$to_nxt >> 2] = $93 + 1; //@line 15533
       HEAP8[$93 >> 0] = $14 >>> 2 & 15 | $80 << 4 & 48 | 128; //@line 15534
       $102 = HEAP32[$to_nxt >> 2] | 0; //@line 15542
       HEAP32[$to_nxt >> 2] = $102 + 1; //@line 15544
       HEAP8[$102 >> 0] = $14 << 4 & 48 | $63 >>> 6 & 15 | 128; //@line 15545
       $107 = HEAP32[$to_nxt >> 2] | 0; //@line 15549
       HEAP32[$to_nxt >> 2] = $107 + 1; //@line 15551
       HEAP8[$107 >> 0] = $63 & 63 | 128; //@line 15552
      }
     } while (0);
     $13 = (HEAP32[$frm_nxt >> 2] | 0) + 2 | 0; //@line 15556
     HEAP32[$frm_nxt >> 2] = $13; //@line 15557
     if ($13 >>> 0 >= $frm_end >>> 0) {
      $$0 = 0; //@line 15562
      break;
     }
    }
   } else {
    $$0 = 0; //@line 15567
   }
  }
 } while (0);
 return $$0 | 0; //@line 15571
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($this, $__s, $__intl, $__iob, $__fl, $__digits) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__digits = $__digits | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $100 = 0, $102 = 0, $104 = 0, $15 = 0, $2 = 0, $27 = 0, $28 = 0, $3 = 0, $31 = 0, $34 = 0, $35 = 0, $39 = 0, $47 = 0, $5 = 0, $59 = 0, $6 = 0, $67 = 0, $79 = 0, $81 = 0, $87 = 0, $90 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, sp = 0;
 sp = STACKTOP; //@line 4156
 STACKTOP = STACKTOP + 480 | 0; //@line 4157
 $$byval_copy = sp + 468 | 0; //@line 4158
 $__loc = sp + 464 | 0; //@line 4159
 $__pat = sp + 472 | 0; //@line 4160
 $__dp = sp + 56 | 0; //@line 4161
 $__ts = sp + 52 | 0; //@line 4162
 $__grp = sp + 40 | 0; //@line 4163
 $__sym = sp + 28 | 0; //@line 4164
 $__sn = sp + 16 | 0; //@line 4165
 $__fd = sp + 12 | 0; //@line 4166
 $__mbuf = sp + 64 | 0; //@line 4167
 $__mi = sp + 8 | 0; //@line 4168
 $__me = sp + 4 | 0; //@line 4169
 $0 = sp; //@line 4170
 $1 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 4171
 HEAP32[$__loc >> 2] = $1; //@line 4172
 $2 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 9320) | 0; //@line 4173
 $3 = HEAP8[$__digits >> 0] | 0; //@line 4174
 $5 = ($3 & 1) == 0; //@line 4176
 $6 = $__digits + 4 | 0; //@line 4177
 if (!(($5 ? ($3 & 255) >>> 1 : HEAP32[$6 >> 2] | 0) | 0)) {
  $27 = 0; //@line 4184
 } else {
  $15 = HEAP32[($5 ? $6 : HEAP32[$__digits + 8 >> 2] | 0) >> 2] | 0; //@line 4189
  $27 = ($15 | 0) == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$2 >> 2] | 0) + 44 >> 2] & 15]($2, 45) | 0); //@line 4195
 }
 HEAP32[$__grp >> 2] = 0; //@line 4197
 HEAP32[$__grp + 4 >> 2] = 0; //@line 4199
 HEAP32[$__grp + 8 >> 2] = 0; //@line 4201
 HEAP32[$__sym >> 2] = 0; //@line 4202
 HEAP32[$__sym + 4 >> 2] = 0; //@line 4204
 HEAP32[$__sym + 8 >> 2] = 0; //@line 4206
 HEAP32[$__sn >> 2] = 0; //@line 4207
 HEAP32[$__sn + 4 >> 2] = 0; //@line 4209
 HEAP32[$__sn + 8 >> 2] = 0; //@line 4211
 __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl, $27, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd); //@line 4212
 $28 = HEAP8[$__digits >> 0] | 0; //@line 4213
 $31 = HEAP32[$6 >> 2] | 0; //@line 4216
 $34 = ($28 & 1) == 0 ? ($28 & 255) >>> 1 : $31; //@line 4219
 $35 = HEAP32[$__fd >> 2] | 0; //@line 4220
 if (($34 | 0) > ($35 | 0)) {
  $39 = HEAP8[$__sn >> 0] | 0; //@line 4225
  $47 = HEAP8[$__sym >> 0] | 0; //@line 4233
  $79 = ($34 - $35 << 1 | 1) + $35 + (($39 & 1) == 0 ? ($39 & 255) >>> 1 : HEAP32[$__sn + 4 >> 2] | 0) + (($47 & 1) == 0 ? ($47 & 255) >>> 1 : HEAP32[$__sym + 4 >> 2] | 0) | 0; //@line 4245
 } else {
  $59 = HEAP8[$__sn >> 0] | 0; //@line 4247
  $67 = HEAP8[$__sym >> 0] | 0; //@line 4255
  $79 = $35 + 2 + (($59 & 1) == 0 ? ($59 & 255) >>> 1 : HEAP32[$__sn + 4 >> 2] | 0) + (($67 & 1) == 0 ? ($67 & 255) >>> 1 : HEAP32[$__sym + 4 >> 2] | 0) | 0; //@line 4266
 }
 if ($79 >>> 0 > 100) {
  $81 = _malloc($79 << 2) | 0; //@line 4271
  if (!$81) {
   __ZSt17__throw_bad_allocv(); //@line 4275
  } else {
   $102 = $81; //@line 4278
   $__mb$0 = $81; //@line 4278
  }
 } else {
  $102 = 0; //@line 4281
  $__mb$0 = $__mbuf; //@line 4281
 }
 $87 = ($28 & 1) == 0; //@line 4286
 $90 = $87 ? $6 : HEAP32[$__digits + 8 >> 2] | 0; //@line 4289
 __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb$0, $__mi, $__me, HEAP32[$__iob + 4 >> 2] | 0, $90, $90 + (($87 ? ($28 & 255) >>> 1 : $31) << 2) | 0, $2, $27, $__pat, HEAP32[$__dp >> 2] | 0, HEAP32[$__ts >> 2] | 0, $__grp, $__sym, $__sn, $35); //@line 4296
 HEAP32[$0 >> 2] = HEAP32[$__s >> 2]; //@line 4298
 $98 = HEAP32[$__mi >> 2] | 0; //@line 4299
 $99 = HEAP32[$__me >> 2] | 0; //@line 4300
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 4301
 $100 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__mb$0, $98, $99, $__iob, $__fl) | 0; //@line 4302
 if (!$102) {
  $104 = $1; //@line 4305
 } else {
  _free($102); //@line 4308
  $104 = HEAP32[$__loc >> 2] | 0; //@line 4310
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn); //@line 4312
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym); //@line 4313
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp); //@line 4314
 __ZNSt3__114__shared_count16__release_sharedEv($104) | 0; //@line 4315
 STACKTOP = sp; //@line 4316
 return $100 | 0; //@line 4316
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($this, $__s, $__intl, $__iob, $__fl, $__digits) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__digits = $__digits | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $100 = 0, $101 = 0, $103 = 0, $105 = 0, $16 = 0, $2 = 0, $28 = 0, $29 = 0, $3 = 0, $32 = 0, $35 = 0, $36 = 0, $40 = 0, $48 = 0, $5 = 0, $6 = 0, $60 = 0, $68 = 0, $80 = 0, $81 = 0, $87 = 0, $91 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, sp = 0;
 sp = STACKTOP; //@line 3079
 STACKTOP = STACKTOP + 176 | 0; //@line 3080
 $$byval_copy = sp + 56 | 0; //@line 3081
 $__loc = sp + 52 | 0; //@line 3082
 $__pat = sp + 64 | 0; //@line 3083
 $__dp = sp + 61 | 0; //@line 3084
 $__ts = sp + 60 | 0; //@line 3085
 $__grp = sp + 40 | 0; //@line 3086
 $__sym = sp + 28 | 0; //@line 3087
 $__sn = sp + 16 | 0; //@line 3088
 $__fd = sp + 12 | 0; //@line 3089
 $__mbuf = sp + 68 | 0; //@line 3090
 $__mi = sp + 8 | 0; //@line 3091
 $__me = sp + 4 | 0; //@line 3092
 $0 = sp; //@line 3093
 $1 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 3094
 HEAP32[$__loc >> 2] = $1; //@line 3095
 $2 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 9328) | 0; //@line 3096
 $3 = HEAP8[$__digits >> 0] | 0; //@line 3097
 $5 = ($3 & 1) == 0; //@line 3099
 $6 = $__digits + 4 | 0; //@line 3100
 if (!(($5 ? ($3 & 255) >>> 1 : HEAP32[$6 >> 2] | 0) | 0)) {
  $28 = 0; //@line 3107
 } else {
  $16 = HEAP8[($5 ? $__digits + 1 | 0 : HEAP32[$__digits + 8 >> 2] | 0) >> 0] | 0; //@line 3113
  $28 = $16 << 24 >> 24 == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$2 >> 2] | 0) + 28 >> 2] & 15]($2, 45) | 0) << 24 >> 24; //@line 3119
 }
 HEAP32[$__grp >> 2] = 0; //@line 3121
 HEAP32[$__grp + 4 >> 2] = 0; //@line 3123
 HEAP32[$__grp + 8 >> 2] = 0; //@line 3125
 HEAP32[$__sym >> 2] = 0; //@line 3126
 HEAP32[$__sym + 4 >> 2] = 0; //@line 3128
 HEAP32[$__sym + 8 >> 2] = 0; //@line 3130
 HEAP32[$__sn >> 2] = 0; //@line 3131
 HEAP32[$__sn + 4 >> 2] = 0; //@line 3133
 HEAP32[$__sn + 8 >> 2] = 0; //@line 3135
 __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl, $28, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd); //@line 3136
 $29 = HEAP8[$__digits >> 0] | 0; //@line 3137
 $32 = HEAP32[$6 >> 2] | 0; //@line 3140
 $35 = ($29 & 1) == 0 ? ($29 & 255) >>> 1 : $32; //@line 3143
 $36 = HEAP32[$__fd >> 2] | 0; //@line 3144
 if (($35 | 0) > ($36 | 0)) {
  $40 = HEAP8[$__sn >> 0] | 0; //@line 3149
  $48 = HEAP8[$__sym >> 0] | 0; //@line 3157
  $80 = ($35 - $36 << 1 | 1) + $36 + (($40 & 1) == 0 ? ($40 & 255) >>> 1 : HEAP32[$__sn + 4 >> 2] | 0) + (($48 & 1) == 0 ? ($48 & 255) >>> 1 : HEAP32[$__sym + 4 >> 2] | 0) | 0; //@line 3169
 } else {
  $60 = HEAP8[$__sn >> 0] | 0; //@line 3171
  $68 = HEAP8[$__sym >> 0] | 0; //@line 3179
  $80 = $36 + 2 + (($60 & 1) == 0 ? ($60 & 255) >>> 1 : HEAP32[$__sn + 4 >> 2] | 0) + (($68 & 1) == 0 ? ($68 & 255) >>> 1 : HEAP32[$__sym + 4 >> 2] | 0) | 0; //@line 3190
 }
 if ($80 >>> 0 > 100) {
  $81 = _malloc($80) | 0; //@line 3194
  if (!$81) {
   __ZSt17__throw_bad_allocv(); //@line 3198
  } else {
   $103 = $81; //@line 3201
   $__mb$0 = $81; //@line 3201
  }
 } else {
  $103 = 0; //@line 3204
  $__mb$0 = $__mbuf; //@line 3204
 }
 $87 = ($29 & 1) == 0; //@line 3209
 $91 = $87 ? $__digits + 1 | 0 : HEAP32[$__digits + 8 >> 2] | 0; //@line 3213
 __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb$0, $__mi, $__me, HEAP32[$__iob + 4 >> 2] | 0, $91, $91 + ($87 ? ($29 & 255) >>> 1 : $32) | 0, $2, $28, $__pat, HEAP8[$__dp >> 0] | 0, HEAP8[$__ts >> 0] | 0, $__grp, $__sym, $__sn, $36); //@line 3220
 HEAP32[$0 >> 2] = HEAP32[$__s >> 2]; //@line 3222
 $99 = HEAP32[$__mi >> 2] | 0; //@line 3223
 $100 = HEAP32[$__me >> 2] | 0; //@line 3224
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 3225
 $101 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__mb$0, $99, $100, $__iob, $__fl) | 0; //@line 3226
 if (!$103) {
  $105 = $1; //@line 3229
 } else {
  _free($103); //@line 3232
  $105 = HEAP32[$__loc >> 2] | 0; //@line 3234
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn); //@line 3236
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym); //@line 3237
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp); //@line 3238
 __ZNSt3__114__shared_count16__release_sharedEv($105) | 0; //@line 3239
 STACKTOP = sp; //@line 3240
 return $101 | 0; //@line 3240
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$byval_copy = 0, $0 = 0, $10 = 0, $2 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $33 = 0, $35 = 0, $38 = 0, $4 = 0, $5 = 0, $50 = 0, $6 = 0, $63 = 0, $64 = 0, $67 = 0, $8 = 0, $__loc = 0, $__neg = 0, $__w$0$lcssa = 0, $__w$02 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1679
 STACKTOP = STACKTOP + 432 | 0; //@line 1680
 $$byval_copy = sp + 424 | 0; //@line 1681
 $__wbuf = sp + 24 | 0; //@line 1682
 $__wb = sp + 16 | 0; //@line 1683
 $__wn = sp + 8 | 0; //@line 1684
 $__loc = sp + 4 | 0; //@line 1685
 $__neg = sp + 428 | 0; //@line 1686
 $0 = sp; //@line 1687
 HEAP32[$__wb >> 2] = $__wbuf; //@line 1689
 $2 = $__wb + 4 | 0; //@line 1690
 HEAP32[$2 >> 2] = 98; //@line 1691
 $3 = $__wbuf + 400 | 0; //@line 1692
 $4 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 1693
 HEAP32[$__loc >> 2] = $4; //@line 1694
 $5 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 9320) | 0; //@line 1695
 HEAP8[$__neg >> 0] = 0; //@line 1696
 $6 = HEAP32[$__e >> 2] | 0; //@line 1697
 HEAP32[$0 >> 2] = $6; //@line 1698
 $8 = HEAP32[$__iob + 4 >> 2] | 0; //@line 1700
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 1701
 $10 = $6; //@line 1703
 if (__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b, $$byval_copy, $__intl, $__loc, $8, $__err, $__neg, $5, $__wb, $__wn, $3) | 0) {
  if (!(HEAP8[$__v >> 0] & 1)) {
   HEAP8[$__v >> 0] = 0; //@line 1709
  } else {
   HEAP32[HEAP32[$__v + 8 >> 2] >> 2] = 0; //@line 1713
  }
  HEAP32[$__v + 4 >> 2] = 0; //@line 1716
  if (HEAP8[$__neg >> 0] | 0) {
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__v, FUNCTION_TABLE_iii[HEAP32[(HEAP32[$5 >> 2] | 0) + 44 >> 2] & 15]($5, 45) | 0); //@line 1724
  }
  $26 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$5 >> 2] | 0) + 44 >> 2] & 15]($5, 48) | 0; //@line 1729
  $27 = HEAP32[$__wb >> 2] | 0; //@line 1730
  $28 = HEAP32[$__wn >> 2] | 0; //@line 1731
  $29 = $28 + -4 | 0; //@line 1732
  L10 : do {
   if ($27 >>> 0 < $29 >>> 0) {
    $__w$02 = $27; //@line 1736
    while (1) {
     if ((HEAP32[$__w$02 >> 2] | 0) != ($26 | 0)) {
      $__w$0$lcssa = $__w$02; //@line 1741
      break L10;
     }
     $33 = $__w$02 + 4 | 0; //@line 1744
     if ($33 >>> 0 < $29 >>> 0) {
      $__w$02 = $33; //@line 1747
     } else {
      $__w$0$lcssa = $33; //@line 1749
      break;
     }
    }
   } else {
    $__w$0$lcssa = $27; //@line 1754
   }
  } while (0);
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($__v, $__w$0$lcssa, $28) | 0; //@line 1757
 }
 $35 = HEAP32[$__b >> 2] | 0; //@line 1759
 do {
  if (!$35) {
   $67 = 1; //@line 1763
  } else {
   $38 = HEAP32[$35 + 12 >> 2] | 0; //@line 1766
   if (($38 | 0) == (HEAP32[$35 + 16 >> 2] | 0)) {
    $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$35 >> 2] | 0) + 36 >> 2] & 63]($35) | 0; //@line 1775
   } else {
    $$0$i$i$i$i = HEAP32[$38 >> 2] | 0; //@line 1778
   }
   if (($$0$i$i$i$i | 0) == -1) {
    HEAP32[$__b >> 2] = 0; //@line 1782
    $67 = 1; //@line 1783
    break;
   } else {
    $67 = (HEAP32[$__b >> 2] | 0) == 0; //@line 1788
    break;
   }
  }
 } while (0);
 do {
  if (!$6) {
   label = 24; //@line 1796
  } else {
   $50 = HEAP32[$10 + 12 >> 2] | 0; //@line 1799
   if (($50 | 0) == (HEAP32[$10 + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$6 >> 2] | 0) + 36 >> 2] & 63]($10) | 0; //@line 1809
   } else {
    $$0$i$i1$i$i = HEAP32[$50 >> 2] | 0; //@line 1812
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$__e >> 2] = 0; //@line 1816
    label = 24; //@line 1817
    break;
   } else {
    if ($67) {
     break;
    } else {
     label = 26; //@line 1823
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 24) {
  if ($67) {
   label = 26; //@line 1831
  }
 }
 if ((label | 0) == 26) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 1837
 }
 $63 = HEAP32[$__b >> 2] | 0; //@line 1839
 __ZNSt3__114__shared_count16__release_sharedEv($4) | 0; //@line 1840
 $64 = HEAP32[$__wb >> 2] | 0; //@line 1841
 HEAP32[$__wb >> 2] = 0; //@line 1842
 if ($64) {
  FUNCTION_TABLE_vi[HEAP32[$2 >> 2] & 127]($64); //@line 1846
 }
 STACKTOP = sp; //@line 1848
 return $63 | 0; //@line 1848
}
function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct, $__in_units, $__exp, $__a, $__a_end, $__decimal_point, $__thousands_sep, $__grouping, $__g, $__g_end, $__dc, $__atoms) {
 $__ct = $__ct | 0;
 $__in_units = $__in_units | 0;
 $__exp = $__exp | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__dc = $__dc | 0;
 $__atoms = $__atoms | 0;
 var $$0 = 0, $$0$i3 = 0, $$0$lcssa$i = 0, $14 = 0, $19 = 0, $22 = 0, $3 = 0, $33 = 0, $38 = 0, $40 = 0, $47 = 0, $5 = 0, $50 = 0, $51 = 0, $62 = 0, $65 = 0, $73 = 0, $82 = 0, $87 = 0, $89 = 0;
 L1 : do {
  if ($__ct << 24 >> 24 == $__decimal_point << 24 >> 24) {
   if (!(HEAP8[$__in_units >> 0] | 0)) {
    $$0 = -1; //@line 6472
   } else {
    HEAP8[$__in_units >> 0] = 0; //@line 6474
    $3 = HEAP32[$__a_end >> 2] | 0; //@line 6475
    HEAP32[$__a_end >> 2] = $3 + 1; //@line 6477
    HEAP8[$3 >> 0] = 46; //@line 6478
    $5 = HEAP8[$__grouping >> 0] | 0; //@line 6479
    if (!((($5 & 1) == 0 ? ($5 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0)) {
     $$0 = 0; //@line 6489
    } else {
     $14 = HEAP32[$__g_end >> 2] | 0; //@line 6491
     if (($14 - $__g | 0) < 160) {
      $19 = HEAP32[$__dc >> 2] | 0; //@line 6497
      HEAP32[$__g_end >> 2] = $14 + 4; //@line 6499
      HEAP32[$14 >> 2] = $19; //@line 6500
      $$0 = 0; //@line 6501
     } else {
      $$0 = 0; //@line 6503
     }
    }
   }
  } else {
   if ($__ct << 24 >> 24 == $__thousands_sep << 24 >> 24) {
    $22 = HEAP8[$__grouping >> 0] | 0; //@line 6510
    if ((($22 & 1) == 0 ? ($22 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0) {
     if (!(HEAP8[$__in_units >> 0] | 0)) {
      $$0 = -1; //@line 6523
      break;
     }
     $33 = HEAP32[$__g_end >> 2] | 0; //@line 6526
     if (($33 - $__g | 0) >= 160) {
      $$0 = 0; //@line 6532
      break;
     }
     $38 = HEAP32[$__dc >> 2] | 0; //@line 6535
     HEAP32[$__g_end >> 2] = $33 + 4; //@line 6537
     HEAP32[$33 >> 2] = $38; //@line 6538
     HEAP32[$__dc >> 2] = 0; //@line 6539
     $$0 = 0; //@line 6540
     break;
    }
   }
   $40 = $__atoms + 32 | 0; //@line 6544
   $$0$i3 = $__atoms; //@line 6545
   while (1) {
    if ((HEAP8[$$0$i3 >> 0] | 0) == $__ct << 24 >> 24) {
     $$0$lcssa$i = $$0$i3; //@line 6550
     break;
    }
    $$0$i3 = $$0$i3 + 1 | 0; //@line 6553
    if (($$0$i3 | 0) == ($40 | 0)) {
     $$0$lcssa$i = $40; //@line 6556
     break;
    }
   }
   $47 = $$0$lcssa$i - $__atoms | 0; //@line 6564
   if (($47 | 0) > 31) {
    $$0 = -1; //@line 6567
   } else {
    $50 = HEAP8[20196 + $47 >> 0] | 0; //@line 6570
    switch ($47 | 0) {
    case 24:
    case 25:
     {
      $51 = HEAP32[$__a_end >> 2] | 0; //@line 6573
      if (($51 | 0) != ($__a | 0)) {
       if ((HEAPU8[$51 + -1 >> 0] & 95 | 0) != (HEAPU8[$__exp >> 0] & 127 | 0)) {
        $$0 = -1; //@line 6585
        break L1;
       }
      }
      HEAP32[$__a_end >> 2] = $51 + 1; //@line 6590
      HEAP8[$51 >> 0] = $50; //@line 6591
      $$0 = 0; //@line 6592
      break L1;
      break;
     }
    case 23:
    case 22:
     {
      HEAP8[$__exp >> 0] = 80; //@line 6597
      $62 = HEAP32[$__a_end >> 2] | 0; //@line 6598
      HEAP32[$__a_end >> 2] = $62 + 1; //@line 6600
      HEAP8[$62 >> 0] = $50; //@line 6601
      $$0 = 0; //@line 6602
      break L1;
      break;
     }
    default:
     {
      $65 = $50 & 95; //@line 6608
      if (($65 | 0) == (HEAP8[$__exp >> 0] | 0)) {
       HEAP8[$__exp >> 0] = $65 | 128; //@line 6615
       if (HEAP8[$__in_units >> 0] | 0) {
        HEAP8[$__in_units >> 0] = 0; //@line 6619
        $73 = HEAP8[$__grouping >> 0] | 0; //@line 6620
        if ((($73 & 1) == 0 ? ($73 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0) {
         $82 = HEAP32[$__g_end >> 2] | 0; //@line 6630
         if (($82 - $__g | 0) < 160) {
          $87 = HEAP32[$__dc >> 2] | 0; //@line 6636
          HEAP32[$__g_end >> 2] = $82 + 4; //@line 6638
          HEAP32[$82 >> 2] = $87; //@line 6639
         }
        }
       }
      }
      $89 = HEAP32[$__a_end >> 2] | 0; //@line 6644
      HEAP32[$__a_end >> 2] = $89 + 1; //@line 6646
      HEAP8[$89 >> 0] = $50; //@line 6647
      if (($47 | 0) > 21) {
       $$0 = 0; //@line 6650
       break L1;
      }
      HEAP32[$__dc >> 2] = (HEAP32[$__dc >> 2] | 0) + 1; //@line 6655
      $$0 = 0; //@line 6656
      break L1;
     }
    }
   }
  }
 } while (0);
 return $$0 | 0; //@line 6663
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre = 0, $$pre$i3$i$i915 = 0, $0 = 0, $13 = 0, $16 = 0, $28 = 0, $3 = 0, $30 = 0, $46 = 0, $47 = 0, $48 = 0, $58 = 0, $59 = 0, $71 = 0, $83 = 0, $84 = 0, label = 0;
 $0 = HEAP32[$__b >> 2] | 0; //@line 12974
 do {
  if (!$0) {
   $83 = 1; //@line 12978
  } else {
   $3 = HEAP32[$0 + 12 >> 2] | 0; //@line 12981
   if (($3 | 0) == (HEAP32[$0 + 16 >> 2] | 0)) {
    $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 63]($0) | 0; //@line 12990
   } else {
    $$0$i$i$i$i = HEAP32[$3 >> 2] | 0; //@line 12993
   }
   if (($$0$i$i$i$i | 0) == -1) {
    HEAP32[$__b >> 2] = 0; //@line 12997
    $83 = 1; //@line 12998
    break;
   } else {
    $83 = (HEAP32[$__b >> 2] | 0) == 0; //@line 13003
    break;
   }
  }
 } while (0);
 $13 = HEAP32[$__e >> 2] | 0; //@line 13008
 do {
  if (!$13) {
   label = 14; //@line 13012
  } else {
   $16 = HEAP32[$13 + 12 >> 2] | 0; //@line 13015
   if (($16 | 0) == (HEAP32[$13 + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$13 >> 2] | 0) + 36 >> 2] & 63]($13) | 0; //@line 13024
   } else {
    $$0$i$i1$i$i = HEAP32[$16 >> 2] | 0; //@line 13027
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$__e >> 2] = 0; //@line 13031
    label = 14; //@line 13032
    break;
   } else {
    if ($83) {
     $$pre$i3$i$i915 = $13; //@line 13036
     label = 17; //@line 13037
     break;
    } else {
     label = 16; //@line 13040
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 14) {
  if ($83) {
   label = 16; //@line 13048
  } else {
   $$pre$i3$i$i915 = 0; //@line 13050
   label = 17; //@line 13051
  }
 }
 L22 : do {
  if ((label | 0) == 16) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6; //@line 13058
  } else if ((label | 0) == 17) {
   $28 = HEAP32[$__b >> 2] | 0; //@line 13061
   $30 = HEAP32[$28 + 12 >> 2] | 0; //@line 13063
   if (($30 | 0) == (HEAP32[$28 + 16 >> 2] | 0)) {
    $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$28 >> 2] | 0) + 36 >> 2] & 63]($28) | 0; //@line 13072
   } else {
    $$0$i$i = HEAP32[$30 >> 2] | 0; //@line 13075
   }
   if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 52 >> 2] & 31]($__ct, $$0$i$i, 0) | 0) << 24 >> 24 != 37) {
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 13085
    break;
   }
   $46 = HEAP32[$__b >> 2] | 0; //@line 13088
   $47 = $46 + 12 | 0; //@line 13089
   $48 = HEAP32[$47 >> 2] | 0; //@line 13090
   if (($48 | 0) == (HEAP32[$46 + 16 >> 2] | 0)) {
    FUNCTION_TABLE_ii[HEAP32[(HEAP32[$46 >> 2] | 0) + 40 >> 2] & 63]($46) | 0; //@line 13098
    $$pre = HEAP32[$__b >> 2] | 0; //@line 13099
    if (!$$pre) {
     $84 = 1; //@line 13102
    } else {
     $58 = $$pre; //@line 13104
     label = 25; //@line 13105
    }
   } else {
    HEAP32[$47 >> 2] = $48 + 4; //@line 13109
    $58 = $46; //@line 13110
    label = 25; //@line 13111
   }
   do {
    if ((label | 0) == 25) {
     $59 = HEAP32[$58 + 12 >> 2] | 0; //@line 13116
     if (($59 | 0) == (HEAP32[$58 + 16 >> 2] | 0)) {
      $$0$i$i$i$i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$58 >> 2] | 0) + 36 >> 2] & 63]($58) | 0; //@line 13125
     } else {
      $$0$i$i$i$i1 = HEAP32[$59 >> 2] | 0; //@line 13128
     }
     if (($$0$i$i$i$i1 | 0) == -1) {
      HEAP32[$__b >> 2] = 0; //@line 13132
      $84 = 1; //@line 13133
      break;
     } else {
      $84 = (HEAP32[$__b >> 2] | 0) == 0; //@line 13138
      break;
     }
    }
   } while (0);
   do {
    if (!$$pre$i3$i$i915) {
     label = 37; //@line 13146
    } else {
     $71 = HEAP32[$$pre$i3$i$i915 + 12 >> 2] | 0; //@line 13149
     if (($71 | 0) == (HEAP32[$$pre$i3$i$i915 + 16 >> 2] | 0)) {
      $$0$i$i1$i$i7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i915 >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i915) | 0; //@line 13158
     } else {
      $$0$i$i1$i$i7 = HEAP32[$71 >> 2] | 0; //@line 13161
     }
     if (($$0$i$i1$i$i7 | 0) == -1) {
      HEAP32[$__e >> 2] = 0; //@line 13165
      label = 37; //@line 13166
      break;
     } else {
      if ($84) {
       break L22;
      } else {
       break;
      }
     }
    }
   } while (0);
   if ((label | 0) == 37) {
    if (!$84) {
     break;
    }
   }
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 13184
  }
 } while (0);
 return;
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $0 = 0, $10 = 0, $2 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $34 = 0, $36 = 0, $4 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $64 = 0, $65 = 0, $8 = 0, $__loc = 0, $__neg = 0, $__w$0$lcssa = 0, $__w$02 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15813
 STACKTOP = STACKTOP + 144 | 0; //@line 15814
 $$byval_copy = sp + 24 | 0; //@line 15815
 $__wbuf = sp + 32 | 0; //@line 15816
 $__wb = sp + 16 | 0; //@line 15817
 $__wn = sp + 8 | 0; //@line 15818
 $__loc = sp + 4 | 0; //@line 15819
 $__neg = sp + 28 | 0; //@line 15820
 $0 = sp; //@line 15821
 HEAP32[$__wb >> 2] = $__wbuf; //@line 15823
 $2 = $__wb + 4 | 0; //@line 15824
 HEAP32[$2 >> 2] = 98; //@line 15825
 $3 = $__wbuf + 100 | 0; //@line 15826
 $4 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 15827
 HEAP32[$__loc >> 2] = $4; //@line 15828
 $5 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 9328) | 0; //@line 15829
 HEAP8[$__neg >> 0] = 0; //@line 15830
 $6 = HEAP32[$__e >> 2] | 0; //@line 15831
 HEAP32[$0 >> 2] = $6; //@line 15832
 $8 = HEAP32[$__iob + 4 >> 2] | 0; //@line 15834
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 15835
 $10 = $6; //@line 15837
 if (__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b, $$byval_copy, $__intl, $__loc, $8, $__err, $__neg, $5, $__wb, $__wn, $3) | 0) {
  if (!(HEAP8[$__v >> 0] & 1)) {
   HEAP8[$__v + 1 >> 0] = 0; //@line 15844
   HEAP8[$__v >> 0] = 0; //@line 15845
  } else {
   HEAP8[HEAP32[$__v + 8 >> 2] >> 0] = 0; //@line 15849
   HEAP32[$__v + 4 >> 2] = 0; //@line 15851
  }
  if (HEAP8[$__neg >> 0] | 0) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__v, FUNCTION_TABLE_iii[HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] & 15]($5, 45) | 0); //@line 15860
  }
  $27 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] & 15]($5, 48) | 0; //@line 15865
  $28 = HEAP32[$__wb >> 2] | 0; //@line 15866
  $29 = HEAP32[$__wn >> 2] | 0; //@line 15867
  $30 = $29 + -1 | 0; //@line 15868
  L10 : do {
   if ($28 >>> 0 < $30 >>> 0) {
    $__w$02 = $28; //@line 15872
    while (1) {
     if ((HEAP8[$__w$02 >> 0] | 0) != $27 << 24 >> 24) {
      $__w$0$lcssa = $__w$02; //@line 15877
      break L10;
     }
     $34 = $__w$02 + 1 | 0; //@line 15880
     if ($34 >>> 0 < $30 >>> 0) {
      $__w$02 = $34; //@line 15883
     } else {
      $__w$0$lcssa = $34; //@line 15885
      break;
     }
    }
   } else {
    $__w$0$lcssa = $28; //@line 15890
   }
  } while (0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($__v, $__w$0$lcssa, $29) | 0; //@line 15893
 }
 $36 = HEAP32[$__b >> 2] | 0; //@line 15895
 do {
  if (!$36) {
   $49 = 0; //@line 15899
  } else {
   if ((HEAP32[$36 + 12 >> 2] | 0) == (HEAP32[$36 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$36 >> 2] | 0) + 36 >> 2] & 63]($36) | 0) == -1) {
     HEAP32[$__b >> 2] = 0; //@line 15913
     $49 = 0; //@line 15914
     break;
    } else {
     $49 = HEAP32[$__b >> 2] | 0; //@line 15918
     break;
    }
   } else {
    $49 = $36; //@line 15922
   }
  }
 } while (0);
 $48 = ($49 | 0) == 0; //@line 15926
 do {
  if (!$6) {
   label = 21; //@line 15930
  } else {
   if ((HEAP32[$10 + 12 >> 2] | 0) == (HEAP32[$10 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$6 >> 2] | 0) + 36 >> 2] & 63]($10) | 0) == -1) {
     HEAP32[$__e >> 2] = 0; //@line 15945
     label = 21; //@line 15946
     break;
    }
   }
   if (!$48) {
    label = 22; //@line 15951
   }
  }
 } while (0);
 if ((label | 0) == 21) {
  if ($48) {
   label = 22; //@line 15957
  }
 }
 if ((label | 0) == 22) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 15963
 }
 $64 = HEAP32[$__b >> 2] | 0; //@line 15965
 __ZNSt3__114__shared_count16__release_sharedEv($4) | 0; //@line 15966
 $65 = HEAP32[$__wb >> 2] | 0; //@line 15967
 HEAP32[$__wb >> 2] = 0; //@line 15968
 if ($65) {
  FUNCTION_TABLE_vi[HEAP32[$2 >> 2] & 127]($65); //@line 15972
 }
 STACKTOP = sp; //@line 15974
 return $64 | 0; //@line 15974
}
function _wcsrtombs($s, $ws, $n, $st) {
 $s = $s | 0;
 $ws = $ws | 0;
 $n = $n | 0;
 $st = $st | 0;
 var $$0 = 0, $$01$lcssa = 0, $$0129 = 0, $$0129$lcssa = 0, $$0218 = 0, $$1 = 0, $$13 = 0, $$223 = 0, $$223$lcssa = 0, $$24$lcssa = 0, $$2428 = 0, $$2428$lcssa = 0, $$3 = 0, $$35 = 0, $$422 = 0, $$422$lcssa = 0, $$422$lcssa82 = 0, $$5 = 0, $$pn = 0, $13 = 0, $14 = 0, $19 = 0, $2 = 0, $27 = 0, $29 = 0, $3 = 0, $30 = 0, $35 = 0, $46 = 0, $6 = 0, $7 = 0, $buf = 0, $ws2$019 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6124
 STACKTOP = STACKTOP + 16 | 0; //@line 6125
 $buf = sp; //@line 6126
 L1 : do {
  if (!$s) {
   $2 = HEAP32[$ws >> 2] | 0; //@line 6130
   $3 = HEAP32[$2 >> 2] | 0; //@line 6131
   if (!$3) {
    $$0 = 0; //@line 6134
   } else {
    $$0218 = 0; //@line 6136
    $6 = $3; //@line 6136
    $ws2$019 = $2; //@line 6136
    while (1) {
     if ($6 >>> 0 > 127) {
      $7 = _wcrtomb($buf, $6, 0) | 0; //@line 6140
      if (($7 | 0) == -1) {
       $$0 = -1; //@line 6143
       break L1;
      } else {
       $$pn = $7; //@line 6146
      }
     } else {
      $$pn = 1; //@line 6149
     }
     $$13 = $$pn + $$0218 | 0; //@line 6151
     $ws2$019 = $ws2$019 + 4 | 0; //@line 6152
     $6 = HEAP32[$ws2$019 >> 2] | 0; //@line 6153
     if (!$6) {
      $$0 = $$13; //@line 6156
      break;
     } else {
      $$0218 = $$13; //@line 6159
     }
    }
   }
  } else {
   L9 : do {
    if ($n >>> 0 > 3) {
     $$0129 = $s; //@line 6168
     $$2428 = $n; //@line 6168
     $14 = HEAP32[$ws >> 2] | 0; //@line 6168
     while (1) {
      $13 = HEAP32[$14 >> 2] | 0; //@line 6170
      if (($13 + -1 | 0) >>> 0 > 126) {
       if (!$13) {
        $$0129$lcssa = $$0129; //@line 6176
        $$2428$lcssa = $$2428; //@line 6176
        break;
       }
       $19 = _wcrtomb($$0129, $13, 0) | 0; //@line 6179
       if (($19 | 0) == -1) {
        $$0 = -1; //@line 6182
        break L1;
       }
       $$1 = $$0129 + $19 | 0; //@line 6187
       $$35 = $$2428 - $19 | 0; //@line 6187
       $27 = $14; //@line 6187
      } else {
       HEAP8[$$0129 >> 0] = $13; //@line 6191
       $$1 = $$0129 + 1 | 0; //@line 6194
       $$35 = $$2428 + -1 | 0; //@line 6194
       $27 = HEAP32[$ws >> 2] | 0; //@line 6194
      }
      $14 = $27 + 4 | 0; //@line 6196
      HEAP32[$ws >> 2] = $14; //@line 6197
      if ($$35 >>> 0 <= 3) {
       $$01$lcssa = $$1; //@line 6202
       $$24$lcssa = $$35; //@line 6202
       break L9;
      } else {
       $$0129 = $$1; //@line 6200
       $$2428 = $$35; //@line 6200
      }
     }
     HEAP8[$$0129$lcssa >> 0] = 0; //@line 6206
     HEAP32[$ws >> 2] = 0; //@line 6207
     $$0 = $n - $$2428$lcssa | 0; //@line 6209
     break L1;
    } else {
     $$01$lcssa = $s; //@line 6212
     $$24$lcssa = $n; //@line 6212
    }
   } while (0);
   if (!$$24$lcssa) {
    $$0 = $n; //@line 6217
   } else {
    $$223 = $$01$lcssa; //@line 6220
    $$422 = $$24$lcssa; //@line 6220
    $30 = HEAP32[$ws >> 2] | 0; //@line 6220
    while (1) {
     $29 = HEAP32[$30 >> 2] | 0; //@line 6222
     if (($29 + -1 | 0) >>> 0 > 126) {
      if (!$29) {
       $$223$lcssa = $$223; //@line 6228
       $$422$lcssa = $$422; //@line 6228
       label = 19; //@line 6229
       break;
      }
      $35 = _wcrtomb($buf, $29, 0) | 0; //@line 6232
      if (($35 | 0) == -1) {
       $$0 = -1; //@line 6235
       break L1;
      }
      if ($$422 >>> 0 < $35 >>> 0) {
       $$422$lcssa82 = $$422; //@line 6240
       label = 22; //@line 6241
       break;
      }
      _wcrtomb($$223, HEAP32[$30 >> 2] | 0, 0) | 0; //@line 6245
      $$3 = $$223 + $35 | 0; //@line 6248
      $$5 = $$422 - $35 | 0; //@line 6248
      $46 = $30; //@line 6248
     } else {
      HEAP8[$$223 >> 0] = $29; //@line 6252
      $$3 = $$223 + 1 | 0; //@line 6255
      $$5 = $$422 + -1 | 0; //@line 6255
      $46 = HEAP32[$ws >> 2] | 0; //@line 6255
     }
     $30 = $46 + 4 | 0; //@line 6257
     HEAP32[$ws >> 2] = $30; //@line 6258
     if (!$$5) {
      $$0 = $n; //@line 6261
      break L1;
     } else {
      $$223 = $$3; //@line 6264
      $$422 = $$5; //@line 6264
     }
    }
    if ((label | 0) == 19) {
     HEAP8[$$223$lcssa >> 0] = 0; //@line 6268
     HEAP32[$ws >> 2] = 0; //@line 6269
     $$0 = $n - $$422$lcssa | 0; //@line 6271
     break;
    } else if ((label | 0) == 22) {
     $$0 = $n - $$422$lcssa82 | 0; //@line 6276
     break;
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 6282
 return $$0 | 0; //@line 6282
}
function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct, $__in_units, $__exp, $__a, $__a_end, $__decimal_point, $__thousands_sep, $__grouping, $__g, $__g_end, $__dc, $__atoms) {
 $__ct = $__ct | 0;
 $__in_units = $__in_units | 0;
 $__exp = $__exp | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__dc = $__dc | 0;
 $__atoms = $__atoms | 0;
 var $$0 = 0, $$0$i3 = 0, $$0$lcssa$i = 0, $14 = 0, $19 = 0, $22 = 0, $3 = 0, $33 = 0, $38 = 0, $40 = 0, $47 = 0, $48 = 0, $5 = 0, $51 = 0, $52 = 0, $64 = 0, $72 = 0, $81 = 0, $86 = 0, $88 = 0;
 L1 : do {
  if (($__ct | 0) == ($__decimal_point | 0)) {
   if (!(HEAP8[$__in_units >> 0] | 0)) {
    $$0 = -1; //@line 6754
   } else {
    HEAP8[$__in_units >> 0] = 0; //@line 6756
    $3 = HEAP32[$__a_end >> 2] | 0; //@line 6757
    HEAP32[$__a_end >> 2] = $3 + 1; //@line 6759
    HEAP8[$3 >> 0] = 46; //@line 6760
    $5 = HEAP8[$__grouping >> 0] | 0; //@line 6761
    if (!((($5 & 1) == 0 ? ($5 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0)) {
     $$0 = 0; //@line 6771
    } else {
     $14 = HEAP32[$__g_end >> 2] | 0; //@line 6773
     if (($14 - $__g | 0) < 160) {
      $19 = HEAP32[$__dc >> 2] | 0; //@line 6779
      HEAP32[$__g_end >> 2] = $14 + 4; //@line 6781
      HEAP32[$14 >> 2] = $19; //@line 6782
      $$0 = 0; //@line 6783
     } else {
      $$0 = 0; //@line 6785
     }
    }
   }
  } else {
   if (($__ct | 0) == ($__thousands_sep | 0)) {
    $22 = HEAP8[$__grouping >> 0] | 0; //@line 6792
    if ((($22 & 1) == 0 ? ($22 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0) {
     if (!(HEAP8[$__in_units >> 0] | 0)) {
      $$0 = -1; //@line 6805
      break;
     }
     $33 = HEAP32[$__g_end >> 2] | 0; //@line 6808
     if (($33 - $__g | 0) >= 160) {
      $$0 = 0; //@line 6814
      break;
     }
     $38 = HEAP32[$__dc >> 2] | 0; //@line 6817
     HEAP32[$__g_end >> 2] = $33 + 4; //@line 6819
     HEAP32[$33 >> 2] = $38; //@line 6820
     HEAP32[$__dc >> 2] = 0; //@line 6821
     $$0 = 0; //@line 6822
     break;
    }
   }
   $40 = $__atoms + 128 | 0; //@line 6826
   $$0$i3 = $__atoms; //@line 6827
   while (1) {
    if ((HEAP32[$$0$i3 >> 2] | 0) == ($__ct | 0)) {
     $$0$lcssa$i = $$0$i3; //@line 6832
     break;
    }
    $$0$i3 = $$0$i3 + 4 | 0; //@line 6835
    if (($$0$i3 | 0) == ($40 | 0)) {
     $$0$lcssa$i = $40; //@line 6838
     break;
    }
   }
   $47 = $$0$lcssa$i - $__atoms | 0; //@line 6846
   $48 = $47 >> 2; //@line 6847
   if (($47 | 0) > 124) {
    $$0 = -1; //@line 6850
   } else {
    $51 = HEAP8[20196 + $48 >> 0] | 0; //@line 6853
    switch ($48 | 0) {
    case 24:
    case 25:
     {
      $52 = HEAP32[$__a_end >> 2] | 0; //@line 6856
      if (($52 | 0) != ($__a | 0)) {
       if ((HEAPU8[$52 + -1 >> 0] & 95 | 0) != (HEAPU8[$__exp >> 0] & 127 | 0)) {
        $$0 = -1; //@line 6868
        break L1;
       }
      }
      HEAP32[$__a_end >> 2] = $52 + 1; //@line 6873
      HEAP8[$52 >> 0] = $51; //@line 6874
      $$0 = 0; //@line 6875
      break L1;
      break;
     }
    case 23:
    case 22:
     {
      HEAP8[$__exp >> 0] = 80; //@line 6880
      break;
     }
    default:
     {
      $64 = $51 & 95; //@line 6885
      if (($64 | 0) == (HEAP8[$__exp >> 0] | 0)) {
       HEAP8[$__exp >> 0] = $64 | 128; //@line 6892
       if (HEAP8[$__in_units >> 0] | 0) {
        HEAP8[$__in_units >> 0] = 0; //@line 6896
        $72 = HEAP8[$__grouping >> 0] | 0; //@line 6897
        if ((($72 & 1) == 0 ? ($72 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0) {
         $81 = HEAP32[$__g_end >> 2] | 0; //@line 6907
         if (($81 - $__g | 0) < 160) {
          $86 = HEAP32[$__dc >> 2] | 0; //@line 6913
          HEAP32[$__g_end >> 2] = $81 + 4; //@line 6915
          HEAP32[$81 >> 2] = $86; //@line 6916
         }
        }
       }
      }
     }
    }
    $88 = HEAP32[$__a_end >> 2] | 0; //@line 6923
    HEAP32[$__a_end >> 2] = $88 + 1; //@line 6925
    HEAP8[$88 >> 0] = $51; //@line 6926
    if (($47 | 0) > 84) {
     $$0 = 0; //@line 6929
    } else {
     HEAP32[$__dc >> 2] = (HEAP32[$__dc >> 2] | 0) + 1; //@line 6933
     $$0 = 0; //@line 6934
    }
   }
  }
 } while (0);
 return $$0 | 0; //@line 6939
}
function _scanexp($f, $pok) {
 $f = $f | 0;
 $pok = $pok | 0;
 var $$lcssa22 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $20 = 0, $35 = 0, $36 = 0, $48 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $59 = 0, $61 = 0, $62 = 0, $63 = 0, $78 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$112 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $x$013 = 0;
 $0 = $f + 4 | 0; //@line 8969
 $1 = HEAP32[$0 >> 2] | 0; //@line 8970
 $2 = $f + 100 | 0; //@line 8971
 if ($1 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
  HEAP32[$0 >> 2] = $1 + 1; //@line 8976
  $10 = HEAPU8[$1 >> 0] | 0; //@line 8979
 } else {
  $10 = ___shgetc($f) | 0; //@line 8982
 }
 switch ($10 | 0) {
 case 43:
 case 45:
  {
   $11 = ($10 | 0) == 45 & 1; //@line 8987
   $12 = HEAP32[$0 >> 2] | 0; //@line 8988
   if ($12 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
    HEAP32[$0 >> 2] = $12 + 1; //@line 8993
    $20 = HEAPU8[$12 >> 0] | 0; //@line 8996
   } else {
    $20 = ___shgetc($f) | 0; //@line 8999
   }
   if (($pok | 0) != 0 & ($20 + -48 | 0) >>> 0 > 9) {
    if (!(HEAP32[$2 >> 2] | 0)) {
     $c$0 = $20; //@line 9009
     $neg$0 = $11; //@line 9009
    } else {
     HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1; //@line 9013
     $c$0 = $20; //@line 9014
     $neg$0 = $11; //@line 9014
    }
   } else {
    $c$0 = $20; //@line 9017
    $neg$0 = $11; //@line 9017
   }
   break;
  }
 default:
  {
   $c$0 = $10; //@line 9022
   $neg$0 = 0; //@line 9022
  }
 }
 if (($c$0 + -48 | 0) >>> 0 > 9) {
  if (!(HEAP32[$2 >> 2] | 0)) {
   $98 = -2147483648; //@line 9031
   $99 = 0; //@line 9031
  } else {
   HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1; //@line 9035
   $98 = -2147483648; //@line 9036
   $99 = 0; //@line 9036
  }
 } else {
  $c$112 = $c$0; //@line 9039
  $x$013 = 0; //@line 9039
  while (1) {
   $35 = $c$112 + -48 + ($x$013 * 10 | 0) | 0; //@line 9043
   $36 = HEAP32[$0 >> 2] | 0; //@line 9044
   if ($36 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
    HEAP32[$0 >> 2] = $36 + 1; //@line 9049
    $c$1$be = HEAPU8[$36 >> 0] | 0; //@line 9052
   } else {
    $c$1$be = ___shgetc($f) | 0; //@line 9055
   }
   if (($c$1$be + -48 | 0) >>> 0 < 10 & ($35 | 0) < 214748364) {
    $c$112 = $c$1$be; //@line 9062
    $x$013 = $35; //@line 9062
   } else {
    $$lcssa22 = $35; //@line 9064
    $c$1$be$lcssa = $c$1$be; //@line 9064
    break;
   }
  }
  $48 = (($$lcssa22 | 0) < 0) << 31 >> 31; //@line 9069
  if (($c$1$be$lcssa + -48 | 0) >>> 0 < 10) {
   $53 = $$lcssa22; //@line 9073
   $54 = $48; //@line 9073
   $c$27 = $c$1$be$lcssa; //@line 9073
   while (1) {
    $55 = ___muldi3($53 | 0, $54 | 0, 10, 0) | 0; //@line 9075
    $56 = tempRet0; //@line 9076
    $59 = _i64Add($c$27 | 0, (($c$27 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0; //@line 9079
    $61 = _i64Add($59 | 0, tempRet0 | 0, $55 | 0, $56 | 0) | 0; //@line 9081
    $62 = tempRet0; //@line 9082
    $63 = HEAP32[$0 >> 2] | 0; //@line 9083
    if ($63 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $63 + 1; //@line 9088
     $c$2$be = HEAPU8[$63 >> 0] | 0; //@line 9091
    } else {
     $c$2$be = ___shgetc($f) | 0; //@line 9094
    }
    if (($c$2$be + -48 | 0) >>> 0 < 10 & (($62 | 0) < 21474836 | ($62 | 0) == 21474836 & $61 >>> 0 < 2061584302)) {
     $53 = $61; //@line 9105
     $54 = $62; //@line 9105
     $c$27 = $c$2$be; //@line 9105
    } else {
     $92 = $61; //@line 9107
     $93 = $62; //@line 9107
     $c$2$lcssa = $c$2$be; //@line 9107
     break;
    }
   }
  } else {
   $92 = $$lcssa22; //@line 9112
   $93 = $48; //@line 9112
   $c$2$lcssa = $c$1$be$lcssa; //@line 9112
  }
  if (($c$2$lcssa + -48 | 0) >>> 0 < 10) {
   do {
    $78 = HEAP32[$0 >> 2] | 0; //@line 9118
    if ($78 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $78 + 1; //@line 9123
     $c$3$be = HEAPU8[$78 >> 0] | 0; //@line 9126
    } else {
     $c$3$be = ___shgetc($f) | 0; //@line 9129
    }
   } while (($c$3$be + -48 | 0) >>> 0 < 10);
  }
  if (HEAP32[$2 >> 2] | 0) {
   HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1; //@line 9143
  }
  $91 = ($neg$0 | 0) != 0; //@line 9145
  $94 = _i64Subtract(0, 0, $92 | 0, $93 | 0) | 0; //@line 9146
  $98 = $91 ? tempRet0 : $93; //@line 9150
  $99 = $91 ? $94 : $92; //@line 9150
 }
 tempRet0 = $98; //@line 9152
 return $99 | 0; //@line 9153
}
function _mbsnrtowcs($wcs, $src, $n, $wn, $st) {
 $wcs = $wcs | 0;
 $src = $src | 0;
 $n = $n | 0;
 $wn = $wn | 0;
 $st = $st | 0;
 var $$02$ = 0, $$021 = 0, $$0218 = 0, $$1 = 0, $$13 = 0, $$216 = 0, $$24 = 0, $$313 = 0, $$cast = 0, $$lcssa = 0, $$lcssa57 = 0, $0 = 0, $1 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $19 = 0, $23 = 0, $24 = 0, $32 = 0, $37 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $cnt$019 = 0, $cnt$1 = 0, $cnt$214 = 0, $cnt$214$lcssa = 0, $cnt$3 = 0, $s = 0, $wbuf = 0, $wcs$ = 0, $wn$ = 0, $ws$020 = 0, $ws$020$lcssa56 = 0, $ws$09 = 0, $ws$1 = 0, $ws$215 = 0, sp = 0;
 sp = STACKTOP; //@line 5259
 STACKTOP = STACKTOP + 1040 | 0; //@line 5260
 $wbuf = sp + 8 | 0; //@line 5261
 $s = sp; //@line 5262
 $0 = HEAP32[$src >> 2] | 0; //@line 5263
 HEAP32[$s >> 2] = $0; //@line 5264
 $1 = ($wcs | 0) != 0; //@line 5265
 $wn$ = $1 ? $wn : 256; //@line 5266
 $wcs$ = $1 ? $wcs : $wbuf; //@line 5267
 $$cast = $0; //@line 5268
 L1 : do {
  if (($wn$ | 0) != 0 & ($0 | 0) != 0) {
   $$021 = $n; //@line 5274
   $$0218 = $wn$; //@line 5274
   $37 = $$cast; //@line 5274
   $cnt$019 = 0; //@line 5274
   $ws$020 = $wcs$; //@line 5274
   while (1) {
    $4 = $$021 >>> 2; //@line 5276
    $5 = $4 >>> 0 >= $$0218 >>> 0; //@line 5277
    if (!($$021 >>> 0 > 131 | $5)) {
     $$1 = $$021; //@line 5281
     $$24 = $$0218; //@line 5281
     $19 = $37; //@line 5281
     $cnt$1 = $cnt$019; //@line 5281
     $ws$09 = $ws$020; //@line 5281
     break L1;
    }
    $$02$ = $5 ? $$0218 : $4; //@line 5284
    $8 = $$021 - $$02$ | 0; //@line 5285
    $9 = _mbsrtowcs($ws$020, $s, $$02$, $st) | 0; //@line 5286
    if (($9 | 0) == -1) {
     $$lcssa57 = $8; //@line 5289
     $ws$020$lcssa56 = $ws$020; //@line 5289
     break;
    }
    $11 = ($ws$020 | 0) == ($wbuf | 0); //@line 5292
    $13 = $11 ? 0 : $9; //@line 5294
    $$13 = $$0218 - $13 | 0; //@line 5295
    $ws$1 = $11 ? $ws$020 : $ws$020 + ($9 << 2) | 0; //@line 5296
    $14 = $9 + $cnt$019 | 0; //@line 5297
    $15 = HEAP32[$s >> 2] | 0; //@line 5298
    if (($$0218 | 0) != ($13 | 0) & ($15 | 0) != 0) {
     $$021 = $8; //@line 5303
     $$0218 = $$13; //@line 5303
     $37 = $15; //@line 5303
     $cnt$019 = $14; //@line 5303
     $ws$020 = $ws$1; //@line 5303
    } else {
     $$1 = $8; //@line 5305
     $$24 = $$13; //@line 5305
     $19 = $15; //@line 5305
     $cnt$1 = $14; //@line 5305
     $ws$09 = $ws$1; //@line 5305
     break L1;
    }
   }
   $$1 = $$lcssa57; //@line 5310
   $$24 = 0; //@line 5310
   $19 = HEAP32[$s >> 2] | 0; //@line 5310
   $cnt$1 = -1; //@line 5310
   $ws$09 = $ws$020$lcssa56; //@line 5310
  } else {
   $$1 = $n; //@line 5312
   $$24 = $wn$; //@line 5312
   $19 = $$cast; //@line 5312
   $cnt$1 = 0; //@line 5312
   $ws$09 = $wcs$; //@line 5312
  }
 } while (0);
 L8 : do {
  if (!$19) {
   $cnt$3 = $cnt$1; //@line 5318
  } else {
   if (($$24 | 0) != 0 & ($$1 | 0) != 0) {
    $$216 = $$1; //@line 5324
    $$313 = $$24; //@line 5324
    $23 = $19; //@line 5324
    $cnt$214 = $cnt$1; //@line 5324
    $ws$215 = $ws$09; //@line 5324
    while (1) {
     $24 = _mbrtowc($ws$215, $23, $$216, $st) | 0; //@line 5326
     if (($24 + 2 | 0) >>> 0 < 3) {
      $$lcssa = $24; //@line 5330
      $cnt$214$lcssa = $cnt$214; //@line 5330
      break;
     }
     $23 = (HEAP32[$s >> 2] | 0) + $24 | 0; //@line 5334
     HEAP32[$s >> 2] = $23; //@line 5335
     $$313 = $$313 + -1 | 0; //@line 5338
     $32 = $cnt$214 + 1 | 0; //@line 5339
     if (!(($$313 | 0) != 0 & ($$216 | 0) != ($24 | 0))) {
      $cnt$3 = $32; //@line 5346
      break L8;
     } else {
      $$216 = $$216 - $24 | 0; //@line 5344
      $cnt$214 = $32; //@line 5344
      $ws$215 = $ws$215 + 4 | 0; //@line 5344
     }
    }
    switch ($$lcssa | 0) {
    case -1:
     {
      $cnt$3 = -1; //@line 5352
      break L8;
      break;
     }
    case 0:
     {
      HEAP32[$s >> 2] = 0; //@line 5357
      $cnt$3 = $cnt$214$lcssa; //@line 5358
      break L8;
      break;
     }
    default:
     {
      HEAP32[$st >> 2] = 0; //@line 5363
      $cnt$3 = $cnt$214$lcssa; //@line 5364
      break L8;
     }
    }
   } else {
    $cnt$3 = $cnt$1; //@line 5369
   }
  }
 } while (0);
 if ($1) {
  HEAP32[$src >> 2] = HEAP32[$s >> 2]; //@line 5375
 }
 STACKTOP = sp; //@line 5377
 return $cnt$3 | 0; //@line 5377
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i3$i$i9 = 0, $0 = 0, $13 = 0, $16 = 0, $26 = 0, $28 = 0, $3 = 0, $41 = 0, $42 = 0, $43 = 0, $51 = 0, $54 = 0, $66 = 0, $78 = 0, $79 = 0, $80 = 0, label = 0;
 L1 : while (1) {
  $0 = HEAP32[$__b >> 2] | 0; //@line 12597
  do {
   if (!$0) {
    $78 = 1; //@line 12601
   } else {
    $3 = HEAP32[$0 + 12 >> 2] | 0; //@line 12604
    if (($3 | 0) == (HEAP32[$0 + 16 >> 2] | 0)) {
     $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 63]($0) | 0; //@line 12613
    } else {
     $$0$i$i$i$i = HEAP32[$3 >> 2] | 0; //@line 12616
    }
    if (($$0$i$i$i$i | 0) == -1) {
     HEAP32[$__b >> 2] = 0; //@line 12620
     $78 = 1; //@line 12621
     break;
    } else {
     $78 = (HEAP32[$__b >> 2] | 0) == 0; //@line 12626
     break;
    }
   }
  } while (0);
  $13 = HEAP32[$__e >> 2] | 0; //@line 12631
  do {
   if (!$13) {
    label = 15; //@line 12635
   } else {
    $16 = HEAP32[$13 + 12 >> 2] | 0; //@line 12638
    if (($16 | 0) == (HEAP32[$13 + 16 >> 2] | 0)) {
     $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$13 >> 2] | 0) + 36 >> 2] & 63]($13) | 0; //@line 12647
    } else {
     $$0$i$i1$i$i = HEAP32[$16 >> 2] | 0; //@line 12650
    }
    if (($$0$i$i1$i$i | 0) == -1) {
     HEAP32[$__e >> 2] = 0; //@line 12654
     label = 15; //@line 12655
     break;
    } else {
     if ($78) {
      $79 = $13; //@line 12659
      break;
     } else {
      $$pre$i3$i$i9 = $13; //@line 12662
      break L1;
     }
    }
   }
  } while (0);
  if ((label | 0) == 15) {
   label = 0; //@line 12669
   if ($78) {
    $$pre$i3$i$i9 = 0; //@line 12671
    break;
   } else {
    $79 = 0; //@line 12674
   }
  }
  $26 = HEAP32[$__b >> 2] | 0; //@line 12677
  $28 = HEAP32[$26 + 12 >> 2] | 0; //@line 12679
  if (($28 | 0) == (HEAP32[$26 + 16 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$26 >> 2] | 0) + 36 >> 2] & 63]($26) | 0; //@line 12688
  } else {
   $$0$i$i = HEAP32[$28 >> 2] | 0; //@line 12691
  }
  if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 8192, $$0$i$i) | 0)) {
   $$pre$i3$i$i9 = $79; //@line 12698
   break;
  }
  $41 = HEAP32[$__b >> 2] | 0; //@line 12701
  $42 = $41 + 12 | 0; //@line 12702
  $43 = HEAP32[$42 >> 2] | 0; //@line 12703
  if (($43 | 0) == (HEAP32[$41 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$41 >> 2] | 0) + 40 >> 2] & 63]($41) | 0; //@line 12711
   continue;
  } else {
   HEAP32[$42 >> 2] = $43 + 4; //@line 12715
   continue;
  }
 }
 $51 = HEAP32[$__b >> 2] | 0; //@line 12719
 do {
  if (!$51) {
   $80 = 1; //@line 12723
  } else {
   $54 = HEAP32[$51 + 12 >> 2] | 0; //@line 12726
   if (($54 | 0) == (HEAP32[$51 + 16 >> 2] | 0)) {
    $$0$i$i$i$i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$51 >> 2] | 0) + 36 >> 2] & 63]($51) | 0; //@line 12735
   } else {
    $$0$i$i$i$i1 = HEAP32[$54 >> 2] | 0; //@line 12738
   }
   if (($$0$i$i$i$i1 | 0) == -1) {
    HEAP32[$__b >> 2] = 0; //@line 12742
    $80 = 1; //@line 12743
    break;
   } else {
    $80 = (HEAP32[$__b >> 2] | 0) == 0; //@line 12748
    break;
   }
  }
 } while (0);
 do {
  if (!$$pre$i3$i$i9) {
   label = 37; //@line 12756
  } else {
   $66 = HEAP32[$$pre$i3$i$i9 + 12 >> 2] | 0; //@line 12759
   if (($66 | 0) == (HEAP32[$$pre$i3$i$i9 + 16 >> 2] | 0)) {
    $$0$i$i1$i$i7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i9 >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i9) | 0; //@line 12768
   } else {
    $$0$i$i1$i$i7 = HEAP32[$66 >> 2] | 0; //@line 12771
   }
   if (($$0$i$i1$i$i7 | 0) == -1) {
    HEAP32[$__e >> 2] = 0; //@line 12775
    label = 37; //@line 12776
    break;
   } else {
    if ($80) {
     break;
    } else {
     label = 39; //@line 12782
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 37) {
  if ($80) {
   label = 39; //@line 12790
  }
 }
 if ((label | 0) == 39) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 12796
 }
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $16 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $28 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP; //@line 9340
 STACKTOP = STACKTOP + 352 | 0; //@line 9341
 $$byval_copy = sp + 304 | 0; //@line 9342
 $vararg_buffer9 = sp + 48 | 0; //@line 9343
 $vararg_buffer5 = sp + 32 | 0; //@line 9344
 $vararg_buffer2 = sp + 24 | 0; //@line 9345
 $vararg_buffer = sp + 8 | 0; //@line 9346
 $__fmt = sp; //@line 9347
 $__nar = sp + 308 | 0; //@line 9348
 $__nb = sp + 72 | 0; //@line 9349
 $__o = sp + 76 | 0; //@line 9350
 $__op = sp + 68 | 0; //@line 9351
 $__oe = sp + 64 | 0; //@line 9352
 $0 = sp + 60 | 0; //@line 9353
 $1 = sp + 56 | 0; //@line 9354
 $2 = $__fmt; //@line 9355
 HEAP32[$2 >> 2] = 37; //@line 9357
 HEAP32[$2 + 4 >> 2] = 0; //@line 9360
 $9 = __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmt + 1 | 0, 21597, HEAP32[$__iob + 4 >> 2] | 0) | 0; //@line 9364
 HEAP32[$__nb >> 2] = $__nar; //@line 9365
 $10 = __ZNSt3__16__clocEv() | 0; //@line 9366
 if ($9) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$__iob + 8 >> 2]; //@line 9370
  HEAPF64[$vararg_buffer + 8 >> 3] = $__v; //@line 9372
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $10, $__fmt, $vararg_buffer) | 0; //@line 9374
 } else {
  HEAPF64[$vararg_buffer2 >> 3] = $__v; //@line 9376
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $10, $__fmt, $vararg_buffer2) | 0; //@line 9378
 }
 if (($__nc$0 | 0) > 29) {
  $16 = __ZNSt3__16__clocEv() | 0; //@line 9382
  if ($9) {
   HEAP32[$vararg_buffer5 >> 2] = HEAP32[$__iob + 8 >> 2]; //@line 9386
   HEAPF64[$vararg_buffer5 + 8 >> 3] = $__v; //@line 9388
   $__nc$1 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $16, $__fmt, $vararg_buffer5) | 0; //@line 9390
  } else {
   HEAPF64[$vararg_buffer9 >> 3] = $__v; //@line 9392
   $__nc$1 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $16, $__fmt, $vararg_buffer9) | 0; //@line 9394
  }
  $21 = HEAP32[$__nb >> 2] | 0; //@line 9396
  if (!$21) {
   __ZSt17__throw_bad_allocv(); //@line 9399
  } else {
   $24 = $21; //@line 9402
   $38 = $21; //@line 9402
   $__nc$2 = $__nc$1; //@line 9402
  }
 } else {
  $24 = HEAP32[$__nb >> 2] | 0; //@line 9406
  $38 = 0; //@line 9406
  $__nc$2 = $__nc$0; //@line 9406
 }
 $23 = $24 + $__nc$2 | 0; //@line 9408
 $25 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($24, $23, $__iob) | 0; //@line 9409
 if (($24 | 0) == ($__nar | 0)) {
  $31 = $__nar; //@line 9412
  $37 = 0; //@line 9412
  $__ob$0 = $__o; //@line 9412
 } else {
  $28 = _malloc($__nc$2 << 3) | 0; //@line 9415
  if (!$28) {
   __ZSt17__throw_bad_allocv(); //@line 9418
  } else {
   $31 = $24; //@line 9421
   $37 = $28; //@line 9421
   $__ob$0 = $28; //@line 9421
  }
 }
 $30 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 9424
 HEAP32[$0 >> 2] = $30; //@line 9425
 __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($31, $25, $23, $__ob$0, $__op, $__oe, $0); //@line 9426
 __ZNSt3__114__shared_count16__release_sharedEv($30) | 0; //@line 9427
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2]; //@line 9429
 $33 = HEAP32[$__op >> 2] | 0; //@line 9430
 $34 = HEAP32[$__oe >> 2] | 0; //@line 9431
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 9432
 $35 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__ob$0, $33, $34, $__iob, $__fl) | 0; //@line 9433
 HEAP32[$__s >> 2] = $35; //@line 9434
 if ($37) {
  _free($37); //@line 9437
 }
 _free($38); //@line 9439
 STACKTOP = sp; //@line 9440
 return $35 | 0; //@line 9440
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $16 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $28 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP; //@line 8193
 STACKTOP = STACKTOP + 176 | 0; //@line 8194
 $$byval_copy = sp + 76 | 0; //@line 8195
 $vararg_buffer9 = sp + 48 | 0; //@line 8196
 $vararg_buffer5 = sp + 32 | 0; //@line 8197
 $vararg_buffer2 = sp + 24 | 0; //@line 8198
 $vararg_buffer = sp + 8 | 0; //@line 8199
 $__fmt = sp; //@line 8200
 $__nar = sp + 80 | 0; //@line 8201
 $__nb = sp + 72 | 0; //@line 8202
 $__o = sp + 110 | 0; //@line 8203
 $__op = sp + 68 | 0; //@line 8204
 $__oe = sp + 64 | 0; //@line 8205
 $0 = sp + 60 | 0; //@line 8206
 $1 = sp + 56 | 0; //@line 8207
 $2 = $__fmt; //@line 8208
 HEAP32[$2 >> 2] = 37; //@line 8210
 HEAP32[$2 + 4 >> 2] = 0; //@line 8213
 $9 = __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmt + 1 | 0, 21597, HEAP32[$__iob + 4 >> 2] | 0) | 0; //@line 8217
 HEAP32[$__nb >> 2] = $__nar; //@line 8218
 $10 = __ZNSt3__16__clocEv() | 0; //@line 8219
 if ($9) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$__iob + 8 >> 2]; //@line 8223
  HEAPF64[$vararg_buffer + 8 >> 3] = $__v; //@line 8225
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $10, $__fmt, $vararg_buffer) | 0; //@line 8227
 } else {
  HEAPF64[$vararg_buffer2 >> 3] = $__v; //@line 8229
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $10, $__fmt, $vararg_buffer2) | 0; //@line 8231
 }
 if (($__nc$0 | 0) > 29) {
  $16 = __ZNSt3__16__clocEv() | 0; //@line 8235
  if ($9) {
   HEAP32[$vararg_buffer5 >> 2] = HEAP32[$__iob + 8 >> 2]; //@line 8239
   HEAPF64[$vararg_buffer5 + 8 >> 3] = $__v; //@line 8241
   $__nc$1 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $16, $__fmt, $vararg_buffer5) | 0; //@line 8243
  } else {
   HEAPF64[$vararg_buffer9 >> 3] = $__v; //@line 8245
   $__nc$1 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $16, $__fmt, $vararg_buffer9) | 0; //@line 8247
  }
  $21 = HEAP32[$__nb >> 2] | 0; //@line 8249
  if (!$21) {
   __ZSt17__throw_bad_allocv(); //@line 8252
  } else {
   $24 = $21; //@line 8255
   $37 = $21; //@line 8255
   $__nc$2 = $__nc$1; //@line 8255
  }
 } else {
  $24 = HEAP32[$__nb >> 2] | 0; //@line 8259
  $37 = 0; //@line 8259
  $__nc$2 = $__nc$0; //@line 8259
 }
 $23 = $24 + $__nc$2 | 0; //@line 8261
 $25 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($24, $23, $__iob) | 0; //@line 8262
 if (($24 | 0) == ($__nar | 0)) {
  $31 = $__nar; //@line 8265
  $36 = 0; //@line 8265
  $__ob$0 = $__o; //@line 8265
 } else {
  $28 = _malloc($__nc$2 << 1) | 0; //@line 8268
  if (!$28) {
   __ZSt17__throw_bad_allocv(); //@line 8271
  } else {
   $31 = $24; //@line 8274
   $36 = $28; //@line 8274
   $__ob$0 = $28; //@line 8274
  }
 }
 $30 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 8277
 HEAP32[$0 >> 2] = $30; //@line 8278
 __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($31, $25, $23, $__ob$0, $__op, $__oe, $0); //@line 8279
 __ZNSt3__114__shared_count16__release_sharedEv($30) | 0; //@line 8280
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2]; //@line 8282
 $33 = HEAP32[$__op >> 2] | 0; //@line 8283
 $34 = HEAP32[$__oe >> 2] | 0; //@line 8284
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 8285
 $35 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__ob$0, $33, $34, $__iob, $__fl) | 0; //@line 8286
 _free($36); //@line 8287
 _free($37); //@line 8288
 STACKTOP = sp; //@line 8289
 return $35 | 0; //@line 8289
}
function _pop_arg($arg, $type, $ap) {
 $arg = $arg | 0;
 $type = $type | 0;
 $ap = $ap | 0;
 var $105 = 0, $106 = 0.0, $112 = 0, $113 = 0.0, $13 = 0, $14 = 0, $17 = 0, $26 = 0, $27 = 0, $28 = 0, $37 = 0, $38 = 0, $40 = 0, $43 = 0, $44 = 0, $53 = 0, $54 = 0, $56 = 0, $59 = 0, $6 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $79 = 0, $80 = 0, $82 = 0, $85 = 0, $94 = 0, $95 = 0, $96 = 0;
 L1 : do {
  if ($type >>> 0 <= 20) {
   do {
    switch ($type | 0) {
    case 9:
     {
      $6 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11401
      $7 = HEAP32[$6 >> 2] | 0; //@line 11402
      HEAP32[$ap >> 2] = $6 + 4; //@line 11404
      HEAP32[$arg >> 2] = $7; //@line 11405
      break L1;
      break;
     }
    case 10:
     {
      $13 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11421
      $14 = HEAP32[$13 >> 2] | 0; //@line 11422
      HEAP32[$ap >> 2] = $13 + 4; //@line 11424
      $17 = $arg; //@line 11427
      HEAP32[$17 >> 2] = $14; //@line 11429
      HEAP32[$17 + 4 >> 2] = (($14 | 0) < 0) << 31 >> 31; //@line 11432
      break L1;
      break;
     }
    case 11:
     {
      $26 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11448
      $27 = HEAP32[$26 >> 2] | 0; //@line 11449
      HEAP32[$ap >> 2] = $26 + 4; //@line 11451
      $28 = $arg; //@line 11452
      HEAP32[$28 >> 2] = $27; //@line 11454
      HEAP32[$28 + 4 >> 2] = 0; //@line 11457
      break L1;
      break;
     }
    case 12:
     {
      $37 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 11473
      $38 = $37; //@line 11474
      $40 = HEAP32[$38 >> 2] | 0; //@line 11476
      $43 = HEAP32[$38 + 4 >> 2] | 0; //@line 11479
      HEAP32[$ap >> 2] = $37 + 8; //@line 11481
      $44 = $arg; //@line 11482
      HEAP32[$44 >> 2] = $40; //@line 11484
      HEAP32[$44 + 4 >> 2] = $43; //@line 11487
      break L1;
      break;
     }
    case 13:
     {
      $53 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11503
      $54 = HEAP32[$53 >> 2] | 0; //@line 11504
      HEAP32[$ap >> 2] = $53 + 4; //@line 11506
      $56 = ($54 & 65535) << 16 >> 16; //@line 11508
      $59 = $arg; //@line 11511
      HEAP32[$59 >> 2] = $56; //@line 11513
      HEAP32[$59 + 4 >> 2] = (($56 | 0) < 0) << 31 >> 31; //@line 11516
      break L1;
      break;
     }
    case 14:
     {
      $68 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11532
      $69 = HEAP32[$68 >> 2] | 0; //@line 11533
      HEAP32[$ap >> 2] = $68 + 4; //@line 11535
      $70 = $arg; //@line 11537
      HEAP32[$70 >> 2] = $69 & 65535; //@line 11539
      HEAP32[$70 + 4 >> 2] = 0; //@line 11542
      break L1;
      break;
     }
    case 15:
     {
      $79 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11558
      $80 = HEAP32[$79 >> 2] | 0; //@line 11559
      HEAP32[$ap >> 2] = $79 + 4; //@line 11561
      $82 = ($80 & 255) << 24 >> 24; //@line 11563
      $85 = $arg; //@line 11566
      HEAP32[$85 >> 2] = $82; //@line 11568
      HEAP32[$85 + 4 >> 2] = (($82 | 0) < 0) << 31 >> 31; //@line 11571
      break L1;
      break;
     }
    case 16:
     {
      $94 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11587
      $95 = HEAP32[$94 >> 2] | 0; //@line 11588
      HEAP32[$ap >> 2] = $94 + 4; //@line 11590
      $96 = $arg; //@line 11592
      HEAP32[$96 >> 2] = $95 & 255; //@line 11594
      HEAP32[$96 + 4 >> 2] = 0; //@line 11597
      break L1;
      break;
     }
    case 17:
     {
      $105 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 11613
      $106 = +HEAPF64[$105 >> 3]; //@line 11614
      HEAP32[$ap >> 2] = $105 + 8; //@line 11616
      HEAPF64[$arg >> 3] = $106; //@line 11617
      break L1;
      break;
     }
    case 18:
     {
      $112 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 11633
      $113 = +HEAPF64[$112 >> 3]; //@line 11634
      HEAP32[$ap >> 2] = $112 + 8; //@line 11636
      HEAPF64[$arg >> 3] = $113; //@line 11637
      break L1;
      break;
     }
    default:
     {
      break L1;
     }
    }
   } while (0);
  }
 } while (0);
 return;
}
function __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $11 = 0, $12 = 0, $17 = 0, $24 = 0, $35 = 0, $38 = 0, $40 = 0, $50 = 0, $55 = 0, $6 = 0, $66 = 0, $72 = 0, $77 = 0, $8 = 0, label = 0;
 HEAP32[$frm_nxt >> 2] = $frm; //@line 16245
 HEAP32[$to_nxt >> 2] = $to; //@line 16246
 $$pre1 = $to_end; //@line 16249
 if (!($mode & 2)) {
  label = 4; //@line 16251
 } else {
  if (($$pre1 - $to | 0) < 3) {
   $$0 = 1; //@line 16257
  } else {
   HEAP32[$to_nxt >> 2] = $to + 1; //@line 16260
   HEAP8[$to >> 0] = -17; //@line 16261
   $6 = HEAP32[$to_nxt >> 2] | 0; //@line 16262
   HEAP32[$to_nxt >> 2] = $6 + 1; //@line 16264
   HEAP8[$6 >> 0] = -69; //@line 16265
   $8 = HEAP32[$to_nxt >> 2] | 0; //@line 16266
   HEAP32[$to_nxt >> 2] = $8 + 1; //@line 16268
   HEAP8[$8 >> 0] = -65; //@line 16269
   label = 4; //@line 16270
  }
 }
 L4 : do {
  if ((label | 0) == 4) {
   $$pre = HEAP32[$frm_nxt >> 2] | 0; //@line 16275
   if ($$pre >>> 0 < $frm_end >>> 0) {
    $12 = $$pre; //@line 16278
    while (1) {
     $11 = HEAP32[$12 >> 2] | 0; //@line 16280
     if ($11 >>> 0 > $Maxcode >>> 0 | ($11 & -2048 | 0) == 55296) {
      $$0 = 2; //@line 16286
      break L4;
     }
     do {
      if ($11 >>> 0 < 128) {
       $17 = HEAP32[$to_nxt >> 2] | 0; //@line 16292
       if (($$pre1 - $17 | 0) < 1) {
        $$0 = 1; //@line 16297
        break L4;
       }
       HEAP32[$to_nxt >> 2] = $17 + 1; //@line 16302
       HEAP8[$17 >> 0] = $11; //@line 16303
      } else {
       if ($11 >>> 0 < 2048) {
        $24 = HEAP32[$to_nxt >> 2] | 0; //@line 16307
        if (($$pre1 - $24 | 0) < 2) {
         $$0 = 1; //@line 16312
         break L4;
        }
        HEAP32[$to_nxt >> 2] = $24 + 1; //@line 16319
        HEAP8[$24 >> 0] = $11 >>> 6 | 192; //@line 16320
        $35 = HEAP32[$to_nxt >> 2] | 0; //@line 16324
        HEAP32[$to_nxt >> 2] = $35 + 1; //@line 16326
        HEAP8[$35 >> 0] = $11 & 63 | 128; //@line 16327
        break;
       }
       $38 = HEAP32[$to_nxt >> 2] | 0; //@line 16331
       $40 = $$pre1 - $38 | 0; //@line 16333
       if ($11 >>> 0 < 65536) {
        if (($40 | 0) < 3) {
         $$0 = 1; //@line 16337
         break L4;
        }
        HEAP32[$to_nxt >> 2] = $38 + 1; //@line 16344
        HEAP8[$38 >> 0] = $11 >>> 12 | 224; //@line 16345
        $50 = HEAP32[$to_nxt >> 2] | 0; //@line 16350
        HEAP32[$to_nxt >> 2] = $50 + 1; //@line 16352
        HEAP8[$50 >> 0] = $11 >>> 6 & 63 | 128; //@line 16353
        $55 = HEAP32[$to_nxt >> 2] | 0; //@line 16357
        HEAP32[$to_nxt >> 2] = $55 + 1; //@line 16359
        HEAP8[$55 >> 0] = $11 & 63 | 128; //@line 16360
        break;
       } else {
        if (($40 | 0) < 4) {
         $$0 = 1; //@line 16365
         break L4;
        }
        HEAP32[$to_nxt >> 2] = $38 + 1; //@line 16372
        HEAP8[$38 >> 0] = $11 >>> 18 | 240; //@line 16373
        $66 = HEAP32[$to_nxt >> 2] | 0; //@line 16378
        HEAP32[$to_nxt >> 2] = $66 + 1; //@line 16380
        HEAP8[$66 >> 0] = $11 >>> 12 & 63 | 128; //@line 16381
        $72 = HEAP32[$to_nxt >> 2] | 0; //@line 16386
        HEAP32[$to_nxt >> 2] = $72 + 1; //@line 16388
        HEAP8[$72 >> 0] = $11 >>> 6 & 63 | 128; //@line 16389
        $77 = HEAP32[$to_nxt >> 2] | 0; //@line 16393
        HEAP32[$to_nxt >> 2] = $77 + 1; //@line 16395
        HEAP8[$77 >> 0] = $11 & 63 | 128; //@line 16396
        break;
       }
      }
     } while (0);
     $12 = (HEAP32[$frm_nxt >> 2] | 0) + 4 | 0; //@line 16402
     HEAP32[$frm_nxt >> 2] = $12; //@line 16403
     if ($12 >>> 0 >= $frm_end >>> 0) {
      $$0 = 0; //@line 16408
      break;
     }
    }
   } else {
    $$0 = 0; //@line 16413
   }
  }
 } while (0);
 return $$0 | 0; //@line 16417
}
function _wcsnrtombs($dst, $wcs, $wn, $n, $st) {
 $dst = $dst | 0;
 $wcs = $wcs | 0;
 $wn = $wn | 0;
 $n = $n | 0;
 $st = $st | 0;
 var $$02$$0 = 0, $$021 = 0, $$0218 = 0, $$1 = 0, $$13 = 0, $$216 = 0, $$24 = 0, $$313 = 0, $$cast = 0, $$lcssa = 0, $$lcssa57 = 0, $0 = 0, $1 = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0, $18 = 0, $23 = 0, $24 = 0, $33 = 0, $38 = 0, $4 = 0, $7 = 0, $8 = 0, $buf = 0, $cnt$019 = 0, $cnt$1 = 0, $cnt$214 = 0, $cnt$214$lcssa = 0, $cnt$3 = 0, $dst$ = 0, $n$ = 0, $s$020 = 0, $s$020$lcssa56 = 0, $s$09 = 0, $s$1 = 0, $s$215 = 0, $ws = 0, sp = 0;
 sp = STACKTOP; //@line 6006
 STACKTOP = STACKTOP + 272 | 0; //@line 6007
 $buf = sp + 8 | 0; //@line 6008
 $ws = sp; //@line 6009
 $0 = HEAP32[$wcs >> 2] | 0; //@line 6010
 HEAP32[$ws >> 2] = $0; //@line 6011
 $1 = ($dst | 0) != 0; //@line 6012
 $n$ = $1 ? $n : 256; //@line 6013
 $dst$ = $1 ? $dst : $buf; //@line 6014
 $$cast = $0; //@line 6015
 L1 : do {
  if (($n$ | 0) != 0 & ($0 | 0) != 0) {
   $$021 = $wn; //@line 6021
   $$0218 = $n$; //@line 6021
   $38 = $$cast; //@line 6021
   $cnt$019 = 0; //@line 6021
   $s$020 = $dst$; //@line 6021
   while (1) {
    $4 = $$021 >>> 0 >= $$0218 >>> 0; //@line 6023
    if (!($4 | $$021 >>> 0 > 32)) {
     $$1 = $$021; //@line 6027
     $$24 = $$0218; //@line 6027
     $18 = $38; //@line 6027
     $cnt$1 = $cnt$019; //@line 6027
     $s$09 = $s$020; //@line 6027
     break L1;
    }
    $$02$$0 = $4 ? $$0218 : $$021; //@line 6030
    $7 = $$021 - $$02$$0 | 0; //@line 6031
    $8 = _wcsrtombs($s$020, $ws, $$02$$0, 0) | 0; //@line 6032
    if (($8 | 0) == -1) {
     $$lcssa57 = $7; //@line 6035
     $s$020$lcssa56 = $s$020; //@line 6035
     break;
    }
    $10 = ($s$020 | 0) == ($buf | 0); //@line 6038
    $12 = $10 ? 0 : $8; //@line 6040
    $$13 = $$0218 - $12 | 0; //@line 6041
    $s$1 = $10 ? $s$020 : $s$020 + $8 | 0; //@line 6042
    $13 = $8 + $cnt$019 | 0; //@line 6043
    $14 = HEAP32[$ws >> 2] | 0; //@line 6044
    if (($$0218 | 0) != ($12 | 0) & ($14 | 0) != 0) {
     $$021 = $7; //@line 6049
     $$0218 = $$13; //@line 6049
     $38 = $14; //@line 6049
     $cnt$019 = $13; //@line 6049
     $s$020 = $s$1; //@line 6049
    } else {
     $$1 = $7; //@line 6051
     $$24 = $$13; //@line 6051
     $18 = $14; //@line 6051
     $cnt$1 = $13; //@line 6051
     $s$09 = $s$1; //@line 6051
     break L1;
    }
   }
   $$1 = $$lcssa57; //@line 6056
   $$24 = 0; //@line 6056
   $18 = HEAP32[$ws >> 2] | 0; //@line 6056
   $cnt$1 = -1; //@line 6056
   $s$09 = $s$020$lcssa56; //@line 6056
  } else {
   $$1 = $wn; //@line 6058
   $$24 = $n$; //@line 6058
   $18 = $$cast; //@line 6058
   $cnt$1 = 0; //@line 6058
   $s$09 = $dst$; //@line 6058
  }
 } while (0);
 L8 : do {
  if (!$18) {
   $cnt$3 = $cnt$1; //@line 6064
  } else {
   if (($$24 | 0) != 0 & ($$1 | 0) != 0) {
    $$216 = $$1; //@line 6070
    $$313 = $$24; //@line 6070
    $23 = $18; //@line 6070
    $cnt$214 = $cnt$1; //@line 6070
    $s$215 = $s$09; //@line 6070
    while (1) {
     $24 = _wcrtomb($s$215, HEAP32[$23 >> 2] | 0, 0) | 0; //@line 6073
     if (($24 + 1 | 0) >>> 0 < 2) {
      $$lcssa = $24; //@line 6077
      $cnt$214$lcssa = $cnt$214; //@line 6077
      break;
     }
     $23 = (HEAP32[$ws >> 2] | 0) + 4 | 0; //@line 6081
     HEAP32[$ws >> 2] = $23; //@line 6082
     $$216 = $$216 + -1 | 0; //@line 6083
     $33 = $cnt$214 + 1 | 0; //@line 6086
     if (!(($$313 | 0) != ($24 | 0) & ($$216 | 0) != 0)) {
      $cnt$3 = $33; //@line 6093
      break L8;
     } else {
      $$313 = $$313 - $24 | 0; //@line 6091
      $cnt$214 = $33; //@line 6091
      $s$215 = $s$215 + $24 | 0; //@line 6091
     }
    }
    if (!$$lcssa) {
     HEAP32[$ws >> 2] = 0; //@line 6099
     $cnt$3 = $cnt$214$lcssa; //@line 6100
    } else {
     $cnt$3 = -1; //@line 6102
    }
   } else {
    $cnt$3 = $cnt$1; //@line 6105
   }
  }
 } while (0);
 if ($1) {
  HEAP32[$wcs >> 2] = HEAP32[$ws >> 2]; //@line 6111
 }
 STACKTOP = sp; //@line 6113
 return $cnt$3 | 0; //@line 6113
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i2$i$i611 = 0, $0 = 0, $12 = 0, $13 = 0, $14 = 0, $28 = 0, $30 = 0, $48 = 0, $49 = 0, $50 = 0, $60 = 0, $70 = 0, $71 = 0, label = 0;
 $0 = HEAP32[$__b >> 2] | 0; //@line 11137
 do {
  if (!$0) {
   $13 = 0; //@line 11141
  } else {
   if ((HEAP32[$0 + 12 >> 2] | 0) == (HEAP32[$0 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 63]($0) | 0) == -1) {
     HEAP32[$__b >> 2] = 0; //@line 11155
     $13 = 0; //@line 11156
     break;
    } else {
     $13 = HEAP32[$__b >> 2] | 0; //@line 11160
     break;
    }
   } else {
    $13 = $0; //@line 11164
   }
  }
 } while (0);
 $12 = ($13 | 0) == 0; //@line 11168
 $14 = HEAP32[$__e >> 2] | 0; //@line 11169
 do {
  if (!$14) {
   label = 11; //@line 11173
  } else {
   if ((HEAP32[$14 + 12 >> 2] | 0) == (HEAP32[$14 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$14 >> 2] | 0) + 36 >> 2] & 63]($14) | 0) == -1) {
     HEAP32[$__e >> 2] = 0; //@line 11187
     label = 11; //@line 11188
     break;
    }
   }
   if ($12) {
    $$pre$i2$i$i611 = $14; //@line 11193
    label = 13; //@line 11194
   } else {
    label = 12; //@line 11196
   }
  }
 } while (0);
 if ((label | 0) == 11) {
  if ($12) {
   label = 12; //@line 11202
  } else {
   $$pre$i2$i$i611 = 0; //@line 11204
   label = 13; //@line 11205
  }
 }
 L16 : do {
  if ((label | 0) == 12) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6; //@line 11212
  } else if ((label | 0) == 13) {
   $28 = HEAP32[$__b >> 2] | 0; //@line 11215
   $30 = HEAP32[$28 + 12 >> 2] | 0; //@line 11217
   if (($30 | 0) == (HEAP32[$28 + 16 >> 2] | 0)) {
    $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$28 >> 2] | 0) + 36 >> 2] & 63]($28) | 0; //@line 11226
   } else {
    $$0$i$i = HEAPU8[$30 >> 0] | 0; //@line 11230
   }
   if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 36 >> 2] & 31]($__ct, $$0$i$i & 255, 0) | 0) << 24 >> 24 != 37) {
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 11241
    break;
   }
   $48 = HEAP32[$__b >> 2] | 0; //@line 11244
   $49 = $48 + 12 | 0; //@line 11245
   $50 = HEAP32[$49 >> 2] | 0; //@line 11246
   if (($50 | 0) == (HEAP32[$48 + 16 >> 2] | 0)) {
    FUNCTION_TABLE_ii[HEAP32[(HEAP32[$48 >> 2] | 0) + 40 >> 2] & 63]($48) | 0; //@line 11254
    $$pre = HEAP32[$__b >> 2] | 0; //@line 11255
    if (!$$pre) {
     $71 = 0; //@line 11258
    } else {
     $60 = $$pre; //@line 11260
     label = 21; //@line 11261
    }
   } else {
    HEAP32[$49 >> 2] = $50 + 1; //@line 11265
    $60 = $48; //@line 11266
    label = 21; //@line 11267
   }
   do {
    if ((label | 0) == 21) {
     if ((HEAP32[$60 + 12 >> 2] | 0) == (HEAP32[$60 + 16 >> 2] | 0)) {
      if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$60 >> 2] | 0) + 36 >> 2] & 63]($60) | 0) == -1) {
       HEAP32[$__b >> 2] = 0; //@line 11283
       $71 = 0; //@line 11284
       break;
      } else {
       $71 = HEAP32[$__b >> 2] | 0; //@line 11288
       break;
      }
     } else {
      $71 = $60; //@line 11292
     }
    }
   } while (0);
   $70 = ($71 | 0) == 0; //@line 11296
   do {
    if (!$$pre$i2$i$i611) {
     label = 30; //@line 11300
    } else {
     if ((HEAP32[$$pre$i2$i$i611 + 12 >> 2] | 0) == (HEAP32[$$pre$i2$i$i611 + 16 >> 2] | 0)) {
      if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i611 >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i611) | 0) == -1) {
       HEAP32[$__e >> 2] = 0; //@line 11314
       label = 30; //@line 11315
       break;
      }
     }
     if ($70) {
      break L16;
     }
    }
   } while (0);
   if ((label | 0) == 30) {
    if (!$70) {
     break;
    }
   }
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 11331
  }
 } while (0);
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$0$i$i = 0, $$pre$i2$i$i6 = 0, $0 = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $27 = 0, $29 = 0, $46 = 0, $47 = 0, $48 = 0, $56 = 0, $68 = 0, $69 = 0, $83 = 0, label = 0;
 $0 = $__ct + 8 | 0; //@line 10757
 L1 : while (1) {
  $1 = HEAP32[$__b >> 2] | 0; //@line 10759
  do {
   if (!$1) {
    $14 = 0; //@line 10763
   } else {
    if ((HEAP32[$1 + 12 >> 2] | 0) == (HEAP32[$1 + 16 >> 2] | 0)) {
     if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 36 >> 2] & 63]($1) | 0) == -1) {
      HEAP32[$__b >> 2] = 0; //@line 10777
      $14 = 0; //@line 10778
      break;
     } else {
      $14 = HEAP32[$__b >> 2] | 0; //@line 10782
      break;
     }
    } else {
     $14 = $1; //@line 10786
    }
   }
  } while (0);
  $13 = ($14 | 0) == 0; //@line 10790
  $15 = HEAP32[$__e >> 2] | 0; //@line 10791
  do {
   if (!$15) {
    label = 12; //@line 10795
   } else {
    if ((HEAP32[$15 + 12 >> 2] | 0) != (HEAP32[$15 + 16 >> 2] | 0)) {
     if ($13) {
      $83 = $15; //@line 10804
      break;
     } else {
      $$pre$i2$i$i6 = $15; //@line 10807
      break L1;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$15 >> 2] | 0) + 36 >> 2] & 63]($15) | 0) == -1) {
     HEAP32[$__e >> 2] = 0; //@line 10817
     label = 12; //@line 10818
     break;
    } else {
     if ($13) {
      $83 = $15; //@line 10822
      break;
     } else {
      $$pre$i2$i$i6 = $15; //@line 10825
      break L1;
     }
    }
   }
  } while (0);
  if ((label | 0) == 12) {
   label = 0; //@line 10832
   if ($13) {
    $$pre$i2$i$i6 = 0; //@line 10834
    break;
   } else {
    $83 = 0; //@line 10837
   }
  }
  $27 = HEAP32[$__b >> 2] | 0; //@line 10840
  $29 = HEAP32[$27 + 12 >> 2] | 0; //@line 10842
  if (($29 | 0) == (HEAP32[$27 + 16 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$27 >> 2] | 0) + 36 >> 2] & 63]($27) | 0; //@line 10851
  } else {
   $$0$i$i = HEAPU8[$29 >> 0] | 0; //@line 10855
  }
  if (($$0$i$i & 255) << 24 >> 24 <= -1) {
   $$pre$i2$i$i6 = $83; //@line 10860
   break;
  }
  if (!(HEAP16[(HEAP32[$0 >> 2] | 0) + ($$0$i$i << 24 >> 24 << 1) >> 1] & 8192)) {
   $$pre$i2$i$i6 = $83; //@line 10871
   break;
  }
  $46 = HEAP32[$__b >> 2] | 0; //@line 10874
  $47 = $46 + 12 | 0; //@line 10875
  $48 = HEAP32[$47 >> 2] | 0; //@line 10876
  if (($48 | 0) == (HEAP32[$46 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$46 >> 2] | 0) + 40 >> 2] & 63]($46) | 0; //@line 10884
   continue;
  } else {
   HEAP32[$47 >> 2] = $48 + 1; //@line 10888
   continue;
  }
 }
 $56 = HEAP32[$__b >> 2] | 0; //@line 10892
 do {
  if (!$56) {
   $69 = 0; //@line 10896
  } else {
   if ((HEAP32[$56 + 12 >> 2] | 0) == (HEAP32[$56 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$56 >> 2] | 0) + 36 >> 2] & 63]($56) | 0) == -1) {
     HEAP32[$__b >> 2] = 0; //@line 10910
     $69 = 0; //@line 10911
     break;
    } else {
     $69 = HEAP32[$__b >> 2] | 0; //@line 10915
     break;
    }
   } else {
    $69 = $56; //@line 10919
   }
  }
 } while (0);
 $68 = ($69 | 0) == 0; //@line 10923
 do {
  if (!$$pre$i2$i$i6) {
   label = 32; //@line 10927
  } else {
   if ((HEAP32[$$pre$i2$i$i6 + 12 >> 2] | 0) == (HEAP32[$$pre$i2$i$i6 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i6 >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i6) | 0) == -1) {
     HEAP32[$__e >> 2] = 0; //@line 10941
     label = 32; //@line 10942
     break;
    }
   }
   if (!$68) {
    label = 33; //@line 10947
   }
  }
 } while (0);
 if ((label | 0) == 32) {
  if ($68) {
   label = 33; //@line 10953
  }
 }
 if ((label | 0) == 33) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2; //@line 10959
 }
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $29 = 0, $30 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 8892
 STACKTOP = STACKTOP + 336 | 0; //@line 8893
 $$byval_copy = sp + 296 | 0; //@line 8894
 $vararg_buffer5 = sp + 32 | 0; //@line 8895
 $vararg_buffer2 = sp + 24 | 0; //@line 8896
 $vararg_buffer = sp + 8 | 0; //@line 8897
 $__fmt = sp; //@line 8898
 $__nar = sp + 300 | 0; //@line 8899
 $__nb = sp + 64 | 0; //@line 8900
 $__o = sp + 68 | 0; //@line 8901
 $__op = sp + 60 | 0; //@line 8902
 $__oe = sp + 56 | 0; //@line 8903
 $0 = sp + 52 | 0; //@line 8904
 $1 = sp + 48 | 0; //@line 8905
 $2 = $__fmt; //@line 8906
 HEAP32[$2 >> 2] = 37; //@line 8908
 HEAP32[$2 + 4 >> 2] = 0; //@line 8911
 $9 = __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmt + 1 | 0, 21596, HEAP32[$__iob + 4 >> 2] | 0) | 0; //@line 8915
 HEAP32[$__nb >> 2] = $__nar; //@line 8916
 $10 = __ZNSt3__16__clocEv() | 0; //@line 8917
 if ($9) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$__iob + 8 >> 2]; //@line 8921
  HEAPF64[$vararg_buffer + 8 >> 3] = $__v; //@line 8923
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $10, $__fmt, $vararg_buffer) | 0; //@line 8925
 } else {
  HEAPF64[$vararg_buffer2 >> 3] = $__v; //@line 8927
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $10, $__fmt, $vararg_buffer2) | 0; //@line 8929
 }
 if (($__nc$0 | 0) > 29) {
  $16 = __ZNSt3__16__clocEv() | 0; //@line 8933
  HEAP32[$vararg_buffer5 >> 2] = HEAP32[$__iob + 8 >> 2]; //@line 8936
  HEAPF64[$vararg_buffer5 + 8 >> 3] = $__v; //@line 8938
  $19 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $16, $__fmt, $vararg_buffer5) | 0; //@line 8939
  $20 = HEAP32[$__nb >> 2] | 0; //@line 8940
  if (!$20) {
   __ZSt17__throw_bad_allocv(); //@line 8943
  } else {
   $23 = $20; //@line 8946
   $37 = $20; //@line 8946
   $__nc$1 = $19; //@line 8946
  }
 } else {
  $23 = HEAP32[$__nb >> 2] | 0; //@line 8950
  $37 = 0; //@line 8950
  $__nc$1 = $__nc$0; //@line 8950
 }
 $22 = $23 + $__nc$1 | 0; //@line 8952
 $24 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($23, $22, $__iob) | 0; //@line 8953
 if (($23 | 0) == ($__nar | 0)) {
  $30 = $__nar; //@line 8956
  $36 = 0; //@line 8956
  $__ob$0 = $__o; //@line 8956
 } else {
  $27 = _malloc($__nc$1 << 3) | 0; //@line 8959
  if (!$27) {
   __ZSt17__throw_bad_allocv(); //@line 8962
  } else {
   $30 = $23; //@line 8965
   $36 = $27; //@line 8965
   $__ob$0 = $27; //@line 8965
  }
 }
 $29 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 8968
 HEAP32[$0 >> 2] = $29; //@line 8969
 __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($30, $24, $22, $__ob$0, $__op, $__oe, $0); //@line 8970
 __ZNSt3__114__shared_count16__release_sharedEv($29) | 0; //@line 8971
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2]; //@line 8973
 $32 = HEAP32[$__op >> 2] | 0; //@line 8974
 $33 = HEAP32[$__oe >> 2] | 0; //@line 8975
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 8976
 $34 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__ob$0, $32, $33, $__iob, $__fl) | 0; //@line 8977
 HEAP32[$__s >> 2] = $34; //@line 8978
 if ($36) {
  _free($36); //@line 8981
 }
 _free($37); //@line 8983
 STACKTOP = sp; //@line 8984
 return $34 | 0; //@line 8984
}
function __ZNSt3__18ios_base4InitC2Ev($this) {
 $this = $this | 0;
 var $$sum$i1 = 0, $$sum$i11 = 0, $$sum1$i12 = 0, $$sum1$i2 = 0, $0 = 0, $1 = 0, $10 = 0, $18 = 0, $29 = 0, $36 = 0, $40 = 0, $5 = 0, $51 = 0, $6 = 0, $62 = 0;
 $0 = HEAP32[637] | 0; //@line 787
 __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(7312, $0, 7368); //@line 788
 HEAP32[1658] = 8060; //@line 789
 HEAP32[1660] = 8080; //@line 790
 HEAP32[1659] = 0; //@line 791
 $1 = HEAP32[2012] | 0; //@line 792
 __ZNSt3__18ios_base4initEPv(6632 + $1 | 0, 7312); //@line 794
 HEAP32[6632 + ($1 + 72) >> 2] = 0; //@line 797
 HEAP32[6632 + ($1 + 76) >> 2] = -1; //@line 800
 $5 = HEAP32[638] | 0; //@line 801
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(7416, $5, 7376); //@line 802
 HEAP32[1680] = 8140; //@line 803
 HEAP32[1681] = 8160; //@line 804
 $6 = HEAP32[2032] | 0; //@line 805
 __ZNSt3__18ios_base4initEPv(6720 + $6 | 0, 7416); //@line 807
 $$sum$i1 = $6 + 72 | 0; //@line 808
 HEAP32[6720 + $$sum$i1 >> 2] = 0; //@line 810
 $$sum1$i2 = $6 + 76 | 0; //@line 811
 HEAP32[6720 + $$sum1$i2 >> 2] = -1; //@line 813
 $10 = HEAP32[636] | 0; //@line 814
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(7464, $10, 7384); //@line 815
 HEAP32[1701] = 8140; //@line 816
 HEAP32[1702] = 8160; //@line 817
 __ZNSt3__18ios_base4initEPv(6804 + $6 | 0, 7464); //@line 819
 HEAP32[6804 + $$sum$i1 >> 2] = 0; //@line 821
 HEAP32[6804 + $$sum1$i2 >> 2] = -1; //@line 823
 $18 = HEAP32[6804 + ((HEAP32[(HEAP32[1701] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0; //@line 829
 HEAP32[1722] = 8140; //@line 830
 HEAP32[1723] = 8160; //@line 831
 __ZNSt3__18ios_base4initEPv(6888 + $6 | 0, $18); //@line 833
 HEAP32[6888 + $$sum$i1 >> 2] = 0; //@line 835
 HEAP32[6888 + $$sum1$i2 >> 2] = -1; //@line 837
 HEAP32[6632 + ((HEAP32[(HEAP32[1658] | 0) + -12 >> 2] | 0) + 72) >> 2] = 6720; //@line 843
 $29 = 6804 + ((HEAP32[(HEAP32[1701] | 0) + -12 >> 2] | 0) + 4) | 0; //@line 848
 HEAP32[$29 >> 2] = HEAP32[$29 >> 2] | 8192; //@line 851
 HEAP32[6804 + ((HEAP32[(HEAP32[1701] | 0) + -12 >> 2] | 0) + 72) >> 2] = 6720; //@line 857
 __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(7512, $0, 7392); //@line 858
 HEAP32[1743] = 8100; //@line 859
 HEAP32[1745] = 8120; //@line 860
 HEAP32[1744] = 0; //@line 861
 $36 = HEAP32[2022] | 0; //@line 862
 __ZNSt3__18ios_base4initEPv(6972 + $36 | 0, 7512); //@line 864
 HEAP32[6972 + ($36 + 72) >> 2] = 0; //@line 867
 HEAP32[6972 + ($36 + 76) >> 2] = -1; //@line 870
 __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(7568, $5, 7400); //@line 871
 HEAP32[1765] = 8180; //@line 872
 HEAP32[1766] = 8200; //@line 873
 $40 = HEAP32[2042] | 0; //@line 874
 __ZNSt3__18ios_base4initEPv(7060 + $40 | 0, 7568); //@line 876
 $$sum$i11 = $40 + 72 | 0; //@line 877
 HEAP32[7060 + $$sum$i11 >> 2] = 0; //@line 879
 $$sum1$i12 = $40 + 76 | 0; //@line 880
 HEAP32[7060 + $$sum1$i12 >> 2] = -1; //@line 882
 __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(7616, $10, 7408); //@line 883
 HEAP32[1786] = 8180; //@line 884
 HEAP32[1787] = 8200; //@line 885
 __ZNSt3__18ios_base4initEPv(7144 + $40 | 0, 7616); //@line 887
 HEAP32[7144 + $$sum$i11 >> 2] = 0; //@line 889
 HEAP32[7144 + $$sum1$i12 >> 2] = -1; //@line 891
 $51 = HEAP32[7144 + ((HEAP32[(HEAP32[1786] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0; //@line 897
 HEAP32[1807] = 8180; //@line 898
 HEAP32[1808] = 8200; //@line 899
 __ZNSt3__18ios_base4initEPv(7228 + $40 | 0, $51); //@line 901
 HEAP32[7228 + $$sum$i11 >> 2] = 0; //@line 903
 HEAP32[7228 + $$sum1$i12 >> 2] = -1; //@line 905
 HEAP32[6972 + ((HEAP32[(HEAP32[1743] | 0) + -12 >> 2] | 0) + 72) >> 2] = 7060; //@line 911
 $62 = 7144 + ((HEAP32[(HEAP32[1786] | 0) + -12 >> 2] | 0) + 4) | 0; //@line 916
 HEAP32[$62 >> 2] = HEAP32[$62 >> 2] | 8192; //@line 919
 HEAP32[7144 + ((HEAP32[(HEAP32[1786] | 0) + -12 >> 2] | 0) + 72) >> 2] = 7060; //@line 925
 return;
}
function __ZN12_GLOBAL__N_15touchERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj($path, $mode) {
 $path = $path | 0;
 $mode = $mode | 0;
 var $$ = 0, $0 = 0, $1 = 0, $15 = 0, $19 = 0, $2 = 0, $23 = 0, $27 = 0, $36 = 0, $4 = 0, $40 = 0, $45 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $52 = 0, $62 = 0, $63 = 0, $65 = 0, $7 = 0, $71 = 0, $75 = 0, $9 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 245
 STACKTOP = STACKTOP + 16 | 0; //@line 246
 $vararg_buffer = sp; //@line 247
 $0 = sp + 4 | 0; //@line 248
 $1 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(6720, 13929, 15) | 0; //@line 249
 $2 = HEAP8[$path >> 0] | 0; //@line 250
 $4 = ($2 & 1) == 0; //@line 252
 $5 = $path + 8 | 0; //@line 253
 $7 = $path + 1 | 0; //@line 255
 $9 = $path + 4 | 0; //@line 257
 $15 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $4 ? $7 : HEAP32[$5 >> 2] | 0, $4 ? ($2 & 255) >>> 1 : HEAP32[$9 >> 2] | 0) | 0, 13945, 11) | 0; //@line 263
 $19 = $15 + ((HEAP32[(HEAP32[$15 >> 2] | 0) + -12 >> 2] | 0) + 4) | 0; //@line 268
 HEAP32[$19 >> 2] = HEAP32[$19 >> 2] & -75 | 64; //@line 272
 $23 = __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj($15, $mode) | 0; //@line 273
 $27 = $23 + ((HEAP32[(HEAP32[$23 >> 2] | 0) + -12 >> 2] | 0) + 4) | 0; //@line 278
 HEAP32[$27 >> 2] = HEAP32[$27 >> 2] & -75 | 2; //@line 282
 HEAP32[$0 >> 2] = __ZNKSt3__18ios_base6getlocEv($23 + (HEAP32[(HEAP32[$23 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0; //@line 288
 $36 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 9328) | 0; //@line 289
 $40 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$36 >> 2] | 0) + 28 >> 2] & 15]($36, 10) | 0; //@line 293
 __ZNSt3__16localeD2Ev($0); //@line 294
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($23, $40) | 0; //@line 295
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($23) | 0; //@line 296
 $$ = (HEAP8[$path >> 0] & 1) == 0 ? $7 : HEAP32[$5 >> 2] | 0; //@line 301
 HEAP32[$vararg_buffer >> 2] = $mode; //@line 302
 $45 = _open($$, 65, $vararg_buffer) | 0; //@line 303
 if (($45 | 0) == -1) {
  $48 = HEAP32[(___errno_location() | 0) >> 2] | 0; //@line 307
  $49 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(6720, 13957, 33) | 0; //@line 308
  $50 = HEAP8[$path >> 0] | 0; //@line 309
  $52 = ($50 & 1) == 0; //@line 311
  $62 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($49, $52 ? $7 : HEAP32[$5 >> 2] | 0, $52 ? ($50 & 255) >>> 1 : HEAP32[$9 >> 2] | 0) | 0, 13991, 8) | 0, $48) | 0, 14e3, 1) | 0; //@line 321
  $63 = _strerror($48) | 0; //@line 322
  $65 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($62, $63, _strlen($63) | 0) | 0; //@line 324
  HEAP32[$vararg_buffer >> 2] = __ZNKSt3__18ios_base6getlocEv($65 + (HEAP32[(HEAP32[$65 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0; //@line 330
  $71 = __ZNKSt3__16locale9use_facetERNS0_2idE($vararg_buffer, 9328) | 0; //@line 331
  $75 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$71 >> 2] | 0) + 28 >> 2] & 15]($71, 10) | 0; //@line 335
  __ZNSt3__16localeD2Ev($vararg_buffer); //@line 336
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($65, $75) | 0; //@line 337
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($65) | 0; //@line 338
  STACKTOP = sp; //@line 339
  return;
 } else {
  _close($45) | 0; //@line 341
  STACKTOP = sp; //@line 342
  return;
 }
}
function __ZNSt3__110__stdinbufIcE9__getcharEb($this, $__consume) {
 $this = $this | 0;
 $__consume = $__consume | 0;
 var $$0 = 0, $0 = 0, $12 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $28 = 0, $3 = 0, $31 = 0, $32 = 0, $33 = 0, $39 = 0, $4 = 0, $45 = 0, $58 = 0, $6 = 0, $62 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$019 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$0$lcssa24 = 0, $__nread$2 = 0, sp = 0;
 sp = STACKTOP; //@line 1985
 STACKTOP = STACKTOP + 32 | 0; //@line 1986
 $__extbuf = sp + 16 | 0; //@line 1987
 $__1buf = sp + 8 | 0; //@line 1988
 $__enxt = sp + 4 | 0; //@line 1989
 $__inxt = sp; //@line 1990
 $0 = $this + 52 | 0; //@line 1991
 L1 : do {
  if (!(HEAP8[$0 >> 0] | 0)) {
   $6 = HEAP32[$this + 44 >> 2] | 0; //@line 1997
   $8 = ($6 | 0) > 1 ? $6 : 1; //@line 1999
   $9 = $this + 32 | 0; //@line 2000
   if (($8 | 0) > 0) {
    $__i$019 = 0; //@line 2003
    do {
     $12 = _getc(HEAP32[$9 >> 2] | 0) | 0; //@line 2006
     if (($12 | 0) == -1) {
      $$0 = -1; //@line 2009
      break L1;
     }
     HEAP8[$__extbuf + $__i$019 >> 0] = $12; //@line 2014
     $__i$019 = $__i$019 + 1 | 0; //@line 2015
    } while (($__i$019 | 0) < ($8 | 0));
   }
   L8 : do {
    if (!(HEAP8[$this + 53 >> 0] | 0)) {
     $21 = $this + 40 | 0; //@line 2029
     $22 = $this + 36 | 0; //@line 2030
     $23 = $__1buf + 1 | 0; //@line 2031
     $__nread$0 = $8; //@line 2032
     L10 : while (1) {
      $25 = HEAP32[$21 >> 2] | 0; //@line 2034
      $26 = $25; //@line 2035
      $28 = HEAP32[$26 >> 2] | 0; //@line 2037
      $31 = HEAP32[$26 + 4 >> 2] | 0; //@line 2040
      $32 = HEAP32[$22 >> 2] | 0; //@line 2041
      $33 = $__extbuf + $__nread$0 | 0; //@line 2042
      switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$32 >> 2] | 0) + 16 >> 2] & 15]($32, $25, $__extbuf, $33, $__enxt, $__1buf, $23, $__inxt) | 0) {
      case 2:
       {
        $$0 = -1; //@line 2049
        break L1;
        break;
       }
      case 3:
       {
        $__nread$0$lcssa24 = $__nread$0; //@line 2054
        break L10;
        break;
       }
      case 1:
       {
        break;
       }
      default:
       {
        $__nread$2 = $__nread$0; //@line 2062
        break L8;
       }
      }
      $39 = HEAP32[$21 >> 2] | 0; //@line 2067
      HEAP32[$39 >> 2] = $28; //@line 2069
      HEAP32[$39 + 4 >> 2] = $31; //@line 2072
      if (($__nread$0 | 0) == 8) {
       $$0 = -1; //@line 2075
       break L1;
      }
      $45 = _getc(HEAP32[$9 >> 2] | 0) | 0; //@line 2079
      if (($45 | 0) == -1) {
       $$0 = -1; //@line 2082
       break L1;
      }
      HEAP8[$33 >> 0] = $45; //@line 2086
      $__nread$0 = $__nread$0 + 1 | 0; //@line 2088
     }
     HEAP8[$__1buf >> 0] = HEAP8[$__extbuf >> 0] | 0; //@line 2091
     $__nread$2 = $__nread$0$lcssa24; //@line 2092
    } else {
     HEAP8[$__1buf >> 0] = HEAP8[$__extbuf >> 0] | 0; //@line 2095
     $__nread$2 = $8; //@line 2096
    }
   } while (0);
   if ($__consume) {
    $58 = HEAP8[$__1buf >> 0] | 0; //@line 2100
    HEAP32[$this + 48 >> 2] = $58 & 255; //@line 2103
    $62 = $58; //@line 2104
   } else {
    $__i2$0 = $__nread$2; //@line 2106
    while (1) {
     if (($__i2$0 | 0) <= 0) {
      break;
     }
     $__i2$0 = $__i2$0 + -1 | 0; //@line 2112
     if ((_ungetc(HEAPU8[$__extbuf + $__i2$0 >> 0] | 0, HEAP32[$9 >> 2] | 0) | 0) == -1) {
      $$0 = -1; //@line 2120
      break L1;
     }
    }
    $62 = HEAP8[$__1buf >> 0] | 0; //@line 2127
   }
   $$0 = $62 & 255; //@line 2130
  } else {
   $3 = $this + 48 | 0; //@line 2132
   $4 = HEAP32[$3 >> 2] | 0; //@line 2133
   if ($__consume) {
    HEAP32[$3 >> 2] = -1; //@line 2135
    HEAP8[$0 >> 0] = 0; //@line 2136
    $$0 = $4; //@line 2137
   } else {
    $$0 = $4; //@line 2139
   }
  }
 } while (0);
 STACKTOP = sp; //@line 2143
 return $$0 | 0; //@line 2143
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $29 = 0, $30 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 7640
 STACKTOP = STACKTOP + 160 | 0; //@line 7641
 $$byval_copy = sp + 68 | 0; //@line 7642
 $vararg_buffer5 = sp + 32 | 0; //@line 7643
 $vararg_buffer2 = sp + 24 | 0; //@line 7644
 $vararg_buffer = sp + 8 | 0; //@line 7645
 $__fmt = sp; //@line 7646
 $__nar = sp + 72 | 0; //@line 7647
 $__nb = sp + 64 | 0; //@line 7648
 $__o = sp + 102 | 0; //@line 7649
 $__op = sp + 60 | 0; //@line 7650
 $__oe = sp + 56 | 0; //@line 7651
 $0 = sp + 52 | 0; //@line 7652
 $1 = sp + 48 | 0; //@line 7653
 $2 = $__fmt; //@line 7654
 HEAP32[$2 >> 2] = 37; //@line 7656
 HEAP32[$2 + 4 >> 2] = 0; //@line 7659
 $9 = __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmt + 1 | 0, 21596, HEAP32[$__iob + 4 >> 2] | 0) | 0; //@line 7663
 HEAP32[$__nb >> 2] = $__nar; //@line 7664
 $10 = __ZNSt3__16__clocEv() | 0; //@line 7665
 if ($9) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$__iob + 8 >> 2]; //@line 7669
  HEAPF64[$vararg_buffer + 8 >> 3] = $__v; //@line 7671
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $10, $__fmt, $vararg_buffer) | 0; //@line 7673
 } else {
  HEAPF64[$vararg_buffer2 >> 3] = $__v; //@line 7675
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $10, $__fmt, $vararg_buffer2) | 0; //@line 7677
 }
 if (($__nc$0 | 0) > 29) {
  $16 = __ZNSt3__16__clocEv() | 0; //@line 7681
  HEAP32[$vararg_buffer5 >> 2] = HEAP32[$__iob + 8 >> 2]; //@line 7684
  HEAPF64[$vararg_buffer5 + 8 >> 3] = $__v; //@line 7686
  $19 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $16, $__fmt, $vararg_buffer5) | 0; //@line 7687
  $20 = HEAP32[$__nb >> 2] | 0; //@line 7688
  if (!$20) {
   __ZSt17__throw_bad_allocv(); //@line 7691
  } else {
   $23 = $20; //@line 7694
   $36 = $20; //@line 7694
   $__nc$1 = $19; //@line 7694
  }
 } else {
  $23 = HEAP32[$__nb >> 2] | 0; //@line 7698
  $36 = 0; //@line 7698
  $__nc$1 = $__nc$0; //@line 7698
 }
 $22 = $23 + $__nc$1 | 0; //@line 7700
 $24 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($23, $22, $__iob) | 0; //@line 7701
 if (($23 | 0) == ($__nar | 0)) {
  $30 = $__nar; //@line 7704
  $35 = 0; //@line 7704
  $__ob$0 = $__o; //@line 7704
 } else {
  $27 = _malloc($__nc$1 << 1) | 0; //@line 7707
  if (!$27) {
   __ZSt17__throw_bad_allocv(); //@line 7710
  } else {
   $30 = $23; //@line 7713
   $35 = $27; //@line 7713
   $__ob$0 = $27; //@line 7713
  }
 }
 $29 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 7716
 HEAP32[$0 >> 2] = $29; //@line 7717
 __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($30, $24, $22, $__ob$0, $__op, $__oe, $0); //@line 7718
 __ZNSt3__114__shared_count16__release_sharedEv($29) | 0; //@line 7719
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2]; //@line 7721
 $32 = HEAP32[$__op >> 2] | 0; //@line 7722
 $33 = HEAP32[$__oe >> 2] | 0; //@line 7723
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 7724
 $34 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__ob$0, $32, $33, $__iob, $__fl) | 0; //@line 7725
 _free($35); //@line 7726
 _free($36); //@line 7727
 STACKTOP = sp; //@line 7728
 return $34 | 0; //@line 7728
}
function __ZNSt3__110__stdinbufIwE9__getcharEb($this, $__consume) {
 $this = $this | 0;
 $__consume = $__consume | 0;
 var $$0 = 0, $0 = 0, $12 = 0, $21 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $29 = 0, $3 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $40 = 0, $46 = 0, $6 = 0, $60 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$019 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$0$lcssa24 = 0, $__nread$2 = 0, sp = 0;
 sp = STACKTOP; //@line 1445
 STACKTOP = STACKTOP + 32 | 0; //@line 1446
 $__extbuf = sp + 16 | 0; //@line 1447
 $__1buf = sp + 8 | 0; //@line 1448
 $__enxt = sp + 4 | 0; //@line 1449
 $__inxt = sp; //@line 1450
 $0 = $this + 52 | 0; //@line 1451
 L1 : do {
  if (!(HEAP8[$0 >> 0] | 0)) {
   $6 = HEAP32[$this + 44 >> 2] | 0; //@line 1457
   $8 = ($6 | 0) > 1 ? $6 : 1; //@line 1459
   $9 = $this + 32 | 0; //@line 1460
   if (($8 | 0) > 0) {
    $__i$019 = 0; //@line 1463
    do {
     $12 = _getc(HEAP32[$9 >> 2] | 0) | 0; //@line 1466
     if (($12 | 0) == -1) {
      $$0 = -1; //@line 1469
      break L1;
     }
     HEAP8[$__extbuf + $__i$019 >> 0] = $12; //@line 1474
     $__i$019 = $__i$019 + 1 | 0; //@line 1475
    } while (($__i$019 | 0) < ($8 | 0));
   }
   L8 : do {
    if (!(HEAP8[$this + 53 >> 0] | 0)) {
     $21 = $this + 40 | 0; //@line 1489
     $22 = $this + 36 | 0; //@line 1490
     $23 = $__1buf + 4 | 0; //@line 1491
     $__nread$0 = $8; //@line 1492
     L10 : while (1) {
      $26 = HEAP32[$21 >> 2] | 0; //@line 1494
      $27 = $26; //@line 1495
      $29 = HEAP32[$27 >> 2] | 0; //@line 1497
      $32 = HEAP32[$27 + 4 >> 2] | 0; //@line 1500
      $33 = HEAP32[$22 >> 2] | 0; //@line 1501
      $34 = $__extbuf + $__nread$0 | 0; //@line 1502
      switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$33 >> 2] | 0) + 16 >> 2] & 15]($33, $26, $__extbuf, $34, $__enxt, $__1buf, $23, $__inxt) | 0) {
      case 2:
       {
        $$0 = -1; //@line 1509
        break L1;
        break;
       }
      case 3:
       {
        $__nread$0$lcssa24 = $__nread$0; //@line 1514
        break L10;
        break;
       }
      case 1:
       {
        break;
       }
      default:
       {
        $__nread$2 = $__nread$0; //@line 1522
        break L8;
       }
      }
      $40 = HEAP32[$21 >> 2] | 0; //@line 1527
      HEAP32[$40 >> 2] = $29; //@line 1529
      HEAP32[$40 + 4 >> 2] = $32; //@line 1532
      if (($__nread$0 | 0) == 8) {
       $$0 = -1; //@line 1535
       break L1;
      }
      $46 = _getc(HEAP32[$9 >> 2] | 0) | 0; //@line 1539
      if (($46 | 0) == -1) {
       $$0 = -1; //@line 1542
       break L1;
      }
      HEAP8[$34 >> 0] = $46; //@line 1546
      $__nread$0 = $__nread$0 + 1 | 0; //@line 1548
     }
     HEAP32[$__1buf >> 2] = HEAP8[$__extbuf >> 0]; //@line 1552
     $__nread$2 = $__nread$0$lcssa24; //@line 1553
    } else {
     HEAP32[$__1buf >> 2] = HEAP8[$__extbuf >> 0]; //@line 1557
     $__nread$2 = $8; //@line 1558
    }
   } while (0);
   if ($__consume) {
    $60 = HEAP32[$__1buf >> 2] | 0; //@line 1562
    HEAP32[$this + 48 >> 2] = $60; //@line 1564
    $$0 = $60; //@line 1565
    break;
   } else {
    $__i2$0 = $__nread$2; //@line 1568
   }
   while (1) {
    if (($__i2$0 | 0) <= 0) {
     break;
    }
    $__i2$0 = $__i2$0 + -1 | 0; //@line 1575
    if ((_ungetc(HEAP8[$__extbuf + $__i2$0 >> 0] | 0, HEAP32[$9 >> 2] | 0) | 0) == -1) {
     $$0 = -1; //@line 1583
     break L1;
    }
   }
   $$0 = HEAP32[$__1buf >> 2] | 0; //@line 1590
  } else {
   $3 = $this + 48 | 0; //@line 1592
   $4 = HEAP32[$3 >> 2] | 0; //@line 1593
   if ($__consume) {
    HEAP32[$3 >> 2] = -1; //@line 1595
    HEAP8[$0 >> 0] = 0; //@line 1596
    $$0 = $4; //@line 1597
   } else {
    $$0 = $4; //@line 1599
   }
  }
 } while (0);
 STACKTOP = sp; //@line 1603
 return $$0 | 0; //@line 1603
}
function ___stdio_write($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $16 = 0, $21 = 0, $26 = 0, $3 = 0, $35 = 0, $37 = 0, $39 = 0, $50 = 0, $6 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0, $iovcnt$0$lcssa12 = 0, $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6534
 STACKTOP = STACKTOP + 48 | 0; //@line 6535
 $vararg_buffer3 = sp + 16 | 0; //@line 6536
 $vararg_buffer = sp; //@line 6537
 $iovs = sp + 32 | 0; //@line 6538
 $0 = $f + 28 | 0; //@line 6539
 $1 = HEAP32[$0 >> 2] | 0; //@line 6540
 HEAP32[$iovs >> 2] = $1; //@line 6541
 $3 = $f + 20 | 0; //@line 6543
 $6 = (HEAP32[$3 >> 2] | 0) - $1 | 0; //@line 6546
 HEAP32[$iovs + 4 >> 2] = $6; //@line 6547
 HEAP32[$iovs + 8 >> 2] = $buf; //@line 6549
 HEAP32[$iovs + 12 >> 2] = $len; //@line 6551
 $10 = $f + 60 | 0; //@line 6553
 $11 = $f + 44 | 0; //@line 6554
 $iov$0 = $iovs; //@line 6555
 $iovcnt$0 = 2; //@line 6555
 $rem$0 = $6 + $len | 0; //@line 6555
 while (1) {
  if (!(HEAP32[574] | 0)) {
   HEAP32[$vararg_buffer3 >> 2] = HEAP32[$10 >> 2]; //@line 6561
   HEAP32[$vararg_buffer3 + 4 >> 2] = $iov$0; //@line 6563
   HEAP32[$vararg_buffer3 + 8 >> 2] = $iovcnt$0; //@line 6565
   $cnt$0 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0; //@line 6568
  } else {
   _pthread_cleanup_push(96, $f | 0); //@line 6570
   HEAP32[$vararg_buffer >> 2] = HEAP32[$10 >> 2]; //@line 6572
   HEAP32[$vararg_buffer + 4 >> 2] = $iov$0; //@line 6574
   HEAP32[$vararg_buffer + 8 >> 2] = $iovcnt$0; //@line 6576
   $16 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0; //@line 6578
   _pthread_cleanup_pop(0); //@line 6579
   $cnt$0 = $16; //@line 6580
  }
  if (($rem$0 | 0) == ($cnt$0 | 0)) {
   label = 6; //@line 6584
   break;
  }
  if (($cnt$0 | 0) < 0) {
   $iov$0$lcssa11 = $iov$0; //@line 6589
   $iovcnt$0$lcssa12 = $iovcnt$0; //@line 6589
   label = 8; //@line 6590
   break;
  }
  $35 = $rem$0 - $cnt$0 | 0; //@line 6593
  $37 = HEAP32[$iov$0 + 4 >> 2] | 0; //@line 6595
  if ($cnt$0 >>> 0 > $37 >>> 0) {
   $39 = HEAP32[$11 >> 2] | 0; //@line 6598
   HEAP32[$0 >> 2] = $39; //@line 6599
   HEAP32[$3 >> 2] = $39; //@line 6600
   $50 = HEAP32[$iov$0 + 12 >> 2] | 0; //@line 6606
   $cnt$1 = $cnt$0 - $37 | 0; //@line 6606
   $iov$1 = $iov$0 + 8 | 0; //@line 6606
   $iovcnt$1 = $iovcnt$0 + -1 | 0; //@line 6606
  } else {
   if (($iovcnt$0 | 0) == 2) {
    HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + $cnt$0; //@line 6612
    $50 = $37; //@line 6613
    $cnt$1 = $cnt$0; //@line 6613
    $iov$1 = $iov$0; //@line 6613
    $iovcnt$1 = 2; //@line 6613
   } else {
    $50 = $37; //@line 6615
    $cnt$1 = $cnt$0; //@line 6615
    $iov$1 = $iov$0; //@line 6615
    $iovcnt$1 = $iovcnt$0; //@line 6615
   }
  }
  HEAP32[$iov$1 >> 2] = (HEAP32[$iov$1 >> 2] | 0) + $cnt$1; //@line 6620
  HEAP32[$iov$1 + 4 >> 2] = $50 - $cnt$1; //@line 6623
  $iov$0 = $iov$1; //@line 6624
  $iovcnt$0 = $iovcnt$1; //@line 6624
  $rem$0 = $35; //@line 6624
 }
 if ((label | 0) == 6) {
  $21 = HEAP32[$11 >> 2] | 0; //@line 6627
  HEAP32[$f + 16 >> 2] = $21 + (HEAP32[$f + 48 >> 2] | 0); //@line 6632
  $26 = $21; //@line 6633
  HEAP32[$0 >> 2] = $26; //@line 6634
  HEAP32[$3 >> 2] = $26; //@line 6635
  $$0 = $len; //@line 6636
 } else if ((label | 0) == 8) {
  HEAP32[$f + 16 >> 2] = 0; //@line 6640
  HEAP32[$0 >> 2] = 0; //@line 6641
  HEAP32[$3 >> 2] = 0; //@line 6642
  HEAP32[$f >> 2] = HEAP32[$f >> 2] | 32; //@line 6645
  if (($iovcnt$0$lcssa12 | 0) == 2) {
   $$0 = 0; //@line 6648
  } else {
   $$0 = $len - (HEAP32[$iov$0$lcssa11 + 4 >> 2] | 0) | 0; //@line 6653
  }
 }
 STACKTOP = sp; //@line 6656
 return $$0 | 0; //@line 6656
}
function __ZN12_GLOBAL__N_16existsERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($path) {
 $path = $path | 0;
 var $$0 = 0, $0 = 0, $13 = 0, $14 = 0, $16 = 0, $27 = 0, $28 = 0, $30 = 0, $36 = 0, $4 = 0, $40 = 0, $44 = 0, $48 = 0, $49 = 0, $51 = 0, $6 = 0, $60 = 0, $63 = 0, $67 = 0, $76 = 0, $80 = 0, $path_stat = 0, sp = 0;
 sp = STACKTOP; //@line 360
 STACKTOP = STACKTOP + 80 | 0; //@line 361
 $0 = sp + 76 | 0; //@line 362
 $path_stat = sp; //@line 363
 $4 = $path + 8 | 0; //@line 367
 $6 = $path + 1 | 0; //@line 369
 if (!(_lstat((HEAP8[$path >> 0] & 1) == 0 ? $6 : HEAP32[$4 >> 2] | 0, $path_stat) | 0)) {
  $44 = 6720 + ((HEAP32[(HEAP32[1680] | 0) + -12 >> 2] | 0) + 4) | 0; //@line 378
  HEAP32[$44 >> 2] = HEAP32[$44 >> 2] & -75 | 64; //@line 382
  $48 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(6720, 14028, 14) | 0; //@line 383
  $49 = HEAP8[$path >> 0] | 0; //@line 384
  $51 = ($49 & 1) == 0; //@line 386
  $60 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($48, $51 ? $6 : HEAP32[$4 >> 2] | 0, $51 ? ($49 & 255) >>> 1 : HEAP32[$path + 4 >> 2] | 0) | 0, 14043, 2) | 0; //@line 395
  $63 = __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj($60, HEAP32[$path_stat + 12 >> 2] | 0) | 0; //@line 398
  $67 = $63 + ((HEAP32[(HEAP32[$63 >> 2] | 0) + -12 >> 2] | 0) + 4) | 0; //@line 403
  HEAP32[$67 >> 2] = HEAP32[$67 >> 2] & -75 | 2; //@line 407
  HEAP32[$0 >> 2] = __ZNKSt3__18ios_base6getlocEv($63 + (HEAP32[(HEAP32[$63 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0; //@line 413
  $76 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 9328) | 0; //@line 414
  $80 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$76 >> 2] | 0) + 28 >> 2] & 15]($76, 10) | 0; //@line 418
  __ZNSt3__16localeD2Ev($0); //@line 419
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($63, $80) | 0; //@line 420
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($63) | 0; //@line 421
  $$0 = 1; //@line 422
  STACKTOP = sp; //@line 423
  return $$0 | 0; //@line 423
 }
 if ((HEAP32[(___errno_location() | 0) >> 2] | 0) != 2) {
  $$0 = 0; //@line 429
  STACKTOP = sp; //@line 430
  return $$0 | 0; //@line 430
 }
 $13 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(6720, 14002, 22) | 0; //@line 432
 $14 = HEAP8[$path >> 0] | 0; //@line 433
 $16 = ($14 & 1) == 0; //@line 435
 $27 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($13, $16 ? $6 : HEAP32[$4 >> 2] | 0, $16 ? ($14 & 255) >>> 1 : HEAP32[$path + 4 >> 2] | 0) | 0, 13991, 8) | 0, 2) | 0, 14025, 2) | 0; //@line 446
 $28 = _strerror(2) | 0; //@line 447
 $30 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($27, $28, _strlen($28) | 0) | 0; //@line 449
 HEAP32[$0 >> 2] = __ZNKSt3__18ios_base6getlocEv($30 + (HEAP32[(HEAP32[$30 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0; //@line 455
 $36 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 9328) | 0; //@line 456
 $40 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$36 >> 2] | 0) + 28 >> 2] & 15]($36, 10) | 0; //@line 460
 __ZNSt3__16localeD2Ev($0); //@line 461
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($30, $40) | 0; //@line 462
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($30) | 0; //@line 463
 $$0 = 0; //@line 464
 STACKTOP = sp; //@line 465
 return $$0 | 0; //@line 465
}
function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg$result, $this, $__c, $__set, $__msgid, $__dflt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__c = $__c | 0;
 $__set = $__set | 0;
 $__msgid = $__msgid | 0;
 $__dflt = $__dflt | 0;
 var $$0$i15 = 0, $$0$i922 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $15 = 0, $16 = 0, $17 = 0, $22 = 0, $44 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $61 = 0, $7 = 0, $__bn$i7 = 0, $__buf$i6 = 0, $__mb$i5 = 0, $__ndflt = 0, $__p$0$i1018 = 0, $__p$0$i14 = 0, $__wn$i = 0, sp = 0;
 sp = STACKTOP; //@line 4486
 STACKTOP = STACKTOP + 176 | 0; //@line 4487
 $__mb$i5 = sp + 168 | 0; //@line 4488
 $__buf$i6 = sp + 40 | 0; //@line 4489
 $__bn$i7 = sp + 32 | 0; //@line 4490
 $__wn$i = sp + 28 | 0; //@line 4491
 $__ndflt = sp + 16 | 0; //@line 4492
 $0 = sp + 8 | 0; //@line 4493
 $1 = sp; //@line 4494
 HEAP32[$__ndflt >> 2] = 0; //@line 4495
 HEAP32[$__ndflt + 4 >> 2] = 0; //@line 4497
 HEAP32[$__ndflt + 8 >> 2] = 0; //@line 4499
 HEAP32[$0 + 4 >> 2] = 0; //@line 4501
 HEAP32[$0 >> 2] = 9804; //@line 4502
 $5 = HEAP8[$__dflt >> 0] | 0; //@line 4503
 $7 = ($5 & 1) == 0; //@line 4505
 $10 = $__dflt + 4 | 0; //@line 4508
 $11 = $7 ? $10 : HEAP32[$__dflt + 8 >> 2] | 0; //@line 4509
 $15 = $7 ? ($5 & 255) >>> 1 : HEAP32[$10 >> 2] | 0; //@line 4513
 $16 = $11 + ($15 << 2) | 0; //@line 4514
 $17 = $__buf$i6 + 32 | 0; //@line 4515
 if (($15 | 0) > 0) {
  $$0$i922 = $11; //@line 4518
  do {
   HEAP32[$__wn$i >> 2] = $$0$i922; //@line 4520
   $22 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 12 >> 2] & 15]($0, $__mb$i5, $$0$i922, $16, $__wn$i, $__buf$i6, $17, $__bn$i7) | 0; //@line 4524
   if ($__buf$i6 >>> 0 < (HEAP32[$__bn$i7 >> 2] | 0) >>> 0) {
    $__p$0$i1018 = $__buf$i6; //@line 4528
    do {
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt, HEAP8[$__p$0$i1018 >> 0] | 0); //@line 4531
     $__p$0$i1018 = $__p$0$i1018 + 1 | 0; //@line 4532
    } while ($__p$0$i1018 >>> 0 < (HEAP32[$__bn$i7 >> 2] | 0) >>> 0);
   }
   $$0$i922 = HEAP32[$__wn$i >> 2] | 0; //@line 4542
  } while (($22 | 0) != 2 & $$0$i922 >>> 0 < $16 >>> 0);
 }
 $44 = _catgets(($__c | 0) == -1 ? -1 : $__c << 1, $__set, $__msgid, (HEAP8[$__ndflt >> 0] & 1) == 0 ? $__ndflt + 1 | 0 : HEAP32[$__ndflt + 8 >> 2] | 0) | 0; //@line 4564
 HEAP32[$agg$result >> 2] = 0; //@line 4565
 HEAP32[$agg$result + 4 >> 2] = 0; //@line 4567
 HEAP32[$agg$result + 8 >> 2] = 0; //@line 4569
 HEAP32[$1 + 4 >> 2] = 0; //@line 4571
 HEAP32[$1 >> 2] = 9852; //@line 4572
 $48 = _strlen($44) | 0; //@line 4573
 $49 = $44 + $48 | 0; //@line 4574
 $50 = $49; //@line 4575
 $51 = $__buf$i6 + 128 | 0; //@line 4576
 if (($48 | 0) > 0) {
  $$0$i15 = $44; //@line 4579
  do {
   HEAP32[$__wn$i >> 2] = $$0$i15; //@line 4581
   $61 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] & 15]($1, $__mb$i5, $$0$i15, ($50 - $$0$i15 | 0) > 32 ? $$0$i15 + 32 | 0 : $49, $__wn$i, $__buf$i6, $51, $__bn$i7) | 0; //@line 4590
   if ($__buf$i6 >>> 0 < (HEAP32[$__bn$i7 >> 2] | 0) >>> 0) {
    $__p$0$i14 = $__buf$i6; //@line 4594
    do {
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($agg$result, HEAP32[$__p$0$i14 >> 2] | 0); //@line 4597
     $__p$0$i14 = $__p$0$i14 + 4 | 0; //@line 4598
    } while ($__p$0$i14 >>> 0 < (HEAP32[$__bn$i7 >> 2] | 0) >>> 0);
   }
   $$0$i15 = HEAP32[$__wn$i >> 2] | 0; //@line 4608
  } while (($61 | 0) != 2 & $$0$i15 >>> 0 < $49 >>> 0);
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt); //@line 4619
 STACKTOP = sp; //@line 4620
 return;
}
function _memchr($src, $c, $n) {
 $src = $src | 0;
 $c = $c | 0;
 $n = $n | 0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $13 = 0, $15 = 0, $17 = 0, $20 = 0, $26 = 0, $27 = 0, $32 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0;
 $0 = $c & 255; //@line 8593
 $4 = ($n | 0) != 0; //@line 8597
 L1 : do {
  if ($4 & ($src & 3 | 0) != 0) {
   $5 = $c & 255; //@line 8601
   $$019 = $n; //@line 8602
   $s$020 = $src; //@line 8602
   while (1) {
    if ((HEAP8[$s$020 >> 0] | 0) == $5 << 24 >> 24) {
     $$0$lcssa44 = $$019; //@line 8607
     $s$0$lcssa43 = $s$020; //@line 8607
     label = 6; //@line 8608
     break L1;
    }
    $8 = $s$020 + 1 | 0; //@line 8611
    $9 = $$019 + -1 | 0; //@line 8612
    $13 = ($9 | 0) != 0; //@line 8616
    if ($13 & ($8 & 3 | 0) != 0) {
     $$019 = $9; //@line 8619
     $s$020 = $8; //@line 8619
    } else {
     $$0$lcssa = $9; //@line 8621
     $$lcssa = $13; //@line 8621
     $s$0$lcssa = $8; //@line 8621
     label = 5; //@line 8622
     break;
    }
   }
  } else {
   $$0$lcssa = $n; //@line 8627
   $$lcssa = $4; //@line 8627
   $s$0$lcssa = $src; //@line 8627
   label = 5; //@line 8628
  }
 } while (0);
 if ((label | 0) == 5) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa; //@line 8633
   $s$0$lcssa43 = $s$0$lcssa; //@line 8633
   label = 6; //@line 8634
  } else {
   $$3 = 0; //@line 8636
   $s$2 = $s$0$lcssa; //@line 8636
  }
 }
 L8 : do {
  if ((label | 0) == 6) {
   $15 = $c & 255; //@line 8642
   if ((HEAP8[$s$0$lcssa43 >> 0] | 0) == $15 << 24 >> 24) {
    $$3 = $$0$lcssa44; //@line 8645
    $s$2 = $s$0$lcssa43; //@line 8645
   } else {
    $17 = Math_imul($0, 16843009) | 0; //@line 8647
    L11 : do {
     if ($$0$lcssa44 >>> 0 > 3) {
      $$110 = $$0$lcssa44; //@line 8651
      $w$011 = $s$0$lcssa43; //@line 8651
      while (1) {
       $20 = HEAP32[$w$011 >> 2] ^ $17; //@line 8654
       if (($20 & -2139062144 ^ -2139062144) & $20 + -16843009) {
        $$110$lcssa = $$110; //@line 8661
        $w$011$lcssa = $w$011; //@line 8661
        break;
       }
       $26 = $w$011 + 4 | 0; //@line 8664
       $27 = $$110 + -4 | 0; //@line 8665
       if ($27 >>> 0 > 3) {
        $$110 = $27; //@line 8668
        $w$011 = $26; //@line 8668
       } else {
        $$1$lcssa = $27; //@line 8670
        $w$0$lcssa = $26; //@line 8670
        label = 11; //@line 8671
        break L11;
       }
      }
      $$24 = $$110$lcssa; //@line 8675
      $s$15 = $w$011$lcssa; //@line 8675
     } else {
      $$1$lcssa = $$0$lcssa44; //@line 8677
      $w$0$lcssa = $s$0$lcssa43; //@line 8677
      label = 11; //@line 8678
     }
    } while (0);
    if ((label | 0) == 11) {
     if (!$$1$lcssa) {
      $$3 = 0; //@line 8684
      $s$2 = $w$0$lcssa; //@line 8684
      break;
     } else {
      $$24 = $$1$lcssa; //@line 8687
      $s$15 = $w$0$lcssa; //@line 8687
     }
    }
    while (1) {
     if ((HEAP8[$s$15 >> 0] | 0) == $15 << 24 >> 24) {
      $$3 = $$24; //@line 8694
      $s$2 = $s$15; //@line 8694
      break L8;
     }
     $32 = $s$15 + 1 | 0; //@line 8697
     $$24 = $$24 + -1 | 0; //@line 8698
     if (!$$24) {
      $$3 = 0; //@line 8701
      $s$2 = $32; //@line 8701
      break;
     } else {
      $s$15 = $32; //@line 8704
     }
    }
   }
  }
 } while (0);
 return (($$3 | 0) != 0 ? $s$2 : 0) | 0; //@line 8712
}
function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this) {
 $this = $this | 0;
 var $8 = 0;
 if (!(HEAP8[1808] | 0)) {
  if (___cxa_guard_acquire(1808) | 0) {
   if (!(HEAP8[1816] | 0)) {
    if (___cxa_guard_acquire(1816) | 0) {
     $8 = 11124; //@line 6894
     do {
      HEAP32[$8 >> 2] = 0; //@line 6896
      HEAP32[$8 + 4 >> 2] = 0; //@line 6898
      HEAP32[$8 + 8 >> 2] = 0; //@line 6900
      $8 = $8 + 12 | 0; //@line 6901
     } while (($8 | 0) != 11412);
     ___cxa_atexit(104, 0, ___dso_handle | 0) | 0; //@line 6909
     ___cxa_guard_release(1816); //@line 6910
    }
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11124, 11412) | 0; //@line 6913
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11136, 11444) | 0; //@line 6914
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11148, 11480) | 0; //@line 6915
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11160, 11504) | 0; //@line 6916
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11172, 11528) | 0; //@line 6917
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11184, 11544) | 0; //@line 6918
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11196, 11564) | 0; //@line 6919
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11208, 11584) | 0; //@line 6920
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11220, 11612) | 0; //@line 6921
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11232, 11652) | 0; //@line 6922
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11244, 11684) | 0; //@line 6923
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11256, 11720) | 0; //@line 6924
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11268, 11756) | 0; //@line 6925
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11280, 11772) | 0; //@line 6926
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11292, 11788) | 0; //@line 6927
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11304, 11804) | 0; //@line 6928
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11316, 11528) | 0; //@line 6929
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11328, 11820) | 0; //@line 6930
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11340, 11836) | 0; //@line 6931
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11352, 11852) | 0; //@line 6932
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11364, 11868) | 0; //@line 6933
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11376, 11884) | 0; //@line 6934
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11388, 11900) | 0; //@line 6935
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11400, 11916) | 0; //@line 6936
   HEAP32[2983] = 11124; //@line 6937
   ___cxa_guard_release(1808); //@line 6938
  }
 }
 return HEAP32[2983] | 0; //@line 6942
}
function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this) {
 $this = $this | 0;
 var $8 = 0;
 if (!(HEAP8[1792] | 0)) {
  if (___cxa_guard_acquire(1792) | 0) {
   if (!(HEAP8[1800] | 0)) {
    if (___cxa_guard_acquire(1800) | 0) {
     $8 = 10832; //@line 6828
     do {
      HEAP32[$8 >> 2] = 0; //@line 6830
      HEAP32[$8 + 4 >> 2] = 0; //@line 6832
      HEAP32[$8 + 8 >> 2] = 0; //@line 6834
      $8 = $8 + 12 | 0; //@line 6835
     } while (($8 | 0) != 11120);
     ___cxa_atexit(103, 0, ___dso_handle | 0) | 0; //@line 6843
     ___cxa_guard_release(1800); //@line 6844
    }
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(10832, 21781) | 0; //@line 6847
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(10844, 21789) | 0; //@line 6848
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(10856, 21798) | 0; //@line 6849
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(10868, 21804) | 0; //@line 6850
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(10880, 21810) | 0; //@line 6851
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(10892, 21814) | 0; //@line 6852
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(10904, 21819) | 0; //@line 6853
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(10916, 21824) | 0; //@line 6854
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(10928, 21831) | 0; //@line 6855
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(10940, 21841) | 0; //@line 6856
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(10952, 21849) | 0; //@line 6857
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(10964, 21858) | 0; //@line 6858
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(10976, 21867) | 0; //@line 6859
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(10988, 21871) | 0; //@line 6860
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11e3, 21875) | 0; //@line 6861
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11012, 21879) | 0; //@line 6862
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11024, 21810) | 0; //@line 6863
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11036, 21883) | 0; //@line 6864
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11048, 21887) | 0; //@line 6865
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11060, 21891) | 0; //@line 6866
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11072, 21895) | 0; //@line 6867
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11084, 21899) | 0; //@line 6868
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11096, 21903) | 0; //@line 6869
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11108, 21907) | 0; //@line 6870
   HEAP32[2780] = 10832; //@line 6871
   ___cxa_guard_release(1792); //@line 6872
  }
 }
 return HEAP32[2780] | 0; //@line 6876
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $$sroa$01$0 = 0, $0 = 0, $1 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $28 = 0, $3 = 0, $32 = 0, $4 = 0, $__lv = 0, $__names = 0, sp = 0;
 sp = STACKTOP; //@line 5623
 STACKTOP = STACKTOP + 64 | 0; //@line 5624
 $$byval_copy2 = sp + 56 | 0; //@line 5625
 $$byval_copy = sp + 52 | 0; //@line 5626
 $__lv = sp + 48 | 0; //@line 5627
 $0 = sp + 44 | 0; //@line 5628
 $1 = sp + 40 | 0; //@line 5629
 $2 = sp + 36 | 0; //@line 5630
 $3 = sp + 32 | 0; //@line 5631
 $__names = sp + 8 | 0; //@line 5632
 $4 = sp; //@line 5633
 L1 : do {
  if (!(HEAP32[$__iob + 4 >> 2] & 1)) {
   HEAP32[$__lv >> 2] = -1; //@line 5640
   $11 = HEAP32[(HEAP32[$this >> 2] | 0) + 16 >> 2] | 0; //@line 5643
   HEAP32[$0 >> 2] = HEAP32[$__b >> 2]; //@line 5645
   HEAP32[$1 >> 2] = HEAP32[$__e >> 2]; //@line 5647
   HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 5648
   HEAP32[$$byval_copy2 >> 2] = HEAP32[$1 >> 2]; //@line 5649
   $14 = FUNCTION_TABLE_iiiiiii[$11 & 63]($this, $$byval_copy, $$byval_copy2, $__iob, $__err, $__lv) | 0; //@line 5650
   HEAP32[$__b >> 2] = $14; //@line 5651
   switch (HEAP32[$__lv >> 2] | 0) {
   case 0:
    {
     HEAP8[$__v >> 0] = 0; //@line 5655
     $$sroa$01$0 = $14; //@line 5656
     break L1;
     break;
    }
   case 1:
    {
     HEAP8[$__v >> 0] = 1; //@line 5661
     $$sroa$01$0 = $14; //@line 5662
     break L1;
     break;
    }
   default:
    {
     HEAP8[$__v >> 0] = 1; //@line 5667
     HEAP32[$__err >> 2] = 4; //@line 5668
     $$sroa$01$0 = $14; //@line 5669
     break L1;
    }
   }
  } else {
   $16 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 5674
   HEAP32[$2 >> 2] = $16; //@line 5675
   $17 = __ZNKSt3__16locale9use_facetERNS0_2idE($2, 9320) | 0; //@line 5676
   __ZNSt3__114__shared_count16__release_sharedEv($16) | 0; //@line 5677
   $18 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 5678
   HEAP32[$3 >> 2] = $18; //@line 5679
   $19 = __ZNKSt3__16locale9use_facetERNS0_2idE($3, 9476) | 0; //@line 5680
   __ZNSt3__114__shared_count16__release_sharedEv($18) | 0; //@line 5681
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$19 >> 2] | 0) + 24 >> 2] & 63]($__names, $19); //@line 5685
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$19 >> 2] | 0) + 28 >> 2] & 63]($__names + 12 | 0, $19); //@line 5690
   HEAP32[$4 >> 2] = HEAP32[$__e >> 2]; //@line 5692
   $28 = $__names + 24 | 0; //@line 5693
   HEAP32[$$byval_copy2 >> 2] = HEAP32[$4 >> 2]; //@line 5694
   HEAP8[$__v >> 0] = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy2, $__names, $28, $17, $__err, 1) | 0) == ($__names | 0) & 1; //@line 5698
   $32 = HEAP32[$__b >> 2] | 0; //@line 5699
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__names + 12 | 0); //@line 5701
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__names); //@line 5702
   $$sroa$01$0 = $32; //@line 5703
  }
 } while (0);
 STACKTOP = sp; //@line 5706
 return $$sroa$01$0 | 0; //@line 5706
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $$sroa$01$0 = 0, $0 = 0, $1 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $28 = 0, $3 = 0, $32 = 0, $4 = 0, $__lv = 0, $__names = 0, sp = 0;
 sp = STACKTOP; //@line 4829
 STACKTOP = STACKTOP + 64 | 0; //@line 4830
 $$byval_copy2 = sp + 56 | 0; //@line 4831
 $$byval_copy = sp + 52 | 0; //@line 4832
 $__lv = sp + 48 | 0; //@line 4833
 $0 = sp + 44 | 0; //@line 4834
 $1 = sp + 40 | 0; //@line 4835
 $2 = sp + 36 | 0; //@line 4836
 $3 = sp + 32 | 0; //@line 4837
 $__names = sp + 8 | 0; //@line 4838
 $4 = sp; //@line 4839
 L1 : do {
  if (!(HEAP32[$__iob + 4 >> 2] & 1)) {
   HEAP32[$__lv >> 2] = -1; //@line 4846
   $11 = HEAP32[(HEAP32[$this >> 2] | 0) + 16 >> 2] | 0; //@line 4849
   HEAP32[$0 >> 2] = HEAP32[$__b >> 2]; //@line 4851
   HEAP32[$1 >> 2] = HEAP32[$__e >> 2]; //@line 4853
   HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 4854
   HEAP32[$$byval_copy2 >> 2] = HEAP32[$1 >> 2]; //@line 4855
   $14 = FUNCTION_TABLE_iiiiiii[$11 & 63]($this, $$byval_copy, $$byval_copy2, $__iob, $__err, $__lv) | 0; //@line 4856
   HEAP32[$__b >> 2] = $14; //@line 4857
   switch (HEAP32[$__lv >> 2] | 0) {
   case 0:
    {
     HEAP8[$__v >> 0] = 0; //@line 4861
     $$sroa$01$0 = $14; //@line 4862
     break L1;
     break;
    }
   case 1:
    {
     HEAP8[$__v >> 0] = 1; //@line 4867
     $$sroa$01$0 = $14; //@line 4868
     break L1;
     break;
    }
   default:
    {
     HEAP8[$__v >> 0] = 1; //@line 4873
     HEAP32[$__err >> 2] = 4; //@line 4874
     $$sroa$01$0 = $14; //@line 4875
     break L1;
    }
   }
  } else {
   $16 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 4880
   HEAP32[$2 >> 2] = $16; //@line 4881
   $17 = __ZNKSt3__16locale9use_facetERNS0_2idE($2, 9328) | 0; //@line 4882
   __ZNSt3__114__shared_count16__release_sharedEv($16) | 0; //@line 4883
   $18 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 4884
   HEAP32[$3 >> 2] = $18; //@line 4885
   $19 = __ZNKSt3__16locale9use_facetERNS0_2idE($3, 9468) | 0; //@line 4886
   __ZNSt3__114__shared_count16__release_sharedEv($18) | 0; //@line 4887
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$19 >> 2] | 0) + 24 >> 2] & 63]($__names, $19); //@line 4891
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$19 >> 2] | 0) + 28 >> 2] & 63]($__names + 12 | 0, $19); //@line 4896
   HEAP32[$4 >> 2] = HEAP32[$__e >> 2]; //@line 4898
   $28 = $__names + 24 | 0; //@line 4899
   HEAP32[$$byval_copy2 >> 2] = HEAP32[$4 >> 2]; //@line 4900
   HEAP8[$__v >> 0] = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy2, $__names, $28, $17, $__err, 1) | 0) == ($__names | 0) & 1; //@line 4904
   $32 = HEAP32[$__b >> 2] | 0; //@line 4905
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__names + 12 | 0); //@line 4907
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__names); //@line 4908
   $$sroa$01$0 = $32; //@line 4909
  }
 } while (0);
 STACKTOP = sp; //@line 4912
 return $$sroa$01$0 | 0; //@line 4912
}
function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct, $__base, $__a, $__a_end, $__dc, $__thousands_sep, $__grouping, $__g, $__g_end, $__atoms) {
 $__ct = $__ct | 0;
 $__base = $__base | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__dc = $__dc | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__atoms = $__atoms | 0;
 var $$0 = 0, $$0$i2 = 0, $$0$lcssa$i = 0, $0 = 0, $1 = 0, $10 = 0, $20 = 0, $25 = 0, $27 = 0, $34 = 0, $35 = 0, $4 = 0, $47 = 0, $50 = 0, label = 0;
 $0 = HEAP32[$__a_end >> 2] | 0; //@line 6241
 $1 = ($0 | 0) == ($__a | 0); //@line 6242
 do {
  if ($1) {
   $4 = (HEAP32[$__atoms + 96 >> 2] | 0) == ($__ct | 0); //@line 6247
   if (!$4) {
    if ((HEAP32[$__atoms + 100 >> 2] | 0) != ($__ct | 0)) {
     label = 5; //@line 6253
     break;
    }
   }
   HEAP32[$__a_end >> 2] = $__a + 1; //@line 6259
   HEAP8[$__a >> 0] = $4 ? 43 : 45; //@line 6260
   HEAP32[$__dc >> 2] = 0; //@line 6261
   $$0 = 0; //@line 6262
  } else {
   label = 5; //@line 6264
  }
 } while (0);
 L6 : do {
  if ((label | 0) == 5) {
   $10 = HEAP8[$__grouping >> 0] | 0; //@line 6269
   if (($__ct | 0) == ($__thousands_sep | 0) ? ((($10 & 1) == 0 ? ($10 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0) != 0 : 0) {
    $20 = HEAP32[$__g_end >> 2] | 0; //@line 6281
    if (($20 - $__g | 0) >= 160) {
     $$0 = 0; //@line 6287
     break;
    }
    $25 = HEAP32[$__dc >> 2] | 0; //@line 6290
    HEAP32[$__g_end >> 2] = $20 + 4; //@line 6292
    HEAP32[$20 >> 2] = $25; //@line 6293
    HEAP32[$__dc >> 2] = 0; //@line 6294
    $$0 = 0; //@line 6295
    break;
   }
   $27 = $__atoms + 104 | 0; //@line 6298
   $$0$i2 = $__atoms; //@line 6299
   while (1) {
    if ((HEAP32[$$0$i2 >> 2] | 0) == ($__ct | 0)) {
     $$0$lcssa$i = $$0$i2; //@line 6304
     break;
    }
    $$0$i2 = $$0$i2 + 4 | 0; //@line 6307
    if (($$0$i2 | 0) == ($27 | 0)) {
     $$0$lcssa$i = $27; //@line 6310
     break;
    }
   }
   $34 = $$0$lcssa$i - $__atoms | 0; //@line 6318
   $35 = $34 >> 2; //@line 6319
   if (($34 | 0) > 92) {
    $$0 = -1; //@line 6322
   } else {
    switch ($__base | 0) {
    case 10:
    case 8:
     {
      if (($35 | 0) >= ($__base | 0)) {
       $$0 = -1; //@line 6328
       break L6;
      }
      break;
     }
    case 16:
     {
      if (($34 | 0) >= 88) {
       if ($1) {
        $$0 = -1; //@line 6337
        break L6;
       }
       if (($0 - $__a | 0) >= 3) {
        $$0 = -1; //@line 6345
        break L6;
       }
       if ((HEAP8[$0 + -1 >> 0] | 0) != 48) {
        $$0 = -1; //@line 6352
        break L6;
       }
       HEAP32[$__dc >> 2] = 0; //@line 6355
       $47 = HEAP8[20196 + $35 >> 0] | 0; //@line 6357
       HEAP32[$__a_end >> 2] = $0 + 1; //@line 6359
       HEAP8[$0 >> 0] = $47; //@line 6360
       $$0 = 0; //@line 6361
       break L6;
      }
      break;
     }
    default:
     {}
    }
    $50 = HEAP8[20196 + $35 >> 0] | 0; //@line 6370
    HEAP32[$__a_end >> 2] = $0 + 1; //@line 6372
    HEAP8[$0 >> 0] = $50; //@line 6373
    HEAP32[$__dc >> 2] = (HEAP32[$__dc >> 2] | 0) + 1; //@line 6376
    $$0 = 0; //@line 6377
   }
  }
 } while (0);
 return $$0 | 0; //@line 6381
}
function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct, $__base, $__a, $__a_end, $__dc, $__thousands_sep, $__grouping, $__g, $__g_end, $__atoms) {
 $__ct = $__ct | 0;
 $__base = $__base | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__dc = $__dc | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__atoms = $__atoms | 0;
 var $$0 = 0, $$0$i2 = 0, $$0$lcssa$i = 0, $0 = 0, $1 = 0, $10 = 0, $20 = 0, $25 = 0, $27 = 0, $34 = 0, $4 = 0, $46 = 0, $49 = 0, label = 0;
 $0 = HEAP32[$__a_end >> 2] | 0; //@line 5442
 $1 = ($0 | 0) == ($__a | 0); //@line 5443
 do {
  if ($1) {
   $4 = (HEAP8[$__atoms + 24 >> 0] | 0) == $__ct << 24 >> 24; //@line 5448
   if (!$4) {
    if ((HEAP8[$__atoms + 25 >> 0] | 0) != $__ct << 24 >> 24) {
     label = 5; //@line 5454
     break;
    }
   }
   HEAP32[$__a_end >> 2] = $__a + 1; //@line 5460
   HEAP8[$__a >> 0] = $4 ? 43 : 45; //@line 5461
   HEAP32[$__dc >> 2] = 0; //@line 5462
   $$0 = 0; //@line 5463
  } else {
   label = 5; //@line 5465
  }
 } while (0);
 L6 : do {
  if ((label | 0) == 5) {
   $10 = HEAP8[$__grouping >> 0] | 0; //@line 5470
   if ($__ct << 24 >> 24 == $__thousands_sep << 24 >> 24 ? ((($10 & 1) == 0 ? ($10 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0) != 0 : 0) {
    $20 = HEAP32[$__g_end >> 2] | 0; //@line 5482
    if (($20 - $__g | 0) >= 160) {
     $$0 = 0; //@line 5488
     break;
    }
    $25 = HEAP32[$__dc >> 2] | 0; //@line 5491
    HEAP32[$__g_end >> 2] = $20 + 4; //@line 5493
    HEAP32[$20 >> 2] = $25; //@line 5494
    HEAP32[$__dc >> 2] = 0; //@line 5495
    $$0 = 0; //@line 5496
    break;
   }
   $27 = $__atoms + 26 | 0; //@line 5499
   $$0$i2 = $__atoms; //@line 5500
   while (1) {
    if ((HEAP8[$$0$i2 >> 0] | 0) == $__ct << 24 >> 24) {
     $$0$lcssa$i = $$0$i2; //@line 5505
     break;
    }
    $$0$i2 = $$0$i2 + 1 | 0; //@line 5508
    if (($$0$i2 | 0) == ($27 | 0)) {
     $$0$lcssa$i = $27; //@line 5511
     break;
    }
   }
   $34 = $$0$lcssa$i - $__atoms | 0; //@line 5519
   if (($34 | 0) > 23) {
    $$0 = -1; //@line 5522
   } else {
    switch ($__base | 0) {
    case 10:
    case 8:
     {
      if (($34 | 0) >= ($__base | 0)) {
       $$0 = -1; //@line 5528
       break L6;
      }
      break;
     }
    case 16:
     {
      if (($34 | 0) >= 22) {
       if ($1) {
        $$0 = -1; //@line 5537
        break L6;
       }
       if (($0 - $__a | 0) >= 3) {
        $$0 = -1; //@line 5545
        break L6;
       }
       if ((HEAP8[$0 + -1 >> 0] | 0) != 48) {
        $$0 = -1; //@line 5552
        break L6;
       }
       HEAP32[$__dc >> 2] = 0; //@line 5555
       $46 = HEAP8[20196 + $34 >> 0] | 0; //@line 5557
       HEAP32[$__a_end >> 2] = $0 + 1; //@line 5559
       HEAP8[$0 >> 0] = $46; //@line 5560
       $$0 = 0; //@line 5561
       break L6;
      }
      break;
     }
    default:
     {}
    }
    $49 = HEAP8[20196 + $34 >> 0] | 0; //@line 5570
    HEAP32[$__a_end >> 2] = $0 + 1; //@line 5572
    HEAP8[$0 >> 0] = $49; //@line 5573
    HEAP32[$__dc >> 2] = (HEAP32[$__dc >> 2] | 0) + 1; //@line 5576
    $$0 = 0; //@line 5577
   }
  }
 } while (0);
 return $$0 | 0; //@line 5581
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi3Z2D = 0, $$pre1 = 0, $$sroa$0$0 = 0, $0 = 0, $1 = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0, $19 = 0, $21 = 0, $24 = 0, $26 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $51 = 0, $59 = 0, $8 = 0, $__nm = 0, sp = 0;
 sp = STACKTOP; //@line 8357
 STACKTOP = STACKTOP + 32 | 0; //@line 8358
 $$byval_copy = sp + 20 | 0; //@line 8359
 $0 = sp + 16 | 0; //@line 8360
 $1 = sp + 12 | 0; //@line 8361
 $__nm = sp; //@line 8362
 if (!(HEAP32[$__iob + 4 >> 2] & 1)) {
  $8 = HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] | 0; //@line 8370
  HEAP32[$0 >> 2] = HEAP32[$__s >> 2]; //@line 8372
  $10 = $__v & 1; //@line 8373
  HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 8374
  $$sroa$0$0 = FUNCTION_TABLE_iiiiii[$8 & 31]($this, $$byval_copy, $__iob, $__fl, $10) | 0; //@line 8376
 } else {
  $12 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 8378
  HEAP32[$1 >> 2] = $12; //@line 8379
  $13 = __ZNKSt3__16locale9use_facetERNS0_2idE($1, 9476) | 0; //@line 8380
  __ZNSt3__114__shared_count16__release_sharedEv($12) | 0; //@line 8381
  $14 = HEAP32[$13 >> 2] | 0; //@line 8382
  if ($__v) {
   FUNCTION_TABLE_vii[HEAP32[$14 + 24 >> 2] & 63]($__nm, $13); //@line 8386
  } else {
   FUNCTION_TABLE_vii[HEAP32[$14 + 28 >> 2] & 63]($__nm, $13); //@line 8390
  }
  $19 = HEAP8[$__nm >> 0] | 0; //@line 8392
  $21 = ($19 & 1) == 0; //@line 8394
  $24 = $__nm + 4 | 0; //@line 8398
  $$pre1 = $__nm + 8 | 0; //@line 8399
  $$pre$phi3Z2D = $21 ? $24 : $__nm + 4 | 0; //@line 8400
  $$ph = $21 ? $24 : HEAP32[$__nm + 8 >> 2] | 0; //@line 8401
  $26 = ($19 & 1) == 0; //@line 8403
  if (($$ph | 0) != (($26 ? $$pre$phi3Z2D : HEAP32[$$pre1 >> 2] | 0) + (($26 ? ($19 & 255) >>> 1 : HEAP32[$$pre$phi3Z2D >> 2] | 0) << 2) | 0)) {
   $35 = $$ph; //@line 8413
   do {
    $34 = HEAP32[$35 >> 2] | 0; //@line 8415
    $36 = HEAP32[$__s >> 2] | 0; //@line 8416
    if ($36) {
     $38 = $36 + 24 | 0; //@line 8419
     $39 = HEAP32[$38 >> 2] | 0; //@line 8420
     if (($39 | 0) == (HEAP32[$36 + 28 >> 2] | 0)) {
      $$0$i$i = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$36 >> 2] | 0) + 52 >> 2] & 15]($36, $34) | 0; //@line 8429
     } else {
      HEAP32[$38 >> 2] = $39 + 4; //@line 8432
      HEAP32[$39 >> 2] = $34; //@line 8433
      $$0$i$i = $34; //@line 8434
     }
     if (($$0$i$i | 0) == -1) {
      HEAP32[$__s >> 2] = 0; //@line 8438
     }
    }
    $35 = $35 + 4 | 0; //@line 8441
    $$pre = HEAP8[$__nm >> 0] | 0; //@line 8442
    $51 = ($$pre & 1) == 0; //@line 8444
   } while (($35 | 0) != (($51 ? $$pre$phi3Z2D : HEAP32[$$pre1 >> 2] | 0) + (($51 ? ($$pre & 255) >>> 1 : HEAP32[$$pre$phi3Z2D >> 2] | 0) << 2) | 0));
  }
  $59 = HEAP32[$__s >> 2] | 0; //@line 8460
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nm); //@line 8461
  $$sroa$0$0 = $59; //@line 8462
 }
 STACKTOP = sp; //@line 8464
 return $$sroa$0$0 | 0; //@line 8464
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi5Z2D = 0, $$pre1 = 0, $$sroa$0$0 = 0, $0 = 0, $1 = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0, $19 = 0, $21 = 0, $24 = 0, $25 = 0, $27 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $40 = 0, $53 = 0, $61 = 0, $8 = 0, $__nm = 0, sp = 0;
 sp = STACKTOP; //@line 6964
 STACKTOP = STACKTOP + 32 | 0; //@line 6965
 $$byval_copy = sp + 20 | 0; //@line 6966
 $0 = sp + 16 | 0; //@line 6967
 $1 = sp + 12 | 0; //@line 6968
 $__nm = sp; //@line 6969
 if (!(HEAP32[$__iob + 4 >> 2] & 1)) {
  $8 = HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] | 0; //@line 6977
  HEAP32[$0 >> 2] = HEAP32[$__s >> 2]; //@line 6979
  $10 = $__v & 1; //@line 6980
  HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 6981
  $$sroa$0$0 = FUNCTION_TABLE_iiiiii[$8 & 31]($this, $$byval_copy, $__iob, $__fl, $10) | 0; //@line 6983
 } else {
  $12 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 6985
  HEAP32[$1 >> 2] = $12; //@line 6986
  $13 = __ZNKSt3__16locale9use_facetERNS0_2idE($1, 9468) | 0; //@line 6987
  __ZNSt3__114__shared_count16__release_sharedEv($12) | 0; //@line 6988
  $14 = HEAP32[$13 >> 2] | 0; //@line 6989
  if ($__v) {
   FUNCTION_TABLE_vii[HEAP32[$14 + 24 >> 2] & 63]($__nm, $13); //@line 6993
  } else {
   FUNCTION_TABLE_vii[HEAP32[$14 + 28 >> 2] & 63]($__nm, $13); //@line 6997
  }
  $19 = HEAP8[$__nm >> 0] | 0; //@line 6999
  $21 = ($19 & 1) == 0; //@line 7001
  $24 = $__nm + 1 | 0; //@line 7005
  $$pre1 = $__nm + 8 | 0; //@line 7006
  $$pre$phi5Z2D = $21 ? $24 : $__nm + 1 | 0; //@line 7007
  $$ph = $21 ? $24 : HEAP32[$__nm + 8 >> 2] | 0; //@line 7008
  $25 = $__nm + 4 | 0; //@line 7009
  $27 = ($19 & 1) == 0; //@line 7011
  if (($$ph | 0) != (($27 ? $$pre$phi5Z2D : HEAP32[$$pre1 >> 2] | 0) + ($27 ? ($19 & 255) >>> 1 : HEAP32[$25 >> 2] | 0) | 0)) {
   $36 = $$ph; //@line 7021
   do {
    $35 = HEAP8[$36 >> 0] | 0; //@line 7023
    $37 = HEAP32[$__s >> 2] | 0; //@line 7024
    do {
     if ($37) {
      $39 = $37 + 24 | 0; //@line 7028
      $40 = HEAP32[$39 >> 2] | 0; //@line 7029
      if (($40 | 0) != (HEAP32[$37 + 28 >> 2] | 0)) {
       HEAP32[$39 >> 2] = $40 + 1; //@line 7035
       HEAP8[$40 >> 0] = $35; //@line 7036
       break;
      }
      if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[$37 >> 2] | 0) + 52 >> 2] & 15]($37, $35 & 255) | 0) == -1) {
       HEAP32[$__s >> 2] = 0; //@line 7046
      }
     }
    } while (0);
    $36 = $36 + 1 | 0; //@line 7050
    $$pre = HEAP8[$__nm >> 0] | 0; //@line 7051
    $53 = ($$pre & 1) == 0; //@line 7053
   } while (($36 | 0) != (($53 ? $$pre$phi5Z2D : HEAP32[$$pre1 >> 2] | 0) + ($53 ? ($$pre & 255) >>> 1 : HEAP32[$25 >> 2] | 0) | 0));
  }
  $61 = HEAP32[$__s >> 2] | 0; //@line 7069
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nm); //@line 7070
  $$sroa$0$0 = $61; //@line 7071
 }
 STACKTOP = sp; //@line 7073
 return $$sroa$0$0 | 0; //@line 7073
}
function _mbrtowc($wc, $src, $n, $st) {
 $wc = $wc | 0;
 $src = $src | 0;
 $n = $n | 0;
 $st = $st | 0;
 var $$0 = 0, $$024 = 0, $$1 = 0, $$lcssa = 0, $$lcssa35 = 0, $$st = 0, $1 = 0, $12 = 0, $16 = 0, $17 = 0, $19 = 0, $21 = 0, $30 = 0, $7 = 0, $8 = 0, $c$05 = 0, $c$1 = 0, $c$2 = 0, $dummy = 0, $dummy$wc = 0, $s$06 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5116
 STACKTOP = STACKTOP + 16 | 0; //@line 5117
 $dummy = sp; //@line 5118
 $$st = ($st | 0) == 0 ? 2612 : $st; //@line 5120
 $1 = HEAP32[$$st >> 2] | 0; //@line 5121
 L1 : do {
  if (!$src) {
   if (!$1) {
    $$0 = 0; //@line 5127
   } else {
    label = 15; //@line 5129
   }
  } else {
   $dummy$wc = ($wc | 0) == 0 ? $dummy : $wc; //@line 5133
   if (!$n) {
    $$0 = -2; //@line 5136
   } else {
    if (!$1) {
     $7 = HEAP8[$src >> 0] | 0; //@line 5140
     $8 = $7 & 255; //@line 5141
     if ($7 << 24 >> 24 > -1) {
      HEAP32[$dummy$wc >> 2] = $8; //@line 5144
      $$0 = $7 << 24 >> 24 != 0 & 1; //@line 5147
      break;
     }
     $12 = $8 + -194 | 0; //@line 5150
     if ($12 >>> 0 > 50) {
      label = 15; //@line 5153
      break;
     }
     $16 = HEAP32[2340 + ($12 << 2) >> 2] | 0; //@line 5158
     $17 = $n + -1 | 0; //@line 5159
     if (!$17) {
      $c$2 = $16; //@line 5162
     } else {
      $$024 = $17; //@line 5164
      $c$05 = $16; //@line 5164
      $s$06 = $src + 1 | 0; //@line 5164
      label = 9; //@line 5165
     }
    } else {
     $$024 = $n; //@line 5168
     $c$05 = $1; //@line 5168
     $s$06 = $src; //@line 5168
     label = 9; //@line 5169
    }
    L11 : do {
     if ((label | 0) == 9) {
      $19 = HEAP8[$s$06 >> 0] | 0; //@line 5173
      $21 = ($19 & 255) >>> 3; //@line 5175
      if (($21 + -16 | $21 + ($c$05 >> 26)) >>> 0 > 7) {
       label = 15; //@line 5182
       break L1;
      } else {
       $$1 = $$024; //@line 5185
       $30 = $19; //@line 5185
       $c$1 = $c$05; //@line 5185
       $s$1 = $s$06; //@line 5185
      }
      while (1) {
       $s$1 = $s$1 + 1 | 0; //@line 5189
       $c$1 = ($30 & 255) + -128 | $c$1 << 6; //@line 5192
       $$1 = $$1 + -1 | 0; //@line 5193
       if (($c$1 | 0) >= 0) {
        $$lcssa = $c$1; //@line 5196
        $$lcssa35 = $$1; //@line 5196
        break;
       }
       if (!$$1) {
        $c$2 = $c$1; //@line 5201
        break L11;
       }
       $30 = HEAP8[$s$1 >> 0] | 0; //@line 5204
       if (($30 & -64) << 24 >> 24 != -128) {
        label = 15; //@line 5210
        break L1;
       }
      }
      HEAP32[$$st >> 2] = 0; //@line 5214
      HEAP32[$dummy$wc >> 2] = $$lcssa; //@line 5215
      $$0 = $n - $$lcssa35 | 0; //@line 5217
      break L1;
     }
    } while (0);
    HEAP32[$$st >> 2] = $c$2; //@line 5221
    $$0 = -2; //@line 5222
   }
  }
 } while (0);
 if ((label | 0) == 15) {
  HEAP32[$$st >> 2] = 0; //@line 5227
  HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 5229
  $$0 = -1; //@line 5230
 }
 STACKTOP = sp; //@line 5232
 return $$0 | 0; //@line 5232
}
function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $__g_end, $__err) {
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__err = $__err | 0;
 var $$01$i$i22 = 0, $$lcssa = 0, $0 = 0, $10 = 0, $12 = 0, $14 = 0, $19 = 0, $20 = 0, $24 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $33 = 0, $36 = 0, $4 = 0, $45 = 0, $__ig$018 = 0, $__r$019 = 0, $or$cond2 = 0, $or$cond2$lcssa = 0, $or$cond217 = 0, $or$cond220 = 0;
 $0 = HEAP8[$__grouping >> 0] | 0; //@line 16275
 $3 = $__grouping + 4 | 0; //@line 16278
 $4 = HEAP32[$3 >> 2] | 0; //@line 16279
 L1 : do {
  if ((($0 & 1) == 0 ? ($0 & 255) >>> 1 : $4) | 0) {
   if (($__g | 0) == ($__g_end | 0)) {
    $19 = $0; //@line 16288
    $28 = $4; //@line 16288
   } else {
    $10 = $__g_end + -4 | 0; //@line 16290
    if ($10 >>> 0 > $__g >>> 0) {
     $$01$i$i22 = $__g; //@line 16293
     $14 = $10; //@line 16293
     do {
      $12 = HEAP32[$$01$i$i22 >> 2] | 0; //@line 16295
      HEAP32[$$01$i$i22 >> 2] = HEAP32[$14 >> 2]; //@line 16297
      HEAP32[$14 >> 2] = $12; //@line 16298
      $$01$i$i22 = $$01$i$i22 + 4 | 0; //@line 16299
      $14 = $14 + -4 | 0; //@line 16300
     } while ($$01$i$i22 >>> 0 < $14 >>> 0);
    }
    $19 = HEAP8[$__grouping >> 0] | 0; //@line 16311
    $28 = HEAP32[$3 >> 2] | 0; //@line 16311
   }
   $20 = ($19 & 1) == 0; //@line 16314
   $24 = $20 ? $__grouping + 1 | 0 : HEAP32[$__grouping + 8 >> 2] | 0; //@line 16318
   $30 = $__g_end + -4 | 0; //@line 16323
   $31 = $24 + ($20 ? ($19 & 255) >>> 1 : $28) | 0; //@line 16324
   $33 = HEAP8[$24 >> 0] | 0; //@line 16326
   $or$cond217 = $33 << 24 >> 24 < 1 | $33 << 24 >> 24 == 127; //@line 16329
   L10 : do {
    if ($30 >>> 0 > $__g >>> 0) {
     $36 = $33; //@line 16332
     $__ig$018 = $24; //@line 16332
     $__r$019 = $__g; //@line 16332
     $or$cond220 = $or$cond217; //@line 16332
     while (1) {
      if (!$or$cond220) {
       if (($36 << 24 >> 24 | 0) != (HEAP32[$__r$019 >> 2] | 0)) {
        break;
       }
      }
      $__ig$018 = ($31 - $__ig$018 | 0) > 1 ? $__ig$018 + 1 | 0 : $__ig$018; //@line 16346
      $__r$019 = $__r$019 + 4 | 0; //@line 16347
      $45 = HEAP8[$__ig$018 >> 0] | 0; //@line 16349
      $or$cond2 = $45 << 24 >> 24 < 1 | $45 << 24 >> 24 == 127; //@line 16352
      if ($__r$019 >>> 0 >= $30 >>> 0) {
       $$lcssa = $45; //@line 16356
       $or$cond2$lcssa = $or$cond2; //@line 16356
       break L10;
      } else {
       $36 = $45; //@line 16354
       $or$cond220 = $or$cond2; //@line 16354
      }
     }
     HEAP32[$__err >> 2] = 4; //@line 16360
     break L1;
    } else {
     $$lcssa = $33; //@line 16363
     $or$cond2$lcssa = $or$cond217; //@line 16363
    }
   } while (0);
   if (!$or$cond2$lcssa) {
    if (((HEAP32[$30 >> 2] | 0) + -1 | 0) >>> 0 >= $$lcssa << 24 >> 24 >>> 0) {
     HEAP32[$__err >> 2] = 4; //@line 16372
    }
   }
  }
 } while (0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $14 = 0, $20 = 0, $23 = 0, $24 = 0, $26 = 0, $33 = 0, $44 = 0, $6 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, label = 0;
 L1 : do {
  if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) {
   if ((HEAP32[$info + 4 >> 2] | 0) == ($current_ptr | 0)) {
    $6 = $info + 28 | 0; //@line 1556
    if ((HEAP32[$6 >> 2] | 0) != 1) {
     HEAP32[$6 >> 2] = $path_below; //@line 1560
    }
   }
  } else {
   if (($this | 0) != (HEAP32[$info >> 2] | 0)) {
    $44 = HEAP32[$this + 8 >> 2] | 0; //@line 1568
    FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$44 >> 2] | 0) + 24 >> 2] & 3]($44, $info, $current_ptr, $path_below, $use_strcmp); //@line 1572
    break;
   }
   if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
    $14 = $info + 20 | 0; //@line 1579
    if ((HEAP32[$14 >> 2] | 0) != ($current_ptr | 0)) {
     HEAP32[$info + 32 >> 2] = $path_below; //@line 1584
     $20 = $info + 44 | 0; //@line 1585
     if ((HEAP32[$20 >> 2] | 0) == 4) {
      break;
     }
     $23 = $info + 52 | 0; //@line 1591
     HEAP8[$23 >> 0] = 0; //@line 1592
     $24 = $info + 53 | 0; //@line 1593
     HEAP8[$24 >> 0] = 0; //@line 1594
     $26 = HEAP32[$this + 8 >> 2] | 0; //@line 1596
     FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$26 >> 2] | 0) + 20 >> 2] & 7]($26, $info, $current_ptr, $current_ptr, 1, $use_strcmp); //@line 1600
     if (!(HEAP8[$24 >> 0] | 0)) {
      $is_dst_type_derived_from_static_type$0$off01 = 0; //@line 1604
      label = 13; //@line 1605
     } else {
      if (!(HEAP8[$23 >> 0] | 0)) {
       $is_dst_type_derived_from_static_type$0$off01 = 1; //@line 1610
       label = 13; //@line 1611
      }
     }
     do {
      if ((label | 0) == 13) {
       HEAP32[$14 >> 2] = $current_ptr; //@line 1616
       $33 = $info + 40 | 0; //@line 1617
       HEAP32[$33 >> 2] = (HEAP32[$33 >> 2] | 0) + 1; //@line 1620
       if ((HEAP32[$info + 36 >> 2] | 0) == 1) {
        if ((HEAP32[$info + 24 >> 2] | 0) == 2) {
         HEAP8[$info + 54 >> 0] = 1; //@line 1630
         if ($is_dst_type_derived_from_static_type$0$off01) {
          break;
         }
        } else {
         label = 16; //@line 1635
        }
       } else {
        label = 16; //@line 1638
       }
       if ((label | 0) == 16) {
        if ($is_dst_type_derived_from_static_type$0$off01) {
         break;
        }
       }
       HEAP32[$20 >> 2] = 4; //@line 1645
       break L1;
      }
     } while (0);
     HEAP32[$20 >> 2] = 3; //@line 1649
     break;
    }
   }
   if (($path_below | 0) == 1) {
    HEAP32[$info + 32 >> 2] = 1; //@line 1656
   }
  }
 } while (0);
 return;
}
function _vfprintf($f, $fmt, $ap) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$ = 0, $$0 = 0, $12 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $28 = 0, $33 = 0, $6 = 0, $7 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 7330
 STACKTOP = STACKTOP + 224 | 0; //@line 7331
 $ap2 = sp + 80 | 0; //@line 7332
 $nl_type = sp + 96 | 0; //@line 7333
 $nl_arg = sp; //@line 7334
 $internal_buf = sp + 136 | 0; //@line 7335
 dest = $nl_type; //@line 7336
 stop = dest + 40 | 0; //@line 7336
 do {
  HEAP32[dest >> 2] = 0; //@line 7336
  dest = dest + 4 | 0; //@line 7336
 } while ((dest | 0) < (stop | 0));
 HEAP32[$ap2 >> 2] = HEAP32[$ap >> 2]; //@line 7338
 if ((_printf_core(0, $fmt, $ap2, $nl_arg, $nl_type) | 0) < 0) {
  $$0 = -1; //@line 7342
 } else {
  if ((HEAP32[$f + 76 >> 2] | 0) > -1) {
   $33 = ___lockfile($f) | 0; //@line 7349
  } else {
   $33 = 0; //@line 7351
  }
  $6 = HEAP32[$f >> 2] | 0; //@line 7353
  $7 = $6 & 32; //@line 7354
  if ((HEAP8[$f + 74 >> 0] | 0) < 1) {
   HEAP32[$f >> 2] = $6 & -33; //@line 7360
  }
  $12 = $f + 48 | 0; //@line 7362
  if (!(HEAP32[$12 >> 2] | 0)) {
   $16 = $f + 44 | 0; //@line 7366
   $17 = HEAP32[$16 >> 2] | 0; //@line 7367
   HEAP32[$16 >> 2] = $internal_buf; //@line 7368
   $18 = $f + 28 | 0; //@line 7369
   HEAP32[$18 >> 2] = $internal_buf; //@line 7370
   $19 = $f + 20 | 0; //@line 7371
   HEAP32[$19 >> 2] = $internal_buf; //@line 7372
   HEAP32[$12 >> 2] = 80; //@line 7373
   $21 = $f + 16 | 0; //@line 7375
   HEAP32[$21 >> 2] = $internal_buf + 80; //@line 7376
   $22 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type) | 0; //@line 7377
   if (!$17) {
    $ret$1 = $22; //@line 7380
   } else {
    FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, 0, 0) | 0; //@line 7384
    $$ = (HEAP32[$19 >> 2] | 0) == 0 ? -1 : $22; //@line 7387
    HEAP32[$16 >> 2] = $17; //@line 7388
    HEAP32[$12 >> 2] = 0; //@line 7389
    HEAP32[$21 >> 2] = 0; //@line 7390
    HEAP32[$18 >> 2] = 0; //@line 7391
    HEAP32[$19 >> 2] = 0; //@line 7392
    $ret$1 = $$; //@line 7393
   }
  } else {
   $ret$1 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type) | 0; //@line 7397
  }
  $28 = HEAP32[$f >> 2] | 0; //@line 7399
  HEAP32[$f >> 2] = $28 | $7; //@line 7404
  if ($33) {
   ___unlockfile($f); //@line 7407
  }
  $$0 = ($28 & 32 | 0) == 0 ? $ret$1 : -1; //@line 7409
 }
 STACKTOP = sp; //@line 7411
 return $$0 | 0; //@line 7411
}
function __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmtp, $__len, $__flags) {
 $__fmtp = $__fmtp | 0;
 $__len = $__len | 0;
 $__flags = $__flags | 0;
 var $$0 = 0, $$012 = 0, $$1 = 0, $$2$lcssa = 0, $$2$ph = 0, $$23 = 0, $11 = 0, $14 = 0, $15 = 0, $23 = 0, $6 = 0, $7 = 0, $8 = 0, $specify_precision$0$off0$ph = 0;
 if (!($__flags & 2048)) {
  $$0 = $__fmtp; //@line 7740
 } else {
  HEAP8[$__fmtp >> 0] = 43; //@line 7743
  $$0 = $__fmtp + 1 | 0; //@line 7744
 }
 if (!($__flags & 1024)) {
  $$1 = $$0; //@line 7749
 } else {
  HEAP8[$$0 >> 0] = 35; //@line 7752
  $$1 = $$0 + 1 | 0; //@line 7753
 }
 $6 = $__flags & 260; //@line 7755
 $7 = $__flags >>> 14; //@line 7756
 $8 = ($6 | 0) == 260; //@line 7757
 if ($8) {
  $$2$ph = $$1; //@line 7759
  $specify_precision$0$off0$ph = 0; //@line 7759
 } else {
  HEAP8[$$1 >> 0] = 46; //@line 7762
  HEAP8[$$1 + 1 >> 0] = 42; //@line 7764
  $$2$ph = $$1 + 2 | 0; //@line 7765
  $specify_precision$0$off0$ph = 1; //@line 7765
 }
 $11 = HEAP8[$__len >> 0] | 0; //@line 7767
 if (!($11 << 24 >> 24)) {
  $$2$lcssa = $$2$ph; //@line 7770
 } else {
  $$012 = $__len; //@line 7772
  $$23 = $$2$ph; //@line 7772
  $15 = $11; //@line 7772
  while (1) {
   $$012 = $$012 + 1 | 0; //@line 7774
   $14 = $$23 + 1 | 0; //@line 7775
   HEAP8[$$23 >> 0] = $15; //@line 7776
   $15 = HEAP8[$$012 >> 0] | 0; //@line 7777
   if (!($15 << 24 >> 24)) {
    $$2$lcssa = $14; //@line 7780
    break;
   } else {
    $$23 = $14; //@line 7783
   }
  }
 }
 L14 : do {
  switch ($6 | 0) {
  case 4:
   {
    if (!($7 & 1)) {
     HEAP8[$$2$lcssa >> 0] = 102; //@line 7793
     break L14;
    } else {
     HEAP8[$$2$lcssa >> 0] = 70; //@line 7796
     break L14;
    }
    break;
   }
  case 256:
   {
    if (!($7 & 1)) {
     HEAP8[$$2$lcssa >> 0] = 101; //@line 7805
     break L14;
    } else {
     HEAP8[$$2$lcssa >> 0] = 69; //@line 7808
     break L14;
    }
    break;
   }
  default:
   {
    $23 = ($7 & 1 | 0) != 0; //@line 7815
    if ($8) {
     if ($23) {
      HEAP8[$$2$lcssa >> 0] = 65; //@line 7818
      break L14;
     } else {
      HEAP8[$$2$lcssa >> 0] = 97; //@line 7821
      break L14;
     }
    } else {
     if ($23) {
      HEAP8[$$2$lcssa >> 0] = 71; //@line 7826
      break L14;
     } else {
      HEAP8[$$2$lcssa >> 0] = 103; //@line 7829
      break L14;
     }
    }
   }
  }
 } while (0);
 return $specify_precision$0$off0$ph | 0; //@line 7836
}
function ___dynamic_cast($static_ptr, $static_type, $dst_type, $src2dst_offset) {
 $static_ptr = $static_ptr | 0;
 $static_type = $static_type | 0;
 $dst_type = $dst_type | 0;
 $src2dst_offset = $src2dst_offset | 0;
 var $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $6 = 0, $dst_ptr$0 = 0, $info = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 1045
 STACKTOP = STACKTOP + 64 | 0; //@line 1046
 $info = sp; //@line 1047
 $0 = HEAP32[$static_ptr >> 2] | 0; //@line 1048
 $4 = $static_ptr + (HEAP32[$0 + -8 >> 2] | 0) | 0; //@line 1052
 $6 = HEAP32[$0 + -4 >> 2] | 0; //@line 1054
 HEAP32[$info >> 2] = $dst_type; //@line 1055
 HEAP32[$info + 4 >> 2] = $static_ptr; //@line 1057
 HEAP32[$info + 8 >> 2] = $static_type; //@line 1059
 HEAP32[$info + 12 >> 2] = $src2dst_offset; //@line 1061
 $10 = $info + 16 | 0; //@line 1062
 $11 = $info + 20 | 0; //@line 1063
 $12 = $info + 24 | 0; //@line 1064
 $13 = $info + 28 | 0; //@line 1065
 $14 = $info + 32 | 0; //@line 1066
 $15 = $info + 40 | 0; //@line 1067
 $16 = ($6 | 0) == ($dst_type | 0); //@line 1068
 dest = $10; //@line 1069
 stop = dest + 36 | 0; //@line 1069
 do {
  HEAP32[dest >> 2] = 0; //@line 1069
  dest = dest + 4 | 0; //@line 1069
 } while ((dest | 0) < (stop | 0));
 HEAP16[$10 + 36 >> 1] = 0; //@line 1069
 HEAP8[$10 + 38 >> 0] = 0; //@line 1069
 L1 : do {
  if ($16) {
   HEAP32[$info + 48 >> 2] = 1; //@line 1073
   FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$dst_type >> 2] | 0) + 20 >> 2] & 7]($dst_type, $info, $4, $4, 1, 0); //@line 1077
   $dst_ptr$0 = (HEAP32[$12 >> 2] | 0) == 1 ? $4 : 0; //@line 1081
  } else {
   FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$6 >> 2] | 0) + 24 >> 2] & 3]($6, $info, $4, 1, 0); //@line 1087
   switch (HEAP32[$info + 36 >> 2] | 0) {
   case 0:
    {
     $dst_ptr$0 = (HEAP32[$15 >> 2] | 0) == 1 & (HEAP32[$13 >> 2] | 0) == 1 & (HEAP32[$14 >> 2] | 0) == 1 ? HEAP32[$11 >> 2] | 0 : 0; //@line 1101
     break L1;
     break;
    }
   case 1:
    {
     break;
    }
   default:
    {
     $dst_ptr$0 = 0; //@line 1109
     break L1;
    }
   }
   if ((HEAP32[$12 >> 2] | 0) != 1) {
    if (!((HEAP32[$15 >> 2] | 0) == 0 & (HEAP32[$13 >> 2] | 0) == 1 & (HEAP32[$14 >> 2] | 0) == 1)) {
     $dst_ptr$0 = 0; //@line 1125
     break;
    }
   }
   $dst_ptr$0 = HEAP32[$10 >> 2] | 0; //@line 1130
  }
 } while (0);
 STACKTOP = sp; //@line 1133
 return $dst_ptr$0 | 0; //@line 1133
}
function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($__s, $__ob, $__op, $__oe, $__iob, $__fl) {
 $__s = $__s | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 var $$sroa$0$1 = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $32 = 0, $33 = 0, $5 = 0, $6 = 0, $7 = 0, $__ns$0 = 0, $__sp = 0, sp = 0;
 sp = STACKTOP; //@line 13782
 STACKTOP = STACKTOP + 16 | 0; //@line 13783
 $__sp = sp; //@line 13784
 $0 = HEAP32[$__s >> 2] | 0; //@line 13785
 L1 : do {
  if (!$0) {
   $$sroa$0$1 = 0; //@line 13789
  } else {
   $2 = $__oe; //@line 13791
   $3 = $__ob; //@line 13792
   $5 = $2 - $3 >> 2; //@line 13794
   $6 = $__iob + 12 | 0; //@line 13795
   $7 = HEAP32[$6 >> 2] | 0; //@line 13796
   $__ns$0 = ($7 | 0) > ($5 | 0) ? $7 - $5 | 0 : 0; //@line 13799
   $10 = $__op; //@line 13800
   $11 = $10 - $3 | 0; //@line 13801
   $12 = $11 >> 2; //@line 13802
   if (($11 | 0) > 0) {
    if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 31]($0, $__ob, $12) | 0) != ($12 | 0)) {
     HEAP32[$__s >> 2] = 0; //@line 13811
     $$sroa$0$1 = 0; //@line 13812
     break;
    }
   }
   do {
    if (($__ns$0 | 0) > 0) {
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($__sp, $__ns$0, $__fl); //@line 13819
     if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 31]($0, (HEAP8[$__sp >> 0] & 1) == 0 ? $__sp + 4 | 0 : HEAP32[$__sp + 8 >> 2] | 0, $__ns$0) | 0) == ($__ns$0 | 0)) {
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sp); //@line 13833
      break;
     } else {
      HEAP32[$__s >> 2] = 0; //@line 13836
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sp); //@line 13837
      $$sroa$0$1 = 0; //@line 13838
      break L1;
     }
    }
   } while (0);
   $32 = $2 - $10 | 0; //@line 13843
   $33 = $32 >> 2; //@line 13844
   if (($32 | 0) > 0) {
    if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 31]($0, $__op, $33) | 0) != ($33 | 0)) {
     HEAP32[$__s >> 2] = 0; //@line 13853
     $$sroa$0$1 = 0; //@line 13854
     break;
    }
   }
   HEAP32[$6 >> 2] = 0; //@line 13858
   $$sroa$0$1 = $0; //@line 13859
  }
 } while (0);
 STACKTOP = sp; //@line 13862
 return $$sroa$0$1 | 0; //@line 13862
}
function __ZNSt3__111__stdoutbufIcE8overflowEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$0 = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $20 = 0, $27 = 0, $31 = 0, $9 = 0, $__1buf = 0, $__e = 0, $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, $pbase$0$lcssa12 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1743
 STACKTOP = STACKTOP + 32 | 0; //@line 1744
 $__extbuf = sp + 16 | 0; //@line 1745
 $__1buf = sp + 8 | 0; //@line 1746
 $__extbe = sp + 4 | 0; //@line 1747
 $__e = sp; //@line 1748
 $0 = ($__c | 0) == -1; //@line 1749
 L1 : do {
  if ($0) {
   label = 11; //@line 1752
  } else {
   HEAP8[$__1buf >> 0] = $__c; //@line 1755
   if (HEAP8[$this + 44 >> 0] | 0) {
    if ((_fwrite($__1buf, 1, 1, HEAP32[$this + 32 >> 2] | 0) | 0) == 1) {
     label = 11; //@line 1765
     break;
    } else {
     $$0 = -1; //@line 1768
     break;
    }
   }
   HEAP32[$__extbe >> 2] = $__extbuf; //@line 1772
   $9 = $__1buf + 1 | 0; //@line 1773
   $10 = $this + 36 | 0; //@line 1774
   $11 = $this + 40 | 0; //@line 1775
   $12 = $__extbuf + 8 | 0; //@line 1776
   $13 = $__extbuf; //@line 1777
   $14 = $this + 32 | 0; //@line 1778
   $pbase$0 = $__1buf; //@line 1779
   while (1) {
    $15 = HEAP32[$10 >> 2] | 0; //@line 1781
    $20 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$15 >> 2] | 0) + 12 >> 2] & 15]($15, HEAP32[$11 >> 2] | 0, $pbase$0, $9, $__e, $__extbuf, $12, $__extbe) | 0; //@line 1786
    if ((HEAP32[$__e >> 2] | 0) == ($pbase$0 | 0)) {
     $$0 = -1; //@line 1790
     break L1;
    }
    if (($20 | 0) == 3) {
     $pbase$0$lcssa12 = $pbase$0; //@line 1795
     break;
    }
    $27 = ($20 | 0) == 1; //@line 1798
    if ($20 >>> 0 >= 2) {
     $$0 = -1; //@line 1801
     break L1;
    }
    $31 = (HEAP32[$__extbe >> 2] | 0) - $13 | 0; //@line 1806
    if ((_fwrite($__extbuf, 1, $31, HEAP32[$14 >> 2] | 0) | 0) != ($31 | 0)) {
     $$0 = -1; //@line 1811
     break L1;
    }
    if ($27) {
     $pbase$0 = $27 ? HEAP32[$__e >> 2] | 0 : $pbase$0; //@line 1817
    } else {
     label = 11; //@line 1819
     break L1;
    }
   }
   if ((_fwrite($pbase$0$lcssa12, 1, 1, HEAP32[$14 >> 2] | 0) | 0) == 1) {
    label = 11; //@line 1827
   } else {
    $$0 = -1; //@line 1829
   }
  }
 } while (0);
 if ((label | 0) == 11) {
  $$0 = $0 ? 0 : $__c; //@line 1835
 }
 STACKTOP = sp; //@line 1837
 return $$0 | 0; //@line 1837
}
function __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($__os, $__str, $__len) {
 $__os = $__os | 0;
 $__str = $__str | 0;
 $__len = $__len | 0;
 var $$byval_copy = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $26 = 0, $31 = 0, $5 = 0, $8 = 0, $__s = 0, sp = 0;
 sp = STACKTOP; //@line 474
 STACKTOP = STACKTOP + 32 | 0; //@line 475
 $$byval_copy = sp + 16 | 0; //@line 476
 $__s = sp + 8 | 0; //@line 477
 $0 = sp; //@line 478
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($__s, $__os); //@line 479
 if (!(HEAP8[$__s >> 0] | 0)) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s); //@line 483
  STACKTOP = sp; //@line 484
  return $__os | 0; //@line 484
 }
 $5 = HEAP32[(HEAP32[$__os >> 2] | 0) + -12 >> 2] | 0; //@line 488
 HEAP32[$0 >> 2] = HEAP32[$__os + ($5 + 24) >> 2]; //@line 492
 $8 = $__os + $5 | 0; //@line 493
 $10 = HEAP32[$__os + ($5 + 4) >> 2] | 0; //@line 496
 $11 = $__str + $__len | 0; //@line 497
 $12 = $__os + ($5 + 76) | 0; //@line 499
 $13 = HEAP32[$12 >> 2] | 0; //@line 500
 if (($13 | 0) == -1) {
  HEAP32[$$byval_copy >> 2] = __ZNKSt3__18ios_base6getlocEv($8) | 0; //@line 504
  $16 = __ZNKSt3__16locale9use_facetERNS0_2idE($$byval_copy, 9328) | 0; //@line 505
  $20 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$16 >> 2] | 0) + 28 >> 2] & 15]($16, 32) | 0; //@line 509
  __ZNSt3__16localeD2Ev($$byval_copy); //@line 510
  $21 = $20 << 24 >> 24; //@line 511
  HEAP32[$12 >> 2] = $21; //@line 512
  $23 = $21; //@line 513
 } else {
  $23 = $13; //@line 515
 }
 $22 = $23 & 255; //@line 517
 $26 = ($10 & 176 | 0) == 32 ? $11 : $__str; //@line 520
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 521
 if (__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__str, $26, $11, $8, $22) | 0) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s); //@line 525
  STACKTOP = sp; //@line 526
  return $__os | 0; //@line 526
 }
 $31 = HEAP32[(HEAP32[$__os >> 2] | 0) + -12 >> 2] | 0; //@line 530
 __ZNSt3__18ios_base5clearEj($__os + $31 | 0, HEAP32[$__os + ($31 + 16) >> 2] | 5); //@line 536
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s); //@line 537
 STACKTOP = sp; //@line 538
 return $__os | 0; //@line 538
}
function __ZNSt3__111__stdoutbufIwE8overflowEj($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$0 = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $19 = 0, $26 = 0, $30 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__e = 0, $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, $pbase$0$lcssa12 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1205
 STACKTOP = STACKTOP + 32 | 0; //@line 1206
 $__extbuf = sp + 16 | 0; //@line 1207
 $__1buf = sp + 8 | 0; //@line 1208
 $__extbe = sp + 4 | 0; //@line 1209
 $__e = sp; //@line 1210
 $0 = ($__c | 0) == -1; //@line 1211
 L1 : do {
  if ($0) {
   label = 11; //@line 1214
  } else {
   HEAP32[$__1buf >> 2] = $__c; //@line 1216
   if (HEAP8[$this + 44 >> 0] | 0) {
    if ((_fwrite($__1buf, 4, 1, HEAP32[$this + 32 >> 2] | 0) | 0) == 1) {
     label = 11; //@line 1226
     break;
    } else {
     $$0 = -1; //@line 1229
     break;
    }
   }
   HEAP32[$__extbe >> 2] = $__extbuf; //@line 1233
   $8 = $__1buf + 4 | 0; //@line 1234
   $9 = $this + 36 | 0; //@line 1235
   $10 = $this + 40 | 0; //@line 1236
   $11 = $__extbuf + 8 | 0; //@line 1237
   $12 = $__extbuf; //@line 1238
   $13 = $this + 32 | 0; //@line 1239
   $pbase$0 = $__1buf; //@line 1240
   while (1) {
    $14 = HEAP32[$9 >> 2] | 0; //@line 1242
    $19 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$14 >> 2] | 0) + 12 >> 2] & 15]($14, HEAP32[$10 >> 2] | 0, $pbase$0, $8, $__e, $__extbuf, $11, $__extbe) | 0; //@line 1247
    if ((HEAP32[$__e >> 2] | 0) == ($pbase$0 | 0)) {
     $$0 = -1; //@line 1251
     break L1;
    }
    if (($19 | 0) == 3) {
     $pbase$0$lcssa12 = $pbase$0; //@line 1256
     break;
    }
    $26 = ($19 | 0) == 1; //@line 1259
    if ($19 >>> 0 >= 2) {
     $$0 = -1; //@line 1262
     break L1;
    }
    $30 = (HEAP32[$__extbe >> 2] | 0) - $12 | 0; //@line 1267
    if ((_fwrite($__extbuf, 1, $30, HEAP32[$13 >> 2] | 0) | 0) != ($30 | 0)) {
     $$0 = -1; //@line 1272
     break L1;
    }
    if ($26) {
     $pbase$0 = $26 ? HEAP32[$__e >> 2] | 0 : $pbase$0; //@line 1278
    } else {
     label = 11; //@line 1280
     break L1;
    }
   }
   if ((_fwrite($pbase$0$lcssa12, 1, 1, HEAP32[$13 >> 2] | 0) | 0) == 1) {
    label = 11; //@line 1288
   } else {
    $$0 = -1; //@line 1290
   }
  }
 } while (0);
 if ((label | 0) == 11) {
  $$0 = $0 ? 0 : $__c; //@line 1296
 }
 STACKTOP = sp; //@line 1298
 return $$0 | 0; //@line 1298
}
function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($__s, $__ob, $__op, $__oe, $__iob, $__fl) {
 $__s = $__s | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 var $$sroa$0$1 = 0, $0 = 0, $10 = 0, $2 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, $__ns$0 = 0, $__sp = 0, sp = 0;
 sp = STACKTOP; //@line 550
 STACKTOP = STACKTOP + 16 | 0; //@line 551
 $__sp = sp; //@line 552
 $0 = HEAP32[$__s >> 2] | 0; //@line 553
 if (!$0) {
  $$sroa$0$1 = 0; //@line 556
  STACKTOP = sp; //@line 557
  return $$sroa$0$1 | 0; //@line 557
 }
 $2 = $__oe; //@line 559
 $3 = $__ob; //@line 560
 $4 = $2 - $3 | 0; //@line 561
 $5 = $__iob + 12 | 0; //@line 562
 $6 = HEAP32[$5 >> 2] | 0; //@line 563
 $__ns$0 = ($6 | 0) > ($4 | 0) ? $6 - $4 | 0 : 0; //@line 566
 $9 = $__op; //@line 567
 $10 = $9 - $3 | 0; //@line 568
 if (($10 | 0) > 0) {
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 31]($0, $__ob, $10) | 0) != ($10 | 0)) {
   HEAP32[$__s >> 2] = 0; //@line 577
   $$sroa$0$1 = 0; //@line 578
   STACKTOP = sp; //@line 579
   return $$sroa$0$1 | 0; //@line 579
  }
 }
 do {
  if (($__ns$0 | 0) > 0) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($__sp, $__ns$0, $__fl); //@line 585
   if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 31]($0, (HEAP8[$__sp >> 0] & 1) == 0 ? $__sp + 1 | 0 : HEAP32[$__sp + 8 >> 2] | 0, $__ns$0) | 0) == ($__ns$0 | 0)) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sp); //@line 599
    break;
   }
   HEAP32[$__s >> 2] = 0; //@line 602
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sp); //@line 603
   $$sroa$0$1 = 0; //@line 604
   STACKTOP = sp; //@line 605
   return $$sroa$0$1 | 0; //@line 605
  }
 } while (0);
 $30 = $2 - $9 | 0; //@line 608
 if (($30 | 0) > 0) {
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 31]($0, $__op, $30) | 0) != ($30 | 0)) {
   HEAP32[$__s >> 2] = 0; //@line 617
   $$sroa$0$1 = 0; //@line 618
   STACKTOP = sp; //@line 619
   return $$sroa$0$1 | 0; //@line 619
  }
 }
 HEAP32[$5 >> 2] = 0; //@line 622
 $$sroa$0$1 = $0; //@line 623
 STACKTOP = sp; //@line 624
 return $$sroa$0$1 | 0; //@line 624
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this, $__res_arg) {
 $this = $this | 0;
 $__res_arg = $__res_arg | 0;
 var $1 = 0, $15 = 0, $16 = 0, $21 = 0, $22 = 0, $28 = 0, $4 = 0, $41 = 0, $8 = 0, $__new_data$0 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0;
 if ($__res_arg >>> 0 > 4294967279) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this); //@line 2446
 }
 $1 = HEAP8[$this >> 0] | 0; //@line 2449
 if (!($1 & 1)) {
  $22 = 10; //@line 2453
  $8 = $1; //@line 2453
 } else {
  $4 = HEAP32[$this >> 2] | 0; //@line 2455
  $22 = ($4 & -2) + -1 | 0; //@line 2459
  $8 = $4 & 255; //@line 2459
 }
 if (!($8 & 1)) {
  $15 = ($8 & 255) >>> 1; //@line 2466
 } else {
  $15 = HEAP32[$this + 4 >> 2] | 0; //@line 2470
 }
 $16 = $15 >>> 0 > $__res_arg >>> 0 ? $15 : $__res_arg; //@line 2473
 if ($16 >>> 0 < 11) {
  $21 = 10; //@line 2476
 } else {
  $21 = ($16 + 16 & -16) + -1 | 0; //@line 2481
 }
 do {
  if (($21 | 0) != ($22 | 0)) {
   do {
    if (($21 | 0) == 10) {
     $__new_data$0 = $this + 1 | 0; //@line 2492
     $__now_long$0$off0 = 0; //@line 2492
     $__p$0 = HEAP32[$this + 8 >> 2] | 0; //@line 2492
     $__was_long$0$off0 = 1; //@line 2492
    } else {
     $28 = __Znwj($21 + 1 | 0) | 0; //@line 2495
     if (!($8 & 1)) {
      $__new_data$0 = $28; //@line 2500
      $__now_long$0$off0 = 1; //@line 2500
      $__p$0 = $this + 1 | 0; //@line 2500
      $__was_long$0$off0 = 0; //@line 2500
      break;
     } else {
      $__new_data$0 = $28; //@line 2505
      $__now_long$0$off0 = 1; //@line 2505
      $__p$0 = HEAP32[$this + 8 >> 2] | 0; //@line 2505
      $__was_long$0$off0 = 1; //@line 2505
      break;
     }
    }
   } while (0);
   if (!($8 & 1)) {
    $41 = ($8 & 255) >>> 1; //@line 2515
   } else {
    $41 = HEAP32[$this + 4 >> 2] | 0; //@line 2519
   }
   _memcpy($__new_data$0 | 0, $__p$0 | 0, $41 + 1 | 0) | 0; //@line 2522
   if ($__was_long$0$off0) {
    __ZdlPv($__p$0); //@line 2524
   }
   if ($__now_long$0$off0) {
    HEAP32[$this >> 2] = $21 + 1 | 1; //@line 2529
    HEAP32[$this + 4 >> 2] = $15; //@line 2531
    HEAP32[$this + 8 >> 2] = $__new_data$0; //@line 2533
    break;
   } else {
    HEAP8[$this >> 0] = $15 << 1; //@line 2538
    break;
   }
  }
 } while (0);
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this, $__res_arg) {
 $this = $this | 0;
 $__res_arg = $__res_arg | 0;
 var $1 = 0, $15 = 0, $16 = 0, $21 = 0, $22 = 0, $29 = 0, $4 = 0, $42 = 0, $8 = 0, $__new_data$0 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0;
 if ($__res_arg >>> 0 > 1073741807) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this); //@line 2920
 }
 $1 = HEAP8[$this >> 0] | 0; //@line 2923
 if (!($1 & 1)) {
  $22 = 1; //@line 2927
  $8 = $1; //@line 2927
 } else {
  $4 = HEAP32[$this >> 2] | 0; //@line 2929
  $22 = ($4 & -2) + -1 | 0; //@line 2933
  $8 = $4 & 255; //@line 2933
 }
 if (!($8 & 1)) {
  $15 = ($8 & 255) >>> 1; //@line 2940
 } else {
  $15 = HEAP32[$this + 4 >> 2] | 0; //@line 2944
 }
 $16 = $15 >>> 0 > $__res_arg >>> 0 ? $15 : $__res_arg; //@line 2947
 if ($16 >>> 0 < 2) {
  $21 = 1; //@line 2950
 } else {
  $21 = ($16 + 4 & -4) + -1 | 0; //@line 2955
 }
 do {
  if (($21 | 0) != ($22 | 0)) {
   do {
    if (($21 | 0) == 1) {
     $__new_data$0 = $this + 4 | 0; //@line 2966
     $__now_long$0$off0 = 0; //@line 2966
     $__p$0 = HEAP32[$this + 8 >> 2] | 0; //@line 2966
     $__was_long$0$off0 = 1; //@line 2966
    } else {
     $29 = __Znwj(($21 << 2) + 4 | 0) | 0; //@line 2970
     if (!($8 & 1)) {
      $__new_data$0 = $29; //@line 2975
      $__now_long$0$off0 = 1; //@line 2975
      $__p$0 = $this + 4 | 0; //@line 2975
      $__was_long$0$off0 = 0; //@line 2975
      break;
     } else {
      $__new_data$0 = $29; //@line 2980
      $__now_long$0$off0 = 1; //@line 2980
      $__p$0 = HEAP32[$this + 8 >> 2] | 0; //@line 2980
      $__was_long$0$off0 = 1; //@line 2980
      break;
     }
    }
   } while (0);
   if (!($8 & 1)) {
    $42 = ($8 & 255) >>> 1; //@line 2990
   } else {
    $42 = HEAP32[$this + 4 >> 2] | 0; //@line 2994
   }
   _wmemcpy($__new_data$0, $__p$0, $42 + 1 | 0) | 0; //@line 2997
   if ($__was_long$0$off0) {
    __ZdlPv($__p$0); //@line 2999
   }
   if ($__now_long$0$off0) {
    HEAP32[$this >> 2] = $21 + 1 | 1; //@line 3004
    HEAP32[$this + 4 >> 2] = $15; //@line 3006
    HEAP32[$this + 8 >> 2] = $__new_data$0; //@line 3008
    break;
   } else {
    HEAP8[$this >> 0] = $15 << 1; //@line 3013
    break;
   }
  }
 } while (0);
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $13 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, sp = 0;
 sp = STACKTOP; //@line 8800
 STACKTOP = STACKTOP + 128 | 0; //@line 8801
 $$byval_copy = sp; //@line 8802
 $__fmt = sp + 116 | 0; //@line 8803
 $__nar = sp + 104 | 0; //@line 8804
 $__o = sp + 20 | 0; //@line 8805
 $__op = sp + 16 | 0; //@line 8806
 $__oe = sp + 12 | 0; //@line 8807
 $0 = sp + 8 | 0; //@line 8808
 $1 = sp + 4 | 0; //@line 8809
 HEAP8[$__fmt >> 0] = HEAP8[21585] | 0; //@line 8810
 HEAP8[$__fmt + 1 >> 0] = HEAP8[21586] | 0; //@line 8810
 HEAP8[$__fmt + 2 >> 0] = HEAP8[21587] | 0; //@line 8810
 HEAP8[$__fmt + 3 >> 0] = HEAP8[21588] | 0; //@line 8810
 HEAP8[$__fmt + 4 >> 0] = HEAP8[21589] | 0; //@line 8810
 HEAP8[$__fmt + 5 >> 0] = HEAP8[21590] | 0; //@line 8810
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 21591, 0, HEAP32[$__iob + 4 >> 2] | 0); //@line 8814
 $5 = __ZNSt3__16__clocEv() | 0; //@line 8815
 HEAP32[$$byval_copy >> 2] = $__v; //@line 8816
 $7 = $__nar + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 12, $5, $__fmt, $$byval_copy) | 0) | 0; //@line 8818
 $8 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $7, $__iob) | 0; //@line 8819
 $9 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 8820
 HEAP32[$0 >> 2] = $9; //@line 8821
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nar, $8, $7, $__o, $__op, $__oe, $0); //@line 8822
 __ZNSt3__114__shared_count16__release_sharedEv($9) | 0; //@line 8823
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2]; //@line 8825
 $11 = HEAP32[$__op >> 2] | 0; //@line 8826
 $12 = HEAP32[$__oe >> 2] | 0; //@line 8827
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 8828
 $13 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__o, $11, $12, $__iob, $__fl) | 0; //@line 8829
 STACKTOP = sp; //@line 8830
 return $13 | 0; //@line 8830
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $13 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, sp = 0;
 sp = STACKTOP; //@line 8474
 STACKTOP = STACKTOP + 128 | 0; //@line 8475
 $$byval_copy = sp; //@line 8476
 $__fmt = sp + 116 | 0; //@line 8477
 $__nar = sp + 104 | 0; //@line 8478
 $__o = sp + 20 | 0; //@line 8479
 $__op = sp + 16 | 0; //@line 8480
 $__oe = sp + 12 | 0; //@line 8481
 $0 = sp + 8 | 0; //@line 8482
 $1 = sp + 4 | 0; //@line 8483
 HEAP8[$__fmt >> 0] = HEAP8[21585] | 0; //@line 8484
 HEAP8[$__fmt + 1 >> 0] = HEAP8[21586] | 0; //@line 8484
 HEAP8[$__fmt + 2 >> 0] = HEAP8[21587] | 0; //@line 8484
 HEAP8[$__fmt + 3 >> 0] = HEAP8[21588] | 0; //@line 8484
 HEAP8[$__fmt + 4 >> 0] = HEAP8[21589] | 0; //@line 8484
 HEAP8[$__fmt + 5 >> 0] = HEAP8[21590] | 0; //@line 8484
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 21591, 1, HEAP32[$__iob + 4 >> 2] | 0); //@line 8488
 $5 = __ZNSt3__16__clocEv() | 0; //@line 8489
 HEAP32[$$byval_copy >> 2] = $__v; //@line 8490
 $7 = $__nar + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 12, $5, $__fmt, $$byval_copy) | 0) | 0; //@line 8492
 $8 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $7, $__iob) | 0; //@line 8493
 $9 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 8494
 HEAP32[$0 >> 2] = $9; //@line 8495
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nar, $8, $7, $__o, $__op, $__oe, $0); //@line 8496
 __ZNSt3__114__shared_count16__release_sharedEv($9) | 0; //@line 8497
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2]; //@line 8499
 $11 = HEAP32[$__op >> 2] | 0; //@line 8500
 $12 = HEAP32[$__oe >> 2] | 0; //@line 8501
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 8502
 $13 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__o, $11, $12, $__iob, $__fl) | 0; //@line 8503
 STACKTOP = sp; //@line 8504
 return $13 | 0; //@line 8504
}
function ___stdio_read($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $15 = 0, $2 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $7 = 0, $cnt$0 = 0, $iov = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP; //@line 6405
 STACKTOP = STACKTOP + 48 | 0; //@line 6406
 $vararg_buffer3 = sp + 16 | 0; //@line 6407
 $vararg_buffer = sp; //@line 6408
 $iov = sp + 32 | 0; //@line 6409
 HEAP32[$iov >> 2] = $buf; //@line 6410
 $0 = $iov + 4 | 0; //@line 6411
 $1 = $f + 48 | 0; //@line 6412
 $2 = HEAP32[$1 >> 2] | 0; //@line 6413
 HEAP32[$0 >> 2] = $len - (($2 | 0) != 0 & 1); //@line 6417
 $7 = $f + 44 | 0; //@line 6419
 HEAP32[$iov + 8 >> 2] = HEAP32[$7 >> 2]; //@line 6421
 HEAP32[$iov + 12 >> 2] = $2; //@line 6423
 if (!(HEAP32[574] | 0)) {
  HEAP32[$vararg_buffer3 >> 2] = HEAP32[$f + 60 >> 2]; //@line 6429
  HEAP32[$vararg_buffer3 + 4 >> 2] = $iov; //@line 6431
  HEAP32[$vararg_buffer3 + 8 >> 2] = 2; //@line 6433
  $cnt$0 = ___syscall_ret(___syscall145(145, $vararg_buffer3 | 0) | 0) | 0; //@line 6436
 } else {
  _pthread_cleanup_push(95, $f | 0); //@line 6438
  HEAP32[$vararg_buffer >> 2] = HEAP32[$f + 60 >> 2]; //@line 6441
  HEAP32[$vararg_buffer + 4 >> 2] = $iov; //@line 6443
  HEAP32[$vararg_buffer + 8 >> 2] = 2; //@line 6445
  $15 = ___syscall_ret(___syscall145(145, $vararg_buffer | 0) | 0) | 0; //@line 6447
  _pthread_cleanup_pop(0); //@line 6448
  $cnt$0 = $15; //@line 6449
 }
 if (($cnt$0 | 0) < 1) {
  HEAP32[$f >> 2] = HEAP32[$f >> 2] | $cnt$0 & 48 ^ 16; //@line 6457
  HEAP32[$f + 8 >> 2] = 0; //@line 6459
  HEAP32[$f + 4 >> 2] = 0; //@line 6461
  $$0 = $cnt$0; //@line 6462
 } else {
  $27 = HEAP32[$0 >> 2] | 0; //@line 6464
  if ($cnt$0 >>> 0 > $27 >>> 0) {
   $30 = HEAP32[$7 >> 2] | 0; //@line 6468
   $31 = $f + 4 | 0; //@line 6469
   HEAP32[$31 >> 2] = $30; //@line 6470
   $32 = $30; //@line 6471
   HEAP32[$f + 8 >> 2] = $32 + ($cnt$0 - $27); //@line 6474
   if (!(HEAP32[$1 >> 2] | 0)) {
    $$0 = $len; //@line 6478
   } else {
    HEAP32[$31 >> 2] = $32 + 1; //@line 6481
    HEAP8[$buf + ($len + -1) >> 0] = HEAP8[$32 >> 0] | 0; //@line 6485
    $$0 = $len; //@line 6486
   }
  } else {
   $$0 = $cnt$0; //@line 6489
  }
 }
 STACKTOP = sp; //@line 6492
 return $$0 | 0; //@line 6492
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $13 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, sp = 0;
 sp = STACKTOP; //@line 7548
 STACKTOP = STACKTOP + 64 | 0; //@line 7549
 $$byval_copy = sp; //@line 7550
 $__fmt = sp + 56 | 0; //@line 7551
 $__nar = sp + 44 | 0; //@line 7552
 $__o = sp + 20 | 0; //@line 7553
 $__op = sp + 16 | 0; //@line 7554
 $__oe = sp + 12 | 0; //@line 7555
 $0 = sp + 8 | 0; //@line 7556
 $1 = sp + 4 | 0; //@line 7557
 HEAP8[$__fmt >> 0] = HEAP8[21585] | 0; //@line 7558
 HEAP8[$__fmt + 1 >> 0] = HEAP8[21586] | 0; //@line 7558
 HEAP8[$__fmt + 2 >> 0] = HEAP8[21587] | 0; //@line 7558
 HEAP8[$__fmt + 3 >> 0] = HEAP8[21588] | 0; //@line 7558
 HEAP8[$__fmt + 4 >> 0] = HEAP8[21589] | 0; //@line 7558
 HEAP8[$__fmt + 5 >> 0] = HEAP8[21590] | 0; //@line 7558
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 21591, 0, HEAP32[$__iob + 4 >> 2] | 0); //@line 7562
 $5 = __ZNSt3__16__clocEv() | 0; //@line 7563
 HEAP32[$$byval_copy >> 2] = $__v; //@line 7564
 $7 = $__nar + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 12, $5, $__fmt, $$byval_copy) | 0) | 0; //@line 7566
 $8 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $7, $__iob) | 0; //@line 7567
 $9 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 7568
 HEAP32[$0 >> 2] = $9; //@line 7569
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nar, $8, $7, $__o, $__op, $__oe, $0); //@line 7570
 __ZNSt3__114__shared_count16__release_sharedEv($9) | 0; //@line 7571
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2]; //@line 7573
 $11 = HEAP32[$__op >> 2] | 0; //@line 7574
 $12 = HEAP32[$__oe >> 2] | 0; //@line 7575
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 7576
 $13 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__o, $11, $12, $__iob, $__fl) | 0; //@line 7577
 STACKTOP = sp; //@line 7578
 return $13 | 0; //@line 7578
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $13 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, sp = 0;
 sp = STACKTOP; //@line 7083
 STACKTOP = STACKTOP + 64 | 0; //@line 7084
 $$byval_copy = sp; //@line 7085
 $__fmt = sp + 56 | 0; //@line 7086
 $__nar = sp + 44 | 0; //@line 7087
 $__o = sp + 20 | 0; //@line 7088
 $__op = sp + 16 | 0; //@line 7089
 $__oe = sp + 12 | 0; //@line 7090
 $0 = sp + 8 | 0; //@line 7091
 $1 = sp + 4 | 0; //@line 7092
 HEAP8[$__fmt >> 0] = HEAP8[21585] | 0; //@line 7093
 HEAP8[$__fmt + 1 >> 0] = HEAP8[21586] | 0; //@line 7093
 HEAP8[$__fmt + 2 >> 0] = HEAP8[21587] | 0; //@line 7093
 HEAP8[$__fmt + 3 >> 0] = HEAP8[21588] | 0; //@line 7093
 HEAP8[$__fmt + 4 >> 0] = HEAP8[21589] | 0; //@line 7093
 HEAP8[$__fmt + 5 >> 0] = HEAP8[21590] | 0; //@line 7093
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 21591, 1, HEAP32[$__iob + 4 >> 2] | 0); //@line 7097
 $5 = __ZNSt3__16__clocEv() | 0; //@line 7098
 HEAP32[$$byval_copy >> 2] = $__v; //@line 7099
 $7 = $__nar + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 12, $5, $__fmt, $$byval_copy) | 0) | 0; //@line 7101
 $8 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $7, $__iob) | 0; //@line 7102
 $9 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 7103
 HEAP32[$0 >> 2] = $9; //@line 7104
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nar, $8, $7, $__o, $__op, $__oe, $0); //@line 7105
 __ZNSt3__114__shared_count16__release_sharedEv($9) | 0; //@line 7106
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2]; //@line 7108
 $11 = HEAP32[$__op >> 2] | 0; //@line 7109
 $12 = HEAP32[$__oe >> 2] | 0; //@line 7110
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 7111
 $13 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__o, $11, $12, $__iob, $__fl) | 0; //@line 7112
 STACKTOP = sp; //@line 7113
 return $13 | 0; //@line 7113
}
function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this) {
 $this = $this | 0;
 var $8 = 0;
 if (!(HEAP8[1776] | 0)) {
  if (___cxa_guard_acquire(1776) | 0) {
   if (!(HEAP8[1784] | 0)) {
    if (___cxa_guard_acquire(1784) | 0) {
     $8 = 10320; //@line 6772
     do {
      HEAP32[$8 >> 2] = 0; //@line 6774
      HEAP32[$8 + 4 >> 2] = 0; //@line 6776
      HEAP32[$8 + 8 >> 2] = 0; //@line 6778
      $8 = $8 + 12 | 0; //@line 6779
     } while (($8 | 0) != 10488);
     ___cxa_atexit(102, 0, ___dso_handle | 0) | 0; //@line 6787
     ___cxa_guard_release(1784); //@line 6788
    }
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10320, 10488) | 0; //@line 6791
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10332, 10516) | 0; //@line 6792
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10344, 10544) | 0; //@line 6793
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10356, 10576) | 0; //@line 6794
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10368, 10616) | 0; //@line 6795
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10380, 10652) | 0; //@line 6796
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10392, 10680) | 0; //@line 6797
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10404, 10716) | 0; //@line 6798
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10416, 10732) | 0; //@line 6799
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10428, 10748) | 0; //@line 6800
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10440, 10764) | 0; //@line 6801
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10452, 10780) | 0; //@line 6802
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10464, 10796) | 0; //@line 6803
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10476, 10812) | 0; //@line 6804
   HEAP32[2707] = 10320; //@line 6805
   ___cxa_guard_release(1776); //@line 6806
  }
 }
 return HEAP32[2707] | 0; //@line 6810
}
function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this) {
 $this = $this | 0;
 var $8 = 0;
 if (!(HEAP8[1760] | 0)) {
  if (___cxa_guard_acquire(1760) | 0) {
   if (!(HEAP8[1768] | 0)) {
    if (___cxa_guard_acquire(1768) | 0) {
     $8 = 10148; //@line 6716
     do {
      HEAP32[$8 >> 2] = 0; //@line 6718
      HEAP32[$8 + 4 >> 2] = 0; //@line 6720
      HEAP32[$8 + 8 >> 2] = 0; //@line 6722
      $8 = $8 + 12 | 0; //@line 6723
     } while (($8 | 0) != 10316);
     ___cxa_atexit(101, 0, ___dso_handle | 0) | 0; //@line 6731
     ___cxa_guard_release(1768); //@line 6732
    }
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(10148, 21696) | 0; //@line 6735
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(10160, 21703) | 0; //@line 6736
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(10172, 21710) | 0; //@line 6737
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(10184, 21718) | 0; //@line 6738
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(10196, 21728) | 0; //@line 6739
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(10208, 21737) | 0; //@line 6740
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(10220, 21744) | 0; //@line 6741
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(10232, 21753) | 0; //@line 6742
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(10244, 21757) | 0; //@line 6743
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(10256, 21761) | 0; //@line 6744
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(10268, 21765) | 0; //@line 6745
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(10280, 21769) | 0; //@line 6746
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(10292, 21773) | 0; //@line 6747
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(10304, 21777) | 0; //@line 6748
   HEAP32[2579] = 10148; //@line 6749
   ___cxa_guard_release(1760); //@line 6750
  }
 }
 return HEAP32[2579] | 0; //@line 6754
}
function ___cxx_global_array_dtor112($0) {
 $0 = $0 | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12504); //@line 17171
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12492); //@line 17172
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12480); //@line 17173
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12468); //@line 17174
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12456); //@line 17175
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12444); //@line 17176
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12432); //@line 17177
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12420); //@line 17178
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12408); //@line 17179
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12396); //@line 17180
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12384); //@line 17181
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12372); //@line 17182
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12360); //@line 17183
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12348); //@line 17184
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12336); //@line 17185
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12324); //@line 17186
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12312); //@line 17187
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12300); //@line 17188
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12288); //@line 17189
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12276); //@line 17190
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12264); //@line 17191
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12252); //@line 17192
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12240); //@line 17193
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(12228); //@line 17194
 return;
}
function ___cxx_global_array_dtor109($0) {
 $0 = $0 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(12212); //@line 17141
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(12200); //@line 17142
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(12188); //@line 17143
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(12176); //@line 17144
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(12164); //@line 17145
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(12152); //@line 17146
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(12140); //@line 17147
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(12128); //@line 17148
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(12116); //@line 17149
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(12104); //@line 17150
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(12092); //@line 17151
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(12080); //@line 17152
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(12068); //@line 17153
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(12056); //@line 17154
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(12044); //@line 17155
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(12032); //@line 17156
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(12020); //@line 17157
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(12008); //@line 17158
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11996); //@line 17159
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11984); //@line 17160
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11972); //@line 17161
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11960); //@line 17162
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11948); //@line 17163
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11936); //@line 17164
 return;
}
function ___cxx_global_array_dtor85($0) {
 $0 = $0 | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11400); //@line 17111
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11388); //@line 17112
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11376); //@line 17113
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11364); //@line 17114
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11352); //@line 17115
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11340); //@line 17116
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11328); //@line 17117
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11316); //@line 17118
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11304); //@line 17119
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11292); //@line 17120
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11280); //@line 17121
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11268); //@line 17122
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11256); //@line 17123
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11244); //@line 17124
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11232); //@line 17125
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11220); //@line 17126
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11208); //@line 17127
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11196); //@line 17128
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11184); //@line 17129
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11172); //@line 17130
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11160); //@line 17131
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11148); //@line 17132
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11136); //@line 17133
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(11124); //@line 17134
 return;
}
function ___cxx_global_array_dtor61($0) {
 $0 = $0 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11108); //@line 17081
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11096); //@line 17082
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11084); //@line 17083
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11072); //@line 17084
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11060); //@line 17085
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11048); //@line 17086
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11036); //@line 17087
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11024); //@line 17088
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11012); //@line 17089
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(11e3); //@line 17090
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10988); //@line 17091
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10976); //@line 17092
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10964); //@line 17093
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10952); //@line 17094
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10940); //@line 17095
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10928); //@line 17096
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10916); //@line 17097
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10904); //@line 17098
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10892); //@line 17099
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10880); //@line 17100
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10868); //@line 17101
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10856); //@line 17102
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10844); //@line 17103
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10832); //@line 17104
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, sp = 0;
 sp = STACKTOP; //@line 9450
 STACKTOP = STACKTOP + 192 | 0; //@line 9451
 $$byval_copy = sp; //@line 9452
 $__fmt = sp + 180 | 0; //@line 9453
 $__nar = sp + 160 | 0; //@line 9454
 $__o = sp + 12 | 0; //@line 9455
 $0 = sp + 8 | 0; //@line 9456
 $1 = sp + 4 | 0; //@line 9457
 HEAP8[$__fmt >> 0] = HEAP8[21599] | 0; //@line 9458
 HEAP8[$__fmt + 1 >> 0] = HEAP8[21600] | 0; //@line 9458
 HEAP8[$__fmt + 2 >> 0] = HEAP8[21601] | 0; //@line 9458
 HEAP8[$__fmt + 3 >> 0] = HEAP8[21602] | 0; //@line 9458
 HEAP8[$__fmt + 4 >> 0] = HEAP8[21603] | 0; //@line 9458
 HEAP8[$__fmt + 5 >> 0] = HEAP8[21604] | 0; //@line 9458
 $2 = __ZNSt3__16__clocEv() | 0; //@line 9459
 HEAP32[$$byval_copy >> 2] = $__v; //@line 9460
 $3 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 20, $2, $__fmt, $$byval_copy) | 0; //@line 9461
 $4 = $__nar + $3 | 0; //@line 9462
 $5 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $4, $__iob) | 0; //@line 9463
 $6 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 9464
 HEAP32[$0 >> 2] = $6; //@line 9465
 $7 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 9320) | 0; //@line 9466
 __ZNSt3__114__shared_count16__release_sharedEv($6) | 0; //@line 9467
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$7 >> 2] | 0) + 48 >> 2] & 7]($7, $__nar, $4, $__o) | 0; //@line 9471
 $11 = $__o + ($3 << 2) | 0; //@line 9472
 $__op$0 = ($5 | 0) == ($4 | 0) ? $11 : $__o + ($5 - $__nar << 2) | 0; //@line 9478
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2]; //@line 9480
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 9481
 $18 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__o, $__op$0, $11, $__iob, $__fl) | 0; //@line 9482
 STACKTOP = sp; //@line 9483
 return $18 | 0; //@line 9483
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, sp = 0;
 sp = STACKTOP; //@line 8299
 STACKTOP = STACKTOP + 80 | 0; //@line 8300
 $$byval_copy = sp; //@line 8301
 $__fmt = sp + 70 | 0; //@line 8302
 $__nar = sp + 12 | 0; //@line 8303
 $__o = sp + 32 | 0; //@line 8304
 $0 = sp + 8 | 0; //@line 8305
 $1 = sp + 4 | 0; //@line 8306
 HEAP8[$__fmt >> 0] = HEAP8[21599] | 0; //@line 8307
 HEAP8[$__fmt + 1 >> 0] = HEAP8[21600] | 0; //@line 8307
 HEAP8[$__fmt + 2 >> 0] = HEAP8[21601] | 0; //@line 8307
 HEAP8[$__fmt + 3 >> 0] = HEAP8[21602] | 0; //@line 8307
 HEAP8[$__fmt + 4 >> 0] = HEAP8[21603] | 0; //@line 8307
 HEAP8[$__fmt + 5 >> 0] = HEAP8[21604] | 0; //@line 8307
 $2 = __ZNSt3__16__clocEv() | 0; //@line 8308
 HEAP32[$$byval_copy >> 2] = $__v; //@line 8309
 $3 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 20, $2, $__fmt, $$byval_copy) | 0; //@line 8310
 $4 = $__nar + $3 | 0; //@line 8311
 $5 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $4, $__iob) | 0; //@line 8312
 $6 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 8313
 HEAP32[$0 >> 2] = $6; //@line 8314
 $7 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 9328) | 0; //@line 8315
 __ZNSt3__114__shared_count16__release_sharedEv($6) | 0; //@line 8316
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$7 >> 2] | 0) + 32 >> 2] & 7]($7, $__nar, $4, $__o) | 0; //@line 8320
 $11 = $__o + $3 | 0; //@line 8321
 $__op$0 = ($5 | 0) == ($4 | 0) ? $11 : $__o + ($5 - $__nar) | 0; //@line 8327
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2]; //@line 8329
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 8330
 $18 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__o, $__op$0, $11, $__iob, $__fl) | 0; //@line 8331
 STACKTOP = sp; //@line 8332
 return $18 | 0; //@line 8332
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $30 = 0, $36 = 0, $9 = 0, $__s = 0, sp = 0;
 sp = STACKTOP; //@line 4314
 STACKTOP = STACKTOP + 32 | 0; //@line 4315
 $$byval_copy = sp + 16 | 0; //@line 4316
 $0 = sp + 4 | 0; //@line 4317
 $__s = sp + 8 | 0; //@line 4318
 $1 = sp; //@line 4319
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($__s, $this); //@line 4320
 if (HEAP8[$__s >> 0] | 0) {
  HEAP32[$1 >> 2] = __ZNKSt3__18ios_base6getlocEv($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0) | 0; //@line 4329
  $9 = __ZNKSt3__16locale9use_facetERNS0_2idE($1, 8500) | 0; //@line 4330
  __ZNSt3__16localeD2Ev($1); //@line 4331
  $12 = HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0; //@line 4334
  $14 = HEAP32[$this + ($12 + 24) >> 2] | 0; //@line 4337
  $15 = $this + $12 | 0; //@line 4338
  $16 = $this + ($12 + 76) | 0; //@line 4340
  $17 = HEAP32[$16 >> 2] | 0; //@line 4341
  if (($17 | 0) == -1) {
   HEAP32[$$byval_copy >> 2] = __ZNKSt3__18ios_base6getlocEv($15) | 0; //@line 4345
   $20 = __ZNKSt3__16locale9use_facetERNS0_2idE($$byval_copy, 9328) | 0; //@line 4346
   $24 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$20 >> 2] | 0) + 28 >> 2] & 15]($20, 32) | 0; //@line 4350
   __ZNSt3__16localeD2Ev($$byval_copy); //@line 4351
   $25 = $24 << 24 >> 24; //@line 4352
   HEAP32[$16 >> 2] = $25; //@line 4353
   $27 = $25; //@line 4354
  } else {
   $27 = $17; //@line 4356
  }
  $26 = $27 & 255; //@line 4358
  $30 = HEAP32[(HEAP32[$9 >> 2] | 0) + 24 >> 2] | 0; //@line 4361
  HEAP32[$0 >> 2] = $14; //@line 4362
  HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 4363
  if (!(FUNCTION_TABLE_iiiiii[$30 & 31]($9, $$byval_copy, $15, $26, $__n) | 0)) {
   $36 = $this + ((HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 16) | 0; //@line 4371
   HEAP32[$36 >> 2] = HEAP32[$36 >> 2] | 5; //@line 4374
  }
 }
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s); //@line 4377
 STACKTOP = sp; //@line 4378
 return $this | 0; //@line 4378
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $30 = 0, $36 = 0, $9 = 0, $__s = 0, sp = 0;
 sp = STACKTOP; //@line 4242
 STACKTOP = STACKTOP + 32 | 0; //@line 4243
 $$byval_copy = sp + 16 | 0; //@line 4244
 $0 = sp + 4 | 0; //@line 4245
 $__s = sp + 8 | 0; //@line 4246
 $1 = sp; //@line 4247
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($__s, $this); //@line 4248
 if (HEAP8[$__s >> 0] | 0) {
  HEAP32[$1 >> 2] = __ZNKSt3__18ios_base6getlocEv($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0) | 0; //@line 4257
  $9 = __ZNKSt3__16locale9use_facetERNS0_2idE($1, 8500) | 0; //@line 4258
  __ZNSt3__16localeD2Ev($1); //@line 4259
  $12 = HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0; //@line 4262
  $14 = HEAP32[$this + ($12 + 24) >> 2] | 0; //@line 4265
  $15 = $this + $12 | 0; //@line 4266
  $16 = $this + ($12 + 76) | 0; //@line 4268
  $17 = HEAP32[$16 >> 2] | 0; //@line 4269
  if (($17 | 0) == -1) {
   HEAP32[$$byval_copy >> 2] = __ZNKSt3__18ios_base6getlocEv($15) | 0; //@line 4273
   $20 = __ZNKSt3__16locale9use_facetERNS0_2idE($$byval_copy, 9328) | 0; //@line 4274
   $24 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$20 >> 2] | 0) + 28 >> 2] & 15]($20, 32) | 0; //@line 4278
   __ZNSt3__16localeD2Ev($$byval_copy); //@line 4279
   $25 = $24 << 24 >> 24; //@line 4280
   HEAP32[$16 >> 2] = $25; //@line 4281
   $27 = $25; //@line 4282
  } else {
   $27 = $17; //@line 4284
  }
  $26 = $27 & 255; //@line 4286
  $30 = HEAP32[(HEAP32[$9 >> 2] | 0) + 16 >> 2] | 0; //@line 4289
  HEAP32[$0 >> 2] = $14; //@line 4290
  HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 4291
  if (!(FUNCTION_TABLE_iiiiii[$30 & 31]($9, $$byval_copy, $15, $26, $__n) | 0)) {
   $36 = $this + ((HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 16) | 0; //@line 4299
   HEAP32[$36 >> 2] = HEAP32[$36 >> 2] | 5; //@line 4302
  }
 }
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s); //@line 4305
 STACKTOP = sp; //@line 4306
 return $this | 0; //@line 4306
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($this, $__s, $__iob, $__fl, $0, $1) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $11 = 0, $12 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, sp = 0;
 sp = STACKTOP; //@line 8841
 STACKTOP = STACKTOP + 240 | 0; //@line 8842
 $$byval_copy = sp + 8 | 0; //@line 8843
 $__fmt = sp; //@line 8844
 $__nar = sp + 204 | 0; //@line 8845
 $__o = sp + 32 | 0; //@line 8846
 $__op = sp + 28 | 0; //@line 8847
 $__oe = sp + 24 | 0; //@line 8848
 $2 = sp + 20 | 0; //@line 8849
 $3 = sp + 16 | 0; //@line 8850
 $4 = $__fmt; //@line 8851
 HEAP32[$4 >> 2] = 37; //@line 8853
 HEAP32[$4 + 4 >> 2] = 0; //@line 8856
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 21593, 0, HEAP32[$__iob + 4 >> 2] | 0); //@line 8860
 $11 = __ZNSt3__16__clocEv() | 0; //@line 8861
 $12 = $$byval_copy; //@line 8862
 HEAP32[$12 >> 2] = $0; //@line 8864
 HEAP32[$12 + 4 >> 2] = $1; //@line 8867
 $17 = $__nar + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 23, $11, $__fmt, $$byval_copy) | 0) | 0; //@line 8869
 $18 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $17, $__iob) | 0; //@line 8870
 $19 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 8871
 HEAP32[$2 >> 2] = $19; //@line 8872
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nar, $18, $17, $__o, $__op, $__oe, $2); //@line 8873
 __ZNSt3__114__shared_count16__release_sharedEv($19) | 0; //@line 8874
 HEAP32[$3 >> 2] = HEAP32[$__s >> 2]; //@line 8876
 $21 = HEAP32[$__op >> 2] | 0; //@line 8877
 $22 = HEAP32[$__oe >> 2] | 0; //@line 8878
 HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2]; //@line 8879
 $23 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__o, $21, $22, $__iob, $__fl) | 0; //@line 8880
 STACKTOP = sp; //@line 8881
 return $23 | 0; //@line 8881
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($this, $__s, $__iob, $__fl, $0, $1) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $11 = 0, $12 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, sp = 0;
 sp = STACKTOP; //@line 8750
 STACKTOP = STACKTOP + 224 | 0; //@line 8751
 $$byval_copy = sp + 8 | 0; //@line 8752
 $__fmt = sp; //@line 8753
 $__nar = sp + 196 | 0; //@line 8754
 $__o = sp + 32 | 0; //@line 8755
 $__op = sp + 28 | 0; //@line 8756
 $__oe = sp + 24 | 0; //@line 8757
 $2 = sp + 20 | 0; //@line 8758
 $3 = sp + 16 | 0; //@line 8759
 $4 = $__fmt; //@line 8760
 HEAP32[$4 >> 2] = 37; //@line 8762
 HEAP32[$4 + 4 >> 2] = 0; //@line 8765
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 21593, 1, HEAP32[$__iob + 4 >> 2] | 0); //@line 8769
 $11 = __ZNSt3__16__clocEv() | 0; //@line 8770
 $12 = $$byval_copy; //@line 8771
 HEAP32[$12 >> 2] = $0; //@line 8773
 HEAP32[$12 + 4 >> 2] = $1; //@line 8776
 $17 = $__nar + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 22, $11, $__fmt, $$byval_copy) | 0) | 0; //@line 8778
 $18 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $17, $__iob) | 0; //@line 8779
 $19 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 8780
 HEAP32[$2 >> 2] = $19; //@line 8781
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nar, $18, $17, $__o, $__op, $__oe, $2); //@line 8782
 __ZNSt3__114__shared_count16__release_sharedEv($19) | 0; //@line 8783
 HEAP32[$3 >> 2] = HEAP32[$__s >> 2]; //@line 8785
 $21 = HEAP32[$__op >> 2] | 0; //@line 8786
 $22 = HEAP32[$__oe >> 2] | 0; //@line 8787
 HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2]; //@line 8788
 $23 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__o, $21, $22, $__iob, $__fl) | 0; //@line 8789
 STACKTOP = sp; //@line 8790
 return $23 | 0; //@line 8790
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($this, $__s, $__iob, $__fl, $0, $1) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $11 = 0, $12 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, sp = 0;
 sp = STACKTOP; //@line 7589
 STACKTOP = STACKTOP + 112 | 0; //@line 7590
 $$byval_copy = sp + 8 | 0; //@line 7591
 $__fmt = sp; //@line 7592
 $__nar = sp + 75 | 0; //@line 7593
 $__o = sp + 32 | 0; //@line 7594
 $__op = sp + 28 | 0; //@line 7595
 $__oe = sp + 24 | 0; //@line 7596
 $2 = sp + 20 | 0; //@line 7597
 $3 = sp + 16 | 0; //@line 7598
 $4 = $__fmt; //@line 7599
 HEAP32[$4 >> 2] = 37; //@line 7601
 HEAP32[$4 + 4 >> 2] = 0; //@line 7604
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 21593, 0, HEAP32[$__iob + 4 >> 2] | 0); //@line 7608
 $11 = __ZNSt3__16__clocEv() | 0; //@line 7609
 $12 = $$byval_copy; //@line 7610
 HEAP32[$12 >> 2] = $0; //@line 7612
 HEAP32[$12 + 4 >> 2] = $1; //@line 7615
 $17 = $__nar + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 23, $11, $__fmt, $$byval_copy) | 0) | 0; //@line 7617
 $18 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $17, $__iob) | 0; //@line 7618
 $19 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 7619
 HEAP32[$2 >> 2] = $19; //@line 7620
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nar, $18, $17, $__o, $__op, $__oe, $2); //@line 7621
 __ZNSt3__114__shared_count16__release_sharedEv($19) | 0; //@line 7622
 HEAP32[$3 >> 2] = HEAP32[$__s >> 2]; //@line 7624
 $21 = HEAP32[$__op >> 2] | 0; //@line 7625
 $22 = HEAP32[$__oe >> 2] | 0; //@line 7626
 HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2]; //@line 7627
 $23 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__o, $21, $22, $__iob, $__fl) | 0; //@line 7628
 STACKTOP = sp; //@line 7629
 return $23 | 0; //@line 7629
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($this, $__s, $__iob, $__fl, $0, $1) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $11 = 0, $12 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, sp = 0;
 sp = STACKTOP; //@line 7498
 STACKTOP = STACKTOP + 96 | 0; //@line 7499
 $$byval_copy = sp + 8 | 0; //@line 7500
 $__fmt = sp; //@line 7501
 $__nar = sp + 74 | 0; //@line 7502
 $__o = sp + 32 | 0; //@line 7503
 $__op = sp + 28 | 0; //@line 7504
 $__oe = sp + 24 | 0; //@line 7505
 $2 = sp + 20 | 0; //@line 7506
 $3 = sp + 16 | 0; //@line 7507
 $4 = $__fmt; //@line 7508
 HEAP32[$4 >> 2] = 37; //@line 7510
 HEAP32[$4 + 4 >> 2] = 0; //@line 7513
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 21593, 1, HEAP32[$__iob + 4 >> 2] | 0); //@line 7517
 $11 = __ZNSt3__16__clocEv() | 0; //@line 7518
 $12 = $$byval_copy; //@line 7519
 HEAP32[$12 >> 2] = $0; //@line 7521
 HEAP32[$12 + 4 >> 2] = $1; //@line 7524
 $17 = $__nar + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 22, $11, $__fmt, $$byval_copy) | 0) | 0; //@line 7526
 $18 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $17, $__iob) | 0; //@line 7527
 $19 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 7528
 HEAP32[$2 >> 2] = $19; //@line 7529
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nar, $18, $17, $__o, $__op, $__oe, $2); //@line 7530
 __ZNSt3__114__shared_count16__release_sharedEv($19) | 0; //@line 7531
 HEAP32[$3 >> 2] = HEAP32[$__s >> 2]; //@line 7533
 $21 = HEAP32[$__op >> 2] | 0; //@line 7534
 $22 = HEAP32[$__oe >> 2] | 0; //@line 7535
 HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2]; //@line 7536
 $23 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__o, $21, $22, $__iob, $__fl) | 0; //@line 7537
 STACKTOP = sp; //@line 7538
 return $23 | 0; //@line 7538
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, $p$0 = 0;
 if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $info, $dst_ptr, $current_ptr, $path_below); //@line 1747
 } else {
  $3 = $info + 52 | 0; //@line 1749
  $4 = HEAP8[$3 >> 0] | 0; //@line 1750
  $5 = $info + 53 | 0; //@line 1751
  $6 = HEAP8[$5 >> 0] | 0; //@line 1752
  $9 = HEAP32[$this + 12 >> 2] | 0; //@line 1755
  $10 = $this + 16 + ($9 << 3) | 0; //@line 1756
  HEAP8[$3 >> 0] = 0; //@line 1757
  HEAP8[$5 >> 0] = 0; //@line 1758
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this + 16 | 0, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp); //@line 1759
  L4 : do {
   if (($9 | 0) > 1) {
    $13 = $info + 24 | 0; //@line 1764
    $14 = $this + 8 | 0; //@line 1765
    $15 = $info + 54 | 0; //@line 1766
    $p$0 = $this + 24 | 0; //@line 1767
    do {
     if (HEAP8[$15 >> 0] | 0) {
      break L4;
     }
     if (!(HEAP8[$3 >> 0] | 0)) {
      if (HEAP8[$5 >> 0] | 0) {
       if (!(HEAP32[$14 >> 2] & 1)) {
        break L4;
       }
      }
     } else {
      if ((HEAP32[$13 >> 2] | 0) == 1) {
       break L4;
      }
      if (!(HEAP32[$14 >> 2] & 2)) {
       break L4;
      }
     }
     HEAP8[$3 >> 0] = 0; //@line 1800
     HEAP8[$5 >> 0] = 0; //@line 1801
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp); //@line 1802
     $p$0 = $p$0 + 8 | 0; //@line 1803
    } while ($p$0 >>> 0 < $10 >>> 0);
   }
  } while (0);
  HEAP8[$3 >> 0] = $4; //@line 1813
  HEAP8[$5 >> 0] = $6; //@line 1814
 }
 return;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $11 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $29 = 0, $30 = 0, $34 = 0, $6 = 0, $8 = 0, $thrown_object = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP; //@line 1907
 STACKTOP = STACKTOP + 48 | 0; //@line 1908
 $vararg_buffer10 = sp + 32 | 0; //@line 1909
 $vararg_buffer7 = sp + 24 | 0; //@line 1910
 $vararg_buffer3 = sp + 16 | 0; //@line 1911
 $vararg_buffer = sp; //@line 1912
 $thrown_object = sp + 36 | 0; //@line 1913
 $0 = ___cxa_get_globals_fast() | 0; //@line 1914
 if ($0) {
  $2 = HEAP32[$0 >> 2] | 0; //@line 1917
  if ($2) {
   $6 = $2 + 48 | 0; //@line 1922
   $8 = HEAP32[$6 >> 2] | 0; //@line 1924
   $11 = HEAP32[$6 + 4 >> 2] | 0; //@line 1927
   if (!(($8 & -256 | 0) == 1126902528 & ($11 | 0) == 1129074247)) {
    HEAP32[$vararg_buffer7 >> 2] = HEAP32[573]; //@line 1934
    _abort_message(14833, $vararg_buffer7); //@line 1935
   }
   if (($8 | 0) == 1126902529 & ($11 | 0) == 1129074247) {
    $21 = HEAP32[$2 + 44 >> 2] | 0; //@line 1944
   } else {
    $21 = $2 + 80 | 0; //@line 1946
   }
   HEAP32[$thrown_object >> 2] = $21; //@line 1948
   $22 = HEAP32[$2 >> 2] | 0; //@line 1949
   $24 = HEAP32[$22 + 4 >> 2] | 0; //@line 1951
   if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[24 >> 2] | 0) + 16 >> 2] & 31](24, $22, $thrown_object) | 0) {
    $29 = HEAP32[$thrown_object >> 2] | 0; //@line 1957
    $30 = HEAP32[573] | 0; //@line 1958
    $34 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$29 >> 2] | 0) + 8 >> 2] & 63]($29) | 0; //@line 1962
    HEAP32[$vararg_buffer >> 2] = $30; //@line 1963
    HEAP32[$vararg_buffer + 4 >> 2] = $24; //@line 1965
    HEAP32[$vararg_buffer + 8 >> 2] = $34; //@line 1967
    _abort_message(14747, $vararg_buffer); //@line 1968
   } else {
    HEAP32[$vararg_buffer3 >> 2] = HEAP32[573]; //@line 1972
    HEAP32[$vararg_buffer3 + 4 >> 2] = $24; //@line 1974
    _abort_message(14792, $vararg_buffer3); //@line 1975
   }
  }
 }
 _abort_message(14871, $vararg_buffer10); //@line 1980
}
function __ZNSt3__110__stdinbufIwE9pbackfailEj($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$01 = 0, $1 = 0, $11 = 0, $23 = 0, $24 = 0, $26 = 0, $3 = 0, $5 = 0, $8 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, sp = 0;
 sp = STACKTOP; //@line 1355
 STACKTOP = STACKTOP + 32 | 0; //@line 1356
 $__extbuf = sp + 16 | 0; //@line 1357
 $__enxt = sp + 8 | 0; //@line 1358
 $__ci = sp + 4 | 0; //@line 1359
 $__inxt = sp; //@line 1360
 $1 = $this + 52 | 0; //@line 1362
 $3 = (HEAP8[$1 >> 0] | 0) != 0; //@line 1364
 L1 : do {
  if (($__c | 0) == -1) {
   if ($3) {
    $$01 = -1; //@line 1368
   } else {
    $5 = HEAP32[$this + 48 >> 2] | 0; //@line 1371
    HEAP8[$1 >> 0] = ($5 | 0) != -1 & 1; //@line 1374
    $$01 = $5; //@line 1375
   }
  } else {
   $8 = $this + 48 | 0; //@line 1378
   L5 : do {
    if ($3) {
     HEAP32[$__ci >> 2] = HEAP32[$8 >> 2]; //@line 1382
     $11 = HEAP32[$this + 36 >> 2] | 0; //@line 1384
     switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$11 >> 2] | 0) + 12 >> 2] & 15]($11, HEAP32[$this + 40 >> 2] | 0, $__ci, $__ci + 4 | 0, $__inxt, $__extbuf, $__extbuf + 8 | 0, $__enxt) | 0) {
     case 1:
     case 2:
      {
       $$01 = -1; //@line 1395
       break L1;
       break;
      }
     case 3:
      {
       HEAP8[$__extbuf >> 0] = HEAP32[$8 >> 2]; //@line 1402
       HEAP32[$__enxt >> 2] = $__extbuf + 1; //@line 1404
       break;
      }
     default:
      {}
     }
     $23 = $this + 32 | 0; //@line 1410
     while (1) {
      $24 = HEAP32[$__enxt >> 2] | 0; //@line 1412
      if ($24 >>> 0 <= $__extbuf >>> 0) {
       break L5;
      }
      $26 = $24 + -1 | 0; //@line 1417
      HEAP32[$__enxt >> 2] = $26; //@line 1418
      if ((_ungetc(HEAP8[$26 >> 0] | 0, HEAP32[$23 >> 2] | 0) | 0) == -1) {
       $$01 = -1; //@line 1425
       break L1;
      }
     }
    }
   } while (0);
   HEAP32[$8 >> 2] = $__c; //@line 1431
   HEAP8[$1 >> 0] = 1; //@line 1432
   $$01 = $__c; //@line 1433
  }
 } while (0);
 STACKTOP = sp; //@line 1436
 return $$01 | 0; //@line 1436
}
function __ZNSt3__110__stdinbufIcE9pbackfailEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$01 = 0, $1 = 0, $12 = 0, $24 = 0, $25 = 0, $27 = 0, $3 = 0, $5 = 0, $8 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, sp = 0;
 sp = STACKTOP; //@line 1894
 STACKTOP = STACKTOP + 32 | 0; //@line 1895
 $__extbuf = sp + 16 | 0; //@line 1896
 $__enxt = sp + 4 | 0; //@line 1897
 $__ci = sp + 8 | 0; //@line 1898
 $__inxt = sp; //@line 1899
 $1 = $this + 52 | 0; //@line 1901
 $3 = (HEAP8[$1 >> 0] | 0) != 0; //@line 1903
 L1 : do {
  if (($__c | 0) == -1) {
   if ($3) {
    $$01 = -1; //@line 1907
   } else {
    $5 = HEAP32[$this + 48 >> 2] | 0; //@line 1910
    HEAP8[$1 >> 0] = ($5 | 0) != -1 & 1; //@line 1913
    $$01 = $5; //@line 1914
   }
  } else {
   $8 = $this + 48 | 0; //@line 1917
   L5 : do {
    if ($3) {
     HEAP8[$__ci >> 0] = HEAP32[$8 >> 2]; //@line 1922
     $12 = HEAP32[$this + 36 >> 2] | 0; //@line 1924
     switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$12 >> 2] | 0) + 12 >> 2] & 15]($12, HEAP32[$this + 40 >> 2] | 0, $__ci, $__ci + 1 | 0, $__inxt, $__extbuf, $__extbuf + 8 | 0, $__enxt) | 0) {
     case 1:
     case 2:
      {
       $$01 = -1; //@line 1935
       break L1;
       break;
      }
     case 3:
      {
       HEAP8[$__extbuf >> 0] = HEAP32[$8 >> 2]; //@line 1942
       HEAP32[$__enxt >> 2] = $__extbuf + 1; //@line 1944
       break;
      }
     default:
      {}
     }
     $24 = $this + 32 | 0; //@line 1950
     while (1) {
      $25 = HEAP32[$__enxt >> 2] | 0; //@line 1952
      if ($25 >>> 0 <= $__extbuf >>> 0) {
       break L5;
      }
      $27 = $25 + -1 | 0; //@line 1957
      HEAP32[$__enxt >> 2] = $27; //@line 1958
      if ((_ungetc(HEAP8[$27 >> 0] | 0, HEAP32[$24 >> 2] | 0) | 0) == -1) {
       $$01 = -1; //@line 1965
       break L1;
      }
     }
    }
   } while (0);
   HEAP32[$8 >> 2] = $__c; //@line 1971
   HEAP8[$1 >> 0] = 1; //@line 1972
   $$01 = $__c; //@line 1973
  }
 } while (0);
 STACKTOP = sp; //@line 1976
 return $$01 | 0; //@line 1976
}
function _mbtowc($wc, $src, $n) {
 $wc = $wc | 0;
 $src = $src | 0;
 $n = $n | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $20 = 0, $21 = 0, $29 = 0, $3 = 0, $33 = 0, $38 = 0, $4 = 0, $42 = 0, $8 = 0, $dummy = 0, $dummy$wc = 0, sp = 0;
 sp = STACKTOP; //@line 5805
 STACKTOP = STACKTOP + 16 | 0; //@line 5806
 $dummy = sp; //@line 5807
 L1 : do {
  if (!$src) {
   $$0 = 0; //@line 5811
  } else {
   do {
    if ($n) {
     $dummy$wc = ($wc | 0) == 0 ? $dummy : $wc; //@line 5817
     $3 = HEAP8[$src >> 0] | 0; //@line 5818
     $4 = $3 & 255; //@line 5819
     if ($3 << 24 >> 24 > -1) {
      HEAP32[$dummy$wc >> 2] = $4; //@line 5822
      $$0 = $3 << 24 >> 24 != 0 & 1; //@line 5825
      break L1;
     }
     $8 = $4 + -194 | 0; //@line 5828
     if ($8 >>> 0 <= 50) {
      $10 = $src + 1 | 0; //@line 5831
      $12 = HEAP32[2340 + ($8 << 2) >> 2] | 0; //@line 5833
      if ($n >>> 0 < 4) {
       if ($12 & -2147483648 >>> (($n * 6 | 0) + -6 | 0)) {
        break;
       }
      }
      $20 = HEAPU8[$10 >> 0] | 0; //@line 5846
      $21 = $20 >>> 3; //@line 5847
      if (($21 + -16 | $21 + ($12 >> 26)) >>> 0 <= 7) {
       $29 = $20 + -128 | $12 << 6; //@line 5856
       if (($29 | 0) >= 0) {
        HEAP32[$dummy$wc >> 2] = $29; //@line 5859
        $$0 = 2; //@line 5860
        break L1;
       }
       $33 = HEAPU8[$src + 2 >> 0] | 0; //@line 5865
       if (($33 & 192 | 0) == 128) {
        $38 = $33 + -128 | $29 << 6; //@line 5871
        if (($38 | 0) >= 0) {
         HEAP32[$dummy$wc >> 2] = $38; //@line 5874
         $$0 = 3; //@line 5875
         break L1;
        }
        $42 = HEAPU8[$src + 3 >> 0] | 0; //@line 5880
        if (($42 & 192 | 0) == 128) {
         HEAP32[$dummy$wc >> 2] = $42 + -128 | $38 << 6; //@line 5887
         $$0 = 4; //@line 5888
         break L1;
        }
       }
      }
     }
    }
   } while (0);
   HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 5897
   $$0 = -1; //@line 5898
  }
 } while (0);
 STACKTOP = sp; //@line 5901
 return $$0 | 0; //@line 5901
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $$03 = 0, $0 = 0, $1 = 0, $12 = 0, $15 = 0, $16 = 0, $21 = 0, $29 = 0, $34 = 0, $41 = 0, $8 = 0, $__p$04 = 0, $scevgep1 = 0;
 $0 = $__first; //@line 14699
 $1 = HEAP8[$this >> 0] | 0; //@line 14700
 if (!($1 & 1)) {
  $15 = 10; //@line 14706
  $16 = ($1 & 255) >>> 1; //@line 14706
  $41 = $1; //@line 14706
 } else {
  $8 = HEAP32[$this >> 2] | 0; //@line 14710
  $15 = ($8 & -2) + -1 | 0; //@line 14714
  $16 = HEAP32[$this + 4 >> 2] | 0; //@line 14714
  $41 = $8 & 255; //@line 14714
 }
 $12 = $__last - $0 | 0; //@line 14717
 do {
  if (($__last | 0) != ($__first | 0)) {
   if (($15 - $16 | 0) >>> 0 < $12 >>> 0) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this, $15, $16 + $12 - $15 | 0, $16, $16, 0, 0); //@line 14726
    $21 = HEAP8[$this >> 0] | 0; //@line 14728
   } else {
    $21 = $41; //@line 14730
   }
   if (!($21 & 1)) {
    $29 = $this + 1 | 0; //@line 14736
   } else {
    $29 = HEAP32[$this + 8 >> 2] | 0; //@line 14740
   }
   $scevgep1 = $__last + ($16 - $0) | 0; //@line 14744
   if (($__first | 0) != ($__last | 0)) {
    $$03 = $__first; //@line 14748
    $__p$04 = $29 + $16 | 0; //@line 14748
    while (1) {
     HEAP8[$__p$04 >> 0] = HEAP8[$$03 >> 0] | 0; //@line 14751
     $$03 = $$03 + 1 | 0; //@line 14753
     if (($$03 | 0) == ($__last | 0)) {
      break;
     } else {
      $__p$04 = $__p$04 + 1 | 0; //@line 14758
     }
    }
   }
   HEAP8[$29 + $scevgep1 >> 0] = 0; //@line 14763
   $34 = $16 + $12 | 0; //@line 14764
   if (!(HEAP8[$this >> 0] & 1)) {
    HEAP8[$this >> 0] = $34 << 1; //@line 14771
    break;
   } else {
    HEAP32[$this + 4 >> 2] = $34; //@line 14775
    break;
   }
  }
 } while (0);
 return $this | 0; //@line 14780
}
function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result, $this, $__c, $__set, $__msgid, $__dflt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__c = $__c | 0;
 $__set = $__set | 0;
 $__msgid = $__msgid | 0;
 $__dflt = $__dflt | 0;
 var $$0$i12 = 0, $$0$i614 = 0, $13 = 0, $14 = 0, $2 = 0, $30 = 0, $33 = 0, $34 = 0, $4 = 0, $8 = 0, $__ndflt = 0, sp = 0;
 sp = STACKTOP; //@line 4361
 STACKTOP = STACKTOP + 16 | 0; //@line 4362
 $__ndflt = sp; //@line 4363
 HEAP32[$__ndflt >> 2] = 0; //@line 4364
 HEAP32[$__ndflt + 4 >> 2] = 0; //@line 4366
 HEAP32[$__ndflt + 8 >> 2] = 0; //@line 4368
 $2 = HEAP8[$__dflt >> 0] | 0; //@line 4369
 $4 = ($2 & 1) == 0; //@line 4371
 $8 = $4 ? $__dflt + 1 | 0 : HEAP32[$__dflt + 8 >> 2] | 0; //@line 4375
 $13 = $4 ? ($2 & 255) >>> 1 : HEAP32[$__dflt + 4 >> 2] | 0; //@line 4380
 $14 = $8 + $13 | 0; //@line 4381
 if (($13 | 0) > 0) {
  $$0$i614 = $8; //@line 4384
  do {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt, HEAP8[$$0$i614 >> 0] | 0); //@line 4387
   $$0$i614 = $$0$i614 + 1 | 0; //@line 4388
  } while ($$0$i614 >>> 0 < $14 >>> 0);
 }
 $30 = _catgets(($__c | 0) == -1 ? -1 : $__c << 1, $__set, $__msgid, (HEAP8[$__ndflt >> 0] & 1) == 0 ? $__ndflt + 1 | 0 : HEAP32[$__ndflt + 8 >> 2] | 0) | 0; //@line 4408
 HEAP32[$agg$result >> 2] = 0; //@line 4409
 HEAP32[$agg$result + 4 >> 2] = 0; //@line 4411
 HEAP32[$agg$result + 8 >> 2] = 0; //@line 4413
 $33 = _strlen($30) | 0; //@line 4414
 $34 = $30 + $33 | 0; //@line 4415
 if (($33 | 0) > 0) {
  $$0$i12 = $30; //@line 4418
  do {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($agg$result, HEAP8[$$0$i12 >> 0] | 0); //@line 4421
   $$0$i12 = $$0$i12 + 1 | 0; //@line 4422
  } while ($$0$i12 >>> 0 < $34 >>> 0);
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt); //@line 4431
 STACKTOP = sp; //@line 4432
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $$03 = 0, $0 = 0, $1 = 0, $13 = 0, $16 = 0, $17 = 0, $22 = 0, $30 = 0, $33 = 0, $38 = 0, $45 = 0, $8 = 0, $__p$04 = 0;
 $0 = $__first; //@line 14846
 $1 = HEAP8[$this >> 0] | 0; //@line 14847
 if (!($1 & 1)) {
  $16 = 1; //@line 14853
  $17 = ($1 & 255) >>> 1; //@line 14853
  $45 = $1; //@line 14853
 } else {
  $8 = HEAP32[$this >> 2] | 0; //@line 14857
  $16 = ($8 & -2) + -1 | 0; //@line 14861
  $17 = HEAP32[$this + 4 >> 2] | 0; //@line 14861
  $45 = $8 & 255; //@line 14861
 }
 $13 = $__last - $0 >> 2; //@line 14865
 do {
  if ($13) {
   if (($16 - $17 | 0) >>> 0 < $13 >>> 0) {
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this, $16, $17 + $13 - $16 | 0, $17, $17, 0, 0); //@line 14874
    $22 = HEAP8[$this >> 0] | 0; //@line 14876
   } else {
    $22 = $45; //@line 14878
   }
   if (!($22 & 1)) {
    $33 = $this + 4 | 0; //@line 14884
   } else {
    $33 = HEAP32[$this + 8 >> 2] | 0; //@line 14888
   }
   $30 = $17 + (($__last - $0 | 0) >>> 2) | 0; //@line 14893
   if (($__first | 0) != ($__last | 0)) {
    $$03 = $__first; //@line 14897
    $__p$04 = $33 + ($17 << 2) | 0; //@line 14897
    while (1) {
     HEAP32[$__p$04 >> 2] = HEAP32[$$03 >> 2]; //@line 14900
     $$03 = $$03 + 4 | 0; //@line 14902
     if (($$03 | 0) == ($__last | 0)) {
      break;
     } else {
      $__p$04 = $__p$04 + 4 | 0; //@line 14907
     }
    }
   }
   HEAP32[$33 + ($30 << 2) >> 2] = 0; //@line 14912
   $38 = $17 + $13 | 0; //@line 14913
   if (!(HEAP8[$this >> 0] & 1)) {
    HEAP8[$this >> 0] = $38 << 1; //@line 14920
    break;
   } else {
    HEAP32[$this + 4 >> 2] = $38; //@line 14924
    break;
   }
  }
 } while (0);
 return $this | 0; //@line 14929
}
function ___fwritex($s, $l, $f) {
 $s = $s | 0;
 $l = $l | 0;
 $f = $f | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $19 = 0, $29 = 0, $5 = 0, $6 = 0, $8 = 0, $i$0 = 0, $i$0$lcssa10 = 0, $i$1 = 0, label = 0;
 $0 = $f + 16 | 0; //@line 7011
 $1 = HEAP32[$0 >> 2] | 0; //@line 7012
 if (!$1) {
  if (!(___towrite($f) | 0)) {
   $8 = HEAP32[$0 >> 2] | 0; //@line 7019
   label = 4; //@line 7020
  } else {
   $$0 = 0; //@line 7022
  }
 } else {
  $8 = $1; //@line 7025
  label = 4; //@line 7026
 }
 L4 : do {
  if ((label | 0) == 4) {
   $5 = $f + 20 | 0; //@line 7030
   $6 = HEAP32[$5 >> 2] | 0; //@line 7031
   if (($8 - $6 | 0) >>> 0 < $l >>> 0) {
    $$0 = FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, $s, $l) | 0; //@line 7040
    break;
   }
   L9 : do {
    if ((HEAP8[$f + 75 >> 0] | 0) > -1) {
     $i$0 = $l; //@line 7048
     while (1) {
      if (!$i$0) {
       $$01 = $l; //@line 7052
       $$02 = $s; //@line 7052
       $29 = $6; //@line 7052
       $i$1 = 0; //@line 7052
       break L9;
      }
      $19 = $i$0 + -1 | 0; //@line 7055
      if ((HEAP8[$s + $19 >> 0] | 0) == 10) {
       $i$0$lcssa10 = $i$0; //@line 7060
       break;
      } else {
       $i$0 = $19; //@line 7063
      }
     }
     if ((FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, $s, $i$0$lcssa10) | 0) >>> 0 < $i$0$lcssa10 >>> 0) {
      $$0 = $i$0$lcssa10; //@line 7071
      break L4;
     }
     $$01 = $l - $i$0$lcssa10 | 0; //@line 7077
     $$02 = $s + $i$0$lcssa10 | 0; //@line 7077
     $29 = HEAP32[$5 >> 2] | 0; //@line 7077
     $i$1 = $i$0$lcssa10; //@line 7077
    } else {
     $$01 = $l; //@line 7079
     $$02 = $s; //@line 7079
     $29 = $6; //@line 7079
     $i$1 = 0; //@line 7079
    }
   } while (0);
   _memcpy($29 | 0, $$02 | 0, $$01 | 0) | 0; //@line 7082
   HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $$01; //@line 7085
   $$0 = $i$1 + $$01 | 0; //@line 7087
  }
 } while (0);
 return $$0 | 0; //@line 7090
}
function ___shgetc($f) {
 $f = $f | 0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $12 = 0, $14 = 0, $15 = 0, $21 = 0, $26 = 0, $28 = 0, $31 = 0, $36 = 0, $41 = 0, $6 = 0, $9 = 0, label = 0;
 $0 = $f + 104 | 0; //@line 4509
 $1 = HEAP32[$0 >> 2] | 0; //@line 4510
 if (!$1) {
  label = 3; //@line 4513
 } else {
  if ((HEAP32[$f + 108 >> 2] | 0) < ($1 | 0)) {
   label = 3; //@line 4519
  } else {
   label = 4; //@line 4521
  }
 }
 if ((label | 0) == 3) {
  $6 = ___uflow($f) | 0; //@line 4525
  if (($6 | 0) < 0) {
   label = 4; //@line 4528
  } else {
   $9 = HEAP32[$0 >> 2] | 0; //@line 4530
   $$phi$trans$insert = $f + 8 | 0; //@line 4532
   if (!$9) {
    $$pre = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 4534
    $26 = $$pre; //@line 4536
    $41 = $$pre; //@line 4536
    label = 9; //@line 4537
   } else {
    $12 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 4539
    $14 = HEAP32[$f + 4 >> 2] | 0; //@line 4541
    $15 = $12; //@line 4542
    $21 = $9 - (HEAP32[$f + 108 >> 2] | 0) + -1 | 0; //@line 4548
    if (($15 - $14 | 0) > ($21 | 0)) {
     HEAP32[$f + 100 >> 2] = $14 + $21; //@line 4553
     $28 = $12; //@line 4554
    } else {
     $26 = $15; //@line 4556
     $41 = $12; //@line 4556
     label = 9; //@line 4557
    }
   }
   if ((label | 0) == 9) {
    HEAP32[$f + 100 >> 2] = $26; //@line 4562
    $28 = $41; //@line 4563
   }
   $$pre4 = HEAP32[$f + 4 >> 2] | 0; //@line 4567
   if ($28) {
    $31 = $f + 108 | 0; //@line 4571
    HEAP32[$31 >> 2] = $28 + 1 - $$pre4 + (HEAP32[$31 >> 2] | 0); //@line 4576
   }
   $36 = $$pre4 + -1 | 0; //@line 4578
   if ((HEAPU8[$36 >> 0] | 0 | 0) == ($6 | 0)) {
    $$0 = $6; //@line 4583
   } else {
    HEAP8[$36 >> 0] = $6; //@line 4586
    $$0 = $6; //@line 4587
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$f + 100 >> 2] = 0; //@line 4593
  $$0 = -1; //@line 4594
 }
 return $$0 | 0; //@line 4596
}
function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($this, $__s, $0, $1, $__tm, $__fmt, $__mod) {
 $this = $this | 0;
 $__s = $__s | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $__mod = $__mod | 0;
 var $$0$i$i2 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $22 = 0, $25 = 0, $4 = 0, $6 = 0, $8 = 0, $__nar = 0, $__ne = 0, sp = 0;
 sp = STACKTOP; //@line 13229
 STACKTOP = STACKTOP + 112 | 0; //@line 13230
 $__nar = sp + 4 | 0; //@line 13231
 $__ne = sp; //@line 13232
 HEAP32[$__ne >> 2] = $__nar + 100; //@line 13234
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this + 8 | 0, $__nar, $__ne, $__tm, $__fmt, $__mod); //@line 13236
 $4 = HEAP32[$__ne >> 2] | 0; //@line 13237
 $6 = HEAP32[$__s >> 2] | 0; //@line 13239
 if (($__nar | 0) == ($4 | 0)) {
  $$lcssa = $6; //@line 13242
 } else {
  $$0$i$i2 = $__nar; //@line 13244
  $10 = $6; //@line 13244
  while (1) {
   $8 = HEAP8[$$0$i$i2 >> 0] | 0; //@line 13246
   do {
    if (!$10) {
     $25 = 0; //@line 13250
    } else {
     $11 = $10 + 24 | 0; //@line 13252
     $12 = HEAP32[$11 >> 2] | 0; //@line 13253
     if (($12 | 0) == (HEAP32[$10 + 28 >> 2] | 0)) {
      $22 = (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$10 >> 2] | 0) + 52 >> 2] & 15]($10, $8 & 255) | 0) == -1; //@line 13263
      $25 = $22 ? 0 : $10; //@line 13265
      break;
     } else {
      HEAP32[$11 >> 2] = $12 + 1; //@line 13269
      HEAP8[$12 >> 0] = $8; //@line 13270
      $25 = $10; //@line 13271
      break;
     }
    }
   } while (0);
   $$0$i$i2 = $$0$i$i2 + 1 | 0; //@line 13276
   if (($$0$i$i2 | 0) == ($4 | 0)) {
    $$lcssa = $25; //@line 13279
    break;
   } else {
    $10 = $25; //@line 13282
   }
  }
 }
 STACKTOP = sp; //@line 13286
 return $$lcssa | 0; //@line 13286
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__h, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $14 = 0, $22 = 0, $24 = 0, $28 = 0, $29 = 0, $31 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP; //@line 12810
 STACKTOP = STACKTOP + 16 | 0; //@line 12811
 $$byval_copy = sp + 4 | 0; //@line 12812
 $0 = sp; //@line 12813
 $1 = $this + 8 | 0; //@line 12814
 $5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] & 63]($1) | 0; //@line 12818
 $6 = HEAP8[$5 >> 0] | 0; //@line 12819
 if (!($6 & 1)) {
  $24 = ($6 & 255) >>> 1; //@line 12825
 } else {
  $24 = HEAP32[$5 + 4 >> 2] | 0; //@line 12829
 }
 $14 = HEAP8[$5 + 12 >> 0] | 0; //@line 12832
 if (!($14 & 1)) {
  $22 = ($14 & 255) >>> 1; //@line 12838
 } else {
  $22 = HEAP32[$5 + 16 >> 2] | 0; //@line 12842
 }
 do {
  if (($24 | 0) == (0 - $22 | 0)) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 12850
  } else {
   HEAP32[$0 >> 2] = HEAP32[$__e >> 2]; //@line 12853
   $28 = $5 + 24 | 0; //@line 12854
   HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 12855
   $29 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy, $5, $28, $__ct, $__err, 0) | 0; //@line 12856
   $31 = HEAP32[$__h >> 2] | 0; //@line 12858
   if (($29 | 0) == ($5 | 0) & ($31 | 0) == 12) {
    HEAP32[$__h >> 2] = 0; //@line 12862
    break;
   }
   if (($31 | 0) < 12 & ($29 - $5 | 0) == 12) {
    HEAP32[$__h >> 2] = $31 + 12; //@line 12873
   }
  }
 } while (0);
 STACKTOP = sp; //@line 12877
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__h, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $14 = 0, $22 = 0, $24 = 0, $28 = 0, $29 = 0, $31 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP; //@line 10973
 STACKTOP = STACKTOP + 16 | 0; //@line 10974
 $$byval_copy = sp + 4 | 0; //@line 10975
 $0 = sp; //@line 10976
 $1 = $this + 8 | 0; //@line 10977
 $5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] & 63]($1) | 0; //@line 10981
 $6 = HEAP8[$5 >> 0] | 0; //@line 10982
 if (!($6 & 1)) {
  $24 = ($6 & 255) >>> 1; //@line 10988
 } else {
  $24 = HEAP32[$5 + 4 >> 2] | 0; //@line 10992
 }
 $14 = HEAP8[$5 + 12 >> 0] | 0; //@line 10995
 if (!($14 & 1)) {
  $22 = ($14 & 255) >>> 1; //@line 11001
 } else {
  $22 = HEAP32[$5 + 16 >> 2] | 0; //@line 11005
 }
 do {
  if (($24 | 0) == (0 - $22 | 0)) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; //@line 11013
  } else {
   HEAP32[$0 >> 2] = HEAP32[$__e >> 2]; //@line 11016
   $28 = $5 + 24 | 0; //@line 11017
   HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 11018
   $29 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy, $5, $28, $__ct, $__err, 0) | 0; //@line 11019
   $31 = HEAP32[$__h >> 2] | 0; //@line 11021
   if (($29 | 0) == ($5 | 0) & ($31 | 0) == 12) {
    HEAP32[$__h >> 2] = 0; //@line 11025
    break;
   }
   if (($31 | 0) < 12 & ($29 - $5 | 0) == 12) {
    HEAP32[$__h >> 2] = $31 + 12; //@line 11036
   }
  }
 } while (0);
 STACKTOP = sp; //@line 11040
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add, $__p_new_stuff) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 $__p_new_stuff = $__p_new_stuff | 0;
 var $10 = 0, $12 = 0, $18 = 0, $19 = 0, $21 = 0, $24 = 0, $32 = 0, $9 = 0;
 if ((1073741806 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this); //@line 3097
 }
 if (!(HEAP8[$this >> 0] & 1)) {
  $21 = $this + 4 | 0; //@line 3105
 } else {
  $21 = HEAP32[$this + 8 >> 2] | 0; //@line 3109
 }
 if ($__old_cap >>> 0 < 536870887) {
  $9 = $__delta_cap + $__old_cap | 0; //@line 3113
  $10 = $__old_cap << 1; //@line 3114
  $12 = $9 >>> 0 < $10 >>> 0 ? $10 : $9; //@line 3116
  $18 = $12 >>> 0 < 2 ? 2 : $12 + 4 & -4; //@line 3121
 } else {
  $18 = 1073741807; //@line 3123
 }
 $19 = __Znwj($18 << 2) | 0; //@line 3126
 if ($__n_copy) {
  _wmemcpy($19, $21, $__n_copy) | 0; //@line 3129
 }
 if ($__n_add) {
  _wmemcpy($19 + ($__n_copy << 2) | 0, $__p_new_stuff, $__n_add) | 0; //@line 3134
 }
 $24 = $__old_sz - $__n_del | 0; //@line 3136
 if (($24 | 0) != ($__n_copy | 0)) {
  _wmemcpy($19 + ($__n_add + $__n_copy << 2) | 0, $21 + ($__n_del + $__n_copy << 2) | 0, $24 - $__n_copy | 0) | 0; //@line 3144
 }
 if (($__old_cap | 0) != 1) {
  __ZdlPv($21); //@line 3148
 }
 HEAP32[$this + 8 >> 2] = $19; //@line 3151
 HEAP32[$this >> 2] = $18 | 1; //@line 3153
 $32 = $24 + $__n_add | 0; //@line 3154
 HEAP32[$this + 4 >> 2] = $32; //@line 3156
 HEAP32[$19 + ($32 << 2) >> 2] = 0; //@line 3158
 return;
}
function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($this, $__s, $0, $1, $__tm, $__fmt, $__mod) {
 $this = $this | 0;
 $__s = $__s | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $__mod = $__mod | 0;
 var $$0$i$i$i$i = 0, $$0$i$i2 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $__nar = 0, $__ne = 0, sp = 0;
 sp = STACKTOP; //@line 13348
 STACKTOP = STACKTOP + 416 | 0; //@line 13349
 $__nar = sp + 8 | 0; //@line 13350
 $__ne = sp; //@line 13351
 HEAP32[$__ne >> 2] = $__nar + 400; //@line 13353
 __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($this + 8 | 0, $__nar, $__ne, $__tm, $__fmt, $__mod); //@line 13355
 $4 = HEAP32[$__ne >> 2] | 0; //@line 13356
 $6 = HEAP32[$__s >> 2] | 0; //@line 13358
 if (($__nar | 0) == ($4 | 0)) {
  $$lcssa = $6; //@line 13361
 } else {
  $$0$i$i2 = $__nar; //@line 13363
  $10 = $6; //@line 13363
  while (1) {
   $8 = HEAP32[$$0$i$i2 >> 2] | 0; //@line 13365
   if (!$10) {
    $24 = 0; //@line 13368
   } else {
    $11 = $10 + 24 | 0; //@line 13370
    $12 = HEAP32[$11 >> 2] | 0; //@line 13371
    if (($12 | 0) == (HEAP32[$10 + 28 >> 2] | 0)) {
     $$0$i$i$i$i = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$10 >> 2] | 0) + 52 >> 2] & 15]($10, $8) | 0; //@line 13380
    } else {
     HEAP32[$11 >> 2] = $12 + 4; //@line 13383
     HEAP32[$12 >> 2] = $8; //@line 13384
     $$0$i$i$i$i = $8; //@line 13385
    }
    $24 = ($$0$i$i$i$i | 0) == -1 ? 0 : $10; //@line 13389
   }
   $$0$i$i2 = $$0$i$i2 + 4 | 0; //@line 13391
   if (($$0$i$i2 | 0) == ($4 | 0)) {
    $$lcssa = $24; //@line 13394
    break;
   } else {
    $10 = $24; //@line 13397
   }
  }
 }
 STACKTOP = sp; //@line 13401
 return $$lcssa | 0; //@line 13401
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add, $__p_new_stuff) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 $__p_new_stuff = $__p_new_stuff | 0;
 var $10 = 0, $12 = 0, $17 = 0, $18 = 0, $20 = 0, $23 = 0, $31 = 0, $9 = 0;
 if ((-18 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this); //@line 2622
 }
 if (!(HEAP8[$this >> 0] & 1)) {
  $20 = $this + 1 | 0; //@line 2630
 } else {
  $20 = HEAP32[$this + 8 >> 2] | 0; //@line 2634
 }
 if ($__old_cap >>> 0 < 2147483623) {
  $9 = $__delta_cap + $__old_cap | 0; //@line 2638
  $10 = $__old_cap << 1; //@line 2639
  $12 = $9 >>> 0 < $10 >>> 0 ? $10 : $9; //@line 2641
  $17 = $12 >>> 0 < 11 ? 11 : $12 + 16 & -16; //@line 2646
 } else {
  $17 = -17; //@line 2648
 }
 $18 = __Znwj($17) | 0; //@line 2650
 if ($__n_copy) {
  _memcpy($18 | 0, $20 | 0, $__n_copy | 0) | 0; //@line 2653
 }
 if ($__n_add) {
  _memcpy($18 + $__n_copy | 0, $__p_new_stuff | 0, $__n_add | 0) | 0; //@line 2658
 }
 $23 = $__old_sz - $__n_del | 0; //@line 2660
 if (($23 | 0) != ($__n_copy | 0)) {
  _memcpy($18 + ($__n_add + $__n_copy) | 0, $20 + ($__n_del + $__n_copy) | 0, $23 - $__n_copy | 0) | 0; //@line 2668
 }
 if (($__old_cap | 0) != 10) {
  __ZdlPv($20); //@line 2672
 }
 HEAP32[$this + 8 >> 2] = $18; //@line 2675
 HEAP32[$this >> 2] = $17 | 1; //@line 2677
 $31 = $23 + $__n_add | 0; //@line 2678
 HEAP32[$this + 4 >> 2] = $31; //@line 2680
 HEAP8[$18 + $31 >> 0] = 0; //@line 2682
 return;
}
function _vsnprintf($s, $n, $fmt, $ap) {
 $s = $s | 0;
 $n = $n | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $10 = 0, $11 = 0, $13 = 0, $15 = 0, $5 = 0, $8 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 8481
 STACKTOP = STACKTOP + 128 | 0; //@line 8482
 $b = sp + 112 | 0; //@line 8483
 $f = sp; //@line 8484
 dest = $f; //@line 8485
 src = 2616; //@line 8485
 stop = dest + 112 | 0; //@line 8485
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 8485
  dest = dest + 4 | 0; //@line 8485
  src = src + 4 | 0; //@line 8485
 } while ((dest | 0) < (stop | 0));
 if (($n + -1 | 0) >>> 0 > 2147483646) {
  if (!$n) {
   $$01 = $b; //@line 8491
   $$02 = 1; //@line 8491
   label = 4; //@line 8492
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 8495
   $$0 = -1; //@line 8496
  }
 } else {
  $$01 = $s; //@line 8499
  $$02 = $n; //@line 8499
  label = 4; //@line 8500
 }
 if ((label | 0) == 4) {
  $5 = -2 - $$01 | 0; //@line 8504
  $$$02 = $$02 >>> 0 > $5 >>> 0 ? $5 : $$02; //@line 8506
  HEAP32[$f + 48 >> 2] = $$$02; //@line 8508
  $8 = $f + 20 | 0; //@line 8509
  HEAP32[$8 >> 2] = $$01; //@line 8510
  HEAP32[$f + 44 >> 2] = $$01; //@line 8512
  $10 = $$01 + $$$02 | 0; //@line 8513
  $11 = $f + 16 | 0; //@line 8514
  HEAP32[$11 >> 2] = $10; //@line 8515
  HEAP32[$f + 28 >> 2] = $10; //@line 8517
  $13 = _vfprintf($f, $fmt, $ap) | 0; //@line 8518
  if (!$$$02) {
   $$0 = $13; //@line 8521
  } else {
   $15 = HEAP32[$8 >> 2] | 0; //@line 8523
   HEAP8[$15 + ((($15 | 0) == (HEAP32[$11 >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 8528
   $$0 = $13; //@line 8529
  }
 }
 STACKTOP = sp; //@line 8532
 return $$0 | 0; //@line 8532
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $$0$i1 = 0, $$pre$i = 0, $11 = 0, $13 = 0, $14 = 0, $16 = 0, $19 = 0, $22 = 0, $4 = 0, $5 = 0, $__v = 0, sp = 0;
 sp = STACKTOP; //@line 17202
 STACKTOP = STACKTOP + 32 | 0; //@line 17203
 $__v = sp; //@line 17204
 $4 = HEAP32[$this + 8 >> 2] | 0; //@line 17209
 $5 = HEAP32[$this + 4 >> 2] | 0; //@line 17210
 if ($4 - $5 >> 2 >>> 0 < $__n >>> 0) {
  $11 = HEAP32[$this >> 2] | 0; //@line 17217
  $13 = $5 - $11 >> 2; //@line 17219
  $14 = $13 + $__n | 0; //@line 17220
  if ($14 >>> 0 > 1073741823) {
   __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this); //@line 17223
  }
  $16 = $4 - $11 | 0; //@line 17226
  if ($16 >> 2 >>> 0 < 536870911) {
   $19 = $16 >> 1; //@line 17230
   $$0$i1 = $19 >>> 0 < $14 >>> 0 ? $14 : $19; //@line 17233
  } else {
   $$0$i1 = 1073741823; //@line 17235
  }
  __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($__v, $$0$i1, $13, $this + 16 | 0); //@line 17237
  $22 = $__v + 8 | 0; //@line 17238
  $$pre$i = HEAP32[$22 >> 2] | 0; //@line 17239
  _memset($$pre$i | 0, 0, $__n << 2 | 0) | 0; //@line 17241
  HEAP32[$22 >> 2] = $$pre$i + ($__n << 2); //@line 17243
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this, $__v); //@line 17244
  __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($__v); //@line 17245
 } else {
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this, $__n); //@line 17247
 }
 STACKTOP = sp; //@line 17249
 return;
}
function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $$0 = 0, $1 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP; //@line 493
 STACKTOP = STACKTOP + 16 | 0; //@line 494
 $__p2 = sp; //@line 495
 L1 : do {
  if (($__a | 0) == ($__a_end | 0)) {
   HEAP32[$__err >> 2] = 4; //@line 499
   $$0 = 0; //@line 500
  } else {
   $1 = ___errno_location() | 0; //@line 502
   $2 = HEAP32[$1 >> 2] | 0; //@line 503
   HEAP32[$1 >> 2] = 0; //@line 504
   $4 = _strtoll_l($__a, $__p2, $__base, __ZNSt3__16__clocEv() | 0) | 0; //@line 506
   $5 = tempRet0; //@line 507
   $6 = HEAP32[$1 >> 2] | 0; //@line 508
   if (!$6) {
    HEAP32[$1 >> 2] = $2; //@line 511
   }
   if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
    HEAP32[$__err >> 2] = 4; //@line 516
    $$0 = 0; //@line 517
    break;
   }
   do {
    if (($6 | 0) == 34) {
     HEAP32[$__err >> 2] = 4; //@line 523
     if (($5 | 0) > 0 | ($5 | 0) == 0 & $4 >>> 0 > 0) {
      $$0 = 2147483647; //@line 530
      break L1;
     }
    } else {
     if (($5 | 0) < -1 | ($5 | 0) == -1 & $4 >>> 0 < 2147483648) {
      HEAP32[$__err >> 2] = 4; //@line 540
      break;
     }
     if (($5 | 0) > 0 | ($5 | 0) == 0 & $4 >>> 0 > 2147483647) {
      HEAP32[$__err >> 2] = 4; //@line 549
      $$0 = 2147483647; //@line 550
      break L1;
     } else {
      $$0 = $4; //@line 553
      break L1;
     }
    }
   } while (0);
   $$0 = -2147483648; //@line 558
  }
 } while (0);
 STACKTOP = sp; //@line 561
 return $$0 | 0; //@line 561
}
function __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmtp, $__len, $__signd, $__flags) {
 $__fmtp = $__fmtp | 0;
 $__len = $__len | 0;
 $__signd = $__signd | 0;
 $__flags = $__flags | 0;
 var $$0 = 0, $$012 = 0, $$1$lcssa = 0, $$1$ph = 0, $$13 = 0, $10 = 0, $6 = 0, $9 = 0;
 if (!($__flags & 2048)) {
  $$0 = $__fmtp; //@line 7126
 } else {
  HEAP8[$__fmtp >> 0] = 43; //@line 7129
  $$0 = $__fmtp + 1 | 0; //@line 7130
 }
 if (!($__flags & 512)) {
  $$1$ph = $$0; //@line 7135
 } else {
  HEAP8[$$0 >> 0] = 35; //@line 7138
  $$1$ph = $$0 + 1 | 0; //@line 7139
 }
 $6 = HEAP8[$__len >> 0] | 0; //@line 7141
 if (!($6 << 24 >> 24)) {
  $$1$lcssa = $$1$ph; //@line 7144
 } else {
  $$012 = $__len; //@line 7146
  $$13 = $$1$ph; //@line 7146
  $10 = $6; //@line 7146
  while (1) {
   $$012 = $$012 + 1 | 0; //@line 7148
   $9 = $$13 + 1 | 0; //@line 7149
   HEAP8[$$13 >> 0] = $10; //@line 7150
   $10 = HEAP8[$$012 >> 0] | 0; //@line 7151
   if (!($10 << 24 >> 24)) {
    $$1$lcssa = $9; //@line 7154
    break;
   } else {
    $$13 = $9; //@line 7157
   }
  }
 }
 L11 : do {
  switch ($__flags & 74 | 0) {
  case 64:
   {
    HEAP8[$$1$lcssa >> 0] = 111; //@line 7165
    break;
   }
  case 8:
   {
    if (!($__flags & 16384)) {
     HEAP8[$$1$lcssa >> 0] = 120; //@line 7172
     break L11;
    } else {
     HEAP8[$$1$lcssa >> 0] = 88; //@line 7175
     break L11;
    }
    break;
   }
  default:
   {
    if ($__signd) {
     HEAP8[$$1$lcssa >> 0] = 100; //@line 7182
     break L11;
    } else {
     HEAP8[$$1$lcssa >> 0] = 117; //@line 7185
     break L11;
    }
   }
  }
 } while (0);
 return;
}
function _fflush($f) {
 $f = $f | 0;
 var $$0 = 0, $$012 = 0, $$014 = 0, $24 = 0, $27 = 0, $6 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0;
 do {
  if (!$f) {
   if (!(HEAP32[639] | 0)) {
    $27 = 0; //@line 6853
   } else {
    $27 = _fflush(HEAP32[639] | 0) | 0; //@line 6857
   }
   ___lock(2324); //@line 6859
   $$012 = HEAP32[580] | 0; //@line 6860
   if (!$$012) {
    $r$0$lcssa = $27; //@line 6863
   } else {
    $$014 = $$012; //@line 6865
    $r$03 = $27; //@line 6865
    while (1) {
     if ((HEAP32[$$014 + 76 >> 2] | 0) > -1) {
      $24 = ___lockfile($$014) | 0; //@line 6872
     } else {
      $24 = 0; //@line 6874
     }
     if ((HEAP32[$$014 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$014 + 28 >> 2] | 0) >>> 0) {
      $r$1 = ___fflush_unlocked($$014) | 0 | $r$03; //@line 6884
     } else {
      $r$1 = $r$03; //@line 6886
     }
     if ($24) {
      ___unlockfile($$014); //@line 6890
     }
     $$014 = HEAP32[$$014 + 56 >> 2] | 0; //@line 6893
     if (!$$014) {
      $r$0$lcssa = $r$1; //@line 6896
      break;
     } else {
      $r$03 = $r$1; //@line 6899
     }
    }
   }
   ___unlock(2324); //@line 6903
   $$0 = $r$0$lcssa; //@line 6904
  } else {
   if ((HEAP32[$f + 76 >> 2] | 0) <= -1) {
    $$0 = ___fflush_unlocked($f) | 0; //@line 6911
    break;
   }
   $phitmp = (___lockfile($f) | 0) == 0; //@line 6915
   $6 = ___fflush_unlocked($f) | 0; //@line 6916
   if ($phitmp) {
    $$0 = $6; //@line 6918
   } else {
    ___unlockfile($f); //@line 6920
    $$0 = $6; //@line 6921
   }
  }
 } while (0);
 return $$0 | 0; //@line 6925
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this, $st, $frm, $frm_end, $mx) {
 $this = $this | 0;
 $st = $st | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 var $$013 = 0, $$1 = 0, $$pn = 0, $0 = 0, $1 = 0, $7 = 0, $8 = 0, $nbytes$0$lcssa = 0, $nbytes$04 = 0, $nbytes$1 = 0, $nwchar_t$05 = 0;
 $0 = $frm_end; //@line 6241
 $1 = $this + 8 | 0; //@line 6242
 L1 : do {
  if (($frm | 0) == ($frm_end | 0) | ($mx | 0) == 0) {
   $nbytes$0$lcssa = 0; //@line 6248
  } else {
   $$013 = $frm; //@line 6250
   $nbytes$04 = 0; //@line 6250
   $nwchar_t$05 = 0; //@line 6250
   while (1) {
    $7 = _uselocale(HEAP32[$1 >> 2] | 0) | 0; //@line 6255
    $8 = _mbrlen($$013, $0 - $$013 | 0, $st) | 0; //@line 6256
    if ($7) {
     _uselocale($7) | 0; //@line 6259
    }
    switch ($8 | 0) {
    case -2:
    case -1:
     {
      $nbytes$0$lcssa = $nbytes$04; //@line 6263
      break L1;
      break;
     }
    case 0:
     {
      $$1 = $$013 + 1 | 0; //@line 6269
      $$pn = 1; //@line 6269
      break;
     }
    default:
     {
      $$1 = $$013 + $8 | 0; //@line 6274
      $$pn = $8; //@line 6274
     }
    }
    $nbytes$1 = $$pn + $nbytes$04 | 0; //@line 6277
    $nwchar_t$05 = $nwchar_t$05 + 1 | 0; //@line 6278
    if (($$1 | 0) == ($frm_end | 0) | $nwchar_t$05 >>> 0 >= $mx >>> 0) {
     $nbytes$0$lcssa = $nbytes$1; //@line 6283
     break L1;
    } else {
     $$013 = $$1; //@line 6286
     $nbytes$04 = $nbytes$1; //@line 6286
    }
   }
  }
 } while (0);
 return $nbytes$0$lcssa | 0; //@line 6291
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $11 = 0, $14 = 0, $15 = 0, $2 = 0, $20 = 0, $21 = 0, $6 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 11861
 STACKTOP = STACKTOP + 16 | 0; //@line 11862
 $$byval_copy1 = sp + 12 | 0; //@line 11863
 $$byval_copy = sp + 8 | 0; //@line 11864
 $0 = sp + 4 | 0; //@line 11865
 $1 = sp; //@line 11866
 $2 = $this + 8 | 0; //@line 11867
 $6 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] & 63]($2) | 0; //@line 11871
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2]; //@line 11873
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2]; //@line 11875
 $9 = HEAP8[$6 >> 0] | 0; //@line 11876
 $11 = ($9 & 1) == 0; //@line 11878
 $14 = $6 + 4 | 0; //@line 11881
 $15 = $11 ? $14 : HEAP32[$6 + 8 >> 2] | 0; //@line 11882
 $20 = $15 + (($11 ? ($9 & 255) >>> 1 : HEAP32[$14 >> 2] | 0) << 2) | 0; //@line 11887
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 11888
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2]; //@line 11889
 $21 = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__tm, $15, $20) | 0; //@line 11890
 STACKTOP = sp; //@line 11891
 return $21 | 0; //@line 11891
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this, $info, $dst_ptr, $current_ptr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 var $16 = 0, $17 = 0, $23 = 0, $25 = 0, $5 = 0, $6 = 0;
 HEAP8[$info + 53 >> 0] = 1; //@line 1145
 do {
  if ((HEAP32[$info + 4 >> 2] | 0) == ($current_ptr | 0)) {
   HEAP8[$info + 52 >> 0] = 1; //@line 1152
   $5 = $info + 16 | 0; //@line 1153
   $6 = HEAP32[$5 >> 2] | 0; //@line 1154
   if (!$6) {
    HEAP32[$5 >> 2] = $dst_ptr; //@line 1157
    HEAP32[$info + 24 >> 2] = $path_below; //@line 1159
    HEAP32[$info + 36 >> 2] = 1; //@line 1161
    if (!(($path_below | 0) == 1 ? (HEAP32[$info + 48 >> 2] | 0) == 1 : 0)) {
     break;
    }
    HEAP8[$info + 54 >> 0] = 1; //@line 1171
    break;
   }
   if (($6 | 0) != ($dst_ptr | 0)) {
    $25 = $info + 36 | 0; //@line 1176
    HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] | 0) + 1; //@line 1179
    HEAP8[$info + 54 >> 0] = 1; //@line 1181
    break;
   }
   $16 = $info + 24 | 0; //@line 1184
   $17 = HEAP32[$16 >> 2] | 0; //@line 1185
   if (($17 | 0) == 2) {
    HEAP32[$16 >> 2] = $path_below; //@line 1188
    $23 = $path_below; //@line 1189
   } else {
    $23 = $17; //@line 1191
   }
   if (($23 | 0) == 1 ? (HEAP32[$info + 48 >> 2] | 0) == 1 : 0) {
    HEAP8[$info + 54 >> 0] = 1; //@line 1200
   }
  }
 } while (0);
 return;
}
function _fmt_u($0, $1, $s) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $s = $s | 0;
 var $$0$lcssa = 0, $$01$lcssa$off0 = 0, $$05 = 0, $$1$lcssa = 0, $$12 = 0, $$lcssa20 = 0, $13 = 0, $14 = 0, $25 = 0, $28 = 0, $7 = 0, $8 = 0, $9 = 0, $y$03 = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $$05 = $s; //@line 11663
  $7 = $0; //@line 11663
  $8 = $1; //@line 11663
  while (1) {
   $9 = ___uremdi3($7 | 0, $8 | 0, 10, 0) | 0; //@line 11665
   $13 = $$05 + -1 | 0; //@line 11669
   HEAP8[$13 >> 0] = $9 | 48; //@line 11670
   $14 = ___udivdi3($7 | 0, $8 | 0, 10, 0) | 0; //@line 11671
   if ($8 >>> 0 > 9 | ($8 | 0) == 9 & $7 >>> 0 > 4294967295) {
    $$05 = $13; //@line 11679
    $7 = $14; //@line 11679
    $8 = tempRet0; //@line 11679
   } else {
    $$lcssa20 = $13; //@line 11681
    $28 = $14; //@line 11681
    break;
   }
  }
  $$0$lcssa = $$lcssa20; //@line 11685
  $$01$lcssa$off0 = $28; //@line 11685
 } else {
  $$0$lcssa = $s; //@line 11687
  $$01$lcssa$off0 = $0; //@line 11687
 }
 if (!$$01$lcssa$off0) {
  $$1$lcssa = $$0$lcssa; //@line 11691
 } else {
  $$12 = $$0$lcssa; //@line 11693
  $y$03 = $$01$lcssa$off0; //@line 11693
  while (1) {
   $25 = $$12 + -1 | 0; //@line 11698
   HEAP8[$25 >> 0] = ($y$03 >>> 0) % 10 | 0 | 48; //@line 11699
   if ($y$03 >>> 0 < 10) {
    $$1$lcssa = $25; //@line 11703
    break;
   } else {
    $$12 = $25; //@line 11706
    $y$03 = ($y$03 >>> 0) / 10 | 0; //@line 11706
   }
  }
 }
 return $$1$lcssa | 0; //@line 11710
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 var $10 = 0, $12 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $9 = 0;
 if ((1073741807 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this); //@line 3175
 }
 if (!(HEAP8[$this >> 0] & 1)) {
  $21 = $this + 4 | 0; //@line 3183
 } else {
  $21 = HEAP32[$this + 8 >> 2] | 0; //@line 3187
 }
 if ($__old_cap >>> 0 < 536870887) {
  $9 = $__delta_cap + $__old_cap | 0; //@line 3191
  $10 = $__old_cap << 1; //@line 3192
  $12 = $9 >>> 0 < $10 >>> 0 ? $10 : $9; //@line 3194
  $18 = $12 >>> 0 < 2 ? 2 : $12 + 4 & -4; //@line 3199
 } else {
  $18 = 1073741807; //@line 3201
 }
 $19 = __Znwj($18 << 2) | 0; //@line 3204
 if ($__n_copy) {
  _wmemcpy($19, $21, $__n_copy) | 0; //@line 3207
 }
 $22 = $__old_sz - $__n_del | 0; //@line 3209
 if (($22 | 0) != ($__n_copy | 0)) {
  _wmemcpy($19 + ($__n_add + $__n_copy << 2) | 0, $21 + ($__n_del + $__n_copy << 2) | 0, $22 - $__n_copy | 0) | 0; //@line 3217
 }
 if (($__old_cap | 0) != 1) {
  __ZdlPv($21); //@line 3221
 }
 HEAP32[$this + 8 >> 2] = $19; //@line 3224
 HEAP32[$this >> 2] = $18 | 1; //@line 3226
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$pn = 0, $0 = 0, $19 = 0, $2 = 0, $20 = 0, $__cap$0 = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0;
 $0 = HEAP8[$this >> 0] | 0; //@line 3026
 $2 = ($0 & 1) != 0; //@line 3028
 if ($2) {
  $__cap$0 = (HEAP32[$this >> 2] & -2) + -1 | 0; //@line 3035
  $__sz$0 = HEAP32[$this + 4 >> 2] | 0; //@line 3035
 } else {
  $__cap$0 = 1; //@line 3039
  $__sz$0 = ($0 & 255) >>> 1; //@line 3039
 }
 if (($__sz$0 | 0) == ($__cap$0 | 0)) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this, $__cap$0, 1, $__cap$0, $__cap$0, 0, 0); //@line 3043
  if (!(HEAP8[$this >> 0] & 1)) {
   label = 7; //@line 3048
  } else {
   label = 8; //@line 3050
  }
 } else {
  if ($2) {
   label = 8; //@line 3054
  } else {
   label = 7; //@line 3056
  }
 }
 if ((label | 0) == 7) {
  HEAP8[$this >> 0] = ($__sz$0 << 1) + 2; //@line 3064
  $$pn = $this + 4 | 0; //@line 3066
  $__p$0$sum$pre$phiZZZ2D = $__sz$0 + 1 | 0; //@line 3066
 } else if ((label | 0) == 8) {
  $19 = HEAP32[$this + 8 >> 2] | 0; //@line 3070
  $20 = $__sz$0 + 1 | 0; //@line 3071
  HEAP32[$this + 4 >> 2] = $20; //@line 3073
  $$pn = $19; //@line 3074
  $__p$0$sum$pre$phiZZZ2D = $20; //@line 3074
 }
 HEAP32[$$pn + ($__sz$0 << 2) >> 2] = $__c; //@line 3077
 HEAP32[$$pn + ($__p$0$sum$pre$phiZZZ2D << 2) >> 2] = 0; //@line 3079
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $11 = 0, $15 = 0, $2 = 0, $21 = 0, $22 = 0, $6 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 10019
 STACKTOP = STACKTOP + 16 | 0; //@line 10020
 $$byval_copy1 = sp + 12 | 0; //@line 10021
 $$byval_copy = sp + 8 | 0; //@line 10022
 $0 = sp + 4 | 0; //@line 10023
 $1 = sp; //@line 10024
 $2 = $this + 8 | 0; //@line 10025
 $6 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] & 63]($2) | 0; //@line 10029
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2]; //@line 10031
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2]; //@line 10033
 $9 = HEAP8[$6 >> 0] | 0; //@line 10034
 $11 = ($9 & 1) == 0; //@line 10036
 $15 = $11 ? $6 + 1 | 0 : HEAP32[$6 + 8 >> 2] | 0; //@line 10040
 $21 = $15 + ($11 ? ($9 & 255) >>> 1 : HEAP32[$6 + 4 >> 2] | 0) | 0; //@line 10046
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 10047
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2]; //@line 10048
 $22 = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__tm, $15, $21) | 0; //@line 10049
 STACKTOP = sp; //@line 10050
 return $22 | 0; //@line 10050
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 var $10 = 0, $12 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $9 = 0;
 if ((-17 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this); //@line 2699
 }
 if (!(HEAP8[$this >> 0] & 1)) {
  $20 = $this + 1 | 0; //@line 2707
 } else {
  $20 = HEAP32[$this + 8 >> 2] | 0; //@line 2711
 }
 if ($__old_cap >>> 0 < 2147483623) {
  $9 = $__delta_cap + $__old_cap | 0; //@line 2715
  $10 = $__old_cap << 1; //@line 2716
  $12 = $9 >>> 0 < $10 >>> 0 ? $10 : $9; //@line 2718
  $17 = $12 >>> 0 < 11 ? 11 : $12 + 16 & -16; //@line 2723
 } else {
  $17 = -17; //@line 2725
 }
 $18 = __Znwj($17) | 0; //@line 2727
 if ($__n_copy) {
  _memcpy($18 | 0, $20 | 0, $__n_copy | 0) | 0; //@line 2730
 }
 $21 = $__old_sz - $__n_del | 0; //@line 2732
 if (($21 | 0) != ($__n_copy | 0)) {
  _memcpy($18 + ($__n_add + $__n_copy) | 0, $20 + ($__n_del + $__n_copy) | 0, $21 - $__n_copy | 0) | 0; //@line 2740
 }
 if (($__old_cap | 0) != 10) {
  __ZdlPv($20); //@line 2744
 }
 HEAP32[$this + 8 >> 2] = $18; //@line 2747
 HEAP32[$this >> 2] = $17 | 1; //@line 2749
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$pn = 0, $0 = 0, $19 = 0, $2 = 0, $20 = 0, $__cap$0 = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0;
 $0 = HEAP8[$this >> 0] | 0; //@line 2551
 $2 = ($0 & 1) != 0; //@line 2553
 if ($2) {
  $__cap$0 = (HEAP32[$this >> 2] & -2) + -1 | 0; //@line 2560
  $__sz$0 = HEAP32[$this + 4 >> 2] | 0; //@line 2560
 } else {
  $__cap$0 = 10; //@line 2564
  $__sz$0 = ($0 & 255) >>> 1; //@line 2564
 }
 if (($__sz$0 | 0) == ($__cap$0 | 0)) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this, $__cap$0, 1, $__cap$0, $__cap$0, 0, 0); //@line 2568
  if (!(HEAP8[$this >> 0] & 1)) {
   label = 7; //@line 2573
  } else {
   label = 8; //@line 2575
  }
 } else {
  if ($2) {
   label = 8; //@line 2579
  } else {
   label = 7; //@line 2581
  }
 }
 if ((label | 0) == 7) {
  HEAP8[$this >> 0] = ($__sz$0 << 1) + 2; //@line 2589
  $$pn = $this + 1 | 0; //@line 2591
  $__p$0$sum$pre$phiZZZ2D = $__sz$0 + 1 | 0; //@line 2591
 } else if ((label | 0) == 8) {
  $19 = HEAP32[$this + 8 >> 2] | 0; //@line 2595
  $20 = $__sz$0 + 1 | 0; //@line 2596
  HEAP32[$this + 4 >> 2] = $20; //@line 2598
  $$pn = $19; //@line 2599
  $__p$0$sum$pre$phiZZZ2D = $20; //@line 2599
 }
 HEAP8[$$pn + $__sz$0 >> 0] = $__c; //@line 2602
 HEAP8[$$pn + $__p$0$sum$pre$phiZZZ2D >> 0] = 0; //@line 2604
 return;
}
function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $1 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP; //@line 439
 STACKTOP = STACKTOP + 16 | 0; //@line 440
 $__p2 = sp; //@line 441
 do {
  if (($__a | 0) == ($__a_end | 0)) {
   HEAP32[$__err >> 2] = 4; //@line 445
   $18 = 0; //@line 446
   $19 = 0; //@line 446
  } else {
   $1 = ___errno_location() | 0; //@line 448
   $2 = HEAP32[$1 >> 2] | 0; //@line 449
   HEAP32[$1 >> 2] = 0; //@line 450
   $4 = _strtoll_l($__a, $__p2, $__base, __ZNSt3__16__clocEv() | 0) | 0; //@line 452
   $5 = tempRet0; //@line 453
   $6 = HEAP32[$1 >> 2] | 0; //@line 454
   if (!$6) {
    HEAP32[$1 >> 2] = $2; //@line 457
   }
   if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
    HEAP32[$__err >> 2] = 4; //@line 462
    $18 = 0; //@line 463
    $19 = 0; //@line 463
    break;
   }
   if (($6 | 0) == 34) {
    HEAP32[$__err >> 2] = 4; //@line 468
    $15 = ($5 | 0) > 0 | ($5 | 0) == 0 & $4 >>> 0 > 0; //@line 473
    tempRet0 = $15 ? 2147483647 : -2147483648; //@line 476
    STACKTOP = sp; //@line 477
    return ($15 ? -1 : 0) | 0; //@line 477
   } else {
    $18 = $5; //@line 479
    $19 = $4; //@line 479
   }
  }
 } while (0);
 tempRet0 = $18; //@line 483
 STACKTOP = sp; //@line 484
 return $19 | 0; //@line 484
}
function _strlen($s) {
 $s = $s | 0;
 var $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn15 = 0, $0 = 0, $18 = 0, $21 = 0, $5 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0;
 $0 = $s; //@line 8755
 L1 : do {
  if (!($0 & 3)) {
   $$01$lcssa = $s; //@line 8760
   label = 4; //@line 8761
  } else {
   $$014 = $s; //@line 8763
   $21 = $0; //@line 8763
   while (1) {
    if (!(HEAP8[$$014 >> 0] | 0)) {
     $$pn = $21; //@line 8768
     break L1;
    }
    $5 = $$014 + 1 | 0; //@line 8771
    $21 = $5; //@line 8772
    if (!($21 & 3)) {
     $$01$lcssa = $5; //@line 8776
     label = 4; //@line 8777
     break;
    } else {
     $$014 = $5; //@line 8780
    }
   }
  }
 } while (0);
 if ((label | 0) == 4) {
  $w$0 = $$01$lcssa; //@line 8786
  while (1) {
   $9 = HEAP32[$w$0 >> 2] | 0; //@line 8788
   if (!(($9 & -2139062144 ^ -2139062144) & $9 + -16843009)) {
    $w$0 = $w$0 + 4 | 0; //@line 8796
   } else {
    $$lcssa20 = $9; //@line 8798
    $w$0$lcssa = $w$0; //@line 8798
    break;
   }
  }
  if (!(($$lcssa20 & 255) << 24 >> 24)) {
   $$1$lcssa = $w$0$lcssa; //@line 8805
  } else {
   $$pn15 = $w$0$lcssa; //@line 8807
   while (1) {
    $18 = $$pn15 + 1 | 0; //@line 8809
    if (!(HEAP8[$18 >> 0] | 0)) {
     $$1$lcssa = $18; //@line 8813
     break;
    } else {
     $$pn15 = $18; //@line 8816
    }
   }
  }
  $$pn = $$1$lcssa; //@line 8821
 }
 return $$pn - $0 | 0; //@line 8824
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $st, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $st = $st | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $5 = 0, $n$02 = 0, $p$03 = 0, $tmp = 0, sp = 0;
 sp = STACKTOP; //@line 6139
 STACKTOP = STACKTOP + 16 | 0; //@line 6140
 $tmp = sp; //@line 6141
 HEAP32[$to_nxt >> 2] = $to; //@line 6142
 $2 = _uselocale(HEAP32[$this + 8 >> 2] | 0) | 0; //@line 6145
 $3 = _wcrtomb($tmp, 0, $st) | 0; //@line 6146
 if ($2) {
  _uselocale($2) | 0; //@line 6149
 }
 switch ($3 | 0) {
 case 0:
 case -1:
  {
   $$0 = 2; //@line 6153
   break;
  }
 default:
  {
   $5 = $3 + -1 | 0; //@line 6157
   if ($5 >>> 0 > ($to_end - (HEAP32[$to_nxt >> 2] | 0) | 0) >>> 0) {
    $$0 = 1; //@line 6164
   } else {
    if (!$5) {
     $$0 = 0; //@line 6168
    } else {
     $n$02 = $5; //@line 6170
     $p$03 = $tmp; //@line 6170
     while (1) {
      $13 = HEAP8[$p$03 >> 0] | 0; //@line 6173
      $14 = HEAP32[$to_nxt >> 2] | 0; //@line 6174
      HEAP32[$to_nxt >> 2] = $14 + 1; //@line 6176
      HEAP8[$14 >> 0] = $13; //@line 6177
      $n$02 = $n$02 + -1 | 0; //@line 6178
      if (!$n$02) {
       $$0 = 0; //@line 6181
       break;
      } else {
       $p$03 = $p$03 + 1 | 0; //@line 6184
      }
     }
    }
   }
  }
 }
 STACKTOP = sp; //@line 6191
 return $$0 | 0; //@line 6191
}
function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $13 = 0, $14 = 0, $3 = 0, $4 = 0, $6 = 0, $8 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP; //@line 205
 STACKTOP = STACKTOP + 16 | 0; //@line 206
 $__p2 = sp; //@line 207
 do {
  if (($__a | 0) == ($__a_end | 0)) {
   HEAP32[$__err >> 2] = 4; //@line 211
   $13 = 0; //@line 212
   $14 = 0; //@line 212
  } else {
   if ((HEAP8[$__a >> 0] | 0) == 45) {
    HEAP32[$__err >> 2] = 4; //@line 217
    $13 = 0; //@line 218
    $14 = 0; //@line 218
    break;
   }
   $3 = ___errno_location() | 0; //@line 221
   $4 = HEAP32[$3 >> 2] | 0; //@line 222
   HEAP32[$3 >> 2] = 0; //@line 223
   $6 = _strtoull_l($__a, $__p2, $__base, __ZNSt3__16__clocEv() | 0) | 0; //@line 225
   $8 = HEAP32[$3 >> 2] | 0; //@line 227
   if (!$8) {
    HEAP32[$3 >> 2] = $4; //@line 230
   }
   if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
    HEAP32[$__err >> 2] = 4; //@line 235
    $13 = 0; //@line 236
    $14 = 0; //@line 236
    break;
   }
   if (($8 | 0) == 34) {
    HEAP32[$__err >> 2] = 4; //@line 241
    $13 = -1; //@line 242
    $14 = -1; //@line 242
   } else {
    $13 = tempRet0; //@line 244
    $14 = $6; //@line 244
   }
  }
 } while (0);
 tempRet0 = $13; //@line 248
 STACKTOP = sp; //@line 249
 return $14 | 0; //@line 249
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $adjustedPtr) {
 $this = $this | 0;
 $thrown_type = $thrown_type | 0;
 $adjustedPtr = $adjustedPtr | 0;
 var $$0 = 0, $$1 = 0, $2 = 0, $info = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 839
 STACKTOP = STACKTOP + 64 | 0; //@line 840
 $info = sp; //@line 841
 if (($this | 0) == ($thrown_type | 0)) {
  $$1 = 1; //@line 844
 } else {
  if (!$thrown_type) {
   $$1 = 0; //@line 848
  } else {
   $2 = ___dynamic_cast($thrown_type, 40, 56, 0) | 0; //@line 850
   if (!$2) {
    $$1 = 0; //@line 853
   } else {
    dest = $info; //@line 855
    stop = dest + 56 | 0; //@line 855
    do {
     HEAP32[dest >> 2] = 0; //@line 855
     dest = dest + 4 | 0; //@line 855
    } while ((dest | 0) < (stop | 0));
    HEAP32[$info >> 2] = $2; //@line 856
    HEAP32[$info + 8 >> 2] = $this; //@line 858
    HEAP32[$info + 12 >> 2] = -1; //@line 860
    HEAP32[$info + 48 >> 2] = 1; //@line 862
    FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 28 >> 2] & 7]($2, $info, HEAP32[$adjustedPtr >> 2] | 0, 1); //@line 867
    if ((HEAP32[$info + 24 >> 2] | 0) == 1) {
     HEAP32[$adjustedPtr >> 2] = HEAP32[$info + 16 >> 2]; //@line 874
     $$0 = 1; //@line 875
    } else {
     $$0 = 0; //@line 877
    }
    $$1 = $$0; //@line 879
   }
  }
 }
 STACKTOP = sp; //@line 883
 return $$1 | 0; //@line 883
}
function _pad($f, $c, $w, $l, $fl) {
 $f = $f | 0;
 $c = $c | 0;
 $w = $w | 0;
 $l = $l | 0;
 $fl = $fl | 0;
 var $$0$lcssa6 = 0, $$02 = 0, $10 = 0, $14 = 0, $17 = 0, $18 = 0, $3 = 0, $7 = 0, $9 = 0, $pad = 0, sp = 0;
 sp = STACKTOP; //@line 11720
 STACKTOP = STACKTOP + 256 | 0; //@line 11721
 $pad = sp; //@line 11722
 do {
  if (($w | 0) > ($l | 0) & ($fl & 73728 | 0) == 0) {
   $3 = $w - $l | 0; //@line 11729
   _memset($pad | 0, $c | 0, ($3 >>> 0 > 256 ? 256 : $3) | 0) | 0; //@line 11732
   $7 = HEAP32[$f >> 2] | 0; //@line 11734
   $9 = ($7 & 32 | 0) == 0; //@line 11736
   if ($3 >>> 0 > 255) {
    $10 = $w - $l | 0; //@line 11738
    $$02 = $3; //@line 11739
    $17 = $7; //@line 11739
    $18 = $9; //@line 11739
    while (1) {
     if ($18) {
      ___fwritex($pad, 256, $f) | 0; //@line 11742
      $14 = HEAP32[$f >> 2] | 0; //@line 11744
     } else {
      $14 = $17; //@line 11746
     }
     $$02 = $$02 + -256 | 0; //@line 11748
     $18 = ($14 & 32 | 0) == 0; //@line 11751
     if ($$02 >>> 0 <= 255) {
      break;
     } else {
      $17 = $14; //@line 11753
     }
    }
    if ($18) {
     $$0$lcssa6 = $10 & 255; //@line 11760
    } else {
     break;
    }
   } else {
    if ($9) {
     $$0$lcssa6 = $3; //@line 11766
    } else {
     break;
    }
   }
   ___fwritex($pad, $$0$lcssa6, $f) | 0; //@line 11771
  }
 } while (0);
 STACKTOP = sp; //@line 11774
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $14 = 0, $20 = 0, $6 = 0;
 do {
  if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) {
   if ((HEAP32[$info + 4 >> 2] | 0) == ($current_ptr | 0)) {
    $6 = $info + 28 | 0; //@line 1680
    if ((HEAP32[$6 >> 2] | 0) != 1) {
     HEAP32[$6 >> 2] = $path_below; //@line 1684
    }
   }
  } else {
   if (($this | 0) == (HEAP32[$info >> 2] | 0)) {
    if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
     $14 = $info + 20 | 0; //@line 1695
     if ((HEAP32[$14 >> 2] | 0) != ($current_ptr | 0)) {
      HEAP32[$info + 32 >> 2] = $path_below; //@line 1700
      HEAP32[$14 >> 2] = $current_ptr; //@line 1701
      $20 = $info + 40 | 0; //@line 1702
      HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) + 1; //@line 1705
      if ((HEAP32[$info + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$info + 24 >> 2] | 0) == 2) {
        HEAP8[$info + 54 >> 0] = 1; //@line 1715
       }
      }
      HEAP32[$info + 44 >> 2] = 4; //@line 1719
      break;
     }
    }
    if (($path_below | 0) == 1) {
     HEAP32[$info + 32 >> 2] = 1; //@line 1726
    }
   }
  }
 } while (0);
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $$04 = 0, $0 = 0, $10 = 0, $12 = 0, $18 = 0, $2 = 0, $3 = 0, $__p$0$ph = 0, $__p$03 = 0;
 $0 = $__first; //@line 3292
 $2 = $__last - $0 | 0; //@line 3294
 $3 = $2 >> 2; //@line 3295
 if ($3 >>> 0 > 1073741807) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this); //@line 3298
 }
 if ($3 >>> 0 < 2) {
  HEAP8[$this >> 0] = $2 >>> 1; //@line 3305
  $__p$0$ph = $this + 4 | 0; //@line 3307
 } else {
  $10 = $3 + 4 & -4; //@line 3310
  $12 = __Znwj($10 << 2) | 0; //@line 3312
  HEAP32[$this + 8 >> 2] = $12; //@line 3314
  HEAP32[$this >> 2] = $10 | 1; //@line 3316
  HEAP32[$this + 4 >> 2] = $3; //@line 3318
  $__p$0$ph = $12; //@line 3319
 }
 $18 = ($__last - $0 | 0) >>> 2; //@line 3323
 if (($__first | 0) != ($__last | 0)) {
  $$04 = $__first; //@line 3326
  $__p$03 = $__p$0$ph; //@line 3326
  while (1) {
   HEAP32[$__p$03 >> 2] = HEAP32[$$04 >> 2]; //@line 3329
   $$04 = $$04 + 4 | 0; //@line 3330
   if (($$04 | 0) == ($__last | 0)) {
    break;
   } else {
    $__p$03 = $__p$03 + 4 | 0; //@line 3336
   }
  }
 }
 HEAP32[$__p$0$ph + ($18 << 2) >> 2] = 0; //@line 3341
 return;
}
function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $$0 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP; //@line 378
 STACKTOP = STACKTOP + 16 | 0; //@line 379
 $__p2 = sp; //@line 380
 do {
  if (($__a | 0) == ($__a_end | 0)) {
   HEAP32[$__err >> 2] = 4; //@line 384
   $$0 = 0; //@line 385
  } else {
   if ((HEAP8[$__a >> 0] | 0) == 45) {
    HEAP32[$__err >> 2] = 4; //@line 390
    $$0 = 0; //@line 391
    break;
   }
   $3 = ___errno_location() | 0; //@line 394
   $4 = HEAP32[$3 >> 2] | 0; //@line 395
   HEAP32[$3 >> 2] = 0; //@line 396
   $6 = _strtoull_l($__a, $__p2, $__base, __ZNSt3__16__clocEv() | 0) | 0; //@line 398
   $7 = tempRet0; //@line 399
   $8 = HEAP32[$3 >> 2] | 0; //@line 400
   if (!$8) {
    HEAP32[$3 >> 2] = $4; //@line 403
   }
   if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
    HEAP32[$__err >> 2] = 4; //@line 408
    $$0 = 0; //@line 409
    break;
   }
   if ($7 >>> 0 > 0 | ($7 | 0) == 0 & $6 >>> 0 > 65535 | ($8 | 0) == 34) {
    HEAP32[$__err >> 2] = 4; //@line 420
    $$0 = -1; //@line 421
    break;
   } else {
    $$0 = $6 & 65535; //@line 425
    break;
   }
  }
 } while (0);
 STACKTOP = sp; //@line 430
 return $$0 | 0; //@line 430
}
function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $$0 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP; //@line 258
 STACKTOP = STACKTOP + 16 | 0; //@line 259
 $__p2 = sp; //@line 260
 do {
  if (($__a | 0) == ($__a_end | 0)) {
   HEAP32[$__err >> 2] = 4; //@line 264
   $$0 = 0; //@line 265
  } else {
   if ((HEAP8[$__a >> 0] | 0) == 45) {
    HEAP32[$__err >> 2] = 4; //@line 270
    $$0 = 0; //@line 271
    break;
   }
   $3 = ___errno_location() | 0; //@line 274
   $4 = HEAP32[$3 >> 2] | 0; //@line 275
   HEAP32[$3 >> 2] = 0; //@line 276
   $6 = _strtoull_l($__a, $__p2, $__base, __ZNSt3__16__clocEv() | 0) | 0; //@line 278
   $7 = tempRet0; //@line 279
   $8 = HEAP32[$3 >> 2] | 0; //@line 280
   if (!$8) {
    HEAP32[$3 >> 2] = $4; //@line 283
   }
   if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
    HEAP32[$__err >> 2] = 4; //@line 288
    $$0 = 0; //@line 289
    break;
   }
   if ($7 >>> 0 > 0 | ($7 | 0) == 0 & $6 >>> 0 > 4294967295 | ($8 | 0) == 34) {
    HEAP32[$__err >> 2] = 4; //@line 300
    $$0 = -1; //@line 301
    break;
   } else {
    $$0 = $6; //@line 304
    break;
   }
  }
 } while (0);
 STACKTOP = sp; //@line 309
 return $$0 | 0; //@line 309
}
function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $$0 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP; //@line 318
 STACKTOP = STACKTOP + 16 | 0; //@line 319
 $__p2 = sp; //@line 320
 do {
  if (($__a | 0) == ($__a_end | 0)) {
   HEAP32[$__err >> 2] = 4; //@line 324
   $$0 = 0; //@line 325
  } else {
   if ((HEAP8[$__a >> 0] | 0) == 45) {
    HEAP32[$__err >> 2] = 4; //@line 330
    $$0 = 0; //@line 331
    break;
   }
   $3 = ___errno_location() | 0; //@line 334
   $4 = HEAP32[$3 >> 2] | 0; //@line 335
   HEAP32[$3 >> 2] = 0; //@line 336
   $6 = _strtoull_l($__a, $__p2, $__base, __ZNSt3__16__clocEv() | 0) | 0; //@line 338
   $7 = tempRet0; //@line 339
   $8 = HEAP32[$3 >> 2] | 0; //@line 340
   if (!$8) {
    HEAP32[$3 >> 2] = $4; //@line 343
   }
   if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
    HEAP32[$__err >> 2] = 4; //@line 348
    $$0 = 0; //@line 349
    break;
   }
   if ($7 >>> 0 > 0 | ($7 | 0) == 0 & $6 >>> 0 > 4294967295 | ($8 | 0) == 34) {
    HEAP32[$__err >> 2] = 4; //@line 360
    $$0 = -1; //@line 361
    break;
   } else {
    $$0 = $6; //@line 364
    break;
   }
  }
 } while (0);
 STACKTOP = sp; //@line 369
 return $$0 | 0; //@line 369
}
function ___cxx_global_array_dtor46($0) {
 $0 = $0 | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10476); //@line 17061
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10464); //@line 17062
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10452); //@line 17063
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10440); //@line 17064
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10428); //@line 17065
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10416); //@line 17066
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10404); //@line 17067
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10392); //@line 17068
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10380); //@line 17069
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10368); //@line 17070
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10356); //@line 17071
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10344); //@line 17072
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10332); //@line 17073
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(10320); //@line 17074
 return;
}
function ___cxx_global_array_dtor($0) {
 $0 = $0 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10304); //@line 17041
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10292); //@line 17042
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10280); //@line 17043
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10268); //@line 17044
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10256); //@line 17045
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10244); //@line 17046
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10232); //@line 17047
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10220); //@line 17048
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10208); //@line 17049
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10196); //@line 17050
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10184); //@line 17051
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10172); //@line 17052
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10160); //@line 17053
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(10148); //@line 17054
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this, $__n, $__c) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__c = $__c | 0;
 var $1 = 0, $15 = 0, $16 = 0, $21 = 0, $27 = 0, $28 = 0, $4 = 0, $8 = 0;
 if ($__n) {
  $1 = HEAP8[$this >> 0] | 0; //@line 2374
  if (!($1 & 1)) {
   $15 = 10; //@line 2378
   $8 = $1; //@line 2378
  } else {
   $4 = HEAP32[$this >> 2] | 0; //@line 2380
   $15 = ($4 & -2) + -1 | 0; //@line 2384
   $8 = $4 & 255; //@line 2384
  }
  if (!($8 & 1)) {
   $16 = ($8 & 255) >>> 1; //@line 2391
  } else {
   $16 = HEAP32[$this + 4 >> 2] | 0; //@line 2395
  }
  if (($15 - $16 | 0) >>> 0 < $__n >>> 0) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this, $15, $__n - $15 + $16 | 0, $16, $16, 0, 0); //@line 2402
   $21 = HEAP8[$this >> 0] | 0; //@line 2404
  } else {
   $21 = $8; //@line 2406
  }
  if (!($21 & 1)) {
   $27 = $this + 1 | 0; //@line 2412
  } else {
   $27 = HEAP32[$this + 8 >> 2] | 0; //@line 2416
  }
  _memset($27 + $16 | 0, $__c | 0, $__n | 0) | 0; //@line 2419
  $28 = $16 + $__n | 0; //@line 2420
  if (!(HEAP8[$this >> 0] & 1)) {
   HEAP8[$this >> 0] = $28 << 1; //@line 2427
  } else {
   HEAP32[$this + 4 >> 2] = $28; //@line 2430
  }
  HEAP8[$27 + $28 >> 0] = 0; //@line 2433
 }
 return $this | 0; //@line 2435
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $10 = 0, $25 = 0, $6 = 0, $7 = 0, $9 = 0, $__s = 0, sp = 0;
 sp = STACKTOP; //@line 4385
 STACKTOP = STACKTOP + 16 | 0; //@line 4386
 $__s = sp; //@line 4387
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($__s, $this); //@line 4388
 L1 : do {
  if (HEAP8[$__s >> 0] | 0) {
   $6 = HEAP32[$this + ((HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0; //@line 4398
   $7 = $6; //@line 4399
   do {
    if ($6) {
     $9 = $7 + 24 | 0; //@line 4403
     $10 = HEAP32[$9 >> 2] | 0; //@line 4404
     if (($10 | 0) == (HEAP32[$7 + 28 >> 2] | 0)) {
      if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[$6 >> 2] | 0) + 52 >> 2] & 15]($7, $__c & 255) | 0) == -1) {
       break;
      } else {
       break L1;
      }
     } else {
      HEAP32[$9 >> 2] = $10 + 1; //@line 4423
      HEAP8[$10 >> 0] = $__c; //@line 4424
      break L1;
     }
    }
   } while (0);
   $25 = $this + ((HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 16) | 0; //@line 4433
   HEAP32[$25 >> 2] = HEAP32[$25 >> 2] | 1; //@line 4436
  }
 } while (0);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s); //@line 4439
 STACKTOP = sp; //@line 4440
 return $this | 0; //@line 4440
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $$04 = 0, $0 = 0, $10 = 0, $15 = 0, $2 = 0, $9 = 0, $__p$0$ph = 0, $__p$03 = 0;
 $0 = $__first; //@line 3236
 $2 = $__last - $0 | 0; //@line 3238
 if ($2 >>> 0 > 4294967279) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this); //@line 3241
 }
 if ($2 >>> 0 < 11) {
  HEAP8[$this >> 0] = $2 << 1; //@line 3248
  $__p$0$ph = $this + 1 | 0; //@line 3250
 } else {
  $9 = $2 + 16 & -16; //@line 3253
  $10 = __Znwj($9) | 0; //@line 3254
  HEAP32[$this + 8 >> 2] = $10; //@line 3256
  HEAP32[$this >> 2] = $9 | 1; //@line 3258
  HEAP32[$this + 4 >> 2] = $2; //@line 3260
  $__p$0$ph = $10; //@line 3261
 }
 $15 = $__last - $0 | 0; //@line 3264
 if (($__first | 0) != ($__last | 0)) {
  $$04 = $__first; //@line 3267
  $__p$03 = $__p$0$ph; //@line 3267
  while (1) {
   HEAP8[$__p$03 >> 0] = HEAP8[$$04 >> 0] | 0; //@line 3270
   $$04 = $$04 + 1 | 0; //@line 3271
   if (($$04 | 0) == ($__last | 0)) {
    break;
   } else {
    $__p$03 = $__p$03 + 1 | 0; //@line 3277
   }
  }
 }
 HEAP8[$__p$0$ph + $15 >> 0] = 0; //@line 3282
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $10 = 0, $14 = 0, $27 = 0, $3 = 0, $7 = 0, $9 = 0;
 $0 = HEAP8[$this >> 0] | 0; //@line 2264
 if (!($0 & 1)) {
  $7 = 10; //@line 2268
  $9 = $0; //@line 2268
 } else {
  $3 = HEAP32[$this >> 2] | 0; //@line 2270
  $7 = ($3 & -2) + -1 | 0; //@line 2274
  $9 = $3 & 255; //@line 2274
 }
 $10 = ($9 & 1) == 0; //@line 2278
 do {
  if ($7 >>> 0 < $__n >>> 0) {
   if ($10) {
    $27 = ($9 & 255) >>> 1; //@line 2284
   } else {
    $27 = HEAP32[$this + 4 >> 2] | 0; //@line 2288
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $7, $__n - $7 | 0, $27, 0, $27, $__n, $__s); //@line 2291
  } else {
   if ($10) {
    $14 = $this + 1 | 0; //@line 2295
   } else {
    $14 = HEAP32[$this + 8 >> 2] | 0; //@line 2299
   }
   _memmove($14 | 0, $__s | 0, $__n | 0) | 0; //@line 2301
   HEAP8[$14 + $__n >> 0] = 0; //@line 2303
   if (!(HEAP8[$this >> 0] & 1)) {
    HEAP8[$this >> 0] = $__n << 1; //@line 2310
    break;
   } else {
    HEAP32[$this + 4 >> 2] = $__n; //@line 2314
    break;
   }
  }
 } while (0);
 return $this | 0; //@line 2319
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $10 = 0, $14 = 0, $27 = 0, $3 = 0, $7 = 0, $9 = 0;
 $0 = HEAP8[$this >> 0] | 0; //@line 2854
 if (!($0 & 1)) {
  $7 = 1; //@line 2858
  $9 = $0; //@line 2858
 } else {
  $3 = HEAP32[$this >> 2] | 0; //@line 2860
  $7 = ($3 & -2) + -1 | 0; //@line 2864
  $9 = $3 & 255; //@line 2864
 }
 $10 = ($9 & 1) == 0; //@line 2868
 do {
  if ($7 >>> 0 < $__n >>> 0) {
   if ($10) {
    $27 = ($9 & 255) >>> 1; //@line 2874
   } else {
    $27 = HEAP32[$this + 4 >> 2] | 0; //@line 2878
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this, $7, $__n - $7 | 0, $27, 0, $27, $__n, $__s); //@line 2881
  } else {
   if ($10) {
    $14 = $this + 4 | 0; //@line 2885
   } else {
    $14 = HEAP32[$this + 8 >> 2] | 0; //@line 2889
   }
   _wmemmove($14, $__s, $__n) | 0; //@line 2891
   HEAP32[$14 + ($__n << 2) >> 2] = 0; //@line 2893
   if (!(HEAP8[$this >> 0] & 1)) {
    HEAP8[$this >> 0] = $__n << 1; //@line 2900
    break;
   } else {
    HEAP32[$this + 4 >> 2] = $__n; //@line 2904
    break;
   }
  }
 } while (0);
 return $this | 0; //@line 2909
}
function _fputc($c, $f) {
 $c = $c | 0;
 $f = $f | 0;
 var $$0 = 0, $10 = 0, $22 = 0, $23 = 0, $31 = 0, $9 = 0, label = 0;
 if ((HEAP32[$f + 76 >> 2] | 0) < 0) {
  label = 3; //@line 6937
 } else {
  if (!(___lockfile($f) | 0)) {
   label = 3; //@line 6942
  } else {
   if ((HEAP8[$f + 75 >> 0] | 0) == ($c | 0)) {
    label = 10; //@line 6949
   } else {
    $22 = $f + 20 | 0; //@line 6951
    $23 = HEAP32[$22 >> 2] | 0; //@line 6952
    if ($23 >>> 0 < (HEAP32[$f + 16 >> 2] | 0) >>> 0) {
     HEAP32[$22 >> 2] = $23 + 1; //@line 6959
     HEAP8[$23 >> 0] = $c; //@line 6960
     $31 = $c & 255; //@line 6962
    } else {
     label = 10; //@line 6964
    }
   }
   if ((label | 0) == 10) {
    $31 = ___overflow($f, $c) | 0; //@line 6969
   }
   ___unlockfile($f); //@line 6971
   $$0 = $31; //@line 6972
  }
 }
 do {
  if ((label | 0) == 3) {
   if ((HEAP8[$f + 75 >> 0] | 0) != ($c | 0)) {
    $9 = $f + 20 | 0; //@line 6982
    $10 = HEAP32[$9 >> 2] | 0; //@line 6983
    if ($10 >>> 0 < (HEAP32[$f + 16 >> 2] | 0) >>> 0) {
     HEAP32[$9 >> 2] = $10 + 1; //@line 6990
     HEAP8[$10 >> 0] = $c; //@line 6991
     $$0 = $c & 255; //@line 6993
     break;
    }
   }
   $$0 = ___overflow($f, $c) | 0; //@line 6998
  }
 } while (0);
 return $$0 | 0; //@line 7001
}
function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg$result, $__iob, $__atoms, $__decimal_point, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $0 = 0, $1 = 0, $5 = 0, $__loc = 0, sp = 0;
 sp = STACKTOP; //@line 6701
 STACKTOP = STACKTOP + 16 | 0; //@line 6702
 $__loc = sp; //@line 6703
 $0 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 6704
 HEAP32[$__loc >> 2] = $0; //@line 6705
 $1 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 9320) | 0; //@line 6706
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$1 >> 2] | 0) + 48 >> 2] & 7]($1, 20196, 20228, $__atoms) | 0; //@line 6710
 $5 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 9476) | 0; //@line 6711
 HEAP32[$__decimal_point >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] & 63]($5) | 0; //@line 6716
 HEAP32[$__thousands_sep >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 16 >> 2] & 63]($5) | 0; //@line 6721
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 63]($agg$result, $5); //@line 6725
 __ZNSt3__114__shared_count16__release_sharedEv($0) | 0; //@line 6726
 STACKTOP = sp; //@line 6727
 return;
}
function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg$result, $__iob, $__atoms, $__decimal_point, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $0 = 0, $1 = 0, $5 = 0, $__loc = 0, sp = 0;
 sp = STACKTOP; //@line 6419
 STACKTOP = STACKTOP + 16 | 0; //@line 6420
 $__loc = sp; //@line 6421
 $0 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 6422
 HEAP32[$__loc >> 2] = $0; //@line 6423
 $1 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 9328) | 0; //@line 6424
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$1 >> 2] | 0) + 32 >> 2] & 7]($1, 20196, 20228, $__atoms) | 0; //@line 6428
 $5 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 9468) | 0; //@line 6429
 HEAP8[$__decimal_point >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] & 63]($5) | 0; //@line 6434
 HEAP8[$__thousands_sep >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 16 >> 2] & 63]($5) | 0; //@line 6439
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 63]($agg$result, $5); //@line 6443
 __ZNSt3__114__shared_count16__release_sharedEv($0) | 0; //@line 6444
 STACKTOP = sp; //@line 6445
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$01 = 0, $0 = 0, $1 = 0, $11 = 0, $13 = 0, $3 = 0, $__i$0$lcssa = 0, $__i$02 = 0, $storemerge = 0;
 $0 = $this + 12 | 0; //@line 3805
 $1 = $this + 16 | 0; //@line 3806
 L1 : do {
  if (($__n | 0) > 0) {
   $$01 = $__s; //@line 3810
   $__i$02 = 0; //@line 3810
   while (1) {
    $3 = HEAP32[$0 >> 2] | 0; //@line 3812
    if ($3 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $3 + 4; //@line 3817
     $storemerge = HEAP32[$3 >> 2] | 0; //@line 3819
    } else {
     $11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 40 >> 2] & 63]($this) | 0; //@line 3824
     if (($11 | 0) == -1) {
      $__i$0$lcssa = $__i$02; //@line 3827
      break L1;
     } else {
      $storemerge = $11; //@line 3830
     }
    }
    HEAP32[$$01 >> 2] = $storemerge; //@line 3833
    $13 = $__i$02 + 1 | 0; //@line 3834
    if (($13 | 0) < ($__n | 0)) {
     $$01 = $$01 + 4 | 0; //@line 3838
     $__i$02 = $13; //@line 3838
    } else {
     $__i$0$lcssa = $13; //@line 3840
     break;
    }
   }
  } else {
   $__i$0$lcssa = 0; //@line 3845
  }
 } while (0);
 return $__i$0$lcssa | 0; //@line 3848
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$01 = 0, $0 = 0, $1 = 0, $11 = 0, $14 = 0, $3 = 0, $__i$0$lcssa = 0, $__i$02 = 0, $storemerge = 0;
 $0 = $this + 12 | 0; //@line 3557
 $1 = $this + 16 | 0; //@line 3558
 L1 : do {
  if (($__n | 0) > 0) {
   $$01 = $__s; //@line 3562
   $__i$02 = 0; //@line 3562
   while (1) {
    $3 = HEAP32[$0 >> 2] | 0; //@line 3564
    if ($3 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $3 + 1; //@line 3569
     $storemerge = HEAP8[$3 >> 0] | 0; //@line 3571
    } else {
     $11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 40 >> 2] & 63]($this) | 0; //@line 3576
     if (($11 | 0) == -1) {
      $__i$0$lcssa = $__i$02; //@line 3579
      break L1;
     }
     $storemerge = $11 & 255; //@line 3583
    }
    HEAP8[$$01 >> 0] = $storemerge; //@line 3585
    $14 = $__i$02 + 1 | 0; //@line 3586
    if (($14 | 0) < ($__n | 0)) {
     $$01 = $$01 + 1 | 0; //@line 3590
     $__i$02 = $14; //@line 3590
    } else {
     $__i$0$lcssa = $14; //@line 3592
     break;
    }
   }
  } else {
   $__i$0$lcssa = 0; //@line 3597
  }
 } while (0);
 return $__i$0$lcssa | 0; //@line 3600
}
function __ZNSt3__111__stdoutbufIwE4syncEv($this) {
 $this = $this | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__extbe = 0, $__extbuf = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1101
 STACKTOP = STACKTOP + 16 | 0; //@line 1102
 $__extbuf = sp + 8 | 0; //@line 1103
 $__extbe = sp; //@line 1104
 $0 = $this + 36 | 0; //@line 1105
 $1 = $this + 40 | 0; //@line 1106
 $2 = $__extbuf + 8 | 0; //@line 1107
 $3 = $__extbuf; //@line 1108
 $4 = $this + 32 | 0; //@line 1109
 L1 : while (1) {
  $5 = HEAP32[$0 >> 2] | 0; //@line 1111
  $10 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 31]($5, HEAP32[$1 >> 2] | 0, $__extbuf, $2, $__extbe) | 0; //@line 1116
  $13 = (HEAP32[$__extbe >> 2] | 0) - $3 | 0; //@line 1119
  if ((_fwrite($__extbuf, 1, $13, HEAP32[$4 >> 2] | 0) | 0) != ($13 | 0)) {
   $$0 = -1; //@line 1124
   break;
  }
  switch ($10 | 0) {
  case 1:
   {
    break;
   }
  case 2:
   {
    $$0 = -1; //@line 1132
    break L1;
    break;
   }
  default:
   {
    label = 4; //@line 1137
    break L1;
   }
  }
 }
 if ((label | 0) == 4) {
  $$0 = ((_fflush(HEAP32[$4 >> 2] | 0) | 0) != 0) << 31 >> 31; //@line 1147
 }
 STACKTOP = sp; //@line 1149
 return $$0 | 0; //@line 1149
}
function __ZNSt3__111__stdoutbufIcE4syncEv($this) {
 $this = $this | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__extbe = 0, $__extbuf = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1638
 STACKTOP = STACKTOP + 16 | 0; //@line 1639
 $__extbuf = sp + 8 | 0; //@line 1640
 $__extbe = sp; //@line 1641
 $0 = $this + 36 | 0; //@line 1642
 $1 = $this + 40 | 0; //@line 1643
 $2 = $__extbuf + 8 | 0; //@line 1644
 $3 = $__extbuf; //@line 1645
 $4 = $this + 32 | 0; //@line 1646
 L1 : while (1) {
  $5 = HEAP32[$0 >> 2] | 0; //@line 1648
  $10 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 31]($5, HEAP32[$1 >> 2] | 0, $__extbuf, $2, $__extbe) | 0; //@line 1653
  $13 = (HEAP32[$__extbe >> 2] | 0) - $3 | 0; //@line 1656
  if ((_fwrite($__extbuf, 1, $13, HEAP32[$4 >> 2] | 0) | 0) != ($13 | 0)) {
   $$0 = -1; //@line 1661
   break;
  }
  switch ($10 | 0) {
  case 1:
   {
    break;
   }
  case 2:
   {
    $$0 = -1; //@line 1669
    break L1;
    break;
   }
  default:
   {
    label = 4; //@line 1674
    break L1;
   }
  }
 }
 if ((label | 0) == 4) {
  $$0 = ((_fflush(HEAP32[$4 >> 2] | 0) | 0) != 0) << 31 >> 31; //@line 1684
 }
 STACKTOP = sp; //@line 1686
 return $$0 | 0; //@line 1686
}
function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this, $__lo1, $__hi1, $__lo2, $__hi2) {
 $this = $this | 0;
 $__lo1 = $__lo1 | 0;
 $__hi1 = $__hi1 | 0;
 $__lo2 = $__lo2 | 0;
 $__hi2 = $__hi2 | 0;
 var $$0 = 0, $$018 = 0, $$02$lcssa = 0, $$027 = 0, $2 = 0, $3 = 0, $6 = 0, label = 0;
 L1 : do {
  if (($__lo2 | 0) == ($__hi2 | 0)) {
   $$02$lcssa = $__lo1; //@line 4615
   label = 6; //@line 4616
  } else {
   $$018 = $__lo2; //@line 4618
   $$027 = $__lo1; //@line 4618
   while (1) {
    if (($$027 | 0) == ($__hi1 | 0)) {
     $$0 = -1; //@line 4622
     break L1;
    }
    $2 = HEAP8[$$027 >> 0] | 0; //@line 4625
    $3 = HEAP8[$$018 >> 0] | 0; //@line 4626
    if ($2 << 24 >> 24 < $3 << 24 >> 24) {
     $$0 = -1; //@line 4629
     break L1;
    }
    if ($3 << 24 >> 24 < $2 << 24 >> 24) {
     $$0 = 1; //@line 4634
     break L1;
    }
    $6 = $$027 + 1 | 0; //@line 4637
    $$018 = $$018 + 1 | 0; //@line 4638
    if (($$018 | 0) == ($__hi2 | 0)) {
     $$02$lcssa = $6; //@line 4641
     label = 6; //@line 4642
     break;
    } else {
     $$027 = $6; //@line 4645
    }
   }
  }
 } while (0);
 if ((label | 0) == 6) {
  $$0 = ($$02$lcssa | 0) != ($__hi1 | 0) & 1; //@line 4653
 }
 return $$0 | 0; //@line 4655
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $5 = 0, $6 = 0, $9 = 0, $p$0 = 0;
 L1 : do {
  if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $info, $adjustedPtr, $path_below); //@line 1005
  } else {
   $5 = HEAP32[$this + 12 >> 2] | 0; //@line 1009
   $6 = $this + 16 + ($5 << 3) | 0; //@line 1010
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this + 16 | 0, $info, $adjustedPtr, $path_below); //@line 1011
   if (($5 | 0) > 1) {
    $9 = $info + 54 | 0; //@line 1015
    $p$0 = $this + 24 | 0; //@line 1016
    do {
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0, $info, $adjustedPtr, $path_below); //@line 1018
     if (HEAP8[$9 >> 0] | 0) {
      break L1;
     }
     $p$0 = $p$0 + 8 | 0; //@line 1024
    } while ($p$0 >>> 0 < $6 >>> 0);
   }
  }
 } while (0);
 return;
}
function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this, $__lo1, $__hi1, $__lo2, $__hi2) {
 $this = $this | 0;
 $__lo1 = $__lo1 | 0;
 $__hi1 = $__hi1 | 0;
 $__lo2 = $__lo2 | 0;
 $__hi2 = $__hi2 | 0;
 var $$0 = 0, $$018 = 0, $$02$lcssa = 0, $$027 = 0, $2 = 0, $3 = 0, $6 = 0, label = 0;
 L1 : do {
  if (($__lo2 | 0) == ($__hi2 | 0)) {
   $$02$lcssa = $__lo1; //@line 4723
   label = 6; //@line 4724
  } else {
   $$018 = $__lo2; //@line 4726
   $$027 = $__lo1; //@line 4726
   while (1) {
    if (($$027 | 0) == ($__hi1 | 0)) {
     $$0 = -1; //@line 4730
     break L1;
    }
    $2 = HEAP32[$$027 >> 2] | 0; //@line 4733
    $3 = HEAP32[$$018 >> 2] | 0; //@line 4734
    if (($2 | 0) < ($3 | 0)) {
     $$0 = -1; //@line 4737
     break L1;
    }
    if (($3 | 0) < ($2 | 0)) {
     $$0 = 1; //@line 4742
     break L1;
    }
    $6 = $$027 + 4 | 0; //@line 4745
    $$018 = $$018 + 4 | 0; //@line 4746
    if (($$018 | 0) == ($__hi2 | 0)) {
     $$02$lcssa = $6; //@line 4749
     label = 6; //@line 4750
     break;
    } else {
     $$027 = $6; //@line 4753
    }
   }
  }
 } while (0);
 if ((label | 0) == 6) {
  $$0 = ($$02$lcssa | 0) != ($__hi1 | 0) & 1; //@line 4761
 }
 return $$0 | 0; //@line 4763
}
function ___overflow($f, $_c) {
 $f = $f | 0;
 $_c = $_c | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $6 = 0, $7 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6329
 STACKTOP = STACKTOP + 16 | 0; //@line 6330
 $c = sp; //@line 6331
 $0 = $_c & 255; //@line 6332
 HEAP8[$c >> 0] = $0; //@line 6333
 $1 = $f + 16 | 0; //@line 6334
 $2 = HEAP32[$1 >> 2] | 0; //@line 6335
 if (!$2) {
  if (!(___towrite($f) | 0)) {
   $9 = HEAP32[$1 >> 2] | 0; //@line 6342
   label = 4; //@line 6343
  } else {
   $$0 = -1; //@line 6345
  }
 } else {
  $9 = $2; //@line 6348
  label = 4; //@line 6349
 }
 do {
  if ((label | 0) == 4) {
   $6 = $f + 20 | 0; //@line 6353
   $7 = HEAP32[$6 >> 2] | 0; //@line 6354
   if ($7 >>> 0 < $9 >>> 0) {
    $10 = $_c & 255; //@line 6357
    if (($10 | 0) != (HEAP8[$f + 75 >> 0] | 0)) {
     HEAP32[$6 >> 2] = $7 + 1; //@line 6364
     HEAP8[$7 >> 0] = $0; //@line 6365
     $$0 = $10; //@line 6366
     break;
    }
   }
   if ((FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, $c, 1) | 0) == 1) {
    $$0 = HEAPU8[$c >> 0] | 0; //@line 6377
   } else {
    $$0 = -1; //@line 6379
   }
  }
 } while (0);
 STACKTOP = sp; //@line 6383
 return $$0 | 0; //@line 6383
}
function __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b, $__n, $__e) {
 $__b = $__b | 0;
 $__n = $__n | 0;
 $__e = $__e | 0;
 var $$ = 0, $$pr = 0, $0 = 0, $13 = 0, $15 = 0, $2 = 0, $23 = 0, $4 = 0, $6 = 0, $7 = 0;
 $0 = $__b + 4 | 0; //@line 14789
 $2 = (HEAP32[$0 >> 2] | 0) != 98; //@line 14791
 $4 = HEAP32[$__b >> 2] | 0; //@line 14793
 $6 = $4; //@line 14795
 $7 = (HEAP32[$__e >> 2] | 0) - $6 | 0; //@line 14796
 $$ = $7 >>> 0 < 2147483647 ? $7 << 1 : -1; //@line 14799
 $13 = (HEAP32[$__n >> 2] | 0) - $6 >> 2; //@line 14803
 $15 = _realloc($2 ? $4 : 0, $$) | 0; //@line 14805
 if (!$15) {
  __ZSt17__throw_bad_allocv(); //@line 14808
 }
 if ($2) {
  HEAP32[$__b >> 2] = $15; //@line 14813
  $23 = $15; //@line 14814
 } else {
  $$pr = HEAP32[$__b >> 2] | 0; //@line 14816
  HEAP32[$__b >> 2] = $15; //@line 14818
  if (!$$pr) {
   $23 = $15; //@line 14821
  } else {
   FUNCTION_TABLE_vi[HEAP32[$0 >> 2] & 127]($$pr); //@line 14824
   $23 = HEAP32[$__b >> 2] | 0; //@line 14826
  }
 }
 HEAP32[$0 >> 2] = 109; //@line 14829
 HEAP32[$__n >> 2] = $23 + ($13 << 2); //@line 14832
 HEAP32[$__e >> 2] = (HEAP32[$__b >> 2] | 0) + ($$ >>> 2 << 2); //@line 14835
 return;
}
function __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b, $__n, $__e) {
 $__b = $__b | 0;
 $__n = $__n | 0;
 $__e = $__e | 0;
 var $$ = 0, $$pr = 0, $0 = 0, $13 = 0, $15 = 0, $2 = 0, $23 = 0, $4 = 0, $6 = 0, $7 = 0;
 $0 = $__b + 4 | 0; //@line 14642
 $2 = (HEAP32[$0 >> 2] | 0) != 98; //@line 14644
 $4 = HEAP32[$__b >> 2] | 0; //@line 14646
 $6 = $4; //@line 14648
 $7 = (HEAP32[$__e >> 2] | 0) - $6 | 0; //@line 14649
 $$ = $7 >>> 0 < 2147483647 ? $7 << 1 : -1; //@line 14652
 $13 = (HEAP32[$__n >> 2] | 0) - $6 >> 2; //@line 14656
 $15 = _realloc($2 ? $4 : 0, $$) | 0; //@line 14658
 if (!$15) {
  __ZSt17__throw_bad_allocv(); //@line 14661
 }
 if ($2) {
  HEAP32[$__b >> 2] = $15; //@line 14666
  $23 = $15; //@line 14667
 } else {
  $$pr = HEAP32[$__b >> 2] | 0; //@line 14669
  HEAP32[$__b >> 2] = $15; //@line 14671
  if (!$$pr) {
   $23 = $15; //@line 14674
  } else {
   FUNCTION_TABLE_vi[HEAP32[$0 >> 2] & 127]($$pr); //@line 14677
   $23 = HEAP32[$__b >> 2] | 0; //@line 14679
  }
 }
 HEAP32[$0 >> 2] = 109; //@line 14682
 HEAP32[$__n >> 2] = $23 + ($13 << 2); //@line 14685
 HEAP32[$__e >> 2] = (HEAP32[$__b >> 2] | 0) + ($$ >>> 2 << 2); //@line 14688
 return;
}
function _strerror($e) {
 $e = $e | 0;
 var $$lcssa = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$12 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0;
 $i$03 = 0; //@line 2115
 while (1) {
  if ((HEAPU8[14892 + $i$03 >> 0] | 0) == ($e | 0)) {
   $i$03$lcssa = $i$03; //@line 2122
   label = 2; //@line 2123
   break;
  }
  $i$03 = $i$03 + 1 | 0; //@line 2126
  if (($i$03 | 0) == 87) {
   $i$12 = 87; //@line 2129
   $s$01 = 14980; //@line 2129
   label = 5; //@line 2130
   break;
  }
 }
 if ((label | 0) == 2) {
  if (!$i$03$lcssa) {
   $s$0$lcssa = 14980; //@line 2139
  } else {
   $i$12 = $i$03$lcssa; //@line 2141
   $s$01 = 14980; //@line 2141
   label = 5; //@line 2142
  }
 }
 if ((label | 0) == 5) {
  while (1) {
   label = 0; //@line 2147
   $s$1 = $s$01; //@line 2148
   while (1) {
    $9 = $s$1 + 1 | 0; //@line 2152
    if (!(HEAP8[$s$1 >> 0] | 0)) {
     $$lcssa = $9; //@line 2154
     break;
    } else {
     $s$1 = $9; //@line 2157
    }
   }
   $i$12 = $i$12 + -1 | 0; //@line 2160
   if (!$i$12) {
    $s$0$lcssa = $$lcssa; //@line 2163
    break;
   } else {
    $s$01 = $$lcssa; //@line 2166
    label = 5; //@line 2167
   }
  }
 }
 return $s$0$lcssa | 0; //@line 2171
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $6 = 0;
 $0 = HEAP32[$this >> 2] | 0; //@line 17324
 $1 = $this + 4 | 0; //@line 17325
 $3 = $__v + 4 | 0; //@line 17327
 $6 = (HEAP32[$1 >> 2] | 0) - $0 | 0; //@line 17330
 $10 = (HEAP32[$3 >> 2] | 0) + (0 - ($6 >> 2) << 2) | 0; //@line 17334
 HEAP32[$3 >> 2] = $10; //@line 17335
 _memcpy($10 | 0, $0 | 0, $6 | 0) | 0; //@line 17336
 $11 = HEAP32[$this >> 2] | 0; //@line 17337
 HEAP32[$this >> 2] = HEAP32[$3 >> 2]; //@line 17339
 HEAP32[$3 >> 2] = $11; //@line 17340
 $13 = $__v + 8 | 0; //@line 17341
 $14 = HEAP32[$1 >> 2] | 0; //@line 17342
 HEAP32[$1 >> 2] = HEAP32[$13 >> 2]; //@line 17344
 HEAP32[$13 >> 2] = $14; //@line 17345
 $16 = $this + 8 | 0; //@line 17346
 $17 = $__v + 12 | 0; //@line 17347
 $18 = HEAP32[$16 >> 2] | 0; //@line 17348
 HEAP32[$16 >> 2] = HEAP32[$17 >> 2]; //@line 17350
 HEAP32[$17 >> 2] = $18; //@line 17351
 HEAP32[$__v >> 2] = HEAP32[$3 >> 2]; //@line 17353
 return;
}
function __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b, $__n, $__e) {
 $__b = $__b | 0;
 $__n = $__n | 0;
 $__e = $__e | 0;
 var $$ = 0, $$pr = 0, $0 = 0, $12 = 0, $14 = 0, $2 = 0, $21 = 0, $4 = 0, $6 = 0, $7 = 0;
 $0 = $__b + 4 | 0; //@line 14588
 $2 = (HEAP32[$0 >> 2] | 0) != 98; //@line 14590
 $4 = HEAP32[$__b >> 2] | 0; //@line 14592
 $6 = $4; //@line 14594
 $7 = (HEAP32[$__e >> 2] | 0) - $6 | 0; //@line 14595
 $$ = $7 >>> 0 < 2147483647 ? $7 << 1 : -1; //@line 14598
 $12 = (HEAP32[$__n >> 2] | 0) - $6 | 0; //@line 14601
 $14 = _realloc($2 ? $4 : 0, $$) | 0; //@line 14603
 if (!$14) {
  __ZSt17__throw_bad_allocv(); //@line 14606
 }
 if ($2) {
  HEAP32[$__b >> 2] = $14; //@line 14611
  $21 = $14; //@line 14612
 } else {
  $$pr = HEAP32[$__b >> 2] | 0; //@line 14614
  HEAP32[$__b >> 2] = $14; //@line 14616
  if (!$$pr) {
   $21 = $14; //@line 14619
  } else {
   FUNCTION_TABLE_vi[HEAP32[$0 >> 2] & 127]($$pr); //@line 14622
   $21 = HEAP32[$__b >> 2] | 0; //@line 14624
  }
 }
 HEAP32[$0 >> 2] = 109; //@line 14627
 HEAP32[$__n >> 2] = $21 + $12; //@line 14629
 HEAP32[$__e >> 2] = (HEAP32[$__b >> 2] | 0) + $$; //@line 14632
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 11958
 STACKTOP = STACKTOP + 16 | 0; //@line 11959
 $$byval_copy = sp + 8 | 0; //@line 11960
 $0 = sp + 4 | 0; //@line 11961
 $1 = sp; //@line 11962
 $2 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 11963
 HEAP32[$0 >> 2] = $2; //@line 11964
 $3 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 9320) | 0; //@line 11965
 __ZNSt3__114__shared_count16__release_sharedEv($2) | 0; //@line 11966
 $4 = $__tm + 16 | 0; //@line 11967
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2]; //@line 11969
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 11970
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $4, $__b, $$byval_copy, $__err, $3); //@line 11971
 STACKTOP = sp; //@line 11973
 return HEAP32[$__b >> 2] | 0; //@line 11973
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 11901
 STACKTOP = STACKTOP + 16 | 0; //@line 11902
 $$byval_copy = sp + 8 | 0; //@line 11903
 $0 = sp + 4 | 0; //@line 11904
 $1 = sp; //@line 11905
 $2 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 11906
 HEAP32[$0 >> 2] = $2; //@line 11907
 $3 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 9320) | 0; //@line 11908
 __ZNSt3__114__shared_count16__release_sharedEv($2) | 0; //@line 11909
 $4 = $__tm + 24 | 0; //@line 11910
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2]; //@line 11912
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 11913
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $4, $__b, $$byval_copy, $__err, $3); //@line 11914
 STACKTOP = sp; //@line 11916
 return HEAP32[$__b >> 2] | 0; //@line 11916
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 10117
 STACKTOP = STACKTOP + 16 | 0; //@line 10118
 $$byval_copy = sp + 8 | 0; //@line 10119
 $0 = sp + 4 | 0; //@line 10120
 $1 = sp; //@line 10121
 $2 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 10122
 HEAP32[$0 >> 2] = $2; //@line 10123
 $3 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 9328) | 0; //@line 10124
 __ZNSt3__114__shared_count16__release_sharedEv($2) | 0; //@line 10125
 $4 = $__tm + 16 | 0; //@line 10126
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2]; //@line 10128
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 10129
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $4, $__b, $$byval_copy, $__err, $3); //@line 10130
 STACKTOP = sp; //@line 10132
 return HEAP32[$__b >> 2] | 0; //@line 10132
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 10060
 STACKTOP = STACKTOP + 16 | 0; //@line 10061
 $$byval_copy = sp + 8 | 0; //@line 10062
 $0 = sp + 4 | 0; //@line 10063
 $1 = sp; //@line 10064
 $2 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 10065
 HEAP32[$0 >> 2] = $2; //@line 10066
 $3 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 9328) | 0; //@line 10067
 __ZNSt3__114__shared_count16__release_sharedEv($2) | 0; //@line 10068
 $4 = $__tm + 24 | 0; //@line 10069
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2]; //@line 10071
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 10072
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $4, $__b, $$byval_copy, $__err, $3); //@line 10073
 STACKTOP = sp; //@line 10075
 return HEAP32[$__b >> 2] | 0; //@line 10075
}
function _scalbn($x, $n) {
 $x = +$x;
 $n = $n | 0;
 var $$0 = 0, $1 = 0.0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $5 = 0, $8 = 0.0, $9 = 0, $y$0 = 0.0;
 if (($n | 0) > 1023) {
  $1 = $x * 8.98846567431158e+307; //@line 5051
  $2 = $n + -1023 | 0; //@line 5052
  if (($2 | 0) > 1023) {
   $5 = $n + -2046 | 0; //@line 5056
   $$0 = ($5 | 0) > 1023 ? 1023 : $5; //@line 5059
   $y$0 = $1 * 8.98846567431158e+307; //@line 5059
  } else {
   $$0 = $2; //@line 5061
   $y$0 = $1; //@line 5061
  }
 } else {
  if (($n | 0) < -1022) {
   $8 = $x * 2.2250738585072014e-308; //@line 5066
   $9 = $n + 1022 | 0; //@line 5067
   if (($9 | 0) < -1022) {
    $12 = $n + 2044 | 0; //@line 5071
    $$0 = ($12 | 0) < -1022 ? -1022 : $12; //@line 5074
    $y$0 = $8 * 2.2250738585072014e-308; //@line 5074
   } else {
    $$0 = $9; //@line 5076
    $y$0 = $8; //@line 5076
   }
  } else {
   $$0 = $n; //@line 5079
   $y$0 = $x; //@line 5079
  }
 }
 $15 = _bitshift64Shl($$0 + 1023 | 0, 0, 52) | 0; //@line 5083
 $16 = tempRet0; //@line 5084
 HEAP32[tempDoublePtr >> 2] = $15; //@line 5085
 HEAP32[tempDoublePtr + 4 >> 2] = $16; //@line 5085
 return +($y$0 * +HEAPF64[tempDoublePtr >> 3]);
}
function _wcrtomb($s, $wc, $st) {
 $s = $s | 0;
 $wc = $wc | 0;
 $st = $st | 0;
 var $$0 = 0;
 do {
  if (!$s) {
   $$0 = 1; //@line 5914
  } else {
   if ($wc >>> 0 < 128) {
    HEAP8[$s >> 0] = $wc; //@line 5919
    $$0 = 1; //@line 5920
    break;
   }
   if ($wc >>> 0 < 2048) {
    HEAP8[$s >> 0] = $wc >>> 6 | 192; //@line 5929
    HEAP8[$s + 1 >> 0] = $wc & 63 | 128; //@line 5933
    $$0 = 2; //@line 5934
    break;
   }
   if ($wc >>> 0 < 55296 | ($wc & -8192 | 0) == 57344) {
    HEAP8[$s >> 0] = $wc >>> 12 | 224; //@line 5946
    HEAP8[$s + 1 >> 0] = $wc >>> 6 & 63 | 128; //@line 5952
    HEAP8[$s + 2 >> 0] = $wc & 63 | 128; //@line 5956
    $$0 = 3; //@line 5957
    break;
   }
   if (($wc + -65536 | 0) >>> 0 < 1048576) {
    HEAP8[$s >> 0] = $wc >>> 18 | 240; //@line 5967
    HEAP8[$s + 1 >> 0] = $wc >>> 12 & 63 | 128; //@line 5973
    HEAP8[$s + 2 >> 0] = $wc >>> 6 & 63 | 128; //@line 5979
    HEAP8[$s + 3 >> 0] = $wc & 63 | 128; //@line 5983
    $$0 = 4; //@line 5984
    break;
   } else {
    HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 5988
    $$0 = -1; //@line 5989
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 5994
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 12016
 STACKTOP = STACKTOP + 16 | 0; //@line 12017
 $$byval_copy = sp + 8 | 0; //@line 12018
 $0 = sp + 4 | 0; //@line 12019
 $1 = sp; //@line 12020
 $2 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 12021
 HEAP32[$0 >> 2] = $2; //@line 12022
 $3 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 9320) | 0; //@line 12023
 __ZNSt3__114__shared_count16__release_sharedEv($2) | 0; //@line 12024
 $4 = $__tm + 20 | 0; //@line 12025
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2]; //@line 12027
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 12028
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this, $4, $__b, $$byval_copy, $__err, $3); //@line 12029
 STACKTOP = sp; //@line 12031
 return HEAP32[$__b >> 2] | 0; //@line 12031
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 10175
 STACKTOP = STACKTOP + 16 | 0; //@line 10176
 $$byval_copy = sp + 8 | 0; //@line 10177
 $0 = sp + 4 | 0; //@line 10178
 $1 = sp; //@line 10179
 $2 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 10180
 HEAP32[$0 >> 2] = $2; //@line 10181
 $3 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 9328) | 0; //@line 10182
 __ZNSt3__114__shared_count16__release_sharedEv($2) | 0; //@line 10183
 $4 = $__tm + 20 | 0; //@line 10184
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2]; //@line 10186
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 10187
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this, $4, $__b, $$byval_copy, $__err, $3); //@line 10188
 STACKTOP = sp; //@line 10190
 return HEAP32[$__b >> 2] | 0; //@line 10190
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$02 = 0, $0 = 0, $1 = 0, $15 = 0, $3 = 0, $6 = 0, $__i$0$lcssa = 0, $__i$01 = 0;
 $0 = $this + 24 | 0; //@line 3891
 $1 = $this + 28 | 0; //@line 3892
 L1 : do {
  if (($__n | 0) > 0) {
   $$02 = $__s; //@line 3896
   $__i$01 = 0; //@line 3896
   while (1) {
    $3 = HEAP32[$0 >> 2] | 0; //@line 3898
    if ($3 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     $6 = HEAP32[$$02 >> 2] | 0; //@line 3902
     HEAP32[$0 >> 2] = $3 + 4; //@line 3904
     HEAP32[$3 >> 2] = $6; //@line 3905
    } else {
     if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[$this >> 2] | 0) + 52 >> 2] & 15]($this, HEAP32[$$02 >> 2] | 0) | 0) == -1) {
      $__i$0$lcssa = $__i$01; //@line 3914
      break L1;
     }
    }
    $15 = $__i$01 + 1 | 0; //@line 3919
    if (($15 | 0) < ($__n | 0)) {
     $$02 = $$02 + 4 | 0; //@line 3922
     $__i$01 = $15; //@line 3922
    } else {
     $__i$0$lcssa = $15; //@line 3924
     break;
    }
   }
  } else {
   $__i$0$lcssa = 0; //@line 3929
  }
 } while (0);
 return $__i$0$lcssa | 0; //@line 3932
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$02 = 0, $0 = 0, $1 = 0, $16 = 0, $3 = 0, $6 = 0, $__i$0$lcssa = 0, $__i$01 = 0;
 $0 = $this + 24 | 0; //@line 3644
 $1 = $this + 28 | 0; //@line 3645
 L1 : do {
  if (($__n | 0) > 0) {
   $$02 = $__s; //@line 3649
   $__i$01 = 0; //@line 3649
   while (1) {
    $3 = HEAP32[$0 >> 2] | 0; //@line 3651
    if ($3 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     $6 = HEAP8[$$02 >> 0] | 0; //@line 3655
     HEAP32[$0 >> 2] = $3 + 1; //@line 3657
     HEAP8[$3 >> 0] = $6; //@line 3658
    } else {
     if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[$this >> 2] | 0) + 52 >> 2] & 15]($this, HEAPU8[$$02 >> 0] | 0) | 0) == -1) {
      $__i$0$lcssa = $__i$01; //@line 3668
      break L1;
     }
    }
    $16 = $__i$01 + 1 | 0; //@line 3673
    if (($16 | 0) < ($__n | 0)) {
     $$02 = $$02 + 1 | 0; //@line 3676
     $__i$01 = $16; //@line 3676
    } else {
     $__i$0$lcssa = $16; //@line 3678
     break;
    }
   }
  } else {
   $__i$0$lcssa = 0; //@line 3683
  }
 } while (0);
 return $__i$0$lcssa | 0; //@line 3686
}
function __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($this, $__wb, $__we, $__tm, $__fmt, $__mod) {
 $this = $this | 0;
 $__wb = $__wb | 0;
 $__we = $__we | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $__mod = $__mod | 0;
 var $1 = 0, $11 = 0, $12 = 0, $9 = 0, $__nar = 0, $__nb = 0, $__ne = 0, $mb = 0, sp = 0;
 sp = STACKTOP; //@line 13412
 STACKTOP = STACKTOP + 128 | 0; //@line 13413
 $__nar = sp + 16 | 0; //@line 13414
 $__ne = sp + 12 | 0; //@line 13415
 $mb = sp; //@line 13416
 $__nb = sp + 8 | 0; //@line 13417
 HEAP32[$__ne >> 2] = $__nar + 100; //@line 13419
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this, $__nar, $__ne, $__tm, $__fmt, $__mod); //@line 13420
 $1 = $mb; //@line 13421
 HEAP32[$1 >> 2] = 0; //@line 13423
 HEAP32[$1 + 4 >> 2] = 0; //@line 13426
 HEAP32[$__nb >> 2] = $__nar; //@line 13427
 $9 = (HEAP32[$__we >> 2] | 0) - $__wb >> 2; //@line 13432
 $11 = _uselocale(HEAP32[$this >> 2] | 0) | 0; //@line 13434
 $12 = _mbsrtowcs($__wb, $__nb, $9, $mb) | 0; //@line 13435
 if ($11) {
  _uselocale($11) | 0; //@line 13438
 }
 HEAP32[$__we >> 2] = $__wb + ($12 << 2); //@line 13441
 STACKTOP = sp; //@line 13442
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__m, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $5 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 11983
 STACKTOP = STACKTOP + 16 | 0; //@line 11984
 $$byval_copy = sp + 4 | 0; //@line 11985
 $0 = sp; //@line 11986
 $1 = $this + 8 | 0; //@line 11987
 $5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] & 63]($1) | 0; //@line 11991
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2]; //@line 11993
 $7 = $5 + 288 | 0; //@line 11994
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 11995
 $11 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy, $5, $7, $__ct, $__err, 0) | 0) - $5 | 0; //@line 11999
 if (($11 | 0) < 288) {
  HEAP32[$__m >> 2] = (($11 | 0) / 12 | 0 | 0) % 12 | 0; //@line 12004
 }
 STACKTOP = sp; //@line 12006
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__m, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $5 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 10142
 STACKTOP = STACKTOP + 16 | 0; //@line 10143
 $$byval_copy = sp + 4 | 0; //@line 10144
 $0 = sp; //@line 10145
 $1 = $this + 8 | 0; //@line 10146
 $5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] & 63]($1) | 0; //@line 10150
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2]; //@line 10152
 $7 = $5 + 288 | 0; //@line 10153
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 10154
 $11 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy, $5, $7, $__ct, $__err, 0) | 0) - $5 | 0; //@line 10158
 if (($11 | 0) < 288) {
  HEAP32[$__m >> 2] = (($11 | 0) / 12 | 0 | 0) % 12 | 0; //@line 10163
 }
 STACKTOP = sp; //@line 10165
 return;
}
function _ungetc($c, $f) {
 $c = $c | 0;
 $f = $f | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $17 = 0, $19 = 0, label = 0;
 do {
  if (($c | 0) == -1) {
   $$0 = -1; //@line 7217
  } else {
   if ((HEAP32[$f + 76 >> 2] | 0) > -1) {
    $17 = ___lockfile($f) | 0; //@line 7224
   } else {
    $17 = 0; //@line 7226
   }
   if (!(HEAP32[$f + 8 >> 2] | 0)) {
    if (!(___toread($f) | 0)) {
     label = 6; //@line 7235
    }
   } else {
    label = 6; //@line 7238
   }
   if ((label | 0) == 6) {
    $10 = $f + 4 | 0; //@line 7241
    $11 = HEAP32[$10 >> 2] | 0; //@line 7242
    if ($11 >>> 0 > ((HEAP32[$f + 44 >> 2] | 0) + -8 | 0) >>> 0) {
     $19 = $11 + -1 | 0; //@line 7249
     HEAP32[$10 >> 2] = $19; //@line 7250
     HEAP8[$19 >> 0] = $c; //@line 7251
     HEAP32[$f >> 2] = HEAP32[$f >> 2] & -17; //@line 7254
     if (!$17) {
      $$0 = $c; //@line 7257
      break;
     }
     ___unlockfile($f); //@line 7260
     $$0 = $c; //@line 7261
     break;
    }
   }
   if (!$17) {
    $$0 = -1; //@line 7267
   } else {
    ___unlockfile($f); //@line 7269
    $$0 = -1; //@line 7270
   }
  }
 } while (0);
 return $$0 | 0; //@line 7274
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__w, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__w = $__w | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $4 = 0, $6 = 0, sp = 0;
 sp = STACKTOP; //@line 11926
 STACKTOP = STACKTOP + 16 | 0; //@line 11927
 $$byval_copy = sp + 4 | 0; //@line 11928
 $0 = sp; //@line 11929
 $1 = $this + 8 | 0; //@line 11930
 $4 = FUNCTION_TABLE_ii[HEAP32[HEAP32[$1 >> 2] >> 2] & 63]($1) | 0; //@line 11933
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2]; //@line 11935
 $6 = $4 + 168 | 0; //@line 11936
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 11937
 $10 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy, $4, $6, $__ct, $__err, 0) | 0) - $4 | 0; //@line 11941
 if (($10 | 0) < 168) {
  HEAP32[$__w >> 2] = (($10 | 0) / 12 | 0 | 0) % 7 | 0; //@line 11946
 }
 STACKTOP = sp; //@line 11948
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__w, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__w = $__w | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $4 = 0, $6 = 0, sp = 0;
 sp = STACKTOP; //@line 10085
 STACKTOP = STACKTOP + 16 | 0; //@line 10086
 $$byval_copy = sp + 4 | 0; //@line 10087
 $0 = sp; //@line 10088
 $1 = $this + 8 | 0; //@line 10089
 $4 = FUNCTION_TABLE_ii[HEAP32[HEAP32[$1 >> 2] >> 2] & 63]($1) | 0; //@line 10092
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2]; //@line 10094
 $6 = $4 + 168 | 0; //@line 10095
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 10096
 $10 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy, $4, $6, $__ct, $__err, 0) | 0) - $4 | 0; //@line 10100
 if (($10 | 0) < 168) {
  HEAP32[$__w >> 2] = (($10 | 0) / 12 | 0 | 0) % 7 | 0; //@line 10105
 }
 STACKTOP = sp; //@line 10107
 return;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP; //@line 811
 STACKTOP = STACKTOP + 16 | 0; //@line 812
 $rem = __stackBase__ | 0; //@line 813
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1; //@line 814
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1; //@line 815
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1; //@line 816
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1; //@line 817
 $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0; //@line 818
 $4$1 = tempRet0; //@line 819
 ___udivmoddi4($4$0, $4$1, _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0, tempRet0, $rem) | 0; //@line 821
 $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0; //@line 822
 $10$1 = tempRet0; //@line 823
 STACKTOP = __stackBase__; //@line 824
 return (tempRet0 = $10$1, $10$0) | 0; //@line 825
}
function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg$result, $__iob, $__atoms, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $0 = 0, $1 = 0, $5 = 0, $__loc = 0, sp = 0;
 sp = STACKTOP; //@line 6671
 STACKTOP = STACKTOP + 16 | 0; //@line 6672
 $__loc = sp; //@line 6673
 $0 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 6674
 HEAP32[$__loc >> 2] = $0; //@line 6675
 $1 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 9320) | 0; //@line 6676
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$1 >> 2] | 0) + 48 >> 2] & 7]($1, 20196, 20222, $__atoms) | 0; //@line 6680
 $5 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 9476) | 0; //@line 6681
 HEAP32[$__thousands_sep >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 16 >> 2] & 63]($5) | 0; //@line 6686
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 63]($agg$result, $5); //@line 6690
 __ZNSt3__114__shared_count16__release_sharedEv($0) | 0; //@line 6691
 STACKTOP = sp; //@line 6692
 return;
}
function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg$result, $__iob, $__atoms, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $0 = 0, $1 = 0, $5 = 0, $__loc = 0, sp = 0;
 sp = STACKTOP; //@line 6389
 STACKTOP = STACKTOP + 16 | 0; //@line 6390
 $__loc = sp; //@line 6391
 $0 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0; //@line 6392
 HEAP32[$__loc >> 2] = $0; //@line 6393
 $1 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 9328) | 0; //@line 6394
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$1 >> 2] | 0) + 32 >> 2] & 7]($1, 20196, 20222, $__atoms) | 0; //@line 6398
 $5 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 9468) | 0; //@line 6399
 HEAP8[$__thousands_sep >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 16 >> 2] & 63]($5) | 0; //@line 6404
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 63]($agg$result, $5); //@line 6408
 __ZNSt3__114__shared_count16__release_sharedEv($0) | 0; //@line 6409
 STACKTOP = sp; //@line 6410
 return;
}
function _frexp($x, $e) {
 $x = +$x;
 $e = $e | 0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $2 = 0, $4 = 0, $7 = 0.0, $storemerge = 0;
 HEAPF64[tempDoublePtr >> 3] = $x; //@line 4999
 $0 = HEAP32[tempDoublePtr >> 2] | 0; //@line 4999
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 5000
 $2 = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0; //@line 5001
 $4 = $2 & 2047; //@line 5003
 switch ($4 | 0) {
 case 0:
  {
   if ($x != 0.0) {
    $7 = +_frexp($x * 18446744073709552000.0, $e); //@line 5009
    $$01 = $7; //@line 5012
    $storemerge = (HEAP32[$e >> 2] | 0) + -64 | 0; //@line 5012
   } else {
    $$01 = $x; //@line 5014
    $storemerge = 0; //@line 5014
   }
   HEAP32[$e >> 2] = $storemerge; //@line 5016
   $$0 = $$01; //@line 5017
   break;
  }
 case 2047:
  {
   $$0 = $x; //@line 5021
   break;
  }
 default:
  {
   HEAP32[$e >> 2] = $4 + -1022; //@line 5026
   HEAP32[tempDoublePtr >> 2] = $0; //@line 5029
   HEAP32[tempDoublePtr + 4 >> 2] = $1 & -2146435073 | 1071644672; //@line 5029
   $$0 = +HEAPF64[tempDoublePtr >> 3]; //@line 5030
  }
 }
 return +$$0;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 11837
 STACKTOP = STACKTOP + 16 | 0; //@line 11838
 $$byval_copy1 = sp + 12 | 0; //@line 11839
 $$byval_copy = sp + 8 | 0; //@line 11840
 $0 = sp + 4 | 0; //@line 11841
 $1 = sp; //@line 11842
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2]; //@line 11844
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2]; //@line 11846
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 11847
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2]; //@line 11848
 $4 = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__tm, 9896, 9928) | 0; //@line 11849
 STACKTOP = sp; //@line 11850
 return $4 | 0; //@line 11850
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 9995
 STACKTOP = STACKTOP + 16 | 0; //@line 9996
 $$byval_copy1 = sp + 12 | 0; //@line 9997
 $$byval_copy = sp + 8 | 0; //@line 9998
 $0 = sp + 4 | 0; //@line 9999
 $1 = sp; //@line 10000
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2]; //@line 10002
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2]; //@line 10004
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 10005
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2]; //@line 10006
 $4 = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__tm, 21605, 21613) | 0; //@line 10007
 STACKTOP = sp; //@line 10008
 return $4 | 0; //@line 10008
}
function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a, $__a_end, $__err) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 var $$0 = 0.0, $1 = 0, $2 = 0, $4 = 0.0, $5 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP; //@line 121
 STACKTOP = STACKTOP + 16 | 0; //@line 122
 $__p2 = sp; //@line 123
 do {
  if (($__a | 0) == ($__a_end | 0)) {
   HEAP32[$__err >> 2] = 4; //@line 127
   $$0 = 0.0; //@line 128
  } else {
   $1 = ___errno_location() | 0; //@line 130
   $2 = HEAP32[$1 >> 2] | 0; //@line 131
   HEAP32[$1 >> 2] = 0; //@line 132
   $4 = +_strtold_l($__a, $__p2, __ZNSt3__16__clocEv() | 0); //@line 134
   $5 = HEAP32[$1 >> 2] | 0; //@line 135
   if (!$5) {
    HEAP32[$1 >> 2] = $2; //@line 138
   }
   if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
    HEAP32[$__err >> 2] = 4; //@line 143
    $$0 = 0.0; //@line 144
    break;
   }
   if (($5 | 0) == 34) {
    HEAP32[$__err >> 2] = 4; //@line 149
    $$0 = $4; //@line 150
   } else {
    $$0 = $4; //@line 152
   }
  }
 } while (0);
 STACKTOP = sp; //@line 156
 return +$$0;
}
function _vasprintf($s, $fmt, $ap) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$0 = 0, $0 = 0, $10 = 0, $2 = 0, $5 = 0, $9 = 0, $ap2 = 0, sp = 0;
 sp = STACKTOP; //@line 7281
 STACKTOP = STACKTOP + 16 | 0; //@line 7282
 $ap2 = sp; //@line 7283
 $0 = _malloc(240) | 0; //@line 7284
 do {
  if (!$0) {
   $$0 = -1; //@line 7288
  } else {
   HEAP32[$ap2 >> 2] = HEAP32[$ap >> 2]; //@line 7291
   $2 = _vsnprintf($0, 240, $fmt, $ap2) | 0; //@line 7292
   if ($2 >>> 0 < 240) {
    $5 = _realloc($0, $2 + 1 | 0) | 0; //@line 7296
    HEAP32[$s >> 2] = ($5 | 0) != 0 ? $5 : $0; //@line 7299
    $$0 = $2; //@line 7300
    break;
   }
   _free($0); //@line 7303
   if (($2 | 0) < 0) {
    $$0 = -1; //@line 7306
   } else {
    $9 = $2 + 1 | 0; //@line 7308
    $10 = _malloc($9) | 0; //@line 7309
    HEAP32[$s >> 2] = $10; //@line 7310
    if (!$10) {
     $$0 = -1; //@line 7313
    } else {
     $$0 = _vsnprintf($10, $9, $fmt, $ap) | 0; //@line 7316
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 7321
 return $$0 | 0; //@line 7321
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 5854
 STACKTOP = STACKTOP + 16 | 0; //@line 5855
 $$byval_copy1 = sp + 12 | 0; //@line 5856
 $$byval_copy = sp + 8 | 0; //@line 5857
 $0 = sp + 4 | 0; //@line 5858
 $1 = sp; //@line 5859
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2]; //@line 5861
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2]; //@line 5863
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 5864
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2]; //@line 5865
 $4 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0; //@line 5866
 STACKTOP = sp; //@line 5867
 return $4 | 0; //@line 5867
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 5900
 STACKTOP = STACKTOP + 16 | 0; //@line 5901
 $$byval_copy1 = sp + 12 | 0; //@line 5902
 $$byval_copy = sp + 8 | 0; //@line 5903
 $0 = sp + 4 | 0; //@line 5904
 $1 = sp; //@line 5905
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2]; //@line 5907
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2]; //@line 5909
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 5910
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2]; //@line 5911
 $4 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0; //@line 5912
 STACKTOP = sp; //@line 5913
 return $4 | 0; //@line 5913
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 5877
 STACKTOP = STACKTOP + 16 | 0; //@line 5878
 $$byval_copy1 = sp + 12 | 0; //@line 5879
 $$byval_copy = sp + 8 | 0; //@line 5880
 $0 = sp + 4 | 0; //@line 5881
 $1 = sp; //@line 5882
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2]; //@line 5884
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2]; //@line 5886
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 5887
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2]; //@line 5888
 $4 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0; //@line 5889
 STACKTOP = sp; //@line 5890
 return $4 | 0; //@line 5890
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 5060
 STACKTOP = STACKTOP + 16 | 0; //@line 5061
 $$byval_copy1 = sp + 12 | 0; //@line 5062
 $$byval_copy = sp + 8 | 0; //@line 5063
 $0 = sp + 4 | 0; //@line 5064
 $1 = sp; //@line 5065
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2]; //@line 5067
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2]; //@line 5069
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 5070
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2]; //@line 5071
 $4 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0; //@line 5072
 STACKTOP = sp; //@line 5073
 return $4 | 0; //@line 5073
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 5106
 STACKTOP = STACKTOP + 16 | 0; //@line 5107
 $$byval_copy1 = sp + 12 | 0; //@line 5108
 $$byval_copy = sp + 8 | 0; //@line 5109
 $0 = sp + 4 | 0; //@line 5110
 $1 = sp; //@line 5111
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2]; //@line 5113
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2]; //@line 5115
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 5116
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2]; //@line 5117
 $4 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0; //@line 5118
 STACKTOP = sp; //@line 5119
 return $4 | 0; //@line 5119
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 5083
 STACKTOP = STACKTOP + 16 | 0; //@line 5084
 $$byval_copy1 = sp + 12 | 0; //@line 5085
 $$byval_copy = sp + 8 | 0; //@line 5086
 $0 = sp + 4 | 0; //@line 5087
 $1 = sp; //@line 5088
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2]; //@line 5090
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2]; //@line 5092
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 5093
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2]; //@line 5094
 $4 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0; //@line 5095
 STACKTOP = sp; //@line 5096
 return $4 | 0; //@line 5096
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__y, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__y = $__y | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $__t$0 = 0, sp = 0;
 sp = STACKTOP; //@line 12041
 STACKTOP = STACKTOP + 16 | 0; //@line 12042
 $$byval_copy = sp + 4 | 0; //@line 12043
 $0 = sp; //@line 12044
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2]; //@line 12046
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 12047
 $2 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 4) | 0; //@line 12048
 if (!(HEAP32[$__err >> 2] & 4)) {
  if (($2 | 0) < 69) {
   $__t$0 = $2 + 2e3 | 0; //@line 12056
  } else {
   $__t$0 = ($2 + -69 | 0) >>> 0 < 31 ? $2 + 1900 | 0 : $2; //@line 12062
  }
  HEAP32[$__y >> 2] = $__t$0 + -1900; //@line 12065
 }
 STACKTOP = sp; //@line 12067
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__y, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__y = $__y | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $__t$0 = 0, sp = 0;
 sp = STACKTOP; //@line 10200
 STACKTOP = STACKTOP + 16 | 0; //@line 10201
 $$byval_copy = sp + 4 | 0; //@line 10202
 $0 = sp; //@line 10203
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2]; //@line 10205
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 10206
 $2 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 4) | 0; //@line 10207
 if (!(HEAP32[$__err >> 2] & 4)) {
  if (($2 | 0) < 69) {
   $__t$0 = $2 + 2e3 | 0; //@line 10215
  } else {
   $__t$0 = ($2 + -69 | 0) >>> 0 < 31 ? $2 + 1900 | 0 : $2; //@line 10221
  }
  HEAP32[$__y >> 2] = $__t$0 + -1900; //@line 10224
 }
 STACKTOP = sp; //@line 10226
 return;
}
function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a, $__a_end, $__err) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 var $$0 = 0.0, $1 = 0, $2 = 0, $4 = 0.0, $5 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP; //@line 79
 STACKTOP = STACKTOP + 16 | 0; //@line 80
 $__p2 = sp; //@line 81
 do {
  if (($__a | 0) == ($__a_end | 0)) {
   HEAP32[$__err >> 2] = 4; //@line 85
   $$0 = 0.0; //@line 86
  } else {
   $1 = ___errno_location() | 0; //@line 88
   $2 = HEAP32[$1 >> 2] | 0; //@line 89
   HEAP32[$1 >> 2] = 0; //@line 90
   $4 = +_strtold_l($__a, $__p2, __ZNSt3__16__clocEv() | 0); //@line 92
   $5 = HEAP32[$1 >> 2] | 0; //@line 93
   if (!$5) {
    HEAP32[$1 >> 2] = $2; //@line 96
   }
   if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
    HEAP32[$__err >> 2] = 4; //@line 101
    $$0 = 0.0; //@line 102
    break;
   }
   if (($5 | 0) == 34) {
    HEAP32[$__err >> 2] = 4; //@line 107
    $$0 = $4; //@line 108
   } else {
    $$0 = $4; //@line 110
   }
  }
 } while (0);
 STACKTOP = sp; //@line 114
 return +$$0;
}
function __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nb, $__ne, $__iob) {
 $__nb = $__nb | 0;
 $__ne = $__ne | 0;
 $__iob = $__iob | 0;
 var $$0 = 0, $3 = 0, label = 0;
 L1 : do {
  switch (HEAP32[$__iob + 4 >> 2] & 176 | 0) {
  case 16:
   {
    $3 = HEAP8[$__nb >> 0] | 0; //@line 7205
    switch ($3 << 24 >> 24) {
    case 43:
    case 45:
     {
      $$0 = $__nb + 1 | 0; //@line 7209
      break L1;
      break;
     }
    default:
     {}
    }
    if (($__ne - $__nb | 0) > 1 & $3 << 24 >> 24 == 48) {
     switch (HEAP8[$__nb + 1 >> 0] | 0) {
     case 88:
     case 120:
      {
       break;
      }
     default:
      {
       label = 7; //@line 7230
       break L1;
      }
     }
     $$0 = $__nb + 2 | 0; //@line 7235
    } else {
     label = 7; //@line 7237
    }
    break;
   }
  case 32:
   {
    $$0 = $__ne; //@line 7242
    break;
   }
  default:
   {
    label = 7; //@line 7246
   }
  }
 } while (0);
 if ((label | 0) == 7) {
  $$0 = $__nb; //@line 7251
 }
 return $$0 | 0; //@line 7253
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 5785
 STACKTOP = STACKTOP + 16 | 0; //@line 5786
 $$byval_copy1 = sp + 12 | 0; //@line 5787
 $$byval_copy = sp + 8 | 0; //@line 5788
 $0 = sp + 4 | 0; //@line 5789
 $1 = sp; //@line 5790
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2]; //@line 5792
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2]; //@line 5794
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 5795
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2]; //@line 5796
 $4 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0; //@line 5797
 STACKTOP = sp; //@line 5798
 return $4 | 0; //@line 5798
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 4991
 STACKTOP = STACKTOP + 16 | 0; //@line 4992
 $$byval_copy1 = sp + 12 | 0; //@line 4993
 $$byval_copy = sp + 8 | 0; //@line 4994
 $0 = sp + 4 | 0; //@line 4995
 $1 = sp; //@line 4996
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2]; //@line 4998
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2]; //@line 5000
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 5001
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2]; //@line 5002
 $4 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0; //@line 5003
 STACKTOP = sp; //@line 5004
 return $4 | 0; //@line 5004
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 5831
 STACKTOP = STACKTOP + 16 | 0; //@line 5832
 $$byval_copy1 = sp + 12 | 0; //@line 5833
 $$byval_copy = sp + 8 | 0; //@line 5834
 $0 = sp + 4 | 0; //@line 5835
 $1 = sp; //@line 5836
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2]; //@line 5838
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2]; //@line 5840
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 5841
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2]; //@line 5842
 $4 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0; //@line 5843
 STACKTOP = sp; //@line 5844
 return $4 | 0; //@line 5844
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 5762
 STACKTOP = STACKTOP + 16 | 0; //@line 5763
 $$byval_copy1 = sp + 12 | 0; //@line 5764
 $$byval_copy = sp + 8 | 0; //@line 5765
 $0 = sp + 4 | 0; //@line 5766
 $1 = sp; //@line 5767
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2]; //@line 5769
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2]; //@line 5771
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 5772
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2]; //@line 5773
 $4 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0; //@line 5774
 STACKTOP = sp; //@line 5775
 return $4 | 0; //@line 5775
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 5808
 STACKTOP = STACKTOP + 16 | 0; //@line 5809
 $$byval_copy1 = sp + 12 | 0; //@line 5810
 $$byval_copy = sp + 8 | 0; //@line 5811
 $0 = sp + 4 | 0; //@line 5812
 $1 = sp; //@line 5813
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2]; //@line 5815
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2]; //@line 5817
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 5818
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2]; //@line 5819
 $4 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0; //@line 5820
 STACKTOP = sp; //@line 5821
 return $4 | 0; //@line 5821
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 5037
 STACKTOP = STACKTOP + 16 | 0; //@line 5038
 $$byval_copy1 = sp + 12 | 0; //@line 5039
 $$byval_copy = sp + 8 | 0; //@line 5040
 $0 = sp + 4 | 0; //@line 5041
 $1 = sp; //@line 5042
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2]; //@line 5044
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2]; //@line 5046
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 5047
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2]; //@line 5048
 $4 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0; //@line 5049
 STACKTOP = sp; //@line 5050
 return $4 | 0; //@line 5050
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 4968
 STACKTOP = STACKTOP + 16 | 0; //@line 4969
 $$byval_copy1 = sp + 12 | 0; //@line 4970
 $$byval_copy = sp + 8 | 0; //@line 4971
 $0 = sp + 4 | 0; //@line 4972
 $1 = sp; //@line 4973
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2]; //@line 4975
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2]; //@line 4977
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 4978
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2]; //@line 4979
 $4 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0; //@line 4980
 STACKTOP = sp; //@line 4981
 return $4 | 0; //@line 4981
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 5014
 STACKTOP = STACKTOP + 16 | 0; //@line 5015
 $$byval_copy1 = sp + 12 | 0; //@line 5016
 $$byval_copy = sp + 8 | 0; //@line 5017
 $0 = sp + 4 | 0; //@line 5018
 $1 = sp; //@line 5019
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2]; //@line 5021
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2]; //@line 5023
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 5024
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2]; //@line 5025
 $4 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0; //@line 5026
 STACKTOP = sp; //@line 5027
 return $4 | 0; //@line 5027
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 5739
 STACKTOP = STACKTOP + 16 | 0; //@line 5740
 $$byval_copy1 = sp + 12 | 0; //@line 5741
 $$byval_copy = sp + 8 | 0; //@line 5742
 $0 = sp + 4 | 0; //@line 5743
 $1 = sp; //@line 5744
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2]; //@line 5746
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2]; //@line 5748
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 5749
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2]; //@line 5750
 $4 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0; //@line 5751
 STACKTOP = sp; //@line 5752
 return $4 | 0; //@line 5752
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 5716
 STACKTOP = STACKTOP + 16 | 0; //@line 5717
 $$byval_copy1 = sp + 12 | 0; //@line 5718
 $$byval_copy = sp + 8 | 0; //@line 5719
 $0 = sp + 4 | 0; //@line 5720
 $1 = sp; //@line 5721
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2]; //@line 5723
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2]; //@line 5725
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 5726
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2]; //@line 5727
 $4 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0; //@line 5728
 STACKTOP = sp; //@line 5729
 return $4 | 0; //@line 5729
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 4945
 STACKTOP = STACKTOP + 16 | 0; //@line 4946
 $$byval_copy1 = sp + 12 | 0; //@line 4947
 $$byval_copy = sp + 8 | 0; //@line 4948
 $0 = sp + 4 | 0; //@line 4949
 $1 = sp; //@line 4950
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2]; //@line 4952
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2]; //@line 4954
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 4955
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2]; //@line 4956
 $4 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0; //@line 4957
 STACKTOP = sp; //@line 4958
 return $4 | 0; //@line 4958
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 4922
 STACKTOP = STACKTOP + 16 | 0; //@line 4923
 $$byval_copy1 = sp + 12 | 0; //@line 4924
 $$byval_copy = sp + 8 | 0; //@line 4925
 $0 = sp + 4 | 0; //@line 4926
 $1 = sp; //@line 4927
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2]; //@line 4929
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2]; //@line 4931
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 4932
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2]; //@line 4933
 $4 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0; //@line 4934
 STACKTOP = sp; //@line 4935
 return $4 | 0; //@line 4935
}
function _realloc($oldmem, $bytes) {
 $oldmem = $oldmem | 0;
 $bytes = $bytes | 0;
 var $12 = 0, $15 = 0, $20 = 0, $9 = 0, $mem$0 = 0;
 if (!$oldmem) {
  $mem$0 = _malloc($bytes) | 0; //@line 15073
  return $mem$0 | 0; //@line 15074
 }
 if ($bytes >>> 0 > 4294967231) {
  HEAP32[(___errno_location() | 0) >> 2] = 12; //@line 15079
  $mem$0 = 0; //@line 15080
  return $mem$0 | 0; //@line 15081
 }
 $9 = _try_realloc_chunk($oldmem + -8 | 0, $bytes >>> 0 < 11 ? 16 : $bytes + 11 & -8) | 0; //@line 15088
 if ($9) {
  $mem$0 = $9 + 8 | 0; //@line 15092
  return $mem$0 | 0; //@line 15093
 }
 $12 = _malloc($bytes) | 0; //@line 15095
 if (!$12) {
  $mem$0 = 0; //@line 15098
  return $mem$0 | 0; //@line 15099
 }
 $15 = HEAP32[$oldmem + -4 >> 2] | 0; //@line 15102
 $20 = ($15 & -8) - (($15 & 3 | 0) == 0 ? 8 : 4) | 0; //@line 15107
 _memcpy($12 | 0, $oldmem | 0, ($20 >>> 0 < $bytes >>> 0 ? $20 : $bytes) | 0) | 0; //@line 15110
 _free($oldmem); //@line 15111
 $mem$0 = $12; //@line 15112
 return $mem$0 | 0; //@line 15113
}
function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a, $__a_end, $__err) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 var $$0 = 0.0, $1 = 0, $2 = 0, $4 = 0.0, $5 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP; //@line 163
 STACKTOP = STACKTOP + 16 | 0; //@line 164
 $__p2 = sp; //@line 165
 do {
  if (($__a | 0) == ($__a_end | 0)) {
   HEAP32[$__err >> 2] = 4; //@line 169
   $$0 = 0.0; //@line 170
  } else {
   $1 = ___errno_location() | 0; //@line 172
   $2 = HEAP32[$1 >> 2] | 0; //@line 173
   HEAP32[$1 >> 2] = 0; //@line 174
   $4 = +_strtold_l($__a, $__p2, __ZNSt3__16__clocEv() | 0); //@line 176
   $5 = HEAP32[$1 >> 2] | 0; //@line 177
   if (!$5) {
    HEAP32[$1 >> 2] = $2; //@line 180
   }
   if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
    HEAP32[$__err >> 2] = 4; //@line 185
    $$0 = 0.0; //@line 186
    break;
   }
   if (($5 | 0) == 34) {
    HEAP32[$__err >> 2] = 4; //@line 191
   }
   $$0 = $4; //@line 194
  }
 } while (0);
 STACKTOP = sp; //@line 197
 return +$$0;
}
function ___fflush_unlocked($f) {
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $9 = 0, label = 0;
 $0 = $f + 20 | 0; //@line 9184
 $2 = $f + 28 | 0; //@line 9186
 if ((HEAP32[$0 >> 2] | 0) >>> 0 > (HEAP32[$2 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, 0, 0) | 0; //@line 9192
  if (!(HEAP32[$0 >> 2] | 0)) {
   $$0 = -1; //@line 9196
  } else {
   label = 3; //@line 9198
  }
 } else {
  label = 3; //@line 9201
 }
 if ((label | 0) == 3) {
  $9 = $f + 4 | 0; //@line 9204
  $10 = HEAP32[$9 >> 2] | 0; //@line 9205
  $11 = $f + 8 | 0; //@line 9206
  $12 = HEAP32[$11 >> 2] | 0; //@line 9207
  if ($10 >>> 0 < $12 >>> 0) {
   FUNCTION_TABLE_iiii[HEAP32[$f + 40 >> 2] & 31]($f, $10 - $12 | 0, 1) | 0; //@line 9215
  }
  HEAP32[$f + 16 >> 2] = 0; //@line 9218
  HEAP32[$2 >> 2] = 0; //@line 9219
  HEAP32[$0 >> 2] = 0; //@line 9220
  HEAP32[$11 >> 2] = 0; //@line 9221
  HEAP32[$9 >> 2] = 0; //@line 9222
  $$0 = 0; //@line 9223
 }
 return $$0 | 0; //@line 9225
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__h, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 12474
 STACKTOP = STACKTOP + 16 | 0; //@line 12475
 $$byval_copy = sp + 4 | 0; //@line 12476
 $0 = sp; //@line 12477
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2]; //@line 12479
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 12480
 $2 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0; //@line 12481
 $3 = HEAP32[$__err >> 2] | 0; //@line 12482
 if (($2 + -1 | 0) >>> 0 < 12 & ($3 & 4 | 0) == 0) {
  HEAP32[$__h >> 2] = $2; //@line 12489
 } else {
  HEAP32[$__err >> 2] = $3 | 4; //@line 12492
 }
 STACKTOP = sp; //@line 12494
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__h, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 10635
 STACKTOP = STACKTOP + 16 | 0; //@line 10636
 $$byval_copy = sp + 4 | 0; //@line 10637
 $0 = sp; //@line 10638
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2]; //@line 10640
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 10641
 $2 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0; //@line 10642
 $3 = HEAP32[$__err >> 2] | 0; //@line 10643
 if (($2 + -1 | 0) >>> 0 < 12 & ($3 & 4 | 0) == 0) {
  HEAP32[$__h >> 2] = $2; //@line 10650
 } else {
  HEAP32[$__err >> 2] = $3 | 4; //@line 10653
 }
 STACKTOP = sp; //@line 10655
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__d, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__d = $__d | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 12415
 STACKTOP = STACKTOP + 16 | 0; //@line 12416
 $$byval_copy = sp + 4 | 0; //@line 12417
 $0 = sp; //@line 12418
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2]; //@line 12420
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 12421
 $2 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0; //@line 12422
 $3 = HEAP32[$__err >> 2] | 0; //@line 12423
 if (($2 + -1 | 0) >>> 0 < 31 & ($3 & 4 | 0) == 0) {
  HEAP32[$__d >> 2] = $2; //@line 12430
 } else {
  HEAP32[$__err >> 2] = $3 | 4; //@line 12433
 }
 STACKTOP = sp; //@line 12435
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__d, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__d = $__d | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 12504
 STACKTOP = STACKTOP + 16 | 0; //@line 12505
 $$byval_copy = sp + 4 | 0; //@line 12506
 $0 = sp; //@line 12507
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2]; //@line 12509
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 12510
 $2 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 3) | 0; //@line 12511
 $3 = HEAP32[$__err >> 2] | 0; //@line 12512
 if (($2 | 0) < 366 & ($3 & 4 | 0) == 0) {
  HEAP32[$__d >> 2] = $2; //@line 12518
 } else {
  HEAP32[$__err >> 2] = $3 | 4; //@line 12521
 }
 STACKTOP = sp; //@line 12523
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__d, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__d = $__d | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 10576
 STACKTOP = STACKTOP + 16 | 0; //@line 10577
 $$byval_copy = sp + 4 | 0; //@line 10578
 $0 = sp; //@line 10579
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2]; //@line 10581
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 10582
 $2 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0; //@line 10583
 $3 = HEAP32[$__err >> 2] | 0; //@line 10584
 if (($2 + -1 | 0) >>> 0 < 31 & ($3 & 4 | 0) == 0) {
  HEAP32[$__d >> 2] = $2; //@line 10591
 } else {
  HEAP32[$__err >> 2] = $3 | 4; //@line 10594
 }
 STACKTOP = sp; //@line 10596
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__d, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__d = $__d | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 10665
 STACKTOP = STACKTOP + 16 | 0; //@line 10666
 $$byval_copy = sp + 4 | 0; //@line 10667
 $0 = sp; //@line 10668
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2]; //@line 10670
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 10671
 $2 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 3) | 0; //@line 10672
 $3 = HEAP32[$__err >> 2] | 0; //@line 10673
 if (($2 | 0) < 366 & ($3 & 4 | 0) == 0) {
  HEAP32[$__d >> 2] = $2; //@line 10679
 } else {
  HEAP32[$__err >> 2] = $3 | 4; //@line 10682
 }
 STACKTOP = sp; //@line 10684
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__m, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 12533
 STACKTOP = STACKTOP + 16 | 0; //@line 12534
 $$byval_copy = sp + 4 | 0; //@line 12535
 $0 = sp; //@line 12536
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2]; //@line 12538
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 12539
 $2 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0; //@line 12540
 $3 = HEAP32[$__err >> 2] | 0; //@line 12541
 if (($2 | 0) < 13 & ($3 & 4 | 0) == 0) {
  HEAP32[$__m >> 2] = $2 + -1; //@line 12548
 } else {
  HEAP32[$__err >> 2] = $3 | 4; //@line 12551
 }
 STACKTOP = sp; //@line 12553
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__m, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 10694
 STACKTOP = STACKTOP + 16 | 0; //@line 10695
 $$byval_copy = sp + 4 | 0; //@line 10696
 $0 = sp; //@line 10697
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2]; //@line 10699
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 10700
 $2 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0; //@line 10701
 $3 = HEAP32[$__err >> 2] | 0; //@line 10702
 if (($2 | 0) < 13 & ($3 & 4 | 0) == 0) {
  HEAP32[$__m >> 2] = $2 + -1; //@line 10709
 } else {
  HEAP32[$__err >> 2] = $3 | 4; //@line 10712
 }
 STACKTOP = sp; //@line 10714
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__w, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__w = $__w | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 12916
 STACKTOP = STACKTOP + 16 | 0; //@line 12917
 $$byval_copy = sp + 4 | 0; //@line 12918
 $0 = sp; //@line 12919
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2]; //@line 12921
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 12922
 $2 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 1) | 0; //@line 12923
 $3 = HEAP32[$__err >> 2] | 0; //@line 12924
 if (($2 | 0) < 7 & ($3 & 4 | 0) == 0) {
  HEAP32[$__w >> 2] = $2; //@line 12930
 } else {
  HEAP32[$__err >> 2] = $3 | 4; //@line 12933
 }
 STACKTOP = sp; //@line 12935
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__s, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 12887
 STACKTOP = STACKTOP + 16 | 0; //@line 12888
 $$byval_copy = sp + 4 | 0; //@line 12889
 $0 = sp; //@line 12890
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2]; //@line 12892
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 12893
 $2 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0; //@line 12894
 $3 = HEAP32[$__err >> 2] | 0; //@line 12895
 if (($2 | 0) < 61 & ($3 & 4 | 0) == 0) {
  HEAP32[$__s >> 2] = $2; //@line 12901
 } else {
  HEAP32[$__err >> 2] = $3 | 4; //@line 12904
 }
 STACKTOP = sp; //@line 12906
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__m, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 12563
 STACKTOP = STACKTOP + 16 | 0; //@line 12564
 $$byval_copy = sp + 4 | 0; //@line 12565
 $0 = sp; //@line 12566
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2]; //@line 12568
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 12569
 $2 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0; //@line 12570
 $3 = HEAP32[$__err >> 2] | 0; //@line 12571
 if (($2 | 0) < 60 & ($3 & 4 | 0) == 0) {
  HEAP32[$__m >> 2] = $2; //@line 12577
 } else {
  HEAP32[$__err >> 2] = $3 | 4; //@line 12580
 }
 STACKTOP = sp; //@line 12582
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__w, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__w = $__w | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 11079
 STACKTOP = STACKTOP + 16 | 0; //@line 11080
 $$byval_copy = sp + 4 | 0; //@line 11081
 $0 = sp; //@line 11082
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2]; //@line 11084
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 11085
 $2 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 1) | 0; //@line 11086
 $3 = HEAP32[$__err >> 2] | 0; //@line 11087
 if (($2 | 0) < 7 & ($3 & 4 | 0) == 0) {
  HEAP32[$__w >> 2] = $2; //@line 11093
 } else {
  HEAP32[$__err >> 2] = $3 | 4; //@line 11096
 }
 STACKTOP = sp; //@line 11098
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__s, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 11050
 STACKTOP = STACKTOP + 16 | 0; //@line 11051
 $$byval_copy = sp + 4 | 0; //@line 11052
 $0 = sp; //@line 11053
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2]; //@line 11055
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 11056
 $2 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0; //@line 11057
 $3 = HEAP32[$__err >> 2] | 0; //@line 11058
 if (($2 | 0) < 61 & ($3 & 4 | 0) == 0) {
  HEAP32[$__s >> 2] = $2; //@line 11064
 } else {
  HEAP32[$__err >> 2] = $3 | 4; //@line 11067
 }
 STACKTOP = sp; //@line 11069
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__m, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 10724
 STACKTOP = STACKTOP + 16 | 0; //@line 10725
 $$byval_copy = sp + 4 | 0; //@line 10726
 $0 = sp; //@line 10727
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2]; //@line 10729
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 10730
 $2 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0; //@line 10731
 $3 = HEAP32[$__err >> 2] | 0; //@line 10732
 if (($2 | 0) < 60 & ($3 & 4 | 0) == 0) {
  HEAP32[$__m >> 2] = $2; //@line 10738
 } else {
  HEAP32[$__err >> 2] = $3 | 4; //@line 10741
 }
 STACKTOP = sp; //@line 10743
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__h, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 12445
 STACKTOP = STACKTOP + 16 | 0; //@line 12446
 $$byval_copy = sp + 4 | 0; //@line 12447
 $0 = sp; //@line 12448
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2]; //@line 12450
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 12451
 $2 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0; //@line 12452
 $3 = HEAP32[$__err >> 2] | 0; //@line 12453
 if (($2 | 0) < 24 & ($3 & 4 | 0) == 0) {
  HEAP32[$__h >> 2] = $2; //@line 12459
 } else {
  HEAP32[$__err >> 2] = $3 | 4; //@line 12462
 }
 STACKTOP = sp; //@line 12464
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__h, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 10606
 STACKTOP = STACKTOP + 16 | 0; //@line 10607
 $$byval_copy = sp + 4 | 0; //@line 10608
 $0 = sp; //@line 10609
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2]; //@line 10611
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 10612
 $2 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0; //@line 10613
 $3 = HEAP32[$__err >> 2] | 0; //@line 10614
 if (($2 | 0) < 24 & ($3 & 4 | 0) == 0) {
  HEAP32[$__h >> 2] = $2; //@line 10620
 } else {
  HEAP32[$__err >> 2] = $3 | 4; //@line 10623
 }
 STACKTOP = sp; //@line 10625
 return;
}
function _strtox($s, $p, $prec) {
 $s = $s | 0;
 $p = $p | 0;
 $prec = $prec | 0;
 var $0 = 0, $1 = 0, $12 = 0, $4 = 0.0, $f = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 11275
 STACKTOP = STACKTOP + 112 | 0; //@line 11276
 $f = sp; //@line 11277
 dest = $f; //@line 11278
 stop = dest + 112 | 0; //@line 11278
 do {
  HEAP32[dest >> 2] = 0; //@line 11278
  dest = dest + 4 | 0; //@line 11278
 } while ((dest | 0) < (stop | 0));
 $0 = $f + 4 | 0; //@line 11279
 HEAP32[$0 >> 2] = $s; //@line 11280
 $1 = $f + 8 | 0; //@line 11281
 HEAP32[$1 >> 2] = -1; //@line 11282
 HEAP32[$f + 44 >> 2] = $s; //@line 11284
 HEAP32[$f + 76 >> 2] = -1; //@line 11286
 ___shlim($f, 0); //@line 11287
 $4 = +___floatscan($f, $prec, 1); //@line 11288
 $12 = (HEAP32[$0 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) + (HEAP32[$f + 108 >> 2] | 0) | 0; //@line 11296
 if ($p) {
  HEAP32[$p >> 2] = ($12 | 0) != 0 ? $s + $12 | 0 : $s; //@line 11302
 }
 STACKTOP = sp; //@line 11304
 return +$4;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $16 = 0, $21 = 0, $27 = 0, $31 = 0, $4 = 0;
 $0 = $this + 4 | 0; //@line 4515
 $1 = HEAP32[$0 >> 2] | 0; //@line 4516
 $4 = HEAP32[(HEAP32[$1 >> 2] | 0) + -12 >> 2] | 0; //@line 4519
 if (HEAP32[$1 + ($4 + 24) >> 2] | 0) {
  if (!(HEAP32[$1 + ($4 + 16) >> 2] | 0)) {
   if (HEAP32[$1 + ($4 + 4) >> 2] & 8192) {
    if (!(__ZSt18uncaught_exceptionv() | 0)) {
     $16 = HEAP32[$0 >> 2] | 0; //@line 4538
     $21 = HEAP32[$16 + ((HEAP32[(HEAP32[$16 >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0; //@line 4544
     if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 24 >> 2] & 63]($21) | 0) == -1) {
      $27 = HEAP32[$0 >> 2] | 0; //@line 4551
      $31 = $27 + ((HEAP32[(HEAP32[$27 >> 2] | 0) + -12 >> 2] | 0) + 16) | 0; //@line 4556
      HEAP32[$31 >> 2] = HEAP32[$31 >> 2] | 1; //@line 4559
     }
    }
   }
  }
 }
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $16 = 0, $21 = 0, $27 = 0, $31 = 0, $4 = 0;
 $0 = $this + 4 | 0; //@line 4184
 $1 = HEAP32[$0 >> 2] | 0; //@line 4185
 $4 = HEAP32[(HEAP32[$1 >> 2] | 0) + -12 >> 2] | 0; //@line 4188
 if (HEAP32[$1 + ($4 + 24) >> 2] | 0) {
  if (!(HEAP32[$1 + ($4 + 16) >> 2] | 0)) {
   if (HEAP32[$1 + ($4 + 4) >> 2] & 8192) {
    if (!(__ZSt18uncaught_exceptionv() | 0)) {
     $16 = HEAP32[$0 >> 2] | 0; //@line 4207
     $21 = HEAP32[$16 + ((HEAP32[(HEAP32[$16 >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0; //@line 4213
     if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 24 >> 2] & 63]($21) | 0) == -1) {
      $27 = HEAP32[$0 >> 2] | 0; //@line 4220
      $31 = $27 + ((HEAP32[(HEAP32[$27 >> 2] | 0) + -12 >> 2] | 0) + 16) | 0; //@line 4225
      HEAP32[$31 >> 2] = HEAP32[$31 >> 2] | 1; //@line 4228
     }
    }
   }
  }
 }
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($this) {
 $this = $this | 0;
 var $12 = 0, $21 = 0, $__s = 0, sp = 0;
 sp = STACKTOP; //@line 4070
 STACKTOP = STACKTOP + 16 | 0; //@line 4071
 $__s = sp; //@line 4072
 if (HEAP32[$this + ((HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0) {
  __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_($__s, $this); //@line 4081
  if (HEAP8[$__s >> 0] | 0) {
   $12 = HEAP32[$this + ((HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0; //@line 4090
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 24 >> 2] & 63]($12) | 0) == -1) {
    $21 = $this + ((HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 16) | 0; //@line 4101
    HEAP32[$21 >> 2] = HEAP32[$21 >> 2] | 1; //@line 4104
   }
  }
  __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s); //@line 4107
 }
 STACKTOP = sp; //@line 4109
 return $this | 0; //@line 4109
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this) {
 $this = $this | 0;
 var $12 = 0, $21 = 0, $__s = 0, sp = 0;
 sp = STACKTOP; //@line 3985
 STACKTOP = STACKTOP + 16 | 0; //@line 3986
 $__s = sp; //@line 3987
 if (HEAP32[$this + ((HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($__s, $this); //@line 3996
  if (HEAP8[$__s >> 0] | 0) {
   $12 = HEAP32[$this + ((HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0; //@line 4005
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 24 >> 2] & 63]($12) | 0) == -1) {
    $21 = $this + ((HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 16) | 0; //@line 4016
    HEAP32[$21 >> 2] = HEAP32[$21 >> 2] | 1; //@line 4019
   }
  }
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s); //@line 4022
 }
 STACKTOP = sp; //@line 4024
 return $this | 0; //@line 4024
}
function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this) {
 $this = $this | 0;
 var $8 = 0;
 if (!(HEAP8[1840] | 0)) {
  if (___cxa_guard_acquire(1840) | 0) {
   if (!(HEAP8[1848] | 0)) {
    if (___cxa_guard_acquire(1848) | 0) {
     $8 = 12228; //@line 7004
     do {
      HEAP32[$8 >> 2] = 0; //@line 7006
      HEAP32[$8 + 4 >> 2] = 0; //@line 7008
      HEAP32[$8 + 8 >> 2] = 0; //@line 7010
      $8 = $8 + 12 | 0; //@line 7011
     } while (($8 | 0) != 12516);
     ___cxa_atexit(106, 0, ___dso_handle | 0) | 0; //@line 7019
     ___cxa_guard_release(1848); //@line 7020
    }
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12228, 12516) | 0; //@line 7023
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12240, 12528) | 0; //@line 7024
   HEAP32[3135] = 12228; //@line 7025
   ___cxa_guard_release(1840); //@line 7026
  }
 }
 return HEAP32[3135] | 0; //@line 7030
}
function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this) {
 $this = $this | 0;
 var $8 = 0;
 if (!(HEAP8[1824] | 0)) {
  if (___cxa_guard_acquire(1824) | 0) {
   if (!(HEAP8[1832] | 0)) {
    if (___cxa_guard_acquire(1832) | 0) {
     $8 = 11936; //@line 6960
     do {
      HEAP32[$8 >> 2] = 0; //@line 6962
      HEAP32[$8 + 4 >> 2] = 0; //@line 6964
      HEAP32[$8 + 8 >> 2] = 0; //@line 6966
      $8 = $8 + 12 | 0; //@line 6967
     } while (($8 | 0) != 12224);
     ___cxa_atexit(105, 0, ___dso_handle | 0) | 0; //@line 6975
     ___cxa_guard_release(1832); //@line 6976
    }
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11936, 21911) | 0; //@line 6979
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11948, 21914) | 0; //@line 6980
   HEAP32[3056] = 11936; //@line 6981
   ___cxa_guard_release(1824); //@line 6982
  }
 }
 return HEAP32[3056] | 0; //@line 6986
}
function __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t($this, $__fp, $__st) {
 $this = $this | 0;
 $__fp = $__fp | 0;
 $__st = $__st | 0;
 var $0 = 0, $1 = 0, $6 = 0, sp = 0;
 sp = STACKTOP; //@line 1029
 STACKTOP = STACKTOP + 16 | 0; //@line 1030
 $0 = sp + 4 | 0; //@line 1031
 $1 = sp; //@line 1032
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this); //@line 1033
 HEAP32[$this >> 2] = 7672; //@line 1034
 HEAP32[$this + 32 >> 2] = $__fp; //@line 1036
 __ZNSt3__16localeC2ERKS0_($0, $this + 4 | 0); //@line 1039
 HEAP32[$1 >> 2] = HEAP32[$0 >> 2]; //@line 1041
 $6 = __ZNKSt3__16locale9use_facetERNS0_2idE($1, 9396) | 0; //@line 1042
 __ZNSt3__16localeD2Ev($1); //@line 1043
 HEAP32[$this + 36 >> 2] = $6; //@line 1044
 HEAP32[$this + 40 >> 2] = $__st; //@line 1046
 HEAP8[$this + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] & 63]($6) | 0) & 1; //@line 1053
 STACKTOP = sp; //@line 1054
 return;
}
function _getc($f) {
 $f = $f | 0;
 var $$0 = 0, $14 = 0, $15 = 0, $23 = 0, $5 = 0, $6 = 0, label = 0;
 if ((HEAP32[$f + 76 >> 2] | 0) < 0) {
  label = 3; //@line 7135
 } else {
  if (!(___lockfile($f) | 0)) {
   label = 3; //@line 7140
  } else {
   $14 = $f + 4 | 0; //@line 7142
   $15 = HEAP32[$14 >> 2] | 0; //@line 7143
   if ($15 >>> 0 < (HEAP32[$f + 8 >> 2] | 0) >>> 0) {
    HEAP32[$14 >> 2] = $15 + 1; //@line 7149
    $23 = HEAPU8[$15 >> 0] | 0; //@line 7152
   } else {
    $23 = ___uflow($f) | 0; //@line 7155
   }
   $$0 = $23; //@line 7157
  }
 }
 do {
  if ((label | 0) == 3) {
   $5 = $f + 4 | 0; //@line 7162
   $6 = HEAP32[$5 >> 2] | 0; //@line 7163
   if ($6 >>> 0 < (HEAP32[$f + 8 >> 2] | 0) >>> 0) {
    HEAP32[$5 >> 2] = $6 + 1; //@line 7169
    $$0 = HEAPU8[$6 >> 0] | 0; //@line 7172
    break;
   } else {
    $$0 = ___uflow($f) | 0; //@line 7176
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 7181
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj($this, $__sz) {
 $this = $this | 0;
 $__sz = $__sz | 0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $12 = 0, $13 = 0, $2 = 0, $6 = 0;
 $0 = $this + 4 | 0; //@line 15207
 $1 = HEAP32[$0 >> 2] | 0; //@line 15208
 $2 = HEAP32[$this >> 2] | 0; //@line 15209
 $6 = $1 - $2 >> 2; //@line 15213
 if ($6 >>> 0 < $__sz >>> 0) {
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this, $__sz - $6 | 0); //@line 15217
 } else {
  if ($6 >>> 0 > $__sz >>> 0) {
   $10 = $2 + ($__sz << 2) | 0; //@line 15221
   if (($1 | 0) != ($10 | 0)) {
    $13 = $1; //@line 15224
    while (1) {
     $12 = $13 + -4 | 0; //@line 15226
     if (($12 | 0) == ($10 | 0)) {
      $$lcssa = $12; //@line 15229
      break;
     } else {
      $13 = $12; //@line 15232
     }
    }
    HEAP32[$0 >> 2] = $$lcssa; //@line 15235
   }
  }
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $0 = 0, $1 = 0, $6 = 0, $9 = 0;
 $0 = $info + 16 | 0; //@line 892
 $1 = HEAP32[$0 >> 2] | 0; //@line 893
 do {
  if (!$1) {
   HEAP32[$0 >> 2] = $adjustedPtr; //@line 897
   HEAP32[$info + 24 >> 2] = $path_below; //@line 899
   HEAP32[$info + 36 >> 2] = 1; //@line 901
  } else {
   if (($1 | 0) != ($adjustedPtr | 0)) {
    $9 = $info + 36 | 0; //@line 905
    HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + 1; //@line 908
    HEAP32[$info + 24 >> 2] = 2; //@line 910
    HEAP8[$info + 54 >> 0] = 1; //@line 912
    break;
   }
   $6 = $info + 24 | 0; //@line 915
   if ((HEAP32[$6 >> 2] | 0) == 2) {
    HEAP32[$6 >> 2] = $path_below; //@line 919
   }
  }
 } while (0);
 return;
}
function ___toread($f) {
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $15 = 0, $2 = 0, $21 = 0, $6 = 0, $8 = 0;
 $0 = $f + 74 | 0; //@line 6722
 $2 = HEAP8[$0 >> 0] | 0; //@line 6724
 HEAP8[$0 >> 0] = $2 + 255 | $2; //@line 6728
 $6 = $f + 20 | 0; //@line 6729
 $8 = $f + 44 | 0; //@line 6731
 if ((HEAP32[$6 >> 2] | 0) >>> 0 > (HEAP32[$8 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, 0, 0) | 0; //@line 6737
 }
 HEAP32[$f + 16 >> 2] = 0; //@line 6740
 HEAP32[$f + 28 >> 2] = 0; //@line 6742
 HEAP32[$6 >> 2] = 0; //@line 6743
 $15 = HEAP32[$f >> 2] | 0; //@line 6744
 if (!($15 & 20)) {
  $21 = HEAP32[$8 >> 2] | 0; //@line 6748
  HEAP32[$f + 8 >> 2] = $21; //@line 6750
  HEAP32[$f + 4 >> 2] = $21; //@line 6752
  $$0 = 0; //@line 6753
 } else {
  if (!($15 & 4)) {
   $$0 = -1; //@line 6758
  } else {
   HEAP32[$f >> 2] = $15 | 32; //@line 6761
   $$0 = -1; //@line 6762
  }
 }
 return $$0 | 0; //@line 6765
}
function __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t($this, $__fp, $__st) {
 $this = $this | 0;
 $__fp = $__fp | 0;
 $__st = $__st | 0;
 var $0 = 0, $1 = 0, $6 = 0, sp = 0;
 sp = STACKTOP; //@line 970
 STACKTOP = STACKTOP + 16 | 0; //@line 971
 $0 = sp + 4 | 0; //@line 972
 $1 = sp; //@line 973
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this); //@line 974
 HEAP32[$this >> 2] = 7800; //@line 975
 HEAP32[$this + 32 >> 2] = $__fp; //@line 977
 __ZNSt3__16localeC2ERKS0_($0, $this + 4 | 0); //@line 980
 HEAP32[$1 >> 2] = HEAP32[$0 >> 2]; //@line 982
 $6 = __ZNKSt3__16locale9use_facetERNS0_2idE($1, 9388) | 0; //@line 983
 __ZNSt3__16localeD2Ev($1); //@line 984
 HEAP32[$this + 36 >> 2] = $6; //@line 985
 HEAP32[$this + 40 >> 2] = $__st; //@line 987
 HEAP8[$this + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] & 63]($6) | 0) & 1; //@line 994
 STACKTOP = sp; //@line 995
 return;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $1 = 0, $_frm_nxt = 0, $_to_nxt = 0, sp = 0;
 sp = STACKTOP; //@line 6331
 STACKTOP = STACKTOP + 16 | 0; //@line 6332
 $_frm_nxt = sp + 4 | 0; //@line 6333
 $_to_nxt = sp; //@line 6334
 HEAP32[$_frm_nxt >> 2] = $frm; //@line 6335
 HEAP32[$_to_nxt >> 2] = $to; //@line 6336
 $1 = __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt, 1114111, 0) | 0; //@line 6337
 HEAP32[$frm_nxt >> 2] = HEAP32[$_frm_nxt >> 2]; //@line 6339
 HEAP32[$to_nxt >> 2] = HEAP32[$_to_nxt >> 2]; //@line 6341
 STACKTOP = sp; //@line 6342
 return $1 | 0; //@line 6342
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $1 = 0, $_frm_nxt = 0, $_to_nxt = 0, sp = 0;
 sp = STACKTOP; //@line 6354
 STACKTOP = STACKTOP + 16 | 0; //@line 6355
 $_frm_nxt = sp + 4 | 0; //@line 6356
 $_to_nxt = sp; //@line 6357
 HEAP32[$_frm_nxt >> 2] = $frm; //@line 6358
 HEAP32[$_to_nxt >> 2] = $to; //@line 6359
 $1 = __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt, 1114111, 0) | 0; //@line 6360
 HEAP32[$frm_nxt >> 2] = HEAP32[$_frm_nxt >> 2]; //@line 6362
 HEAP32[$to_nxt >> 2] = HEAP32[$_to_nxt >> 2]; //@line 6364
 STACKTOP = sp; //@line 6365
 return $1 | 0; //@line 6365
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $1 = 0, $_frm_nxt = 0, $_to_nxt = 0, sp = 0;
 sp = STACKTOP; //@line 6424
 STACKTOP = STACKTOP + 16 | 0; //@line 6425
 $_frm_nxt = sp + 4 | 0; //@line 6426
 $_to_nxt = sp; //@line 6427
 HEAP32[$_frm_nxt >> 2] = $frm; //@line 6428
 HEAP32[$_to_nxt >> 2] = $to; //@line 6429
 $1 = __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt, 1114111, 0) | 0; //@line 6430
 HEAP32[$frm_nxt >> 2] = HEAP32[$_frm_nxt >> 2]; //@line 6432
 HEAP32[$to_nxt >> 2] = HEAP32[$_to_nxt >> 2]; //@line 6434
 STACKTOP = sp; //@line 6435
 return $1 | 0; //@line 6435
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $1 = 0, $_frm_nxt = 0, $_to_nxt = 0, sp = 0;
 sp = STACKTOP; //@line 6447
 STACKTOP = STACKTOP + 16 | 0; //@line 6448
 $_frm_nxt = sp + 4 | 0; //@line 6449
 $_to_nxt = sp; //@line 6450
 HEAP32[$_frm_nxt >> 2] = $frm; //@line 6451
 HEAP32[$_to_nxt >> 2] = $to; //@line 6452
 $1 = __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt, 1114111, 0) | 0; //@line 6453
 HEAP32[$frm_nxt >> 2] = HEAP32[$_frm_nxt >> 2]; //@line 6455
 HEAP32[$to_nxt >> 2] = HEAP32[$_to_nxt >> 2]; //@line 6457
 STACKTOP = sp; //@line 6458
 return $1 | 0; //@line 6458
}
function __ZNSt3__111__stdoutbufIwE6xsputnEPKwi($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$0 = 0, $$012 = 0, $13 = 0, $__i$03 = 0;
 L1 : do {
  if (!(HEAP8[$this + 44 >> 0] | 0)) {
   if (($__n | 0) > 0) {
    $$012 = $__s; //@line 1165
    $__i$03 = 0; //@line 1165
    while (1) {
     if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[$this >> 2] | 0) + 52 >> 2] & 15]($this, HEAP32[$$012 >> 2] | 0) | 0) == -1) {
      $$0 = $__i$03; //@line 1174
      break L1;
     }
     $13 = $__i$03 + 1 | 0; //@line 1177
     if (($13 | 0) < ($__n | 0)) {
      $$012 = $$012 + 4 | 0; //@line 1181
      $__i$03 = $13; //@line 1181
     } else {
      $$0 = $13; //@line 1183
      break;
     }
    }
   } else {
    $$0 = 0; //@line 1188
   }
  } else {
   $$0 = _fwrite($__s, 4, $__n, HEAP32[$this + 32 >> 2] | 0) | 0; //@line 1194
  }
 } while (0);
 return $$0 | 0; //@line 1197
}
function __ZNSt3__111__stdoutbufIcE6xsputnEPKci($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$0 = 0, $$012 = 0, $14 = 0, $__i$03 = 0;
 L1 : do {
  if (!(HEAP8[$this + 44 >> 0] | 0)) {
   if (($__n | 0) > 0) {
    $$012 = $__s; //@line 1702
    $__i$03 = 0; //@line 1702
    while (1) {
     if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[$this >> 2] | 0) + 52 >> 2] & 15]($this, HEAPU8[$$012 >> 0] | 0) | 0) == -1) {
      $$0 = $__i$03; //@line 1712
      break L1;
     }
     $14 = $__i$03 + 1 | 0; //@line 1715
     if (($14 | 0) < ($__n | 0)) {
      $$012 = $$012 + 1 | 0; //@line 1719
      $__i$03 = $14; //@line 1719
     } else {
      $$0 = $14; //@line 1721
      break;
     }
    }
   } else {
    $$0 = 0; //@line 1726
   }
  } else {
   $$0 = _fwrite($__s, 1, $__n, HEAP32[$this + 32 >> 2] | 0) | 0; //@line 1732
  }
 } while (0);
 return $$0 | 0; //@line 1735
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $3 = 0, $8 = 0, $9 = 0;
 HEAP32[$this + 12 >> 2] = 0; //@line 17282
 HEAP32[$this + 16 >> 2] = $__a; //@line 17284
 do {
  if (!$__cap) {
   $8 = 0; //@line 17288
  } else {
   $3 = $__a + 112 | 0; //@line 17290
   if ($__cap >>> 0 < 29 & (HEAP8[$3 >> 0] | 0) == 0) {
    HEAP8[$3 >> 0] = 1; //@line 17296
    $8 = $__a; //@line 17297
    break;
   } else {
    $8 = __Znwj($__cap << 2) | 0; //@line 17302
    break;
   }
  }
 } while (0);
 HEAP32[$this >> 2] = $8; //@line 17307
 $9 = $8 + ($__start << 2) | 0; //@line 17308
 HEAP32[$this + 8 >> 2] = $9; //@line 17310
 HEAP32[$this + 4 >> 2] = $9; //@line 17312
 HEAP32[$this + 12 >> 2] = $8 + ($__cap << 2); //@line 17315
 return;
}
function __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this, $__nb, $__ne, $__tm, $__fmt, $__mod) {
 $this = $this | 0;
 $__nb = $__nb | 0;
 $__ne = $__ne | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $__mod = $__mod | 0;
 var $0 = 0, $1 = 0, $fmt = 0, sp = 0;
 sp = STACKTOP; //@line 13296
 STACKTOP = STACKTOP + 16 | 0; //@line 13297
 $fmt = sp; //@line 13298
 HEAP8[$fmt >> 0] = 37; //@line 13299
 $0 = $fmt + 1 | 0; //@line 13300
 HEAP8[$0 >> 0] = $__fmt; //@line 13301
 $1 = $fmt + 2 | 0; //@line 13302
 HEAP8[$1 >> 0] = $__mod; //@line 13303
 HEAP8[$fmt + 3 >> 0] = 0; //@line 13305
 if ($__mod << 24 >> 24) {
  HEAP8[$0 >> 0] = $__mod; //@line 13308
  HEAP8[$1 >> 0] = $__fmt; //@line 13309
 }
 HEAP32[$__ne >> 2] = $__nb + (_strftime_l($__nb | 0, (HEAP32[$__ne >> 2] | 0) - $__nb | 0, $fmt | 0, $__tm | 0, HEAP32[$this >> 2] | 0) | 0); //@line 13318
 STACKTOP = sp; //@line 13319
 return;
}
function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((num | 0) >= 4096) return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0; //@line 693
 ret = dest | 0; //@line 694
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0; //@line 697
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 698
   dest = dest + 1 | 0; //@line 699
   src = src + 1 | 0; //@line 700
   num = num - 1 | 0; //@line 701
  }
  while ((num | 0) >= 4) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 704
   dest = dest + 4 | 0; //@line 705
   src = src + 4 | 0; //@line 706
   num = num - 4 | 0; //@line 707
  }
 }
 while ((num | 0) > 0) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 711
  dest = dest + 1 | 0; //@line 712
  src = src + 1 | 0; //@line 713
  num = num - 1 | 0; //@line 714
 }
 return ret | 0; //@line 716
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__y, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__y = $__y | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, sp = 0;
 sp = STACKTOP; //@line 12945
 STACKTOP = STACKTOP + 16 | 0; //@line 12946
 $$byval_copy = sp + 4 | 0; //@line 12947
 $0 = sp; //@line 12948
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2]; //@line 12950
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 12951
 $2 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 4) | 0; //@line 12952
 if (!(HEAP32[$__err >> 2] & 4)) {
  HEAP32[$__y >> 2] = $2 + -1900; //@line 12958
 }
 STACKTOP = sp; //@line 12960
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__y, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__y = $__y | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, sp = 0;
 sp = STACKTOP; //@line 11108
 STACKTOP = STACKTOP + 16 | 0; //@line 11109
 $$byval_copy = sp + 4 | 0; //@line 11110
 $0 = sp; //@line 11111
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2]; //@line 11113
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2]; //@line 11114
 $2 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 4) | 0; //@line 11115
 if (!(HEAP32[$__err >> 2] & 4)) {
  HEAP32[$__y >> 2] = $2 + -1900; //@line 11121
 }
 STACKTOP = sp; //@line 11123
 return;
}
function __ZNSt3__16locale5__impD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $3 = 0, $6 = 0, $7 = 0, $i$01 = 0;
 HEAP32[$this >> 2] = 9304; //@line 4813
 $0 = $this + 8 | 0; //@line 4814
 $1 = $this + 12 | 0; //@line 4815
 $3 = HEAP32[$0 >> 2] | 0; //@line 4817
 if ((HEAP32[$1 >> 2] | 0) != ($3 | 0)) {
  $6 = $3; //@line 4820
  $i$01 = 0; //@line 4820
  do {
   $7 = HEAP32[$6 + ($i$01 << 2) >> 2] | 0; //@line 4823
   if ($7) {
    __ZNSt3__114__shared_count16__release_sharedEv($7) | 0; //@line 4826
   }
   $i$01 = $i$01 + 1 | 0; //@line 4828
   $6 = HEAP32[$0 >> 2] | 0; //@line 4830
  } while ($i$01 >>> 0 < (HEAP32[$1 >> 2] | 0) - $6 >> 2 >>> 0);
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 144 | 0); //@line 4844
 __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($0); //@line 4845
 return;
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this | 0;
 var $$lcssa = 0, $$pre$i$i$i = 0, $1 = 0, $10 = 0, $2 = 0, $4 = 0, $5 = 0, $7 = 0;
 $1 = HEAP32[$this + 4 >> 2] | 0; //@line 5
 $2 = $this + 8 | 0; //@line 6
 $$pre$i$i$i = HEAP32[$2 >> 2] | 0; //@line 7
 if (($$pre$i$i$i | 0) != ($1 | 0)) {
  $5 = $$pre$i$i$i; //@line 10
  while (1) {
   $4 = $5 + -4 | 0; //@line 12
   if (($4 | 0) == ($1 | 0)) {
    $$lcssa = $4; //@line 15
    break;
   } else {
    $5 = $4; //@line 18
   }
  }
  HEAP32[$2 >> 2] = $$lcssa; //@line 21
 }
 $7 = HEAP32[$this >> 2] | 0; //@line 23
 do {
  if ($7) {
   $10 = HEAP32[$this + 16 >> 2] | 0; //@line 28
   if (($10 | 0) == ($7 | 0)) {
    HEAP8[$10 + 112 >> 0] = 0; //@line 32
    break;
   } else {
    __ZdlPv($7); //@line 35
    break;
   }
  }
 } while (0);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $1 = 0, $2 = 0, $8 = 0, $offset_to_base$0 = 0;
 $1 = HEAP32[$this + 4 >> 2] | 0; //@line 1482
 $2 = $1 >> 8; //@line 1483
 if (!($1 & 1)) {
  $offset_to_base$0 = $2; //@line 1487
 } else {
  $offset_to_base$0 = HEAP32[(HEAP32[$current_ptr >> 2] | 0) + $2 >> 2] | 0; //@line 1492
 }
 $8 = HEAP32[$this >> 2] | 0; //@line 1494
 FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 20 >> 2] & 7]($8, $info, $dst_ptr, $current_ptr + $offset_to_base$0 | 0, ($1 & 2 | 0) != 0 ? $path_below : 2, $use_strcmp); //@line 1502
 return;
}
function __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t($this, $__fp, $__st) {
 $this = $this | 0;
 $__fp = $__fp | 0;
 $__st = $__st | 0;
 var $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP; //@line 1002
 STACKTOP = STACKTOP + 16 | 0; //@line 1003
 $0 = sp + 4 | 0; //@line 1004
 $1 = sp; //@line 1005
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this); //@line 1006
 HEAP32[$this >> 2] = 7736; //@line 1007
 HEAP32[$this + 32 >> 2] = $__fp; //@line 1009
 HEAP32[$this + 40 >> 2] = $__st; //@line 1011
 HEAP32[$this + 48 >> 2] = -1; //@line 1013
 HEAP8[$this + 52 >> 0] = 0; //@line 1015
 __ZNSt3__16localeC2ERKS0_($0, $this + 4 | 0); //@line 1017
 HEAP32[$1 >> 2] = HEAP32[$0 >> 2]; //@line 1019
 __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this, $1); //@line 1020
 __ZNSt3__16localeD2Ev($1); //@line 1021
 STACKTOP = sp; //@line 1022
 return;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $7$0 = 0, $7$1 = 0;
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1; //@line 792
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1; //@line 793
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1; //@line 794
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1; //@line 795
 $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0; //@line 796
 $4$1 = tempRet0; //@line 797
 $7$0 = $2$0 ^ $1$0; //@line 799
 $7$1 = $2$1 ^ $1$1; //@line 800
 return _i64Subtract((___udivmoddi4($4$0, $4$1, _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0, tempRet0, 0) | 0) ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0; //@line 803
}
function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, $id) {
 $this = $this | 0;
 $f = $f | 0;
 $id = $id | 0;
 var $0 = 0, $11 = 0, $12 = 0, $15 = 0, $3 = 0;
 __ZNSt3__114__shared_count12__add_sharedEv($f); //@line 4776
 $0 = $this + 8 | 0; //@line 4777
 $3 = HEAP32[$0 >> 2] | 0; //@line 4780
 if ((HEAP32[$this + 12 >> 2] | 0) - $3 >> 2 >>> 0 > $id >>> 0) {
  $11 = $3; //@line 4787
 } else {
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj($0, $id + 1 | 0); //@line 4790
  $11 = HEAP32[$0 >> 2] | 0; //@line 4792
 }
 $12 = HEAP32[$11 + ($id << 2) >> 2] | 0; //@line 4795
 if (!$12) {
  $15 = $11; //@line 4798
 } else {
  __ZNSt3__114__shared_count16__release_sharedEv($12) | 0; //@line 4800
  $15 = HEAP32[$0 >> 2] | 0; //@line 4802
 }
 HEAP32[$15 + ($id << 2) >> 2] = $f; //@line 4805
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this, $__n, $__c) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__c = $__c | 0;
 var $0 = 0, $2 = 0, $8 = 0;
 $0 = HEAP8[$this >> 0] | 0; //@line 2327
 $2 = ($0 & 1) == 0; //@line 2329
 if ($2) {
  $8 = ($0 & 255) >>> 1; //@line 2333
 } else {
  $8 = HEAP32[$this + 4 >> 2] | 0; //@line 2337
 }
 do {
  if ($8 >>> 0 < $__n >>> 0) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this, $__n - $8 | 0, $__c) | 0; //@line 2343
  } else {
   if ($2) {
    HEAP8[$this + 1 + $__n >> 0] = 0; //@line 2347
    HEAP8[$this >> 0] = $__n << 1; //@line 2350
    break;
   } else {
    HEAP8[(HEAP32[$this + 8 >> 2] | 0) + $__n >> 0] = 0; //@line 2356
    HEAP32[$this + 4 >> 2] = $__n; //@line 2358
    break;
   }
  }
 } while (0);
 return;
}
function __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t($this, $__fp, $__st) {
 $this = $this | 0;
 $__fp = $__fp | 0;
 $__st = $__st | 0;
 var $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP; //@line 943
 STACKTOP = STACKTOP + 16 | 0; //@line 944
 $0 = sp + 4 | 0; //@line 945
 $1 = sp; //@line 946
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this); //@line 947
 HEAP32[$this >> 2] = 7864; //@line 948
 HEAP32[$this + 32 >> 2] = $__fp; //@line 950
 HEAP32[$this + 40 >> 2] = $__st; //@line 952
 HEAP32[$this + 48 >> 2] = -1; //@line 954
 HEAP8[$this + 52 >> 0] = 0; //@line 956
 __ZNSt3__16localeC2ERKS0_($0, $this + 4 | 0); //@line 958
 HEAP32[$1 >> 2] = HEAP32[$0 >> 2]; //@line 960
 __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this, $1); //@line 961
 __ZNSt3__16localeD2Ev($1); //@line 962
 STACKTOP = sp; //@line 963
 return;
}
function _strtox530($s, $p, $base, $0, $1) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $6 = 0, $8 = 0, $f = 0, sp = 0;
 sp = STACKTOP; //@line 11314
 STACKTOP = STACKTOP + 112 | 0; //@line 11315
 $f = sp; //@line 11316
 HEAP32[$f >> 2] = 0; //@line 11317
 $2 = $f + 4 | 0; //@line 11318
 HEAP32[$2 >> 2] = $s; //@line 11319
 HEAP32[$f + 44 >> 2] = $s; //@line 11321
 $6 = $f + 8 | 0; //@line 11325
 HEAP32[$6 >> 2] = ($s | 0) < 0 ? -1 : $s + 2147483647 | 0; //@line 11326
 HEAP32[$f + 76 >> 2] = -1; //@line 11328
 ___shlim($f, 0); //@line 11329
 $8 = ___intscan($f, $base, 1, $0, $1) | 0; //@line 11330
 if ($p) {
  HEAP32[$p >> 2] = $s + ((HEAP32[$2 >> 2] | 0) + (HEAP32[$f + 108 >> 2] | 0) - (HEAP32[$6 >> 2] | 0)); //@line 11343
 }
 STACKTOP = sp; //@line 11346
 return $8 | 0; //@line 11346
}
function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
 stop = ptr + num | 0; //@line 642
 if ((num | 0) >= 20) {
  value = value & 255; //@line 645
  unaligned = ptr & 3; //@line 646
  value4 = value | value << 8 | value << 16 | value << 24; //@line 647
  stop4 = stop & ~3; //@line 648
  if (unaligned) {
   unaligned = ptr + 4 - unaligned | 0; //@line 650
   while ((ptr | 0) < (unaligned | 0)) {
    HEAP8[ptr >> 0] = value; //@line 652
    ptr = ptr + 1 | 0; //@line 653
   }
  }
  while ((ptr | 0) < (stop4 | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 657
   ptr = ptr + 4 | 0; //@line 658
  }
 }
 while ((ptr | 0) < (stop | 0)) {
  HEAP8[ptr >> 0] = value; //@line 662
  ptr = ptr + 1 | 0; //@line 663
 }
 return ptr - num | 0; //@line 665
}
function ___stdio_seek($f, $off, $whence) {
 $f = $f | 0;
 $off = $off | 0;
 $whence = $whence | 0;
 var $5 = 0, $ret = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 6499
 STACKTOP = STACKTOP + 32 | 0; //@line 6500
 $vararg_buffer = sp; //@line 6501
 $ret = sp + 20 | 0; //@line 6502
 HEAP32[$vararg_buffer >> 2] = HEAP32[$f + 60 >> 2]; //@line 6505
 HEAP32[$vararg_buffer + 4 >> 2] = 0; //@line 6507
 HEAP32[$vararg_buffer + 8 >> 2] = $off; //@line 6509
 HEAP32[$vararg_buffer + 12 >> 2] = $ret; //@line 6511
 HEAP32[$vararg_buffer + 16 >> 2] = $whence; //@line 6513
 if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
  HEAP32[$ret >> 2] = -1; //@line 6518
  $5 = -1; //@line 6519
 } else {
  $5 = HEAP32[$ret >> 2] | 0; //@line 6522
 }
 STACKTOP = sp; //@line 6524
 return $5 | 0; //@line 6524
}
function __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this | 0;
 var $$lcssa = 0, $$pre$i$i = 0, $0 = 0, $2 = 0, $4 = 0, $5 = 0;
 $0 = HEAP32[$this >> 2] | 0; //@line 15245
 do {
  if ($0) {
   $2 = $this + 4 | 0; //@line 15249
   $$pre$i$i = HEAP32[$2 >> 2] | 0; //@line 15250
   if (($$pre$i$i | 0) != ($0 | 0)) {
    $5 = $$pre$i$i; //@line 15253
    while (1) {
     $4 = $5 + -4 | 0; //@line 15255
     if (($4 | 0) == ($0 | 0)) {
      $$lcssa = $4; //@line 15258
      break;
     } else {
      $5 = $4; //@line 15261
     }
    }
    HEAP32[$2 >> 2] = $$lcssa; //@line 15264
   }
   if (($this + 16 | 0) == ($0 | 0)) {
    HEAP8[$this + 128 >> 0] = 0; //@line 15270
    break;
   } else {
    __ZdlPv($0); //@line 15273
    break;
   }
  }
 } while (0);
 return;
}
function _open($filename, $flags, $varargs) {
 $filename = $filename | 0;
 $flags = $flags | 0;
 $varargs = $varargs | 0;
 var $5 = 0, $6 = 0, $9 = 0, $ap = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 2179
 STACKTOP = STACKTOP + 32 | 0; //@line 2180
 $vararg_buffer = sp; //@line 2181
 $ap = sp + 16 | 0; //@line 2182
 HEAP32[$ap >> 2] = $varargs; //@line 2183
 $5 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 2195
 $6 = HEAP32[$5 >> 2] | 0; //@line 2196
 HEAP32[$ap >> 2] = $5 + 4; //@line 2198
 HEAP32[$vararg_buffer >> 2] = $filename; //@line 2200
 HEAP32[$vararg_buffer + 4 >> 2] = $flags | 32768; //@line 2202
 HEAP32[$vararg_buffer + 8 >> 2] = $6; //@line 2204
 $9 = ___syscall_ret(___syscall5(5, $vararg_buffer | 0) | 0) | 0; //@line 2206
 STACKTOP = sp; //@line 2207
 return $9 | 0; //@line 2207
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $1 = 0, $2 = 0, $8 = 0, $offset_to_base$0 = 0;
 $1 = HEAP32[$this + 4 >> 2] | 0; //@line 1514
 $2 = $1 >> 8; //@line 1515
 if (!($1 & 1)) {
  $offset_to_base$0 = $2; //@line 1519
 } else {
  $offset_to_base$0 = HEAP32[(HEAP32[$current_ptr >> 2] | 0) + $2 >> 2] | 0; //@line 1524
 }
 $8 = HEAP32[$this >> 2] | 0; //@line 1526
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 24 >> 2] & 3]($8, $info, $current_ptr + $offset_to_base$0 | 0, ($1 & 2 | 0) != 0 ? $path_below : 2, $use_strcmp); //@line 1534
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this, $__s, $__sz) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__sz = $__sz | 0;
 var $6 = 0, $7 = 0, $__p$0 = 0;
 if ($__sz >>> 0 > 4294967279) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this); //@line 2172
 }
 if ($__sz >>> 0 < 11) {
  HEAP8[$this >> 0] = $__sz << 1; //@line 2179
  $__p$0 = $this + 1 | 0; //@line 2181
 } else {
  $6 = $__sz + 16 & -16; //@line 2184
  $7 = __Znwj($6) | 0; //@line 2185
  HEAP32[$this + 8 >> 2] = $7; //@line 2187
  HEAP32[$this >> 2] = $6 | 1; //@line 2189
  HEAP32[$this + 4 >> 2] = $__sz; //@line 2191
  $__p$0 = $7; //@line 2192
 }
 _memcpy($__p$0 | 0, $__s | 0, $__sz | 0) | 0; //@line 2194
 HEAP8[$__p$0 + $__sz >> 0] = 0; //@line 2196
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this, $__s, $__sz) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__sz = $__sz | 0;
 var $6 = 0, $8 = 0, $__p$0 = 0;
 if ($__sz >>> 0 > 1073741807) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this); //@line 2760
 }
 if ($__sz >>> 0 < 2) {
  HEAP8[$this >> 0] = $__sz << 1; //@line 2767
  $__p$0 = $this + 4 | 0; //@line 2769
 } else {
  $6 = $__sz + 4 & -4; //@line 2772
  $8 = __Znwj($6 << 2) | 0; //@line 2774
  HEAP32[$this + 8 >> 2] = $8; //@line 2776
  HEAP32[$this >> 2] = $6 | 1; //@line 2778
  HEAP32[$this + 4 >> 2] = $__sz; //@line 2780
  $__p$0 = $8; //@line 2781
 }
 _wmemcpy($__p$0, $__s, $__sz) | 0; //@line 2783
 HEAP32[$__p$0 + ($__sz << 2) >> 2] = 0; //@line 2785
 return;
}
function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this, $m, $low, $high) {
 $this = $this | 0;
 $m = $m | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$0$lcssa = 0, $$01 = 0, $1 = 0;
 L1 : do {
  if (($low | 0) == ($high | 0)) {
   $$0$lcssa = $high; //@line 5102
  } else {
   $$01 = $low; //@line 5104
   while (1) {
    $1 = HEAP32[$$01 >> 2] | 0; //@line 5106
    if ($1 >>> 0 >= 128) {
     $$0$lcssa = $$01; //@line 5109
     break L1;
    }
    if (!((HEAP16[(HEAP32[(___ctype_b_loc() | 0) >> 2] | 0) + ($1 << 1) >> 1] & $m) << 16 >> 16)) {
     $$0$lcssa = $$01; //@line 5119
     break L1;
    }
    $$01 = $$01 + 4 | 0; //@line 5122
    if (($$01 | 0) == ($high | 0)) {
     $$0$lcssa = $high; //@line 5125
     break;
    }
   }
  }
 } while (0);
 return $$0$lcssa | 0; //@line 5133
}
function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this, $low, $high, $vec) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $vec = $vec | 0;
 var $$015 = 0, $$06 = 0, $11 = 0, $2 = 0, $4 = 0;
 $2 = ($high - $low | 0) >>> 2; //@line 5019
 if (($low | 0) != ($high | 0)) {
  $$015 = $low; //@line 5022
  $$06 = $vec; //@line 5022
  while (1) {
   $4 = HEAP32[$$015 >> 2] | 0; //@line 5024
   if ($4 >>> 0 < 128) {
    $11 = HEAPU16[(HEAP32[(___ctype_b_loc() | 0) >> 2] | 0) + ($4 << 1) >> 1] | 0; //@line 5032
   } else {
    $11 = 0; //@line 5034
   }
   HEAP16[$$06 >> 1] = $11; //@line 5037
   $$015 = $$015 + 4 | 0; //@line 5038
   if (($$015 | 0) == ($high | 0)) {
    break;
   } else {
    $$06 = $$06 + 2 | 0; //@line 5044
   }
  }
 }
 return $low + ($2 << 2) | 0; //@line 5049
}
function _wmemmove($d, $s, $n) {
 $d = $d | 0;
 $s = $s | 0;
 $n = $n | 0;
 var $$025 = 0, $$07 = 0, $$16 = 0, $$in = 0, $5 = 0;
 $5 = ($n | 0) == 0; //@line 8885
 if ($d - $s >> 2 >>> 0 < $n >>> 0) {
  if (!$5) {
   $$in = $n; //@line 8888
   do {
    $$in = $$in + -1 | 0; //@line 8890
    HEAP32[$d + ($$in << 2) >> 2] = HEAP32[$s + ($$in << 2) >> 2]; //@line 8894
   } while (($$in | 0) != 0);
  }
 } else {
  if (!$5) {
   $$025 = $s; //@line 8905
   $$07 = $d; //@line 8905
   $$16 = $n; //@line 8905
   while (1) {
    $$16 = $$16 + -1 | 0; //@line 8907
    HEAP32[$$07 >> 2] = HEAP32[$$025 >> 2]; //@line 8911
    if (!$$16) {
     break;
    } else {
     $$025 = $$025 + 4 | 0; //@line 8916
     $$07 = $$07 + 4 | 0; //@line 8916
    }
   }
  }
 }
 return $d | 0; //@line 8921
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($this, $__n, $__c) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__c = $__c | 0;
 var $6 = 0, $7 = 0, $__p$0 = 0;
 if ($__n >>> 0 > 4294967279) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this); //@line 2207
 }
 if ($__n >>> 0 < 11) {
  HEAP8[$this >> 0] = $__n << 1; //@line 2214
  $__p$0 = $this + 1 | 0; //@line 2216
 } else {
  $6 = $__n + 16 & -16; //@line 2219
  $7 = __Znwj($6) | 0; //@line 2220
  HEAP32[$this + 8 >> 2] = $7; //@line 2222
  HEAP32[$this >> 2] = $6 | 1; //@line 2224
  HEAP32[$this + 4 >> 2] = $__n; //@line 2226
  $__p$0 = $7; //@line 2227
 }
 _memset($__p$0 | 0, $__c | 0, $__n | 0) | 0; //@line 2229
 HEAP8[$__p$0 + $__n >> 0] = 0; //@line 2231
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($this, $__n, $__c) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__c = $__c | 0;
 var $6 = 0, $8 = 0, $__p$0 = 0;
 if ($__n >>> 0 > 1073741807) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this); //@line 2796
 }
 if ($__n >>> 0 < 2) {
  HEAP8[$this >> 0] = $__n << 1; //@line 2803
  $__p$0 = $this + 4 | 0; //@line 2805
 } else {
  $6 = $__n + 4 & -4; //@line 2808
  $8 = __Znwj($6 << 2) | 0; //@line 2810
  HEAP32[$this + 8 >> 2] = $8; //@line 2812
  HEAP32[$this >> 2] = $6 | 1; //@line 2814
  HEAP32[$this + 4 >> 2] = $__n; //@line 2816
  $__p$0 = $8; //@line 2817
 }
 _wmemset($__p$0, $__c, $__n) | 0; //@line 2819
 HEAP32[$__p$0 + ($__n << 2) >> 2] = 0; //@line 2821
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $4 = 0;
 if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $info, $dst_ptr, $current_ptr, $path_below); //@line 1831
 } else {
  $4 = HEAP32[$this + 8 >> 2] | 0; //@line 1834
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 20 >> 2] & 7]($4, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp); //@line 1838
 }
 return;
}
function _strcmp($l, $r) {
 $l = $l | 0;
 $r = $r | 0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $6 = 0, $7 = 0;
 $0 = HEAP8[$l >> 0] | 0; //@line 8720
 $1 = HEAP8[$r >> 0] | 0; //@line 8721
 if ($0 << 24 >> 24 == 0 ? 1 : $0 << 24 >> 24 != $1 << 24 >> 24) {
  $$lcssa = $0; //@line 8726
  $$lcssa2 = $1; //@line 8726
 } else {
  $$014 = $l; //@line 8728
  $$05 = $r; //@line 8728
  do {
   $$014 = $$014 + 1 | 0; //@line 8730
   $$05 = $$05 + 1 | 0; //@line 8731
   $6 = HEAP8[$$014 >> 0] | 0; //@line 8732
   $7 = HEAP8[$$05 >> 0] | 0; //@line 8733
  } while (!($6 << 24 >> 24 == 0 ? 1 : $6 << 24 >> 24 != $7 << 24 >> 24));
  $$lcssa = $6; //@line 8738
  $$lcssa2 = $7; //@line 8738
 }
 return ($$lcssa & 255) - ($$lcssa2 & 255) | 0; //@line 8748
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $1 = 0, $2 = 0, $8 = 0, $offset_to_base$0 = 0;
 $1 = HEAP32[$this + 4 >> 2] | 0; //@line 970
 $2 = $1 >> 8; //@line 971
 if (!($1 & 1)) {
  $offset_to_base$0 = $2; //@line 975
 } else {
  $offset_to_base$0 = HEAP32[(HEAP32[$adjustedPtr >> 2] | 0) + $2 >> 2] | 0; //@line 980
 }
 $8 = HEAP32[$this >> 2] | 0; //@line 982
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] & 7]($8, $info, $adjustedPtr + $offset_to_base$0 | 0, ($1 & 2 | 0) != 0 ? $path_below : 2); //@line 990
 return;
}
function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this, $m, $low, $high) {
 $this = $this | 0;
 $m = $m | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$0$lcssa = 0, $$01 = 0, $1 = 0;
 L1 : do {
  if (($low | 0) == ($high | 0)) {
   $$0$lcssa = $high; //@line 5061
  } else {
   $$01 = $low; //@line 5063
   while (1) {
    $1 = HEAP32[$$01 >> 2] | 0; //@line 5065
    if ($1 >>> 0 < 128) {
     if ((HEAP16[(HEAP32[(___ctype_b_loc() | 0) >> 2] | 0) + ($1 << 1) >> 1] & $m) << 16 >> 16) {
      $$0$lcssa = $$01; //@line 5075
      break L1;
     }
    }
    $$01 = $$01 + 4 | 0; //@line 5079
    if (($$01 | 0) == ($high | 0)) {
     $$0$lcssa = $high; //@line 5082
     break;
    }
   }
  }
 } while (0);
 return $$0$lcssa | 0; //@line 5090
}
function __ZNSt3__111__call_onceERVmPvPFvS2_E($flag, $arg, $func) {
 $flag = $flag | 0;
 $arg = $arg | 0;
 $func = $func | 0;
 _pthread_mutex_lock(12844) | 0; //@line 601
 if ((HEAP32[$flag >> 2] | 0) == 1) {
  do {
   _pthread_cond_wait(12872, 12844) | 0; //@line 606
  } while ((HEAP32[$flag >> 2] | 0) == 1);
 }
 if (!(HEAP32[$flag >> 2] | 0)) {
  HEAP32[$flag >> 2] = 1; //@line 617
  _pthread_mutex_unlock(12844) | 0; //@line 618
  FUNCTION_TABLE_vi[$func & 127]($arg); //@line 619
  _pthread_mutex_lock(12844) | 0; //@line 620
  HEAP32[$flag >> 2] = -1; //@line 621
  _pthread_mutex_unlock(12844) | 0; //@line 622
  _pthread_cond_broadcast(12872) | 0; //@line 623
 } else {
  _pthread_mutex_unlock(12844) | 0; //@line 625
 }
 return;
}
function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this, $__lo, $__hi) {
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 var $3 = 0, $4 = 0, $7 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0;
 if (($__lo | 0) == ($__hi | 0)) {
  $__h$0$lcssa = 0; //@line 4783
 } else {
  $__h$02 = 0; //@line 4785
  $__p$01 = $__lo; //@line 4785
  while (1) {
   $3 = (HEAP32[$__p$01 >> 2] | 0) + ($__h$02 << 4) | 0; //@line 4789
   $4 = $3 & -268435456; //@line 4790
   $7 = ($4 >>> 24 | $4) ^ $3; //@line 4793
   $__p$01 = $__p$01 + 4 | 0; //@line 4794
   if (($__p$01 | 0) == ($__hi | 0)) {
    $__h$0$lcssa = $7; //@line 4797
    break;
   } else {
    $__h$02 = $7; //@line 4800
   }
  }
 }
 return $__h$0$lcssa | 0; //@line 4804
}
function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this, $__lo, $__hi) {
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 var $4 = 0, $5 = 0, $8 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0;
 if (($__lo | 0) == ($__hi | 0)) {
  $__h$0$lcssa = 0; //@line 4675
 } else {
  $__h$02 = 0; //@line 4677
  $__p$01 = $__lo; //@line 4677
  while (1) {
   $4 = (HEAP8[$__p$01 >> 0] | 0) + ($__h$02 << 4) | 0; //@line 4682
   $5 = $4 & -268435456; //@line 4683
   $8 = ($5 >>> 24 | $5) ^ $4; //@line 4686
   $__p$01 = $__p$01 + 1 | 0; //@line 4687
   if (($__p$01 | 0) == ($__hi | 0)) {
    $__h$0$lcssa = $8; //@line 4690
    break;
   } else {
    $__h$02 = $8; //@line 4693
   }
  }
 }
 return $__h$0$lcssa | 0; //@line 4697
}
function ___stdout_write($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $9 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 6663
 STACKTOP = STACKTOP + 80 | 0; //@line 6664
 $vararg_buffer = sp; //@line 6665
 HEAP32[$f + 36 >> 2] = 3; //@line 6668
 if (!(HEAP32[$f >> 2] & 64)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$f + 60 >> 2]; //@line 6675
  HEAP32[$vararg_buffer + 4 >> 2] = 21505; //@line 6677
  HEAP32[$vararg_buffer + 8 >> 2] = sp + 12; //@line 6679
  if (___syscall54(54, $vararg_buffer | 0) | 0) {
   HEAP8[$f + 75 >> 0] = -1; //@line 6684
  }
 }
 $9 = ___stdio_write($f, $buf, $len) | 0; //@line 6687
 STACKTOP = sp; //@line 6688
 return $9 | 0; //@line 6688
}
function __Znwj($size) {
 $size = $size | 0;
 var $$lcssa = 0, $$size = 0, $1 = 0, $3 = 0, $5 = 0, $7 = 0;
 $$size = ($size | 0) == 0 ? 1 : $size; //@line 662
 $1 = _malloc($$size) | 0; //@line 663
 L1 : do {
  if (!$1) {
   while (1) {
    $3 = __ZSt15get_new_handlerv() | 0; //@line 668
    if (!$3) {
     break;
    }
    FUNCTION_TABLE_v[$3 & 3](); //@line 673
    $5 = _malloc($$size) | 0; //@line 674
    if ($5) {
     $$lcssa = $5; //@line 677
     break L1;
    }
   }
   $7 = ___cxa_allocate_exception(4) | 0; //@line 681
   HEAP32[$7 >> 2] = 2148; //@line 682
   ___cxa_throw($7 | 0, 8, 1); //@line 683
  } else {
   $$lcssa = $1; //@line 686
  }
 } while (0);
 return $$lcssa | 0; //@line 689
}
function _fwrite($src, $size, $nmemb, $f) {
 $src = $src | 0;
 $size = $size | 0;
 $nmemb = $nmemb | 0;
 $f = $f | 0;
 var $0 = 0, $10 = 0, $6 = 0, $8 = 0, $phitmp = 0;
 $0 = Math_imul($nmemb, $size) | 0; //@line 7099
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($f) | 0) == 0; //@line 7105
  $6 = ___fwritex($src, $0, $f) | 0; //@line 7106
  if ($phitmp) {
   $8 = $6; //@line 7108
  } else {
   ___unlockfile($f); //@line 7110
   $8 = $6; //@line 7111
  }
 } else {
  $8 = ___fwritex($src, $0, $f) | 0; //@line 7115
 }
 if (($8 | 0) == ($0 | 0)) {
  $10 = $nmemb; //@line 7119
 } else {
  $10 = ($8 >>> 0) / ($size >>> 0) | 0; //@line 7122
 }
 return $10 | 0; //@line 7124
}
function _calloc($n_elements, $elem_size) {
 $n_elements = $n_elements | 0;
 $elem_size = $elem_size | 0;
 var $1 = 0, $6 = 0, $req$0 = 0;
 if (!$n_elements) {
  $req$0 = 0; //@line 15035
 } else {
  $1 = Math_imul($elem_size, $n_elements) | 0; //@line 15037
  if (($elem_size | $n_elements) >>> 0 > 65535) {
   $req$0 = (($1 >>> 0) / ($n_elements >>> 0) | 0 | 0) == ($elem_size | 0) ? $1 : -1; //@line 15044
  } else {
   $req$0 = $1; //@line 15046
  }
 }
 $6 = _malloc($req$0) | 0; //@line 15049
 if (!$6) {
  return $6 | 0; //@line 15052
 }
 if (!(HEAP32[$6 + -4 >> 2] & 3)) {
  return $6 | 0; //@line 15059
 }
 _memset($6 | 0, 0, $req$0 | 0) | 0; //@line 15061
 return $6 | 0; //@line 15062
}
function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this, $low, $high, $dfault, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dfault = $dfault | 0;
 $dest = $dest | 0;
 var $$015 = 0, $$06 = 0, $2 = 0, $4 = 0;
 $2 = ($high - $low | 0) >>> 2; //@line 5301
 if (($low | 0) != ($high | 0)) {
  $$015 = $low; //@line 5304
  $$06 = $dest; //@line 5304
  while (1) {
   $4 = HEAP32[$$015 >> 2] | 0; //@line 5306
   HEAP8[$$06 >> 0] = $4 >>> 0 < 128 ? $4 & 255 : $dfault; //@line 5310
   $$015 = $$015 + 4 | 0; //@line 5311
   if (($$015 | 0) == ($high | 0)) {
    break;
   } else {
    $$06 = $$06 + 1 | 0; //@line 5317
   }
  }
 }
 return $low + ($2 << 2) | 0; //@line 5322
}
function ___string_read($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $0 = 0, $1 = 0, $11 = 0, $2 = 0, $3 = 0, $k$0 = 0, $k$0$len = 0;
 $0 = $f + 84 | 0; //@line 6696
 $1 = HEAP32[$0 >> 2] | 0; //@line 6697
 $2 = $len + 256 | 0; //@line 6698
 $3 = _memchr($1, 0, $2) | 0; //@line 6699
 $k$0 = ($3 | 0) == 0 ? $2 : $3 - $1 | 0; //@line 6704
 $k$0$len = $k$0 >>> 0 < $len >>> 0 ? $k$0 : $len; //@line 6706
 _memcpy($buf | 0, $1 | 0, $k$0$len | 0) | 0; //@line 6707
 HEAP32[$f + 4 >> 2] = $1 + $k$0$len; //@line 6710
 $11 = $1 + $k$0 | 0; //@line 6711
 HEAP32[$f + 8 >> 2] = $11; //@line 6713
 HEAP32[$0 >> 2] = $11; //@line 6714
 return $k$0$len | 0; //@line 6715
}
function ___towrite($f) {
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $13 = 0, $2 = 0, $6 = 0;
 $0 = $f + 74 | 0; //@line 6772
 $2 = HEAP8[$0 >> 0] | 0; //@line 6774
 HEAP8[$0 >> 0] = $2 + 255 | $2; //@line 6778
 $6 = HEAP32[$f >> 2] | 0; //@line 6779
 if (!($6 & 8)) {
  HEAP32[$f + 8 >> 2] = 0; //@line 6784
  HEAP32[$f + 4 >> 2] = 0; //@line 6786
  $13 = HEAP32[$f + 44 >> 2] | 0; //@line 6788
  HEAP32[$f + 28 >> 2] = $13; //@line 6790
  HEAP32[$f + 20 >> 2] = $13; //@line 6792
  HEAP32[$f + 16 >> 2] = $13 + (HEAP32[$f + 48 >> 2] | 0); //@line 6798
  $$0 = 0; //@line 6799
 } else {
  HEAP32[$f >> 2] = $6 | 32; //@line 6802
  $$0 = -1; //@line 6803
 }
 return $$0 | 0; //@line 6805
}
function _vsscanf($s, $fmt, $ap) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $4 = 0, $f = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 8539
 STACKTOP = STACKTOP + 112 | 0; //@line 8540
 $f = sp; //@line 8541
 dest = $f; //@line 8542
 stop = dest + 112 | 0; //@line 8542
 do {
  HEAP32[dest >> 2] = 0; //@line 8542
  dest = dest + 4 | 0; //@line 8542
 } while ((dest | 0) < (stop | 0));
 HEAP32[$f + 32 >> 2] = 26; //@line 8544
 HEAP32[$f + 44 >> 2] = $s; //@line 8546
 HEAP32[$f + 76 >> 2] = -1; //@line 8548
 HEAP32[$f + 84 >> 2] = $s; //@line 8550
 $4 = _vfscanf($f, $fmt, $ap) | 0; //@line 8551
 STACKTOP = sp; //@line 8552
 return $4 | 0; //@line 8552
}
function __ZNSt3__18ios_base4initEPv($this, $sb) {
 $this = $this | 0;
 $sb = $sb | 0;
 var $8 = 0, dest = 0, stop = 0;
 HEAP32[$this + 24 >> 2] = $sb; //@line 3428
 HEAP32[$this + 16 >> 2] = ($sb | 0) == 0 & 1; //@line 3432
 HEAP32[$this + 20 >> 2] = 0; //@line 3434
 HEAP32[$this + 4 >> 2] = 4098; //@line 3436
 HEAP32[$this + 12 >> 2] = 0; //@line 3438
 HEAP32[$this + 8 >> 2] = 6; //@line 3440
 $8 = $this + 28 | 0; //@line 3442
 dest = $this + 32 | 0; //@line 3443
 stop = dest + 40 | 0; //@line 3443
 do {
  HEAP32[dest >> 2] = 0; //@line 3443
  dest = dest + 4 | 0; //@line 3443
 } while ((dest | 0) < (stop | 0));
 __ZNSt3__16localeC2Ev($8); //@line 3444
 return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $$0$i$i = 0, $1 = 0;
 if ($__n >>> 0 > 1073741823) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this); //@line 49
 }
 $1 = $this + 128 | 0; //@line 52
 if ($__n >>> 0 < 29 & (HEAP8[$1 >> 0] | 0) == 0) {
  HEAP8[$1 >> 0] = 1; //@line 59
  $$0$i$i = $this + 16 | 0; //@line 60
 } else {
  $$0$i$i = __Znwj($__n << 2) | 0; //@line 64
 }
 HEAP32[$this + 4 >> 2] = $$0$i$i; //@line 67
 HEAP32[$this >> 2] = $$0$i$i; //@line 68
 HEAP32[$this + 8 >> 2] = $$0$i$i + ($__n << 2); //@line 71
 return;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 var $$0 = 0, $0 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0;
 $0 = $this + 8 | 0; //@line 6197
 $2 = _uselocale(HEAP32[$0 >> 2] | 0) | 0; //@line 6199
 $3 = _mbtowc(0, 0, 4) | 0; //@line 6200
 if ($2) {
  _uselocale($2) | 0; //@line 6203
 }
 if (!$3) {
  $6 = HEAP32[$0 >> 2] | 0; //@line 6207
  if (!$6) {
   $$0 = 1; //@line 6210
  } else {
   $8 = _uselocale($6) | 0; //@line 6212
   if (!$8) {
    $$0 = 0; //@line 6215
   } else {
    _uselocale($8) | 0; //@line 6217
    $$0 = 0; //@line 6218
   }
  }
 } else {
  $$0 = -1; //@line 6222
 }
 return $$0 | 0; //@line 6224
}
function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$04 = 0, $2 = 0, $4 = 0, $9 = 0;
 $2 = ($high - $low | 0) >>> 2; //@line 5161
 if (($low | 0) != ($high | 0)) {
  $$04 = $low; //@line 5164
  do {
   $4 = HEAP32[$$04 >> 2] | 0; //@line 5166
   if ($4 >>> 0 < 128) {
    $9 = HEAP32[(HEAP32[(___ctype_toupper_loc() | 0) >> 2] | 0) + ($4 << 2) >> 2] | 0; //@line 5173
   } else {
    $9 = $4; //@line 5175
   }
   HEAP32[$$04 >> 2] = $9; //@line 5177
   $$04 = $$04 + 4 | 0; //@line 5178
  } while (($$04 | 0) != ($high | 0));
 }
 return $low + ($2 << 2) | 0; //@line 5188
}
function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$04 = 0, $2 = 0, $4 = 0, $9 = 0;
 $2 = ($high - $low | 0) >>> 2; //@line 5216
 if (($low | 0) != ($high | 0)) {
  $$04 = $low; //@line 5219
  do {
   $4 = HEAP32[$$04 >> 2] | 0; //@line 5221
   if ($4 >>> 0 < 128) {
    $9 = HEAP32[(HEAP32[(___ctype_tolower_loc() | 0) >> 2] | 0) + ($4 << 2) >> 2] | 0; //@line 5228
   } else {
    $9 = $4; //@line 5230
   }
   HEAP32[$$04 >> 2] = $9; //@line 5232
   $$04 = $$04 + 4 | 0; //@line 5233
  } while (($$04 | 0) != ($high | 0));
 }
 return $low + ($2 << 2) | 0; //@line 5243
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $4 = 0;
 if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $info, $adjustedPtr, $path_below); //@line 951
 } else {
  $4 = HEAP32[$this + 8 >> 2] | 0; //@line 954
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 28 >> 2] & 7]($4, $info, $adjustedPtr, $path_below); //@line 958
 }
 return;
}
function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this, $__loc) {
 $this = $this | 0;
 $__loc = $__loc | 0;
 var $0 = 0, $1 = 0, $6 = 0, $7 = 0;
 $0 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 9396) | 0; //@line 1305
 $1 = $this + 36 | 0; //@line 1306
 HEAP32[$1 >> 2] = $0; //@line 1307
 $6 = $this + 44 | 0; //@line 1312
 HEAP32[$6 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] & 63]($0) | 0; //@line 1313
 $7 = HEAP32[$1 >> 2] | 0; //@line 1314
 HEAP8[$this + 53 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$7 >> 2] | 0) + 28 >> 2] & 63]($7) | 0) & 1; //@line 1321
 if ((HEAP32[$6 >> 2] | 0) > 8) {}
 return;
}
function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this, $__loc) {
 $this = $this | 0;
 $__loc = $__loc | 0;
 var $0 = 0, $1 = 0, $6 = 0, $7 = 0;
 $0 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 9388) | 0; //@line 1844
 $1 = $this + 36 | 0; //@line 1845
 HEAP32[$1 >> 2] = $0; //@line 1846
 $6 = $this + 44 | 0; //@line 1851
 HEAP32[$6 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] & 63]($0) | 0; //@line 1852
 $7 = HEAP32[$1 >> 2] | 0; //@line 1853
 HEAP8[$this + 53 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$7 >> 2] | 0) + 28 >> 2] & 63]($7) | 0) & 1; //@line 1860
 if ((HEAP32[$6 >> 2] | 0) > 8) {}
 return;
}
function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this, $low, $high, $dfault, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dfault = $dfault | 0;
 $dest = $dest | 0;
 var $$013 = 0, $$04 = 0, $1 = 0;
 if (($low | 0) != ($high | 0)) {
  $$013 = $low; //@line 5534
  $$04 = $dest; //@line 5534
  while (1) {
   $1 = HEAP8[$$013 >> 0] | 0; //@line 5536
   HEAP8[$$04 >> 0] = $1 << 24 >> 24 > -1 ? $1 : $dfault; //@line 5539
   $$013 = $$013 + 1 | 0; //@line 5540
   if (($$013 | 0) == ($high | 0)) {
    break;
   } else {
    $$04 = $$04 + 1 | 0; //@line 5546
   }
  }
 }
 return $high | 0; //@line 5550
}
function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__s, $__n, $__l, $__format, $varargs) {
 $__s = $__s | 0;
 $__n = $__n | 0;
 $__l = $__l | 0;
 $__format = $__format | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $1 = 0, $__va = 0, sp = 0;
 sp = STACKTOP; //@line 13742
 STACKTOP = STACKTOP + 16 | 0; //@line 13743
 $__va = sp; //@line 13744
 HEAP32[$__va >> 2] = $varargs; //@line 13745
 $0 = _uselocale($__l) | 0; //@line 13746
 $1 = _vsnprintf($__s, $__n, $__format, $__va) | 0; //@line 13747
 if ($0) {
  _uselocale($0) | 0; //@line 13750
 }
 STACKTOP = sp; //@line 13752
 return $1 | 0; //@line 13752
}
function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$02 = 0, $1 = 0, $8 = 0;
 if (($low | 0) != ($high | 0)) {
  $$02 = $low; //@line 5401
  do {
   $1 = HEAP8[$$02 >> 0] | 0; //@line 5403
   if ($1 << 24 >> 24 > -1) {
    $8 = HEAP32[(HEAP32[(___ctype_toupper_loc() | 0) >> 2] | 0) + ($1 << 24 >> 24 << 2) >> 2] & 255; //@line 5412
   } else {
    $8 = $1; //@line 5414
   }
   HEAP8[$$02 >> 0] = $8; //@line 5416
   $$02 = $$02 + 1 | 0; //@line 5417
  } while (($$02 | 0) != ($high | 0));
 }
 return $high | 0; //@line 5426
}
function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$02 = 0, $1 = 0, $8 = 0;
 if (($low | 0) != ($high | 0)) {
  $$02 = $low; //@line 5455
  do {
   $1 = HEAP8[$$02 >> 0] | 0; //@line 5457
   if ($1 << 24 >> 24 > -1) {
    $8 = HEAP32[(HEAP32[(___ctype_tolower_loc() | 0) >> 2] | 0) + ($1 << 24 >> 24 << 2) >> 2] & 255; //@line 5466
   } else {
    $8 = $1; //@line 5468
   }
   HEAP8[$$02 >> 0] = $8; //@line 5470
   $$02 = $$02 + 1 | 0; //@line 5471
  } while (($$02 | 0) != ($high | 0));
 }
 return $high | 0; //@line 5480
}
function ___uflow($f) {
 $f = $f | 0;
 var $$0 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6810
 STACKTOP = STACKTOP + 16 | 0; //@line 6811
 $c = sp; //@line 6812
 if (!(HEAP32[$f + 8 >> 2] | 0)) {
  if (!(___toread($f) | 0)) {
   label = 3; //@line 6820
  } else {
   $$0 = -1; //@line 6822
  }
 } else {
  label = 3; //@line 6825
 }
 if ((label | 0) == 3) {
  if ((FUNCTION_TABLE_iiii[HEAP32[$f + 32 >> 2] & 31]($f, $c, 1) | 0) == 1) {
   $$0 = HEAPU8[$c >> 0] | 0; //@line 6835
  } else {
   $$0 = -1; //@line 6837
  }
 }
 STACKTOP = sp; //@line 6840
 return $$0 | 0; //@line 6840
}
function ___cxa_can_catch($catchType, $excpType, $thrown) {
 $catchType = $catchType | 0;
 $excpType = $excpType | 0;
 $thrown = $thrown | 0;
 var $4 = 0, $temp = 0, sp = 0;
 sp = STACKTOP; //@line 1864
 STACKTOP = STACKTOP + 16 | 0; //@line 1865
 $temp = sp; //@line 1866
 HEAP32[$temp >> 2] = HEAP32[$thrown >> 2]; //@line 1868
 $4 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$catchType >> 2] | 0) + 16 >> 2] & 31]($catchType, $excpType, $temp) | 0; //@line 1872
 if ($4) {
  HEAP32[$thrown >> 2] = HEAP32[$temp >> 2]; //@line 1876
 }
 STACKTOP = sp; //@line 1878
 return $4 & 1 | 0; //@line 1878
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0; //@line 833
 $y_sroa_0_0_extract_trunc = $b$0; //@line 834
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0; //@line 835
 $1$1 = tempRet0; //@line 836
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0; //@line 838
}
function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__s, $__l, $__format, $varargs) {
 $__s = $__s | 0;
 $__l = $__l | 0;
 $__format = $__format | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $1 = 0, $__va = 0, sp = 0;
 sp = STACKTOP; //@line 13760
 STACKTOP = STACKTOP + 16 | 0; //@line 13761
 $__va = sp; //@line 13762
 HEAP32[$__va >> 2] = $varargs; //@line 13763
 $0 = _uselocale($__l) | 0; //@line 13764
 $1 = _vasprintf($__s, $__format, $__va) | 0; //@line 13765
 if ($0) {
  _uselocale($0) | 0; //@line 13768
 }
 STACKTOP = sp; //@line 13770
 return $1 | 0; //@line 13770
}
function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__s, $__l, $__format, $varargs) {
 $__s = $__s | 0;
 $__l = $__l | 0;
 $__format = $__format | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $1 = 0, $__va = 0, sp = 0;
 sp = STACKTOP; //@line 10427
 STACKTOP = STACKTOP + 16 | 0; //@line 10428
 $__va = sp; //@line 10429
 HEAP32[$__va >> 2] = $varargs; //@line 10430
 $0 = _uselocale($__l) | 0; //@line 10431
 $1 = _vsscanf($__s, $__format, $__va) | 0; //@line 10432
 if ($0) {
  _uselocale($0) | 0; //@line 10435
 }
 STACKTOP = sp; //@line 10437
 return $1 | 0; //@line 10437
}
function __ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($__vp) {
 $__vp = $__vp | 0;
 var $$field = 0, $$field2 = 0, $0 = 0, $10 = 0, $3 = 0;
 $0 = $__vp + 4 | 0; //@line 15284
 $$field = HEAP32[$0 >> 2] | 0; //@line 15285
 $$field2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15287
 $3 = (HEAP32[$__vp >> 2] | 0) + ($$field2 >> 1) | 0; //@line 15290
 if (!($$field2 & 1)) {
  $10 = $$field; //@line 15295
 } else {
  $10 = HEAP32[(HEAP32[$3 >> 2] | 0) + $$field >> 2] | 0; //@line 15300
 }
 FUNCTION_TABLE_vi[$10 & 127]($3); //@line 15302
 return;
}
function _memmove(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
  ret = dest; //@line 734
  src = src + num | 0; //@line 735
  dest = dest + num | 0; //@line 736
  while ((num | 0) > 0) {
   dest = dest - 1 | 0; //@line 738
   src = src - 1 | 0; //@line 739
   num = num - 1 | 0; //@line 740
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 741
  }
  dest = ret; //@line 743
 } else {
  _memcpy(dest, src, num) | 0; //@line 745
 }
 return dest | 0; //@line 747
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 HEAP32[$this >> 2] = 0; //@line 14936
 HEAP32[$this + 4 >> 2] = 0; //@line 14938
 HEAP32[$this + 8 >> 2] = 0; //@line 14940
 HEAP8[$this + 128 >> 0] = 0; //@line 14942
 if ($__n) {
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj($this, $__n); //@line 14945
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this, $__n); //@line 14946
 }
 return;
}
function copyTempDouble(ptr) {
 ptr = ptr | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[ptr >> 0]; //@line 40
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[ptr + 1 >> 0]; //@line 41
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[ptr + 2 >> 0]; //@line 42
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[ptr + 3 >> 0]; //@line 43
 HEAP8[tempDoublePtr + 4 >> 0] = HEAP8[ptr + 4 >> 0]; //@line 44
 HEAP8[tempDoublePtr + 5 >> 0] = HEAP8[ptr + 5 >> 0]; //@line 45
 HEAP8[tempDoublePtr + 6 >> 0] = HEAP8[ptr + 6 >> 0]; //@line 46
 HEAP8[tempDoublePtr + 7 >> 0] = HEAP8[ptr + 7 >> 0]; //@line 47
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $info, $dst_ptr, $current_ptr, $path_below); //@line 1855
 }
 return;
}
function _newlocale($mask, $name, $base) {
 $mask = $mask | 0;
 $name = $name | 0;
 $base = $base | 0;
 var $$01 = 0, label = 0;
 if (!(HEAP8[$name >> 0] | 0)) {
  label = 4; //@line 4669
 } else {
  if (!(_strcmp($name, 21583) | 0)) {
   label = 4; //@line 4674
  } else {
   if (!(_strcmp($name, 17059) | 0)) {
    label = 4; //@line 4679
   } else {
    $$01 = 0; //@line 4681
   }
  }
 }
 if ((label | 0) == 4) {
  if (!$base) {
   $$01 = _calloc(1, 4) | 0; //@line 4689
  } else {
   $$01 = $base; //@line 4691
  }
 }
 return $$01 | 0; //@line 4694
}
function __ZNSt3__18ios_base16__call_callbacksENS0_5eventE($this, $ev) {
 $this = $this | 0;
 $ev = $ev | 0;
 var $1 = 0, $2 = 0, $3 = 0, $i$01 = 0;
 $1 = HEAP32[$this + 40 >> 2] | 0; //@line 3386
 $2 = $this + 32 | 0; //@line 3387
 $3 = $this + 36 | 0; //@line 3388
 if ($1) {
  $i$01 = $1; //@line 3391
  do {
   $i$01 = $i$01 + -1 | 0; //@line 3393
   FUNCTION_TABLE_viii[HEAP32[(HEAP32[$2 >> 2] | 0) + ($i$01 << 2) >> 2] & 0]($ev, $this, HEAP32[(HEAP32[$3 >> 2] | 0) + ($i$01 << 2) >> 2] | 0); //@line 3400
  } while (($i$01 | 0) != 0);
 }
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_($this, $__os) {
 $this = $this | 0;
 $__os = $__os | 0;
 var $3 = 0, $8 = 0;
 HEAP8[$this >> 0] = 0; //@line 4487
 HEAP32[$this + 4 >> 2] = $__os; //@line 4489
 $3 = HEAP32[(HEAP32[$__os >> 2] | 0) + -12 >> 2] | 0; //@line 4492
 if (!(HEAP32[$__os + ($3 + 16) >> 2] | 0)) {
  $8 = HEAP32[$__os + ($3 + 72) >> 2] | 0; //@line 4500
  if ($8) {
   __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($8) | 0; //@line 4503
  }
  HEAP8[$this >> 0] = 1; //@line 4505
 }
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($this, $__os) {
 $this = $this | 0;
 $__os = $__os | 0;
 var $3 = 0, $8 = 0;
 HEAP8[$this >> 0] = 0; //@line 4156
 HEAP32[$this + 4 >> 2] = $__os; //@line 4158
 $3 = HEAP32[(HEAP32[$__os >> 2] | 0) + -12 >> 2] | 0; //@line 4161
 if (!(HEAP32[$__os + ($3 + 16) >> 2] | 0)) {
  $8 = HEAP32[$__os + ($3 + 72) >> 2] | 0; //@line 4169
  if ($8) {
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($8) | 0; //@line 4172
  }
  HEAP8[$this >> 0] = 1; //@line 4174
 }
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this, $__str) {
 $this = $this | 0;
 $__str = $__str | 0;
 if (!(HEAP8[$__str >> 0] & 1)) {
  HEAP32[$this >> 2] = HEAP32[$__str >> 2]; //@line 2154
  HEAP32[$this + 4 >> 2] = HEAP32[$__str + 4 >> 2]; //@line 2154
  HEAP32[$this + 8 >> 2] = HEAP32[$__str + 8 >> 2]; //@line 2154
 } else {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this, HEAP32[$__str + 8 >> 2] | 0, HEAP32[$__str + 4 >> 2] | 0); //@line 2160
 }
 return;
}
function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535; //@line 777
 $2 = $b & 65535; //@line 778
 $3 = Math_imul($2, $1) | 0; //@line 779
 $6 = $a >>> 16; //@line 780
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0; //@line 781
 $11 = $b >>> 16; //@line 782
 $12 = Math_imul($11, $1) | 0; //@line 783
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0; //@line 784
}
function __ZNSt3__16locale2id5__getEv($this) {
 $this = $this | 0;
 var $__p$i = 0, sp = 0;
 sp = STACKTOP; //@line 4920
 STACKTOP = STACKTOP + 16 | 0; //@line 4921
 $__p$i = sp; //@line 4922
 if ((HEAP32[$this >> 2] | 0) != -1) {
  HEAP32[$__p$i >> 2] = $this; //@line 4926
  HEAP32[$__p$i + 4 >> 2] = 99; //@line 4928
  HEAP32[$__p$i + 8 >> 2] = 0; //@line 4930
  __ZNSt3__111__call_onceERVmPvPFvS2_E($this, $__p$i, 100); //@line 4931
 }
 STACKTOP = sp; //@line 4936
 return (HEAP32[$this + 4 >> 2] | 0) + -1 | 0; //@line 4936
}
function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this, $low, $high, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dest = $dest | 0;
 var $$012 = 0, $$03 = 0;
 if (($low | 0) != ($high | 0)) {
  $$012 = $low; //@line 5498
  $$03 = $dest; //@line 5498
  while (1) {
   HEAP8[$$03 >> 0] = HEAP8[$$012 >> 0] | 0; //@line 5501
   $$012 = $$012 + 1 | 0; //@line 5502
   if (($$012 | 0) == ($high | 0)) {
    break;
   } else {
    $$03 = $$03 + 1 | 0; //@line 5508
   }
  }
 }
 return $high | 0; //@line 5512
}
function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this, $low, $high, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dest = $dest | 0;
 var $$012 = 0, $$03 = 0;
 if (($low | 0) != ($high | 0)) {
  $$012 = $low; //@line 5262
  $$03 = $dest; //@line 5262
  while (1) {
   HEAP32[$$03 >> 2] = HEAP8[$$012 >> 0]; //@line 5266
   $$012 = $$012 + 1 | 0; //@line 5267
   if (($$012 | 0) == ($high | 0)) {
    break;
   } else {
    $$03 = $$03 + 4 | 0; //@line 5273
   }
  }
 }
 return $high | 0; //@line 5277
}
function __ZSt9terminatev() {
 var $0 = 0, $17 = 0, $2 = 0, $5 = 0;
 $0 = ___cxa_get_globals_fast() | 0; //@line 745
 if ($0) {
  $2 = HEAP32[$0 >> 2] | 0; //@line 748
  if ($2) {
   $5 = $2 + 48 | 0; //@line 752
   if ((HEAP32[$5 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[$5 + 4 >> 2] | 0) == 1129074247 : 0) {
    __ZSt11__terminatePFvvE(HEAP32[$2 + 12 >> 2] | 0); //@line 765
   }
  }
 }
 $17 = HEAP32[534] | 0; //@line 770
 HEAP32[534] = $17 + 0; //@line 770
 __ZSt11__terminatePFvvE($17); //@line 772
}
function _copysign($x, $y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $6 = 0;
 HEAPF64[tempDoublePtr >> 3] = $x; //@line 4714
 $0 = HEAP32[tempDoublePtr >> 2] | 0; //@line 4714
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 4715
 HEAPF64[tempDoublePtr >> 3] = $y; //@line 4716
 $6 = HEAP32[tempDoublePtr + 4 >> 2] & -2147483648 | $1 & 2147483647; //@line 4720
 HEAP32[tempDoublePtr >> 2] = $0; //@line 4721
 HEAP32[tempDoublePtr + 4 >> 2] = $6; //@line 4721
 return +(+HEAPF64[tempDoublePtr >> 3]);
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $$0 = 0, $0 = 0, $1 = 0;
 $0 = $this + 4 | 0; //@line 17256
 $$0 = $__n; //@line 17258
 $1 = HEAP32[$0 >> 2] | 0; //@line 17258
 do {
  HEAP32[$1 >> 2] = 0; //@line 17260
  $1 = (HEAP32[$0 >> 2] | 0) + 4 | 0; //@line 17262
  HEAP32[$0 >> 2] = $1; //@line 17263
  $$0 = $$0 + -1 | 0; //@line 17264
 } while (($$0 | 0) != 0);
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg$result, $this, $0, $1, $2, $3) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $9 = 0;
 $4 = $agg$result; //@line 3749
 HEAP32[$4 >> 2] = 0; //@line 3751
 HEAP32[$4 + 4 >> 2] = 0; //@line 3754
 $9 = $agg$result + 8 | 0; //@line 3756
 HEAP32[$9 >> 2] = -1; //@line 3758
 HEAP32[$9 + 4 >> 2] = -1; //@line 3761
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result, $this, $0, $1, $2, $3) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $9 = 0;
 $4 = $agg$result; //@line 3501
 HEAP32[$4 >> 2] = 0; //@line 3503
 HEAP32[$4 + 4 >> 2] = 0; //@line 3506
 $9 = $agg$result + 8 | 0; //@line 3508
 HEAP32[$9 >> 2] = -1; //@line 3510
 HEAP32[$9 + 4 >> 2] = -1; //@line 3513
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this) {
 $this = $this | 0;
 var $1 = 0;
 HEAP32[$this >> 2] = 7992; //@line 3718
 __ZNSt3__16localeC2Ev($this + 4 | 0); //@line 3720
 $1 = $this + 8 | 0; //@line 3721
 HEAP32[$1 >> 2] = 0; //@line 3722
 HEAP32[$1 + 4 >> 2] = 0; //@line 3722
 HEAP32[$1 + 8 >> 2] = 0; //@line 3722
 HEAP32[$1 + 12 >> 2] = 0; //@line 3722
 HEAP32[$1 + 16 >> 2] = 0; //@line 3722
 HEAP32[$1 + 20 >> 2] = 0; //@line 3722
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this) {
 $this = $this | 0;
 var $1 = 0;
 HEAP32[$this >> 2] = 7928; //@line 3470
 __ZNSt3__16localeC2Ev($this + 4 | 0); //@line 3472
 $1 = $this + 8 | 0; //@line 3473
 HEAP32[$1 >> 2] = 0; //@line 3474
 HEAP32[$1 + 4 >> 2] = 0; //@line 3474
 HEAP32[$1 + 8 >> 2] = 0; //@line 3474
 HEAP32[$1 + 12 >> 2] = 0; //@line 3474
 HEAP32[$1 + 16 >> 2] = 0; //@line 3474
 HEAP32[$1 + 20 >> 2] = 0; //@line 3474
 return;
}
function _wmemcpy($d, $s, $n) {
 $d = $d | 0;
 $s = $s | 0;
 $n = $n | 0;
 var $$014 = 0, $$023 = 0, $$05 = 0;
 if ($n) {
  $$014 = $n; //@line 8856
  $$023 = $s; //@line 8856
  $$05 = $d; //@line 8856
  while (1) {
   $$014 = $$014 + -1 | 0; //@line 8858
   HEAP32[$$05 >> 2] = HEAP32[$$023 >> 2]; //@line 8862
   if (!$$014) {
    break;
   } else {
    $$023 = $$023 + 4 | 0; //@line 8867
    $$05 = $$05 + 4 | 0; //@line 8867
   }
  }
 }
 return $d | 0; //@line 8871
}
function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE($this, $__loc) {
 $this = $this | 0;
 $__loc = $__loc | 0;
 var $3 = 0;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] & 63]($this) | 0; //@line 1084
 $3 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 9396) | 0; //@line 1085
 HEAP32[$this + 36 >> 2] = $3; //@line 1087
 HEAP8[$this + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$3 >> 2] | 0) + 28 >> 2] & 63]($3) | 0) & 1; //@line 1094
 return;
}
function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE($this, $__loc) {
 $this = $this | 0;
 $__loc = $__loc | 0;
 var $3 = 0;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] & 63]($this) | 0; //@line 1621
 $3 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 9388) | 0; //@line 1622
 HEAP32[$this + 36 >> 2] = $3; //@line 1624
 HEAP8[$this + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$3 >> 2] | 0) + 28 >> 2] & 63]($3) | 0) & 1; //@line 1631
 return;
}
function _lstat($path, $buf) {
 $path = $path | 0;
 $buf = $buf | 0;
 var $1 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 6302
 STACKTOP = STACKTOP + 16 | 0; //@line 6303
 $vararg_buffer = sp; //@line 6304
 HEAP32[$vararg_buffer >> 2] = $path; //@line 6305
 HEAP32[$vararg_buffer + 4 >> 2] = $buf; //@line 6307
 $1 = ___syscall_ret(___syscall196(196, $vararg_buffer | 0) | 0) | 0; //@line 6309
 STACKTOP = sp; //@line 6310
 return $1 | 0; //@line 6310
}
function __ZNSt3__15ctypeIcEC2EPKtbj($this, $tab, $del, $refs) {
 $this = $this | 0;
 $tab = $tab | 0;
 $del = $del | 0;
 $refs = $refs | 0;
 var $2 = 0;
 HEAP32[$this + 4 >> 2] = $refs + -1; //@line 5333
 HEAP32[$this >> 2] = 9344; //@line 5334
 $2 = $this + 8 | 0; //@line 5335
 HEAP32[$2 >> 2] = $tab; //@line 5336
 HEAP8[$this + 12 >> 0] = $del & 1; //@line 5339
 if (!$tab) {
  HEAP32[$2 >> 2] = HEAP32[(___ctype_b_loc() | 0) >> 2]; //@line 5344
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $info, $adjustedPtr, $path_below); //@line 936
 }
 return;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP; //@line 855
 STACKTOP = STACKTOP + 16 | 0; //@line 856
 $rem = __stackBase__ | 0; //@line 857
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0; //@line 858
 STACKTOP = __stackBase__; //@line 859
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0; //@line 860
}
function ___shlim($f, $lim) {
 $f = $f | 0;
 $lim = $lim | 0;
 var $4 = 0, $5 = 0, $7 = 0;
 HEAP32[$f + 104 >> 2] = $lim; //@line 4480
 $4 = HEAP32[$f + 4 >> 2] | 0; //@line 4484
 $5 = HEAP32[$f + 8 >> 2] | 0; //@line 4485
 $7 = $5 - $4 | 0; //@line 4487
 HEAP32[$f + 108 >> 2] = $7; //@line 4489
 if (($lim | 0) != 0 & ($7 | 0) > ($lim | 0)) {
  HEAP32[$f + 100 >> 2] = $4 + $lim; //@line 4496
 } else {
  HEAP32[$f + 100 >> 2] = $5; //@line 4499
 }
 return;
}
function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0; //@line 763
 if ((ret | 0) < 8) return ret | 0; //@line 764
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0; //@line 765
 if ((ret | 0) < 8) return ret + 8 | 0; //@line 766
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0; //@line 767
 if ((ret | 0) < 8) return ret + 16 | 0; //@line 768
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0; //@line 769
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result, $this, $0, $1) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $7 = 0;
 $2 = $agg$result; //@line 3771
 HEAP32[$2 >> 2] = 0; //@line 3773
 HEAP32[$2 + 4 >> 2] = 0; //@line 3776
 $7 = $agg$result + 8 | 0; //@line 3778
 HEAP32[$7 >> 2] = -1; //@line 3780
 HEAP32[$7 + 4 >> 2] = -1; //@line 3783
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result, $this, $0, $1) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $7 = 0;
 $2 = $agg$result; //@line 3523
 HEAP32[$2 >> 2] = 0; //@line 3525
 HEAP32[$2 + 4 >> 2] = 0; //@line 3528
 $7 = $agg$result + 8 | 0; //@line 3530
 HEAP32[$7 >> 2] = -1; //@line 3532
 HEAP32[$7 + 4 >> 2] = -1; //@line 3535
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this) {
 $this = $this | 0;
 var $$0 = 0, $5 = 0, $6 = 0;
 if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 36 >> 2] & 63]($this) | 0) == -1) {
  $$0 = -1; //@line 3866
 } else {
  $5 = $this + 12 | 0; //@line 3868
  $6 = HEAP32[$5 >> 2] | 0; //@line 3869
  HEAP32[$5 >> 2] = $6 + 4; //@line 3871
  $$0 = HEAP32[$6 >> 2] | 0; //@line 3873
 }
 return $$0 | 0; //@line 3875
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this) {
 $this = $this | 0;
 var $$0 = 0, $5 = 0, $6 = 0;
 if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 36 >> 2] & 63]($this) | 0) == -1) {
  $$0 = -1; //@line 3618
 } else {
  $5 = $this + 12 | 0; //@line 3620
  $6 = HEAP32[$5 >> 2] | 0; //@line 3621
  HEAP32[$5 >> 2] = $6 + 1; //@line 3623
  $$0 = HEAPU8[$6 >> 0] | 0; //@line 3626
 }
 return $$0 | 0; //@line 3628
}
function _sn_write($f, $s, $l) {
 $f = $f | 0;
 $s = $s | 0;
 $l = $l | 0;
 var $2 = 0, $3 = 0, $6 = 0, $l$ = 0;
 $2 = $f + 20 | 0; //@line 11356
 $3 = HEAP32[$2 >> 2] | 0; //@line 11357
 $6 = (HEAP32[$f + 16 >> 2] | 0) - $3 | 0; //@line 11360
 $l$ = $6 >>> 0 > $l >>> 0 ? $l : $6; //@line 11362
 _memcpy($3 | 0, $s | 0, $l$ | 0) | 0; //@line 11363
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $l$; //@line 11366
 return $l | 0; //@line 11367
}
function __ZNSt3__18numpunctIwEC2Ej($this, $refs) {
 $this = $this | 0;
 $refs = $refs | 0;
 var $4 = 0;
 HEAP32[$this + 4 >> 2] = $refs + -1; //@line 6542
 HEAP32[$this >> 2] = 9532; //@line 6543
 HEAP32[$this + 8 >> 2] = 46; //@line 6545
 HEAP32[$this + 12 >> 2] = 44; //@line 6547
 $4 = $this + 16 | 0; //@line 6548
 HEAP32[$4 >> 2] = 0; //@line 6549
 HEAP32[$4 + 4 >> 2] = 0; //@line 6551
 HEAP32[$4 + 8 >> 2] = 0; //@line 6553
 return;
}
function __ZNSt3__18ios_baseD2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 8216; //@line 3362
 __ZNSt3__18ios_base16__call_callbacksENS0_5eventE($this, 0); //@line 3363
 __ZNSt3__16localeD2Ev($this + 28 | 0); //@line 3365
 _free(HEAP32[$this + 32 >> 2] | 0); //@line 3368
 _free(HEAP32[$this + 36 >> 2] | 0); //@line 3371
 _free(HEAP32[$this + 48 >> 2] | 0); //@line 3374
 _free(HEAP32[$this + 60 >> 2] | 0); //@line 3377
 return;
}
function __ZNSt3__18numpunctIcEC2Ej($this, $refs) {
 $this = $this | 0;
 $refs = $refs | 0;
 var $4 = 0;
 HEAP32[$this + 4 >> 2] = $refs + -1; //@line 6521
 HEAP32[$this >> 2] = 9492; //@line 6522
 HEAP8[$this + 8 >> 0] = 46; //@line 6524
 HEAP8[$this + 9 >> 0] = 44; //@line 6526
 $4 = $this + 12 | 0; //@line 6527
 HEAP32[$4 >> 2] = 0; //@line 6528
 HEAP32[$4 + 4 >> 2] = 0; //@line 6530
 HEAP32[$4 + 8 >> 2] = 0; //@line 6532
 return;
}
function _close($fd) {
 $fd = $fd | 0;
 var $0 = 0, $2 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 8949
 STACKTOP = STACKTOP + 16 | 0; //@line 8950
 $vararg_buffer = sp; //@line 8951
 HEAP32[$vararg_buffer >> 2] = $fd; //@line 8952
 $0 = ___syscall6(6, $vararg_buffer | 0) | 0; //@line 8953
 $2 = ___syscall_ret(($0 | 0) == -4 ? -115 : $0) | 0; //@line 8956
 STACKTOP = sp; //@line 8957
 return $2 | 0; //@line 8957
}
function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this) {
 $this = $this | 0;
 if (!(HEAP8[1864] | 0)) {
  if (___cxa_guard_acquire(1864) | 0) {
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(12592, 12556, _wcslen(12556) | 0); //@line 7060
   ___cxa_atexit(108, 12592, ___dso_handle | 0) | 0; //@line 7061
   ___cxa_guard_release(1864); //@line 7062
  }
 }
 return 12592; //@line 7065
}
function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this) {
 $this = $this | 0;
 if (!(HEAP8[1912] | 0)) {
  if (___cxa_guard_acquire(1912) | 0) {
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(12832, 12784, _wcslen(12784) | 0); //@line 7165
   ___cxa_atexit(108, 12832, ___dso_handle | 0) | 0; //@line 7166
   ___cxa_guard_release(1912); //@line 7167
  }
 }
 return 12832; //@line 7170
}
function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this) {
 $this = $this | 0;
 if (!(HEAP8[1896] | 0)) {
  if (___cxa_guard_acquire(1896) | 0) {
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(12760, 12676, _wcslen(12676) | 0); //@line 7130
   ___cxa_atexit(108, 12760, ___dso_handle | 0) | 0; //@line 7131
   ___cxa_guard_release(1896); //@line 7132
  }
 }
 return 12760; //@line 7135
}
function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this) {
 $this = $this | 0;
 if (!(HEAP8[1880] | 0)) {
  if (___cxa_guard_acquire(1880) | 0) {
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(12652, 12616, _wcslen(12616) | 0); //@line 7095
   ___cxa_atexit(108, 12652, ___dso_handle | 0) | 0; //@line 7096
   ___cxa_guard_release(1880); //@line 7097
  }
 }
 return 12652; //@line 7100
}
function __ZNSt3__114__shared_count16__release_sharedEv($this) {
 $this = $this | 0;
 var $$0 = 0, $0 = 0, $1 = 0;
 $0 = $this + 4 | 0; //@line 581
 $1 = HEAP32[$0 >> 2] | 0; //@line 582
 HEAP32[$0 >> 2] = $1 + -1; //@line 582
 if (!$1) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$this >> 2] | 0) + 8 >> 2] & 127]($this); //@line 588
  $$0 = 1; //@line 589
 } else {
  $$0 = 0; //@line 591
 }
 return $$0 | 0; //@line 593
}
function _abort_message($format, $varargs) {
 $format = $format | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $list = 0, sp = 0;
 sp = STACKTOP; //@line 630
 STACKTOP = STACKTOP + 16 | 0; //@line 631
 $list = sp; //@line 632
 HEAP32[$list >> 2] = $varargs; //@line 633
 $0 = HEAP32[636] | 0; //@line 634
 _vfprintf($0, $format, $list) | 0; //@line 635
 _fputc(10, $0) | 0; //@line 636
 _abort(); //@line 637
}
function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this) {
 $this = $this | 0;
 if (!(HEAP8[1904] | 0)) {
  if (___cxa_guard_acquire(1904) | 0) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(12772, 21956, 11); //@line 7147
   ___cxa_atexit(107, 12772, ___dso_handle | 0) | 0; //@line 7148
   ___cxa_guard_release(1904); //@line 7149
  }
 }
 return 12772; //@line 7152
}
function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this) {
 $this = $this | 0;
 if (!(HEAP8[1888] | 0)) {
  if (___cxa_guard_acquire(1888) | 0) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(12664, 21935, 20); //@line 7112
   ___cxa_atexit(107, 12664, ___dso_handle | 0) | 0; //@line 7113
   ___cxa_guard_release(1888); //@line 7114
  }
 }
 return 12664; //@line 7117
}
function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this) {
 $this = $this | 0;
 if (!(HEAP8[1856] | 0)) {
  if (___cxa_guard_acquire(1856) | 0) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(12544, 21917, 8); //@line 7042
   ___cxa_atexit(107, 12544, ___dso_handle | 0) | 0; //@line 7043
   ___cxa_guard_release(1856); //@line 7044
  }
 }
 return 12544; //@line 7047
}
function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this) {
 $this = $this | 0;
 if (!(HEAP8[1872] | 0)) {
  if (___cxa_guard_acquire(1872) | 0) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(12604, 21926, 8); //@line 7077
   ___cxa_atexit(107, 12604, ___dso_handle | 0) | 0; //@line 7078
   ___cxa_guard_release(1872); //@line 7079
  }
 }
 return 12604; //@line 7082
}
function __ZNSt3__18ios_base4InitD2Ev($this) {
 $this = $this | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(6720) | 0; //@line 932
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(6888) | 0; //@line 933
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(7060) | 0; //@line 934
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(7228) | 0; //@line 935
 return;
}
function _snprintf($s, $n, $fmt, $varargs) {
 $s = $s | 0;
 $n = $n | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $ap = 0, sp = 0;
 sp = STACKTOP; //@line 7189
 STACKTOP = STACKTOP + 16 | 0; //@line 7190
 $ap = sp; //@line 7191
 HEAP32[$ap >> 2] = $varargs; //@line 7192
 $0 = _vsnprintf($s, $n, $fmt, $ap) | 0; //@line 7193
 STACKTOP = sp; //@line 7194
 return $0 | 0; //@line 7194
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 var $1 = 0, $3 = 0, $5 = 0;
 $1 = HEAP32[$this + 8 >> 2] | 0; //@line 6298
 if (!$1) {
  $5 = 1; //@line 6301
 } else {
  $3 = _uselocale($1) | 0; //@line 6303
  if (!$3) {
   $5 = 4; //@line 6306
  } else {
   _uselocale($3) | 0; //@line 6308
   $5 = 4; //@line 6309
  }
 }
 return $5 | 0; //@line 6312
}
function ___stdio_close($f) {
 $f = $f | 0;
 var $3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 6388
 STACKTOP = STACKTOP + 16 | 0; //@line 6389
 $vararg_buffer = sp; //@line 6390
 HEAP32[$vararg_buffer >> 2] = HEAP32[$f + 60 >> 2]; //@line 6393
 $3 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0; //@line 6395
 STACKTOP = sp; //@line 6396
 return $3 | 0; //@line 6396
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this, $0, $frm, $1, $frm_nxt, $to, $2, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $1 = $1 | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $2 = $2 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$frm_nxt >> 2] = $frm; //@line 5570
 HEAP32[$to_nxt >> 2] = $to; //@line 5571
 return 3; //@line 5572
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this, $0, $frm, $1, $frm_nxt, $to, $2, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $1 = $1 | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $2 = $2 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$frm_nxt >> 2] = $frm; //@line 5585
 HEAP32[$to_nxt >> 2] = $to; //@line 5586
 return 3; //@line 5587
}
function __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($iob) {
 $iob = $iob | 0;
 var $$0 = 0;
 switch (HEAP32[$iob + 4 >> 2] & 74 | 0) {
 case 64:
  {
   $$0 = 8; //@line 6683
   break;
  }
 case 8:
  {
   $$0 = 16; //@line 6687
   break;
  }
 case 0:
  {
   $$0 = 0; //@line 6691
   break;
  }
 default:
  {
   $$0 = 10; //@line 6695
  }
 }
 return $$0 | 0; //@line 6698
}
function _wmemset($d, $c, $n) {
 $d = $d | 0;
 $c = $c | 0;
 $n = $n | 0;
 var $$012 = 0, $$03 = 0;
 if ($n) {
  $$012 = $n; //@line 8931
  $$03 = $d; //@line 8931
  while (1) {
   $$012 = $$012 + -1 | 0; //@line 8933
   HEAP32[$$03 >> 2] = $c; //@line 8935
   if (!$$012) {
    break;
   } else {
    $$03 = $$03 + 4 | 0; //@line 8940
   }
  }
 }
 return $d | 0; //@line 8944
}
function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg$result, $this, $__lo, $__hi) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result, $__lo, $__hi); //@line 4772
 return;
}
function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg$result, $this, $__lo, $__hi) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result, $__lo, $__hi); //@line 4664
 return;
}
function _sscanf($s, $fmt, $varargs) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $ap = 0, sp = 0;
 sp = STACKTOP; //@line 7201
 STACKTOP = STACKTOP + 16 | 0; //@line 7202
 $ap = sp; //@line 7203
 HEAP32[$ap >> 2] = $varargs; //@line 7204
 $0 = _vsscanf($s, $fmt, $ap) | 0; //@line 7205
 STACKTOP = sp; //@line 7206
 return $0 | 0; //@line 7206
}
function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this, $__nm, $0) {
 $this = $this | 0;
 $__nm = $__nm | 0;
 $0 = $0 | 0;
 var $8 = 0;
 $8 = _catopen((HEAP8[$__nm >> 0] & 1) == 0 ? $__nm + 1 | 0 : HEAP32[$__nm + 8 >> 2] | 0, 1) | 0; //@line 4467
 return $8 >>> (($8 | 0) != (-1 | 0) & 1) | 0; //@line 4472
}
function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this, $__nm, $0) {
 $this = $this | 0;
 $__nm = $__nm | 0;
 $0 = $0 | 0;
 var $8 = 0;
 $8 = _catopen((HEAP8[$__nm >> 0] & 1) == 0 ? $__nm + 1 | 0 : HEAP32[$__nm + 8 >> 2] | 0, 1) | 0; //@line 4344
 return $8 >>> (($8 | 0) != (-1 | 0) & 1) | 0; //@line 4349
}
function ___cxa_get_globals_fast() {
 var $3 = 0, sp = 0;
 sp = STACKTOP; //@line 642
 STACKTOP = STACKTOP + 16 | 0; //@line 643
 if (!(_pthread_once(2288, 2) | 0)) {
  $3 = _pthread_getspecific(HEAP32[571] | 0) | 0; //@line 649
  STACKTOP = sp; //@line 650
  return $3 | 0; //@line 650
 } else {
  _abort_message(14297, sp); //@line 652
 }
 return 0; //@line 655
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p | 0;
 var sp = 0;
 sp = STACKTOP; //@line 2000
 STACKTOP = STACKTOP + 16 | 0; //@line 2001
 _free($p); //@line 2003
 if (!(_pthread_setspecific(HEAP32[571] | 0, 0) | 0)) {
  STACKTOP = sp; //@line 2008
  return;
 } else {
  _abort_message(14451, sp); //@line 2010
 }
}
function _bitshift64Ashr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >> bits; //@line 754
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits; //@line 755
 }
 tempRet0 = (high | 0) < 0 ? -1 : 0; //@line 757
 return high >> bits - 32 | 0; //@line 758
}
function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2; //@line 13797
 HEAP8[$agg$result + 1 >> 0] = 3; //@line 13797
 HEAP8[$agg$result + 2 >> 0] = 0; //@line 13797
 HEAP8[$agg$result + 3 >> 0] = 4; //@line 13797
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2; //@line 13805
 HEAP8[$agg$result + 1 >> 0] = 3; //@line 13805
 HEAP8[$agg$result + 2 >> 0] = 0; //@line 13805
 HEAP8[$agg$result + 3 >> 0] = 4; //@line 13805
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2; //@line 13706
 HEAP8[$agg$result + 1 >> 0] = 3; //@line 13706
 HEAP8[$agg$result + 2 >> 0] = 0; //@line 13706
 HEAP8[$agg$result + 3 >> 0] = 4; //@line 13706
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2; //@line 13714
 HEAP8[$agg$result + 1 >> 0] = 3; //@line 13714
 HEAP8[$agg$result + 2 >> 0] = 0; //@line 13714
 HEAP8[$agg$result + 3 >> 0] = 4; //@line 13714
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2; //@line 13615
 HEAP8[$agg$result + 1 >> 0] = 3; //@line 13615
 HEAP8[$agg$result + 2 >> 0] = 0; //@line 13615
 HEAP8[$agg$result + 3 >> 0] = 4; //@line 13615
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2; //@line 13623
 HEAP8[$agg$result + 1 >> 0] = 3; //@line 13623
 HEAP8[$agg$result + 2 >> 0] = 0; //@line 13623
 HEAP8[$agg$result + 3 >> 0] = 4; //@line 13623
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2; //@line 13524
 HEAP8[$agg$result + 1 >> 0] = 3; //@line 13524
 HEAP8[$agg$result + 2 >> 0] = 0; //@line 13524
 HEAP8[$agg$result + 3 >> 0] = 4; //@line 13524
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2; //@line 13532
 HEAP8[$agg$result + 1 >> 0] = 3; //@line 13532
 HEAP8[$agg$result + 2 >> 0] = 0; //@line 13532
 HEAP8[$agg$result + 3 >> 0] = 4; //@line 13532
 return;
}
function dynCall_iiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 return FUNCTION_TABLE_iiiiiiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0) | 0; //@line 1154
}
function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0;
 HEAP32[$this >> 2] = 9412; //@line 7176
 $0 = $this + 8 | 0; //@line 7177
 $1 = HEAP32[$0 >> 2] | 0; //@line 7178
 if (($1 | 0) != (__ZNSt3__16__clocEv() | 0)) {
  _freelocale(HEAP32[$0 >> 2] | 0); //@line 7183
 }
 return;
}
function __ZNKSt3__18ios_base6getlocEv($this) {
 $this = $this | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP; //@line 3414
 STACKTOP = STACKTOP + 16 | 0; //@line 3415
 $0 = sp; //@line 3416
 __ZNSt3__16localeC2ERKS0_($0, $this + 28 | 0); //@line 3418
 STACKTOP = sp; //@line 3420
 return HEAP32[$0 >> 2] | 0; //@line 3420
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this, $0, $frm, $frm_end, $mx) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 return __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm, $frm_end, $mx, 1114111, 0) | 0; //@line 6399
}
function __ZNKSt3__15ctypeIwE5do_isEtw($this, $m, $c) {
 $this = $this | 0;
 $m = $m | 0;
 $c = $c | 0;
 var $6 = 0;
 if ($c >>> 0 < 128) {
  $6 = (HEAP16[(HEAP32[(___ctype_b_loc() | 0) >> 2] | 0) + ($c << 1) >> 1] & $m) << 16 >> 16 != 0; //@line 5002
 } else {
  $6 = 0; //@line 5004
 }
 return $6 | 0; //@line 5006
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this, $0, $frm, $frm_end, $mx) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 return __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm, $frm_end, $mx, 1114111, 0) | 0; //@line 6492
}
function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits; //@line 723
  return low << bits; //@line 724
 }
 tempRet0 = low << bits - 32; //@line 726
 return 0; //@line 727
}
function __ZNKSt3__15ctypeIcE10do_tolowerEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $6 = 0;
 if ($c << 24 >> 24 > -1) {
  $6 = HEAP32[(HEAP32[(___ctype_tolower_loc() | 0) >> 2] | 0) + ($c << 24 >> 24 << 2) >> 2] & 255; //@line 5441
 } else {
  $6 = $c; //@line 5443
 }
 return $6 | 0; //@line 5445
}
function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits; //@line 684
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits; //@line 685
 }
 tempRet0 = 0; //@line 687
 return high >>> bits - 32 | 0; //@line 688
}
function __ZNKSt3__15ctypeIcE10do_toupperEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $6 = 0;
 if ($c << 24 >> 24 > -1) {
  $6 = HEAP32[(HEAP32[(___ctype_toupper_loc() | 0) >> 2] | 0) + (($c & 255) << 2) >> 2] & 255; //@line 5387
 } else {
  $6 = $c; //@line 5389
 }
 return $6 | 0; //@line 5391
}
function __ZNSt3__16locale8__globalEv() {
 if (!(HEAP8[1752] | 0)) {
  if (___cxa_guard_acquire(1752) | 0) {
   __ZNSt3__16locale5__imp11make_globalEv() | 0; //@line 4881
   HEAP32[2525] = 10096; //@line 4882
   ___cxa_guard_release(1752); //@line 4883
  }
 }
 return HEAP32[2525] | 0; //@line 4887
}
function __ZNSt3__16locale7classicEv() {
 if (!(HEAP8[1584] | 0)) {
  if (___cxa_guard_acquire(1584) | 0) {
   __ZNSt3__16locale5__imp12make_classicEv() | 0; //@line 4762
   HEAP32[2523] = 10088; //@line 4763
   ___cxa_guard_release(1584); //@line 4764
  }
 }
 return HEAP32[2523] | 0; //@line 4768
}
function dynCall_iiiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 return FUNCTION_TABLE_iiiiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0) | 0; //@line 1077
}
function copyTempFloat(ptr) {
 ptr = ptr | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[ptr >> 0]; //@line 33
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[ptr + 1 >> 0]; //@line 34
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[ptr + 2 >> 0]; //@line 35
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[ptr + 3 >> 0]; //@line 36
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this, $0, $frm, $end, $mx) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $end = $end | 0;
 $mx = $mx | 0;
 var $3 = 0;
 $3 = $end - $frm | 0; //@line 5622
 return ($3 >>> 0 < $mx >>> 0 ? $3 : $mx) | 0; //@line 5625
}
function __ZNKSt3__16locale9use_facetERNS0_2idE($this, $x) {
 $this = $this | 0;
 $x = $x | 0;
 var $0 = 0, $1 = 0;
 $0 = HEAP32[$this >> 2] | 0; //@line 4943
 $1 = __ZNSt3__16locale2id5__getEv($x) | 0; //@line 4944
 return HEAP32[(HEAP32[$0 + 8 >> 2] | 0) + ($1 << 2) >> 2] | 0; //@line 4949
}
function __ZNKSt3__15ctypeIwE10do_toupperEw($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $4 = 0;
 if ($c >>> 0 < 128) {
  $4 = HEAP32[(HEAP32[(___ctype_toupper_loc() | 0) >> 2] | 0) + ($c << 2) >> 2] | 0; //@line 5146
 } else {
  $4 = $c; //@line 5148
 }
 return $4 | 0; //@line 5150
}
function __ZNKSt3__15ctypeIwE10do_tolowerEw($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $4 = 0;
 if ($c >>> 0 < 128) {
  $4 = HEAP32[(HEAP32[(___ctype_tolower_loc() | 0) >> 2] | 0) + ($c << 2) >> 2] | 0; //@line 5201
 } else {
  $4 = $c; //@line 5203
 }
 return $4 | 0; //@line 5205
}
function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result >> 2] = 0; //@line 13771
 HEAP32[$agg$result + 4 >> 2] = 0; //@line 13773
 HEAP32[$agg$result + 8 >> 2] = 0; //@line 13775
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result >> 2] = 0; //@line 13680
 HEAP32[$agg$result + 4 >> 2] = 0; //@line 13682
 HEAP32[$agg$result + 8 >> 2] = 0; //@line 13684
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result >> 2] = 0; //@line 13589
 HEAP32[$agg$result + 4 >> 2] = 0; //@line 13591
 HEAP32[$agg$result + 8 >> 2] = 0; //@line 13593
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result >> 2] = 0; //@line 13498
 HEAP32[$agg$result + 4 >> 2] = 0; //@line 13500
 HEAP32[$agg$result + 8 >> 2] = 0; //@line 13502
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result >> 2] = 0; //@line 13759
 HEAP32[$agg$result + 4 >> 2] = 0; //@line 13761
 HEAP32[$agg$result + 8 >> 2] = 0; //@line 13763
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result >> 2] = 0; //@line 13668
 HEAP32[$agg$result + 4 >> 2] = 0; //@line 13670
 HEAP32[$agg$result + 8 >> 2] = 0; //@line 13672
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result >> 2] = 0; //@line 13577
 HEAP32[$agg$result + 4 >> 2] = 0; //@line 13579
 HEAP32[$agg$result + 8 >> 2] = 0; //@line 13581
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result >> 2] = 0; //@line 13486
 HEAP32[$agg$result + 4 >> 2] = 0; //@line 13488
 HEAP32[$agg$result + 8 >> 2] = 0; //@line 13490
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var sp = 0;
 sp = STACKTOP; //@line 1985
 STACKTOP = STACKTOP + 16 | 0; //@line 1986
 if (!(_pthread_key_create(2284, 94) | 0)) {
  STACKTOP = sp; //@line 1991
  return;
 } else {
  _abort_message(14401, sp); //@line 1993
 }
}
function __ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(9208) | 0); //@line 15145
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(9172) | 0); //@line 15136
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(9136) | 0); //@line 15127
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(9100) | 0); //@line 15118
 return;
}
function __ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(8808) | 0); //@line 15181
 return;
}
function __ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(8776) | 0); //@line 15172
 return;
}
function __ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(8744) | 0); //@line 15163
 return;
}
function __ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(8652) | 0); //@line 15154
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result >> 2] = 0; //@line 13747
 HEAP32[$agg$result + 4 >> 2] = 0; //@line 13749
 HEAP32[$agg$result + 8 >> 2] = 0; //@line 13751
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result >> 2] = 0; //@line 13656
 HEAP32[$agg$result + 4 >> 2] = 0; //@line 13658
 HEAP32[$agg$result + 8 >> 2] = 0; //@line 13660
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result >> 2] = 0; //@line 13565
 HEAP32[$agg$result + 4 >> 2] = 0; //@line 13567
 HEAP32[$agg$result + 8 >> 2] = 0; //@line 13569
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result >> 2] = 0; //@line 13474
 HEAP32[$agg$result + 4 >> 2] = 0; //@line 13476
 HEAP32[$agg$result + 8 >> 2] = 0; //@line 13478
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(8560) | 0); //@line 15073
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(8500) | 0); //@line 15064
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(8440) | 0); //@line 15055
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(8368) | 0); //@line 15046
 return;
}
function _wcslen($s) {
 $s = $s | 0;
 var $$0 = 0, $$0$lcssa = 0;
 $$0 = $s; //@line 8830
 while (1) {
  if (!(HEAP32[$$0 >> 2] | 0)) {
   $$0$lcssa = $$0; //@line 8836
   break;
  } else {
   $$0 = $$0 + 4 | 0; //@line 8839
  }
 }
 return $$0$lcssa - $s >> 2 | 0; //@line 8846
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this, $__s) {
 $this = $this | 0;
 $__s = $__s | 0;
 return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this, $__s, _wcslen($__s) | 0) | 0; //@line 2845
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this, $__s) {
 $this = $this | 0;
 $__s = $__s | 0;
 return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this, $__s, _strlen($__s) | 0) | 0; //@line 2255
}
function dynCall_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iiiiiii[index & 63](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0; //@line 1119
}
function runPostSets() {}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0; //@line 635
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0; //@line 636
 return (tempRet0 = h, a - c >>> 0 | 0) | 0; //@line 637
}
function dynCall_iiiiiid(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = +a6;
 return FUNCTION_TABLE_iiiiiid[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, +a6) | 0; //@line 1098
}
function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result, 10124, _wcslen(10124) | 0); //@line 6671
 return;
}
function __ZNKSt3__18numpunctIwE11do_truenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result, 10104, _wcslen(10104) | 0); //@line 6654
 return;
}
function __ZNSt3__16locale5__imp11make_globalEv() {
 var $1 = 0;
 $1 = HEAP32[(__ZNSt3__16locale7classicEv() | 0) >> 2] | 0; //@line 4867
 HEAP32[2524] = $1; //@line 4868
 __ZNSt3__114__shared_count12__add_sharedEv($1); //@line 4869
 return 10096; //@line 4870
}
function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0); //@line 1168
}
function __ZNSt3__16__clocEv() {
 if (!(HEAP8[1264] | 0)) {
  if (___cxa_guard_acquire(1264) | 0) {
   HEAP32[2473] = _newlocale(2147483647, 21583, 0) | 0; //@line 5593
   ___cxa_guard_release(1264); //@line 5594
  }
 }
 return HEAP32[2473] | 0; //@line 5598
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $0, $to, $1, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $to = $to | 0;
 $1 = $1 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$to_nxt >> 2] = $to; //@line 6375
 return 3; //@line 6376
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $0, $to, $1, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $to = $to | 0;
 $1 = $1 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$to_nxt >> 2] = $to; //@line 6468
 return 3; //@line 6469
}
function __ZNSt3__16localeC2Ev($this) {
 $this = $this | 0;
 var $1 = 0;
 $1 = HEAP32[(__ZNSt3__16locale8__globalEv() | 0) >> 2] | 0; //@line 4894
 HEAP32[$this >> 2] = $1; //@line 4895
 __ZNSt3__114__shared_count12__add_sharedEv($1); //@line 4896
 return;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $0, $to, $1, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $to = $to | 0;
 $1 = $1 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$to_nxt >> 2] = $to; //@line 5597
 return 3; //@line 5598
}
function __ZNSt3__15ctypeIcED2Ev($this) {
 $this = $this | 0;
 var $1 = 0;
 HEAP32[$this >> 2] = 9344; //@line 5352
 $1 = HEAP32[$this + 8 >> 2] | 0; //@line 5354
 if ($1) {
  if (HEAP8[$this + 12 >> 0] | 0) {
   __ZdaPv($1); //@line 5361
  }
 }
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result, 1, 45); //@line 13783
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result, 1, 45); //@line 13692
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result, 1, 45); //@line 13601
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result, 1, 45); //@line 13510
 return;
}
function __ZNKSt3__18numpunctIwE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result, $this + 16 | 0); //@line 6637
 return;
}
function __ZNKSt3__18numpunctIcE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result, $this + 12 | 0); //@line 6628
 return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(9452) | 0); //@line 15010
 return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(9460) | 0); //@line 15019
 return;
}
function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result, 21690, 5); //@line 6662
 return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(9396) | 0); //@line 15001
 return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(9388) | 0); //@line 14992
 return;
}
function __ZNKSt3__18numpunctIcE11do_truenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result, 21685, 4); //@line 6645
 return;
}
function ___syscall_ret($r) {
 $r = $r | 0;
 var $$0 = 0;
 if ($r >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - $r; //@line 4606
  $$0 = -1; //@line 4607
 } else {
  $$0 = $r; //@line 4609
 }
 return $$0 | 0; //@line 4611
}
function __ZNSt3__16localeC2ERKS0_($this, $l) {
 $this = $this | 0;
 $l = $l | 0;
 var $0 = 0;
 $0 = HEAP32[$l >> 2] | 0; //@line 4904
 HEAP32[$this >> 2] = $0; //@line 4905
 __ZNSt3__114__shared_count12__add_sharedEv($0); //@line 4906
 return;
}
function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 31](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0; //@line 1182
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(9064) | 0); //@line 15109
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(8936) | 0); //@line 15091
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(8872) | 0); //@line 15082
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0); //@line 4479
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0); //@line 4148
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0); //@line 4063
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0); //@line 3978
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(9e3) | 0); //@line 15100
 return;
}
function dynCall_iiiiid(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return FUNCTION_TABLE_iiiiid[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5) | 0; //@line 1126
}
function __ZNSt3__110__time_putD2Ev($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = HEAP32[$this >> 2] | 0; //@line 13201
 if (($0 | 0) != (__ZNSt3__16__clocEv() | 0)) {
  _freelocale(HEAP32[$this >> 2] | 0); //@line 13206
 }
 return;
}
function _uselocale($l) {
 $l = $l | 0;
 var $1 = 0, $2 = 0;
 $1 = (_pthread_self() | 0) + 176 | 0; //@line 4701
 $2 = HEAP32[$1 >> 2] | 0; //@line 4702
 if ($l) {
  HEAP32[$1 >> 2] = $l; //@line 4705
 }
 return $2 | 0; //@line 4707
}
function __ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(9476) | 0); //@line 15037
 return;
}
function __ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(9468) | 0); //@line 15028
 return;
}
function __ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(9288) | 0); //@line 15199
 return;
}
function __ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(9248) | 0); //@line 15190
 return;
}
function __ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(8296) | 0); //@line 14965
 return;
}
function __ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(8256) | 0); //@line 14956
 return;
}
function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0); //@line 1091
}
function __ZSt11__terminatePFvvE($func) {
 $func = $func | 0;
 var sp = 0;
 sp = STACKTOP; //@line 734
 STACKTOP = STACKTOP + 16 | 0; //@line 735
 FUNCTION_TABLE_v[$func & 3](); //@line 737
 _abort_message(14361, sp); //@line 738
}
function __ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(9320) | 0); //@line 14983
 return;
}
function __ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(9328) | 0); //@line 14974
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 7992; //@line 3708
 __ZNSt3__16localeD2Ev($this + 4 | 0); //@line 3710
 __ZdlPv($this); //@line 3711
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 7928; //@line 3460
 __ZNSt3__16localeD2Ev($this + 4 | 0); //@line 3462
 __ZdlPv($this); //@line 3463
 return;
}
function ___cxa_is_pointer_type($type) {
 $type = $type | 0;
 var $3 = 0;
 if (!$type) {
  $3 = 0; //@line 1886
 } else {
  $3 = (___dynamic_cast($type, 40, 88, 0) | 0) != 0; //@line 1890
 }
 return $3 & 1 | 0; //@line 1893
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + ((HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 4) | 0); //@line 4459
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + ((HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 4) | 0); //@line 4128
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + ((HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 8) | 0); //@line 4043
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + ((HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 8) | 0); //@line 3958
 return;
}
function __ZNSt3__18numpunctIwED2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 9532; //@line 6577
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 16 | 0); //@line 6579
 return;
}
function __ZNSt3__18numpunctIcED2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 9492; //@line 6560
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 12 | 0); //@line 6562
 return;
}
function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0; //@line 1161
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__110__time_putD2Ev($this + 8 | 0); //@line 13334
 __ZdlPv($this); //@line 13335
 return;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__110__time_putD2Ev($this + 8 | 0); //@line 13215
 __ZdlPv($this); //@line 13216
 return;
}
function __ZNSt3__16locale2id6__initEv($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = HEAP32[2329] | 0; //@line 4975
 HEAP32[2329] = $0 + 1; //@line 4975
 HEAP32[$this + 4 >> 2] = $0 + 1; //@line 4978
 return;
}
function b11(p0, p1, p2, p3, p4, p5, p6, p7) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 abort(11); //@line 1226
 return 0; //@line 1226
}
function _isxdigit($c) {
 $c = $c | 0;
 var $4 = 0;
 if (($c + -48 | 0) >>> 0 < 10) {
  $4 = 1; //@line 2085
 } else {
  $4 = (($c | 32) + -97 | 0) >>> 0 < 6; //@line 2090
 }
 return $4 & 1 | 0; //@line 2093
}
function ___errno_location() {
 var $$0 = 0;
 if (!(HEAP32[574] | 0)) {
  $$0 = 2572; //@line 2101
 } else {
  $$0 = HEAP32[(_pthread_self() | 0) + 60 >> 2] | 0; //@line 2106
 }
 return $$0 | 0; //@line 2108
}
function __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = $this + 16 | 0; //@line 4579
 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 1; //@line 4582
 return;
}
function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0; //@line 675
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0; //@line 677
}
function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0); //@line 1189
}
function _strtoull_l($s, $p, $base, $loc) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 $loc = $loc | 0;
 var $0 = 0;
 $0 = _strtoull($s, $p, $base) | 0; //@line 2035
 return $0 | 0; //@line 2038
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($this) {
 $this = $this | 0;
 if (HEAP8[$this >> 0] & 1) {
  __ZdlPv(HEAP32[$this + 8 >> 2] | 0); //@line 2834
 }
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this | 0;
 if (HEAP8[$this >> 0] & 1) {
  __ZdlPv(HEAP32[$this + 8 >> 2] | 0); //@line 2244
 }
 return;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP; //@line 3
 STACKTOP = STACKTOP + size | 0; //@line 4
 STACKTOP = STACKTOP + 15 & -16; //@line 5
 return ret | 0; //@line 7
}
function _strtoll_l($s, $p, $base, $loc) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 $loc = $loc | 0;
 var $0 = 0;
 $0 = _strtoll($s, $p, $base) | 0; //@line 2047
 return $0 | 0; //@line 2050
}
function _wctomb($s, $wc) {
 $s = $s | 0;
 $wc = $wc | 0;
 var $$0 = 0;
 if (!$s) {
  $$0 = 0; //@line 6291
 } else {
  $$0 = _wcrtomb($s, $wc, 0) | 0; //@line 6294
 }
 return $$0 | 0; //@line 6296
}
function __ZNSt3__16locale5facet16__on_zero_sharedEv($this) {
 $this = $this | 0;
 if ($this) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$this >> 2] | 0) + 4 >> 2] & 127]($this); //@line 4967
 }
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 7992; //@line 3699
 __ZNSt3__16localeD2Ev($this + 4 | 0); //@line 3701
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 7928; //@line 3451
 __ZNSt3__16localeD2Ev($this + 4 | 0); //@line 3453
 return;
}
function __ZNSt3__114__shared_count12__add_sharedEv($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = $this + 4 | 0; //@line 573
 HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 1; //@line 574
 return;
}
function _strtoll($s, $p, $base) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 var $0 = 0;
 $0 = _strtox530($s, $p, $base, 0, -2147483648) | 0; //@line 8580
 return $0 | 0; //@line 8583
}
function __ZNSt3__18ios_base5clearEj($this, $state) {
 $this = $this | 0;
 $state = $state | 0;
 HEAP32[$this + 16 >> 2] = (HEAP32[$this + 24 >> 2] | 0) == 0 | $state; //@line 3355
 return;
}
function b0(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 abort(0); //@line 1193
 return 0; //@line 1193
}
function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 31](a1 | 0, a2 | 0, a3 | 0) | 0; //@line 1084
}
function __ZSt17__throw_bad_allocv() {
 var $0 = 0;
 $0 = ___cxa_allocate_exception(4) | 0; //@line 1898
 __ZNSt9bad_allocC2Ev($0); //@line 1899
 ___cxa_throw($0 | 0, 8, 1); //@line 1900
}
function __ZNKSt3__15ctypeIwE9do_narrowEwc($this, $c, $dfault) {
 $this = $this | 0;
 $c = $c | 0;
 $dfault = $dfault | 0;
 return ($c >>> 0 < 128 ? $c & 255 : $dfault) | 0; //@line 5288
}
function __ZNKSt3__15ctypeIcE9do_narrowEcc($this, $c, $dfault) {
 $this = $this | 0;
 $c = $c | 0;
 $dfault = $dfault | 0;
 return ($c << 24 >> 24 > -1 ? $c : $dfault) | 0; //@line 5522
}
function _mbsinit($st) {
 $st = $st | 0;
 var $4 = 0;
 if (!$st) {
  $4 = 1; //@line 5240
 } else {
  $4 = (HEAP32[$st >> 2] | 0) == 0; //@line 5244
 }
 return $4 & 1 | 0; //@line 5247
}
function __ZNSt3__111__stdoutbufIwED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this); //@line 1072
 __ZdlPv($this); //@line 1073
 return;
}
function __ZNSt3__111__stdoutbufIcED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this); //@line 1609
 __ZdlPv($this); //@line 1610
 return;
}
function _strtoull($s, $p, $base) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 var $0 = 0;
 $0 = _strtox530($s, $p, $base, -1, -1) | 0; //@line 8569
 return $0 | 0; //@line 8572
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0; //@line 847
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + 4 | 0); //@line 4467
 __ZdlPv($this); //@line 4468
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + 4 | 0); //@line 4136
 __ZdlPv($this); //@line 4137
 return;
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + 8 | 0); //@line 4051
 __ZdlPv($this); //@line 4052
 return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + 8 | 0); //@line 3966
 __ZdlPv($this); //@line 3967
 return;
}
function __ZNSt3__110__stdinbufIwED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this); //@line 1332
 __ZdlPv($this); //@line 1333
 return;
}
function __ZNSt3__110__stdinbufIcED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this); //@line 1871
 __ZdlPv($this); //@line 1872
 return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__110__time_putD2Ev($this + 8 | 0); //@line 13326
 return;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__110__time_putD2Ev($this + 8 | 0); //@line 13194
 return;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this); //@line 5637
 __ZdlPv($this); //@line 5638
 return;
}
function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 0](a1 | 0, a2 | 0, a3 | 0); //@line 1140
}
function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase; //@line 19
 STACK_MAX = stackMax; //@line 20
}
function b6(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 abort(6); //@line 1211
 return 0; //@line 1211
}
function __ZNSt3__16locale5__imp12make_classicEv() {
 __ZNSt3__16locale5__impC2Ej(1592, 1); //@line 4859
 HEAP32[2522] = 1592; //@line 4860
 return 10088; //@line 4861
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($this, $0, $1) {
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $this | 0; //@line 3738
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this, $0, $1) {
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $this | 0; //@line 3490
}
function b3(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = +p5;
 abort(3); //@line 1202
 return 0; //@line 1202
}
function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw; //@line 27
  threwValue = value; //@line 28
 }
}
function _catgets($catd, $set_id, $msg_id, $s) {
 $catd = $catd | 0;
 $set_id = $set_id | 0;
 $msg_id = $msg_id | 0;
 $s = $s | 0;
 return $s | 0; //@line 4626
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this | 0;
 ___assert_fail(14504, 14533, 1164, 14618); //@line 2018
}
function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 15](a1 | 0, a2 | 0) | 0; //@line 1175
}
function __ZNSt3__16localeD2Ev($this) {
 $this = $this | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$this >> 2] | 0) | 0; //@line 4914
 return;
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this | 0;
 ___assert_fail(14639, 14662, 303, 14618); //@line 2025
}
function __ZNSt3__16locale5__impD0Ev($this) {
 $this = $this | 0;
 __ZNSt3__16locale5__impD2Ev($this); //@line 4852
 __ZdlPv($this); //@line 4853
 return;
}
function b15(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 abort(15); //@line 1238
 return 0; //@line 1238
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this); //@line 16389
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this); //@line 13818
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + 4 | 0); //@line 4447
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + 4 | 0); //@line 4116
 return;
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + 8 | 0); //@line 4031
 return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + 8 | 0); //@line 3946
 return;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this); //@line 3252
 return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this); //@line 2136
 return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this); //@line 11820
 return;
}
function __ZNSt3__18numpunctIwED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__18numpunctIwED2Ev($this); //@line 6586
 __ZdlPv($this); //@line 6587
 return;
}
function __ZNSt3__18numpunctIcED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__18numpunctIcED2Ev($this); //@line 6569
 __ZdlPv($this); //@line 6570
 return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this); //@line 9978
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this) {
 $this = $this | 0;
 return 2; //@line 11827
}
function _mbrlen($s, $n, $st) {
 $s = $s | 0;
 $n = $n | 0;
 $st = $st | 0;
 return _mbrtowc(0, $s, $n, ($st | 0) != 0 ? $st : 2608) | 0; //@line 5106
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this); //@line 8344
 return;
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this); //@line 6951
 return;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this); //@line 5610
 return;
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this); //@line 4816
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this) {
 $this = $this | 0;
 return 2; //@line 9985
}
function __GLOBAL__I_000101() {
 __ZNSt3__18ios_base4InitC2Ev(0); //@line 1059
 ___cxa_atexit(97, 19671, ___dso_handle | 0) | 0; //@line 1060
 return;
}
function __ZNSt3__110__stdinbufIwE9underflowEv($this) {
 $this = $this | 0;
 return __ZNSt3__110__stdinbufIwE9__getcharEb($this, 0) | 0; //@line 1341
}
function __ZNSt3__110__stdinbufIcE9underflowEv($this) {
 $this = $this | 0;
 return __ZNSt3__110__stdinbufIcE9__getcharEb($this, 0) | 0; //@line 1880
}
function b7(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = +p4;
 abort(7); //@line 1214
 return 0; //@line 1214
}
function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 63](a1 | 0, a2 | 0); //@line 1112
}
function b13(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 abort(13); //@line 1232
}
function __ZSt15get_new_handlerv() {
 var $0 = 0;
 $0 = HEAP32[540] | 0; //@line 778
 HEAP32[540] = $0 + 0; //@line 778
 return $0 | 0; //@line 780
}
function __ZNSt3__18ios_baseD0Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this); //@line 4571
 __ZdlPv($this); //@line 4572
 return;
}
function __ZNSt3__15ctypeIcED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__15ctypeIcED2Ev($this); //@line 5370
 __ZdlPv($this); //@line 5371
 return;
}
function __ZNSt3__110__stdinbufIwE5uflowEv($this) {
 $this = $this | 0;
 return __ZNSt3__110__stdinbufIwE9__getcharEb($this, 1) | 0; //@line 1348
}
function __ZNSt3__110__stdinbufIcE5uflowEv($this) {
 $this = $this | 0;
 return __ZNSt3__110__stdinbufIcE9__getcharEb($this, 1) | 0; //@line 1887
}
function _do_read($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 return ___string_read($f, $buf, $len) | 0; //@line 11267
}
function b12(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 abort(12); //@line 1229
 return 0; //@line 1229
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return;
}
function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return HEAP32[$this + 12 >> 2] | 0; //@line 6620
}
function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 63](a1 | 0) | 0; //@line 1133
}
function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 ___cxa_begin_catch($0 | 0) | 0; //@line 349
 __ZSt9terminatev(); //@line 350
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return -1;
}
function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return HEAP32[$this + 8 >> 2] | 0; //@line 6604
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return -1;
}
function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return HEAP8[$this + 9 >> 0] | 0; //@line 6612
}
function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return HEAP8[$this + 8 >> 0] | 0; //@line 6596
}
function __ZNKSt3__15ctypeIwE8do_widenEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 return $c << 24 >> 24 | 0; //@line 5251
}
function b2(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 abort(2); //@line 1199
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this) {
 $this = $this | 0;
 return 0; //@line 3796
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this) {
 $this = $this | 0;
 return 0; //@line 3548
}
function _cleanup392($p) {
 $p = $p | 0;
 if (!(HEAP32[$p + 68 >> 2] | 0)) {
  ___unlockfile($p); //@line 9175
 }
 return;
}
function _cleanup387($p) {
 $p = $p | 0;
 if (!(HEAP32[$p + 68 >> 2] | 0)) {
  ___unlockfile($p); //@line 9163
 }
 return;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return 2147483647; //@line 13740
}
function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return 2147483647; //@line 13734
}
function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return 2147483647; //@line 13649
}
function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return 2147483647; //@line 13643
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this | 0;
 return;
}
function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 127](a1 | 0); //@line 1105
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv($this) {
 $this = $this | 0;
 return 0; //@line 3790
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this | 0;
 return 0; //@line 3542
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 return 0; //@line 6388
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 return 0; //@line 6481
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this); //@line 830
 return;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 return 0; //@line 6230
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 return 1; //@line 5610
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this); //@line 823
 return;
}
function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this); //@line 6318
 return;
}
function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this); //@line 6411
 return;
}
function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this); //@line 6511
 return;
}
function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this); //@line 5556
 return;
}
function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this); //@line 6504
 return;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 return 4; //@line 6405
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 return 4; //@line 6498
}
function __ZNKSt3__15ctypeIcE8do_widenEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 return $c | 0; //@line 5487
}
function b1(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(1); //@line 1196
 return 0; //@line 1196
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 return 1; //@line 5631
}
function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return 127; //@line 13558
}
function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return 127; //@line 13552
}
function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return 127; //@line 13467
}
function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return 127; //@line 13461
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this); //@line 816
 return;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 return 0; //@line 6382
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 return 0; //@line 6475
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 return 1; //@line 5604
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this) {
 $this = $this | 0;
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this | 0;
 return -1;
}
function b16(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 abort(16); //@line 1241
}
function __ZNSt3__110moneypunctIwLb1EED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this); //@line 13727
 return;
}
function __ZNSt3__110moneypunctIwLb0EED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this); //@line 13636
 return;
}
function __ZNSt3__110moneypunctIcLb1EED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this); //@line 13545
 return;
}
function __ZNSt3__110moneypunctIcLb0EED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this); //@line 13454
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 return 0; //@line 13790
}
function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 return 0; //@line 13699
}
function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 return 0; //@line 13608
}
function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 return 0; //@line 13517
}
function _isspace($c) {
 $c = $c | 0;
 return (($c | 0) == 32 | ($c + -9 | 0) >>> 0 < 5) & 1 | 0; //@line 2076
}
function _isdigit_l($c, $l) {
 $c = $c | 0;
 $l = $l | 0;
 return ($c + -48 | 0) >>> 0 < 10 | 0; //@line 4650
}
function _strtold_l($s, $p, $l) {
 $s = $s | 0;
 $p = $p | 0;
 $l = $l | 0;
 return +(+_strtox($s, $p, 2));
}
function __ZNSt9bad_allocC2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 2148; //@line 709
 return;
}
function _catopen($name, $oflag) {
 $name = $name | 0;
 $oflag = $oflag | 0;
 return -1 | 0; //@line 4633
}
function __ZNKSt3__18messagesIwE8do_closeEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 return;
}
function __ZNKSt3__18messagesIcE8do_closeEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 return;
}
function __ZNSt3__16locale5facetD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this); //@line 4955
 return;
}
function __ZNSt3__18messagesIwED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this); //@line 4451
 return;
}
function __ZNSt3__18messagesIcED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this); //@line 4328
 return;
}
function __ZNSt3__17collateIwED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this); //@line 4709
 return;
}
function __ZNSt3__17collateIcED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this); //@line 4601
 return;
}
function __ZNSt3__15ctypeIwED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this); //@line 4985
 return;
}
function b14(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 abort(14); //@line 1235
 return 0; //@line 1235
}
function _isxdigit_l($c, $l) {
 $c = $c | 0;
 $l = $l | 0;
 return _isxdigit($c) | 0; //@line 4658
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this); //@line 722
 return;
}
function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 3](); //@line 1147
}
function b9(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(9); //@line 1220
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this | 0;
 return 14346; //@line 729
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this | 0;
 return;
}
function _copysignl($x, $y) {
 $x = +$x;
 $y = +$y;
 return +(+_copysign($x, $y));
}
function _scalbnl($x, $n) {
 $x = +$x;
 $n = $n | 0;
 return +(+_scalbn($x, $n));
}
function __ZNSt3__121__throw_runtime_errorEPKc($msg) {
 $msg = $msg | 0;
 return;
}
function __ZNSt3__110moneypunctIwLb1EED2Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNSt3__110moneypunctIwLb0EED2Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNSt3__110moneypunctIcLb1EED2Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNSt3__110moneypunctIcLb0EED2Ev($this) {
 $this = $this | 0;
 return;
}
function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value; //@line 52
}
function b8(p0) {
 p0 = p0 | 0;
 abort(8); //@line 1217
 return 0; //@line 1217
}
function _frexpl($x, $e) {
 $x = +$x;
 $e = $e | 0;
 return +(+_frexp($x, $e));
}
function __ZdaPv($ptr) {
 $ptr = $ptr | 0;
 __ZdlPv($ptr); //@line 702
 return;
}
function __ZdlPv($ptr) {
 $ptr = $ptr | 0;
 _free($ptr); //@line 695
 return;
}
function __ZNSt3__114__shared_countD2Ev($this) {
 $this = $this | 0;
 return;
}
function _freelocale($l) {
 $l = $l | 0;
 _free($l); //@line 4639
 return;
}
function _fmodl($x, $y) {
 $x = +$x;
 $y = +$y;
 return +(+_fmod($x, $y));
}
function __ZNSt3__16locale5facetD2Ev($this) {
 $this = $this | 0;
 return;
}
function b5(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 abort(5); //@line 1208
}
function __ZNSt3__18messagesIwED2Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNSt3__18messagesIcED2Ev($this) {
 $this = $this | 0;
 return;
}
function stackRestore(top) {
 top = top | 0;
 STACKTOP = top; //@line 14
}
function __ZNSt3__17collateIwED2Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNSt3__17collateIcED2Ev($this) {
 $this = $this | 0;
 return;
}
function _catclose($catd) {
 $catd = $catd | 0;
 return 0; //@line 4617
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNSt9exceptionD2Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNSt3__112__do_nothingEPv($0) {
 $0 = $0 | 0;
 return;
}
function ___lockfile($f) {
 $f = $f | 0;
 return 0; //@line 6316
}
function ___ctype_toupper_loc() {
 return 2568; //@line 2065
}
function ___ctype_tolower_loc() {
 return 2564; //@line 2060
}
function getTempRet0() {
 return tempRet0 | 0; //@line 55
}
function stackSave() {
 return STACKTOP | 0; //@line 10
}
function b4(p0) {
 p0 = p0 | 0;
 abort(4); //@line 1205
}
function ___ctype_b_loc() {
 return 2560; //@line 2055
}
function ___unlockfile($f) {
 $f = $f | 0;
 return;
}
function __GLOBAL__sub_I_iostream_cpp() {
 return;
}
function b10() {
 abort(10); //@line 1223
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiiiiiii = [b0,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b0];
var FUNCTION_TABLE_iiii = [b1,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,_sn_write,___stdio_write,___stdio_seek,___stdio_read,___stdout_write,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,__ZNSt3__111__stdoutbufIwE6xsputnEPKwi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,__ZNSt3__111__stdoutbufIcE6xsputnEPKci,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,__ZNKSt3__17collateIcE7do_hashEPKcS3_,__ZNKSt3__17collateIwE7do_hashEPKwS3_,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,__ZNKSt3__15ctypeIcE9do_narrowEcc,__ZNKSt3__15ctypeIwE5do_isEtw,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,__ZNKSt3__15ctypeIwE9do_narrowEwc,_do_read,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_viiiii = [b2,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib];
var FUNCTION_TABLE_iiiiiid = [b3,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b3];
var FUNCTION_TABLE_vi = [b4,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev,__ZNSt3__111__stdoutbufIwED0Ev,__ZNSt3__110__stdinbufIwED0Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__111__stdoutbufIcED0Ev,__ZNSt3__110__stdinbufIcED0Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev
,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__18ios_baseD2Ev,__ZNSt3__18ios_baseD0Ev,__ZNSt3__17collateIcED2Ev,__ZNSt3__17collateIcED0Ev,__ZNSt3__16locale5facet16__on_zero_sharedEv,__ZNSt3__17collateIwED2Ev,__ZNSt3__17collateIwED0Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__110moneypunctIcLb0EED2Ev,__ZNSt3__110moneypunctIcLb0EED0Ev,__ZNSt3__110moneypunctIcLb1EED2Ev
,__ZNSt3__110moneypunctIcLb1EED0Ev,__ZNSt3__110moneypunctIwLb0EED2Ev,__ZNSt3__110moneypunctIwLb0EED0Ev,__ZNSt3__110moneypunctIwLb1EED2Ev,__ZNSt3__110moneypunctIwLb1EED0Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18messagesIcED2Ev,__ZNSt3__18messagesIcED0Ev,__ZNSt3__18messagesIwED2Ev,__ZNSt3__18messagesIwED0Ev,__ZNSt3__16locale5__impD2Ev,__ZNSt3__16locale5__impD0Ev,__ZNSt3__15ctypeIcED2Ev,__ZNSt3__15ctypeIcED0Ev,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,__ZNSt3__18numpunctIcED2Ev,__ZNSt3__18numpunctIcED0Ev,__ZNSt3__18numpunctIwED2Ev,__ZNSt3__18numpunctIwED0Ev,__ZNSt3__16locale5facetD2Ev,__ZNSt3__16locale5facetD0Ev,__ZNSt3__15ctypeIwED0Ev
,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,_cleanup387,_cleanup392,__ZNSt3__18ios_base4InitD2Ev,__ZNSt3__112__do_nothingEPv,__ZNSt3__16locale2id6__initEv,__ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,___cxx_global_array_dtor,___cxx_global_array_dtor46,___cxx_global_array_dtor61,___cxx_global_array_dtor85,___cxx_global_array_dtor109,___cxx_global_array_dtor112,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev,_free,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_vii = [b5,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv
,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,__ZNKSt3__18messagesIcE8do_closeEi,__ZNKSt3__18messagesIwE8do_closeEi,__ZNKSt3__18numpunctIcE11do_groupingEv,__ZNKSt3__18numpunctIcE11do_truenameEv,__ZNKSt3__18numpunctIcE12do_falsenameEv,__ZNKSt3__18numpunctIwE11do_groupingEv,__ZNKSt3__18numpunctIwE11do_truenameEv,__ZNKSt3__18numpunctIwE12do_falsenameEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_iiiiiii = [b6,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm
,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_iiiiid = [b7,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b7,b7,b7];
var FUNCTION_TABLE_ii = [b8,__ZNKSt9bad_alloc4whatEv,___stdio_close,__ZNSt3__111__stdoutbufIwE4syncEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__110__stdinbufIwE9underflowEv,__ZNSt3__110__stdinbufIwE5uflowEv,__ZNSt3__111__stdoutbufIcE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__110__stdinbufIcE9underflowEv,__ZNSt3__110__stdinbufIcE5uflowEv,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIcE3__cEv,__ZNKSt3__120__time_get_c_storageIcE3__rEv,__ZNKSt3__120__time_get_c_storageIcE3__xEv,__ZNKSt3__120__time_get_c_storageIcE3__XEv,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv
,__ZNKSt3__120__time_get_c_storageIwE3__cEv,__ZNKSt3__120__time_get_c_storageIwE3__rEv,__ZNKSt3__120__time_get_c_storageIwE3__xEv,__ZNKSt3__120__time_get_c_storageIwE3__XEv,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv
,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,b8,b8,b8];
var FUNCTION_TABLE_viii = [b9];
var FUNCTION_TABLE_v = [b10,__ZL25default_terminate_handlerv,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b10];
var FUNCTION_TABLE_iiiiiiiii = [b11,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,b11,b11,b11,b11,b11];
var FUNCTION_TABLE_iiiii = [b12,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,b12,b12];
var FUNCTION_TABLE_viiiiii = [b13,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE];
var FUNCTION_TABLE_iii = [b14,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,__ZNSt3__111__stdoutbufIwE8overflowEj,__ZNSt3__110__stdinbufIwE9pbackfailEj,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__111__stdoutbufIcE8overflowEi,__ZNSt3__110__stdinbufIcE9pbackfailEi,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,__ZNKSt3__15ctypeIcE10do_toupperEc,__ZNKSt3__15ctypeIcE10do_tolowerEc,__ZNKSt3__15ctypeIcE8do_widenEc,__ZNKSt3__15ctypeIwE10do_toupperEw,__ZNKSt3__15ctypeIwE10do_tolowerEw,__ZNKSt3__15ctypeIwE8do_widenEc,b14];
var FUNCTION_TABLE_iiiiii = [b15,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15];
var FUNCTION_TABLE_viiii = [b16,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNKSt3__17collateIcE12do_transformEPKcS3_,__ZNKSt3__17collateIwE12do_transformEPKwS3_];

  return { ___cxa_can_catch: ___cxa_can_catch, _fflush: _fflush, _main: _main, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _i64Add: _i64Add, _memmove: _memmove, _i64Subtract: _i64Subtract, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _bitshift64Lshr: _bitshift64Lshr, _free: _free, ___errno_location: ___errno_location, _bitshift64Shl: _bitshift64Shl, __GLOBAL__I_000101: __GLOBAL__I_000101, __GLOBAL__sub_I_iostream_cpp: __GLOBAL__sub_I_iostream_cpp, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_iiii: dynCall_iiii, dynCall_viiiii: dynCall_viiiii, dynCall_iiiiiid: dynCall_iiiiiid, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_iiiiid: dynCall_iiiiid, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _main = Module["_main"] = asm["_main"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var __GLOBAL__sub_I_iostream_cpp = Module["__GLOBAL__sub_I_iostream_cpp"] = asm["__GLOBAL__sub_I_iostream_cpp"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _free = Module["_free"] = asm["_free"];
var __GLOBAL__I_000101 = Module["__GLOBAL__I_000101"] = asm["__GLOBAL__I_000101"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_iiiiiid = Module["dynCall_iiiiiid"] = asm["dynCall_iiiiiid"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_iiiiid = Module["dynCall_iiiiid"] = asm["dynCall_iiiiid"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, Runtime.GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      HEAPU8.set(data, Runtime.GLOBAL_BASE);
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Browser.asyncLoad(memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    var request = Module['memoryInitializerRequest'];
    if (request) {
      // a network request has already been created, just use that
      function useRequest() {
        if (request.status !== 200 && request.status !== 0) {
          // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
          // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
          // Look in your browser's devtools network console to see what's going on.
          console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
          doBrowserLoad();
          return;
        }
        applyMemoryInitializer(request.response);
      }
      if (request.response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        request.addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();


    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    return;
  }

  if (Module['noExitRuntime']) {
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}





// Appended to end of Emscripten output.
Module['FS'] = FS;
Module['PATH'] = PATH;
Module['ERRNO_CODES'] = ERRNO_CODES;
};


//# sourceMappingURL=bad_lookup.js.map